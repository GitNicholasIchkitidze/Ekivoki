unit Chilkat_v9_5_0_TLB;

// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 52393 $
// File generated on 6/13/2014 4:41:11 AM from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Users\MyNika\Desktop\ChilkatAx-9.5.0-win32\ChilkatAx-9.5.0-win32.dll (1)
// LIBID: {004CB902-F437-4D01-BD85-9E18836DA5C2}
// LCID: 0
// Helpfile: 
// HelpString: Chilkat ActiveX v9.5.0
// DepndLst: 
//   (1) v2.0 stdole, (C:\Windows\System32\stdole2.tlb)
// SYS_KIND: SYS_WIN32
// Errors:
//   Error creating palette bitmap of (TCkDateTime) : Error reading control bitmap
//   Error creating palette bitmap of (TCkStringArray) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatCsp) : Error reading control bitmap
//   Error creating palette bitmap of (TPublicKey) : Error reading control bitmap
//   Error creating palette bitmap of (TPrivateKey) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatCert) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatCertStore) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatCrypt2) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatXmlCertVault) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatPfx) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatCertChain) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatTrustedRoots) : Error reading control bitmap
//   Error creating palette bitmap of (TCkString) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatZipEntry) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatZip) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatXmp) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatXml) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatUpload) : Error reading control bitmap
//   Error creating palette bitmap of (TUnixCompress) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatTar) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatSshTunnel) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatSshKey) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatSsh) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatSpider) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatSocksProxy) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatSocket) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatSFtpFile) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatSFtpDir) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatSFtp) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatRss) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatRsa) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatOmaDrm) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatNtlm) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatMime) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatMht) : Error reading control bitmap
//   Error creating palette bitmap of (TMessageSet) : Error reading control bitmap
//   Error creating palette bitmap of (TMailboxes) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatMailMan) : Error reading control bitmap
//   Error creating palette bitmap of (TKeyContainer) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatImap) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatHttpResponse) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatHttpRequest) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatHttp) : Error reading control bitmap
//   Error creating palette bitmap of (THtmlToXml) : Error reading control bitmap
//   Error creating palette bitmap of (THtmlToText) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatGzip) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatFtp2) : Error reading control bitmap
//   Error creating palette bitmap of (TCkFileAccess) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatEmailBundle) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatEmail) : Error reading control bitmap
//   Error creating palette bitmap of (TDtObj) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatDsa) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatDkim) : Error reading control bitmap
//   Error creating palette bitmap of (TCkDirTree) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatDh) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatCsv) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatCreateCS) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatCompression) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatCharset) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatCgi) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatCache) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatBz2) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatBounce) : Error reading control bitmap
//   Error creating palette bitmap of (TChilkatAtom) : Error reading control bitmap
// ************************************************************************ //
{$TYPEDADDRESS OFF} // Unit must be compiled without type-checked pointers. 
{$WARN SYMBOL_PLATFORM OFF}
{$WRITEABLECONST ON}
{$VARPROPSETTER ON}
{$ALIGN 4}

interface

uses Winapi.Windows, System.Classes, System.Variants, System.Win.StdVCL, Vcl.Graphics, Vcl.OleCtrls, Vcl.OleServer, Winapi.ActiveX;
  


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLASS_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
const
  // TypeLibrary Major and minor versions
  Chilkat_v9_5_0MajorVersion = 1;
  Chilkat_v9_5_0MinorVersion = 0;

  LIBID_Chilkat_v9_5_0: TGUID = '{004CB902-F437-4D01-BD85-9E18836DA5C2}';

  DIID__IChilkatEvents: TGUID = '{91D24DB1-0F9E-4E77-B629-70BEE2F61D36}';
  DIID__IChilkatZipEvents: TGUID = '{F0C2D9C1-0B80-432D-A60C-0957A5A03AAE}';
  DIID__IChilkatTarEvents: TGUID = '{1BCCF756-2714-431F-A92A-30B7DFFF3A56}';
  DIID__IChilkatSFtpEvents: TGUID = '{97DAB705-84AB-4228-8EB7-2A3E657462F7}';
  DIID__IChilkatMailManEvents: TGUID = '{3AB70566-E8D9-474F-A244-5DA0260892C1}';
  DIID__IChilkatHttpEvents: TGUID = '{A02D931E-49CC-4D6F-85F5-2D74AB061990}';
  DIID__IChilkatFtp2Events: TGUID = '{D57DD27C-0065-41FA-ACB5-EBD8AB552A1E}';
  IID_ICkDateTime: TGUID = '{F063D06F-1395-4CB0-AB8A-3C86C80F077E}';
  CLASS_CkDateTime: TGUID = '{0B30402C-CDB2-45D2-B7BC-7C1F78C72C1C}';
  IID_ICkStringArray: TGUID = '{6DF65A40-F292-4D8D-8738-4814084CCD6B}';
  CLASS_CkStringArray: TGUID = '{60646F46-D0EA-4BDA-945A-57BD988F1C37}';
  IID_IChilkatCsp: TGUID = '{26377592-38BD-42DC-9C8B-CB38900F250B}';
  CLASS_ChilkatCsp: TGUID = '{6A10A7BB-7828-4050-9BD3-F4D2D97C6AB5}';
  IID_IPublicKey: TGUID = '{D1EC207F-F466-4114-A304-DF34751223A1}';
  CLASS_PublicKey: TGUID = '{3EDACCBC-87DE-45C5-8885-94B6820BE11A}';
  IID_IPrivateKey: TGUID = '{C791AB84-B72F-4DEF-82ED-156F4B027876}';
  CLASS_PrivateKey: TGUID = '{DFFB3371-78AA-45C5-B8A2-32BB1DD5C846}';
  IID_IChilkatCert: TGUID = '{2CABA7DB-F1DD-4E6D-943B-330CF27F6A5D}';
  CLASS_ChilkatCert: TGUID = '{B4EC2631-0DC1-4791-B691-BE333E574CC2}';
  IID_IChilkatXmlCertVault: TGUID = '{4C963716-FB14-4D7F-A176-1AC6E30BDEDA}';
  IID_IChilkatPfx: TGUID = '{1B708D67-5ED0-4A1E-8894-144C531FB095}';
  IID_IChilkatCertChain: TGUID = '{E05C10E0-F9E3-4E4E-8784-E4DA4285A085}';
  IID_IChilkatTrustedRoots: TGUID = '{8B32E2E7-6846-4B3F-B686-A2E62F6A85C4}';
  IID_IChilkatCertStore: TGUID = '{8CBE1840-52FA-4404-824C-139577309528}';
  CLASS_ChilkatCertStore: TGUID = '{00E685A8-7AE9-4DC5-8C78-54C03A8646FC}';
  IID_IChilkatCrypt2: TGUID = '{380B144D-5AF4-4DC3-BBDF-AD8E25F16188}';
  CLASS_ChilkatCrypt2: TGUID = '{1AF44DC7-C896-46BA-B45B-C168FA7612A6}';
  CLASS_ChilkatXmlCertVault: TGUID = '{DA61F111-C1C4-432F-819D-6EDA9DEFEA67}';
  CLASS_ChilkatPfx: TGUID = '{4A512F1D-8554-4EE4-A0C1-68AC4C2C517E}';
  CLASS_ChilkatCertChain: TGUID = '{30CE0223-B0E1-49CA-97A7-9FC0B49DDB13}';
  CLASS_ChilkatTrustedRoots: TGUID = '{64A034EA-ACEB-4D48-8A00-2E7662A41154}';
  IID_ICkString: TGUID = '{47F0E40C-D2E5-4E14-8133-750275823B82}';
  CLASS_CkString: TGUID = '{70A93698-84F4-4B7A-9D04-B354DBC6C3F9}';
  IID_IChilkatZipEntry: TGUID = '{C68497C9-2779-48A4-9062-6DAD6EA5E1C6}';
  CLASS_ChilkatZipEntry: TGUID = '{69E3A666-7F49-4B53-A77F-A8D14217E442}';
  IID_IChilkatZip: TGUID = '{EFE9ADE4-0851-49E2-BC0B-AB26E0353B1B}';
  CLASS_ChilkatZip: TGUID = '{C95EAE19-C7B8-4297-A6C6-B4B973A8B867}';
  IID_IChilkatXmp: TGUID = '{17F00BC0-F47D-4AC2-9C20-16D73BA9D42D}';
  CLASS_ChilkatXmp: TGUID = '{96B3C4B8-9F07-469D-ADAA-E1D14BF50341}';
  IID_IChilkatXml: TGUID = '{2077C1B5-FBD0-40DF-B7AA-E07CBA589CB0}';
  CLASS_ChilkatXml: TGUID = '{501B9600-382D-454D-AA0A-3BC22A87C485}';
  IID_IChilkatUpload: TGUID = '{D72E7F04-7817-4BA7-8FC2-6C890E94BC86}';
  CLASS_ChilkatUpload: TGUID = '{AC217674-DB08-4F7E-AB20-9F5F1026C464}';
  IID_IUnixCompress: TGUID = '{68CB048E-A120-4A99-B9DC-650775764421}';
  CLASS_UnixCompress: TGUID = '{F8295E9E-9E5B-486E-AA93-33E5726C4EE6}';
  IID_IChilkatTar: TGUID = '{6D9CB79B-EDFF-4B36-8A2B-E24A0D94838C}';
  CLASS_ChilkatTar: TGUID = '{E54CDB98-DD19-4155-841C-6DBA6618D5D8}';
  IID_IChilkatSshTunnel: TGUID = '{B777D3CD-07A8-4E22-9AB2-EC62B7160ABF}';
  CLASS_ChilkatSshTunnel: TGUID = '{D01DB5A3-B9B7-4837-9874-FBA5BA171976}';
  IID_IChilkatSshKey: TGUID = '{C574CD73-D2A4-43C4-8A00-3A8A8FC3FA79}';
  CLASS_ChilkatSshKey: TGUID = '{06B36116-235B-4AB9-987D-3B4C7E689247}';
  IID_IChilkatSsh: TGUID = '{792D2027-B40F-4894-9248-5E9A3FA09F36}';
  CLASS_ChilkatSsh: TGUID = '{D67AF44C-0AA8-424A-AF73-2070B4C11781}';
  IID_IChilkatSpider: TGUID = '{CB3E07ED-EBD4-4CEA-949F-53EDE8806F8F}';
  CLASS_ChilkatSpider: TGUID = '{58BD963E-12A4-427E-9500-3A4FCEB545B2}';
  IID_IChilkatSocksProxy: TGUID = '{AA6BF3BD-B645-4ECE-A8D5-DF6A8832D567}';
  CLASS_ChilkatSocksProxy: TGUID = '{7811A467-C6AE-4629-8F97-4C3B886826E4}';
  IID_IChilkatSocket: TGUID = '{93FCA31B-08C3-4E72-836B-B31123F7C2CC}';
  CLASS_ChilkatSocket: TGUID = '{C3FC6EA1-3982-45AA-8CB8-B3BFC9DFDDC7}';
  IID_IChilkatSFtpFile: TGUID = '{62E25622-219C-4569-97FA-89594674076A}';
  CLASS_ChilkatSFtpFile: TGUID = '{7D106007-79F8-4D80-9CB7-B6CC4000F0B1}';
  IID_IChilkatSFtpDir: TGUID = '{38C0D3A8-6FB8-42B1-BDC0-077177D72323}';
  CLASS_ChilkatSFtpDir: TGUID = '{E385A6A7-3557-47F5-9763-252278262C41}';
  IID_IChilkatSFtp: TGUID = '{2701FB1F-7865-4CD0-8E1B-2BB97F701946}';
  CLASS_ChilkatSFtp: TGUID = '{345A5644-4F8E-4BCC-8E65-389B3C9D52B6}';
  IID_IChilkatRss: TGUID = '{270A27B7-1D62-490D-82E4-A35269722E23}';
  CLASS_ChilkatRss: TGUID = '{CC55FCB9-0500-45C2-8FED-CCB7D1A54A24}';
  IID_IChilkatRsa: TGUID = '{C931B7DB-71FB-45CE-BA70-36BEF6CEAF1E}';
  CLASS_ChilkatRsa: TGUID = '{28309D42-1299-4797-AED4-64FD33B47923}';
  IID_IChilkatOmaDrm: TGUID = '{3F8F6E46-6782-4D77-9352-926BC73D8761}';
  CLASS_ChilkatOmaDrm: TGUID = '{8991C83A-A895-4E5E-9D7D-B787DE6396E2}';
  IID_IChilkatNtlm: TGUID = '{B7C0253A-251F-4BC7-98D1-31A045DCE65D}';
  CLASS_ChilkatNtlm: TGUID = '{47A6DFB7-4A42-434A-B794-59F6FB26563B}';
  IID_IChilkatMime: TGUID = '{45484EC9-E196-492F-8C1F-6D311F89036E}';
  CLASS_ChilkatMime: TGUID = '{13D60A54-46AE-4B1A-86F3-652A79EA88C6}';
  IID_IChilkatMht: TGUID = '{F1089DE8-926E-4BB9-ADAF-9E312F1BBD78}';
  CLASS_ChilkatMht: TGUID = '{188354F0-DC78-49C2-8390-5FCA2D6B3876}';
  IID_IMessageSet: TGUID = '{0F01CF8C-CE79-4812-8D55-3BD7CC34A318}';
  CLASS_MessageSet: TGUID = '{2B5DD740-5E3F-420C-9526-976596516B4C}';
  IID_IMailboxes: TGUID = '{2DB04566-D0BC-4FCF-926A-3E11B37E0B01}';
  CLASS_Mailboxes: TGUID = '{2F332CE0-6FCA-41B7-80BB-07D9D2AC86C7}';
  IID_IChilkatMailMan: TGUID = '{7998B064-06E7-4960-ACEF-AAFF0A262487}';
  CLASS_ChilkatMailMan: TGUID = '{10F9AFBB-94CF-4556-A066-DD457D3254CF}';
  IID_IChilkatEmailBundle: TGUID = '{A325D50D-6A7D-423F-9087-4242DC382181}';
  IID_IChilkatEmail: TGUID = '{3EC2BC0F-8ECB-4008-AEB7-758972455492}';
  IID_IKeyContainer: TGUID = '{C374E6D6-2B8E-4030-89EC-3DE7FC67257F}';
  CLASS_KeyContainer: TGUID = '{5B9D28CC-9FE1-4601-89E3-681DD583B290}';
  IID_IChilkatImap: TGUID = '{2E0EB5F9-CD80-407B-B5F3-60AE67679967}';
  CLASS_ChilkatImap: TGUID = '{CEDB6B70-ED7D-4F9E-A0BC-66AFB42F7735}';
  IID_IChilkatHttpResponse: TGUID = '{C143C715-0FED-4392-B207-1CA3CDF84C88}';
  CLASS_ChilkatHttpResponse: TGUID = '{65EA825E-648E-4BF0-8AA3-4E7724F75B07}';
  IID_IChilkatHttpRequest: TGUID = '{495F8CD2-9F03-4A83-A9BC-FEEAE2182D9B}';
  CLASS_ChilkatHttpRequest: TGUID = '{D66A2F08-A267-4593-ACD4-3EF65255E005}';
  IID_IChilkatHttp: TGUID = '{C754C4B4-6B0A-4664-ADDD-45467F0BCB7E}';
  CLASS_ChilkatHttp: TGUID = '{A74C26D2-2429-4099-8672-2250B15E327F}';
  IID_IHtmlToXml: TGUID = '{FE82184C-B69F-4B58-9DBC-463FB2F6A422}';
  CLASS_HtmlToXml: TGUID = '{907F3EC0-A455-4B36-8FDC-F3A2B22F1BD2}';
  IID_IHtmlToText: TGUID = '{7919C172-F7FD-40BB-9A28-ACC2EA4ED66F}';
  CLASS_HtmlToText: TGUID = '{540054E6-D577-4E92-B730-86E83ADD9172}';
  IID_IChilkatGzip: TGUID = '{409F23C5-B973-4611-93DD-8FE839BC5860}';
  CLASS_ChilkatGzip: TGUID = '{D647A429-3349-47B5-B62D-7EF758000363}';
  IID_IChilkatFtp2: TGUID = '{3A2BC588-F8E2-4BE3-A154-A3A99CF51E9F}';
  CLASS_ChilkatFtp2: TGUID = '{32BD32D3-66EA-4EE6-A684-20CE86F757C1}';
  IID_ICkFileAccess: TGUID = '{CDA20F7F-7E23-471E-82E6-7609EE84CD54}';
  CLASS_CkFileAccess: TGUID = '{A3F78ADD-62C2-475F-9040-80ACBFD412FA}';
  CLASS_ChilkatEmailBundle: TGUID = '{DE9FC63E-73D2-4952-BB8B-9C37A7ADE1E6}';
  CLASS_ChilkatEmail: TGUID = '{78EBC21F-0841-4D47-9DD4-E324F122205F}';
  IID_IDtObj: TGUID = '{1ACAAAB7-E818-41AE-AF3F-8F6911A91467}';
  CLASS_DtObj: TGUID = '{1D304D4B-3E7F-475C-800E-16177166E43A}';
  IID_IChilkatDsa: TGUID = '{D39623DD-417F-4651-8E8B-3BAE5A8F4D4D}';
  CLASS_ChilkatDsa: TGUID = '{628C899B-7559-4062-9E65-A47386343965}';
  IID_IChilkatDkim: TGUID = '{2D924A0F-A828-4482-A1DB-DD80E2FF35EF}';
  CLASS_ChilkatDkim: TGUID = '{B70D813F-5CE3-4C93-A793-B21CD8CE133A}';
  IID_ICkDirTree: TGUID = '{C8B4F6DF-1E35-43B9-913C-B235F91B6D4D}';
  CLASS_CkDirTree: TGUID = '{ABC37F7C-0423-42E4-BBD2-E713B8BD3BA1}';
  IID_IChilkatDh: TGUID = '{9EDDA6C9-A95E-4CE6-B4A3-6C4FE24B08C9}';
  CLASS_ChilkatDh: TGUID = '{F19E7679-F483-46D4-9E87-0253F0820A02}';
  IID_IChilkatCsv: TGUID = '{3B8C1209-EEFB-408B-8FA3-A59EE8034072}';
  CLASS_ChilkatCsv: TGUID = '{E9464A9F-B8D4-443D-88C3-DF3E9C6308AA}';
  IID_IChilkatCreateCS: TGUID = '{08114E7A-8556-40E9-8CE1-0BE2E7A041A8}';
  CLASS_ChilkatCreateCS: TGUID = '{E98C2D0C-6053-4568-9BCE-D6350C39CD93}';
  IID_IChilkatCompression: TGUID = '{73B5832B-AACE-4975-9238-09579CB89232}';
  CLASS_ChilkatCompression: TGUID = '{D6CEA276-E79C-4026-BD46-933E3C8F88D8}';
  IID_IChilkatCharset: TGUID = '{54E9A3A9-44F6-4E38-AA16-F27FB906EE7A}';
  CLASS_ChilkatCharset: TGUID = '{DF519DD3-CF6D-4BC1-A68C-9049FFF6713D}';
  IID_IChilkatCgi: TGUID = '{C71DB905-E991-4089-9FFB-BB692A8A8D1D}';
  CLASS_ChilkatCgi: TGUID = '{F21F7AF3-32B0-48D9-B99D-A08159D2B463}';
  IID_IChilkatCache: TGUID = '{064748FA-01E3-4ACD-8DAD-859556B263BD}';
  CLASS_ChilkatCache: TGUID = '{68993996-4448-4B92-99B7-3715CE60D316}';
  IID_IChilkatBz2: TGUID = '{E597F80D-BF1A-44AD-A038-D6AC9881B335}';
  CLASS_ChilkatBz2: TGUID = '{647EC4D1-B7EE-494D-9AE8-823C7FF683D9}';
  IID_IChilkatBounce: TGUID = '{32C35CC7-1CA6-4897-B21A-116D6DD42381}';
  CLASS_ChilkatBounce: TGUID = '{01AFB62C-BE3C-4706-B77E-CB20DEDA1D4D}';
  IID_IChilkatAtom: TGUID = '{784E1D7C-F1E5-472F-AA06-AA6F1563ED94}';
  CLASS_ChilkatAtom: TGUID = '{3D80DB49-232B-4139-8697-E0202E8B8B8E}';
type

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
  _IChilkatEvents = dispinterface;
  _IChilkatZipEvents = dispinterface;
  _IChilkatTarEvents = dispinterface;
  _IChilkatSFtpEvents = dispinterface;
  _IChilkatMailManEvents = dispinterface;
  _IChilkatHttpEvents = dispinterface;
  _IChilkatFtp2Events = dispinterface;
  ICkDateTime = interface;
  ICkDateTimeDisp = dispinterface;
  ICkStringArray = interface;
  ICkStringArrayDisp = dispinterface;
  IChilkatCsp = interface;
  IChilkatCspDisp = dispinterface;
  IPublicKey = interface;
  IPublicKeyDisp = dispinterface;
  IPrivateKey = interface;
  IPrivateKeyDisp = dispinterface;
  IChilkatCert = interface;
  IChilkatCertDisp = dispinterface;
  IChilkatXmlCertVault = interface;
  IChilkatXmlCertVaultDisp = dispinterface;
  IChilkatPfx = interface;
  IChilkatPfxDisp = dispinterface;
  IChilkatCertChain = interface;
  IChilkatCertChainDisp = dispinterface;
  IChilkatTrustedRoots = interface;
  IChilkatTrustedRootsDisp = dispinterface;
  IChilkatCertStore = interface;
  IChilkatCertStoreDisp = dispinterface;
  IChilkatCrypt2 = interface;
  IChilkatCrypt2Disp = dispinterface;
  ICkString = interface;
  ICkStringDisp = dispinterface;
  IChilkatZipEntry = interface;
  IChilkatZipEntryDisp = dispinterface;
  IChilkatZip = interface;
  IChilkatZipDisp = dispinterface;
  IChilkatXmp = interface;
  IChilkatXmpDisp = dispinterface;
  IChilkatXml = interface;
  IChilkatXmlDisp = dispinterface;
  IChilkatUpload = interface;
  IChilkatUploadDisp = dispinterface;
  IUnixCompress = interface;
  IUnixCompressDisp = dispinterface;
  IChilkatTar = interface;
  IChilkatTarDisp = dispinterface;
  IChilkatSshTunnel = interface;
  IChilkatSshTunnelDisp = dispinterface;
  IChilkatSshKey = interface;
  IChilkatSshKeyDisp = dispinterface;
  IChilkatSsh = interface;
  IChilkatSshDisp = dispinterface;
  IChilkatSpider = interface;
  IChilkatSpiderDisp = dispinterface;
  IChilkatSocksProxy = interface;
  IChilkatSocksProxyDisp = dispinterface;
  IChilkatSocket = interface;
  IChilkatSocketDisp = dispinterface;
  IChilkatSFtpFile = interface;
  IChilkatSFtpFileDisp = dispinterface;
  IChilkatSFtpDir = interface;
  IChilkatSFtpDirDisp = dispinterface;
  IChilkatSFtp = interface;
  IChilkatSFtpDisp = dispinterface;
  IChilkatRss = interface;
  IChilkatRssDisp = dispinterface;
  IChilkatRsa = interface;
  IChilkatRsaDisp = dispinterface;
  IChilkatOmaDrm = interface;
  IChilkatOmaDrmDisp = dispinterface;
  IChilkatNtlm = interface;
  IChilkatNtlmDisp = dispinterface;
  IChilkatMime = interface;
  IChilkatMimeDisp = dispinterface;
  IChilkatMht = interface;
  IChilkatMhtDisp = dispinterface;
  IMessageSet = interface;
  IMessageSetDisp = dispinterface;
  IMailboxes = interface;
  IMailboxesDisp = dispinterface;
  IChilkatMailMan = interface;
  IChilkatMailManDisp = dispinterface;
  IChilkatEmailBundle = interface;
  IChilkatEmailBundleDisp = dispinterface;
  IChilkatEmail = interface;
  IChilkatEmailDisp = dispinterface;
  IKeyContainer = interface;
  IKeyContainerDisp = dispinterface;
  IChilkatImap = interface;
  IChilkatImapDisp = dispinterface;
  IChilkatHttpResponse = interface;
  IChilkatHttpResponseDisp = dispinterface;
  IChilkatHttpRequest = interface;
  IChilkatHttpRequestDisp = dispinterface;
  IChilkatHttp = interface;
  IChilkatHttpDisp = dispinterface;
  IHtmlToXml = interface;
  IHtmlToXmlDisp = dispinterface;
  IHtmlToText = interface;
  IHtmlToTextDisp = dispinterface;
  IChilkatGzip = interface;
  IChilkatGzipDisp = dispinterface;
  IChilkatFtp2 = interface;
  IChilkatFtp2Disp = dispinterface;
  ICkFileAccess = interface;
  ICkFileAccessDisp = dispinterface;
  IDtObj = interface;
  IDtObjDisp = dispinterface;
  IChilkatDsa = interface;
  IChilkatDsaDisp = dispinterface;
  IChilkatDkim = interface;
  IChilkatDkimDisp = dispinterface;
  ICkDirTree = interface;
  ICkDirTreeDisp = dispinterface;
  IChilkatDh = interface;
  IChilkatDhDisp = dispinterface;
  IChilkatCsv = interface;
  IChilkatCsvDisp = dispinterface;
  IChilkatCreateCS = interface;
  IChilkatCreateCSDisp = dispinterface;
  IChilkatCompression = interface;
  IChilkatCompressionDisp = dispinterface;
  IChilkatCharset = interface;
  IChilkatCharsetDisp = dispinterface;
  IChilkatCgi = interface;
  IChilkatCgiDisp = dispinterface;
  IChilkatCache = interface;
  IChilkatCacheDisp = dispinterface;
  IChilkatBz2 = interface;
  IChilkatBz2Disp = dispinterface;
  IChilkatBounce = interface;
  IChilkatBounceDisp = dispinterface;
  IChilkatAtom = interface;
  IChilkatAtomDisp = dispinterface;

// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
// *********************************************************************//
  CkDateTime = ICkDateTime;
  CkStringArray = ICkStringArray;
  ChilkatCsp = IChilkatCsp;
  PublicKey = IPublicKey;
  PrivateKey = IPrivateKey;
  ChilkatCert = IChilkatCert;
  ChilkatCertStore = IChilkatCertStore;
  ChilkatCrypt2 = IChilkatCrypt2;
  ChilkatXmlCertVault = IChilkatXmlCertVault;
  ChilkatPfx = IChilkatPfx;
  ChilkatCertChain = IChilkatCertChain;
  ChilkatTrustedRoots = IChilkatTrustedRoots;
  CkString = ICkString;
  ChilkatZipEntry = IChilkatZipEntry;
  ChilkatZip = IChilkatZip;
  ChilkatXmp = IChilkatXmp;
  ChilkatXml = IChilkatXml;
  ChilkatUpload = IChilkatUpload;
  UnixCompress = IUnixCompress;
  ChilkatTar = IChilkatTar;
  ChilkatSshTunnel = IChilkatSshTunnel;
  ChilkatSshKey = IChilkatSshKey;
  ChilkatSsh = IChilkatSsh;
  ChilkatSpider = IChilkatSpider;
  ChilkatSocksProxy = IChilkatSocksProxy;
  ChilkatSocket = IChilkatSocket;
  ChilkatSFtpFile = IChilkatSFtpFile;
  ChilkatSFtpDir = IChilkatSFtpDir;
  ChilkatSFtp = IChilkatSFtp;
  ChilkatRss = IChilkatRss;
  ChilkatRsa = IChilkatRsa;
  ChilkatOmaDrm = IChilkatOmaDrm;
  ChilkatNtlm = IChilkatNtlm;
  ChilkatMime = IChilkatMime;
  ChilkatMht = IChilkatMht;
  MessageSet = IMessageSet;
  Mailboxes = IMailboxes;
  ChilkatMailMan = IChilkatMailMan;
  KeyContainer = IKeyContainer;
  ChilkatImap = IChilkatImap;
  ChilkatHttpResponse = IChilkatHttpResponse;
  ChilkatHttpRequest = IChilkatHttpRequest;
  ChilkatHttp = IChilkatHttp;
  HtmlToXml = IHtmlToXml;
  HtmlToText = IHtmlToText;
  ChilkatGzip = IChilkatGzip;
  ChilkatFtp2 = IChilkatFtp2;
  CkFileAccess = ICkFileAccess;
  ChilkatEmailBundle = IChilkatEmailBundle;
  ChilkatEmail = IChilkatEmail;
  DtObj = IDtObj;
  ChilkatDsa = IChilkatDsa;
  ChilkatDkim = IChilkatDkim;
  CkDirTree = ICkDirTree;
  ChilkatDh = IChilkatDh;
  ChilkatCsv = IChilkatCsv;
  ChilkatCreateCS = IChilkatCreateCS;
  ChilkatCompression = IChilkatCompression;
  ChilkatCharset = IChilkatCharset;
  ChilkatCgi = IChilkatCgi;
  ChilkatCache = IChilkatCache;
  ChilkatBz2 = IChilkatBz2;
  ChilkatBounce = IChilkatBounce;
  ChilkatAtom = IChilkatAtom;


// *********************************************************************//
// DispIntf:  _IChilkatEvents
// Flags:     (4096) Dispatchable
// GUID:      {91D24DB1-0F9E-4E77-B629-70BEE2F61D36}
// *********************************************************************//
  _IChilkatEvents = dispinterface
    ['{91D24DB1-0F9E-4E77-B629-70BEE2F61D36}']
    function AbortCheck(out abort: Integer): HResult; dispid 1;
    function PercentDone(percent: Integer; out abort: Integer): HResult; dispid 2;
    function ProgressInfo(const name: WideString; const value: WideString): HResult; dispid 3;
  end;

// *********************************************************************//
// DispIntf:  _IChilkatZipEvents
// Flags:     (4096) Dispatchable
// GUID:      {F0C2D9C1-0B80-432D-A60C-0957A5A03AAE}
// *********************************************************************//
  _IChilkatZipEvents = dispinterface
    ['{F0C2D9C1-0B80-432D-A60C-0957A5A03AAE}']
    function AbortCheck(out abort: Integer): HResult; dispid 1;
    function PercentDone(percent: Integer; out abort: Integer): HResult; dispid 2;
    function ProgressInfo(const name: WideString; const value: WideString): HResult; dispid 3;
    function FileUnzipped(const filename: WideString; compressedSize: Integer; 
                          uncompressedSize: Integer; out abort: Integer): HResult; dispid 4;
    function ToBeAdded(const filename: WideString; fileSize: Integer; out exclude: Integer): HResult; dispid 5;
    function FileAdded(const filename: WideString; fileSize: Integer; out abort: Integer): HResult; dispid 6;
    function UnzipBegin: HResult; dispid 7;
    function UnzipEnd: HResult; dispid 8;
    function WriteZipBegin: HResult; dispid 9;
    function WriteZipEnd: HResult; dispid 10;
    function ToBeZipped(const filename: WideString; fileSize: Integer; out exclude: Integer): HResult; dispid 11;
    function FileZipped(const filename: WideString; fileSize: Integer; compressedSize: Integer; 
                        out abort: Integer): HResult; dispid 12;
    function ToBeUnzipped(const filename: WideString; compressedSize: Integer; 
                          uncompressedSize: Integer; out exclude: Integer): HResult; dispid 13;
    function AddFilesBegin: HResult; dispid 14;
    function SkippedForUnzip(const filename: WideString; compressedSize: Integer; 
                             uncompressedSize: Integer): HResult; dispid 15;
    function AddFilesEnd: HResult; dispid 16;
    function DirToBeAdded(const filename: WideString; out exclude: Integer): HResult; dispid 17;
  end;

// *********************************************************************//
// DispIntf:  _IChilkatTarEvents
// Flags:     (4096) Dispatchable
// GUID:      {1BCCF756-2714-431F-A92A-30B7DFFF3A56}
// *********************************************************************//
  _IChilkatTarEvents = dispinterface
    ['{1BCCF756-2714-431F-A92A-30B7DFFF3A56}']
    function AbortCheck(out abort: Integer): HResult; dispid 1;
    function PercentDone(percent: Integer; out abort: Integer): HResult; dispid 2;
    function ProgressInfo(const name: WideString; const value: WideString): HResult; dispid 3;
    function NextTarFile(const path: WideString; fileSize: Int64; isDirectory: Integer; 
                         out skip: Integer): HResult; dispid 4;
  end;

// *********************************************************************//
// DispIntf:  _IChilkatSFtpEvents
// Flags:     (4096) Dispatchable
// GUID:      {97DAB705-84AB-4228-8EB7-2A3E657462F7}
// *********************************************************************//
  _IChilkatSFtpEvents = dispinterface
    ['{97DAB705-84AB-4228-8EB7-2A3E657462F7}']
    function AbortCheck(out abort: Integer): HResult; dispid 1;
    function PercentDone(percent: Integer; out abort: Integer): HResult; dispid 2;
    function ProgressInfo(const name: WideString; const value: WideString): HResult; dispid 3;
    function UploadRate(byteCount: Integer; bytesPerSec: Integer): HResult; dispid 4;
    function DownloadRate(byteCount: Integer; bytesPerSec: Integer): HResult; dispid 5;
  end;

// *********************************************************************//
// DispIntf:  _IChilkatMailManEvents
// Flags:     (4096) Dispatchable
// GUID:      {3AB70566-E8D9-474F-A244-5DA0260892C1}
// *********************************************************************//
  _IChilkatMailManEvents = dispinterface
    ['{3AB70566-E8D9-474F-A244-5DA0260892C1}']
    function AbortCheck(out abort: Integer): HResult; dispid 1;
    function PercentDone(percent: Integer; out abort: Integer): HResult; dispid 2;
    function ProgressInfo(const name: WideString; const value: WideString): HResult; dispid 3;
    function EmailReceived(const subject: WideString; const fromAddr: WideString; 
                           const fromName: WideString; const returnPath: WideString; 
                           const dateStr: WideString; const uidl: WideString; sizeInBytes: Integer): HResult; dispid 4;
  end;

// *********************************************************************//
// DispIntf:  _IChilkatHttpEvents
// Flags:     (4096) Dispatchable
// GUID:      {A02D931E-49CC-4D6F-85F5-2D74AB061990}
// *********************************************************************//
  _IChilkatHttpEvents = dispinterface
    ['{A02D931E-49CC-4D6F-85F5-2D74AB061990}']
    function AbortCheck(out abort: Integer): HResult; dispid 1;
    function PercentDone(percent: Integer; out abort: Integer): HResult; dispid 2;
    function ProgressInfo(const name: WideString; const value: WideString): HResult; dispid 3;
    function BeginReceive: HResult; dispid 4;
    function EndSend(success: Integer): HResult; dispid 5;
    function EndReceive(success: Integer): HResult; dispid 6;
    function HttpChunked: HResult; dispid 7;
    function HttpRedirect(const originalUrl: WideString; const newUrl: WideString; 
                          out abort: Integer): HResult; dispid 8;
    function BeginSend: HResult; dispid 9;
    function ReceiveRate(byteCount: Integer; bytesPerSec: Integer): HResult; dispid 10;
  end;

// *********************************************************************//
// DispIntf:  _IChilkatFtp2Events
// Flags:     (4096) Dispatchable
// GUID:      {D57DD27C-0065-41FA-ACB5-EBD8AB552A1E}
// *********************************************************************//
  _IChilkatFtp2Events = dispinterface
    ['{D57DD27C-0065-41FA-ACB5-EBD8AB552A1E}']
    function AbortCheck(out abort: Integer): HResult; dispid 1;
    function PercentDone(percent: Integer; out abort: Integer): HResult; dispid 2;
    function ProgressInfo(const name: WideString; const value: WideString): HResult; dispid 3;
    function BeginDownloadFile(const path: WideString; out skip: Integer): HResult; dispid 4;
    function EndDownloadFile(const path: WideString; numBytes: Integer): HResult; dispid 5;
    function VerifyDownloadDir(const path: WideString; out skip: Integer): HResult; dispid 6;
    function BeginUploadFile(const path: WideString; out skip: Integer): HResult; dispid 7;
    function EndUploadFile(const path: WideString; numBytes: Integer): HResult; dispid 8;
    function VerifyUploadDir(const path: WideString; out skip: Integer): HResult; dispid 9;
    function VerifyDeleteDir(const path: WideString; out skip: Integer): HResult; dispid 10;
    function VerifyDeleteFile(const path: WideString; out skip: Integer): HResult; dispid 11;
    function UploadRate(byteCount: Integer; bytesPerSec: Integer): HResult; dispid 12;
    function DownloadRate(byteCount: Integer; bytesPerSec: Integer): HResult; dispid 13;
  end;

// *********************************************************************//
// Interface: ICkDateTime
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F063D06F-1395-4CB0-AB8A-3C86C80F077E}
// *********************************************************************//
  ICkDateTime = interface(IDispatch)
    ['{F063D06F-1395-4CB0-AB8A-3C86C80F077E}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_UtcOffset: Integer; safecall;
    function Get_IsDst: Integer; safecall;
    function AddDays(numDays: Integer): Integer; safecall;
    procedure DeSerialize(const serializedDateTime: WideString); safecall;
    function GetAsDosDate(bLocal: Integer): Integer; safecall;
    function GetAsOleDate(bLocal: Integer): Double; safecall;
    function GetAsRfc822(bLocal: Integer): WideString; safecall;
    function GetAsUnixTime(bLocal: Integer): Integer; safecall;
    function Serialize: WideString; safecall;
    procedure SetFromCurrentSystemTime; safecall;
    procedure SetFromDosDate(bLocal: Integer; t: Integer); safecall;
    procedure SetFromOleDate(bLocal: Integer; dt: Double); safecall;
    function SetFromRfc822(const rfc822Str: WideString): Integer; safecall;
    procedure SetFromUnixTime(bLocal: Integer; t: Integer); safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property UtcOffset: Integer read Get_UtcOffset;
    property IsDst: Integer read Get_IsDst;
  end;

// *********************************************************************//
// DispIntf:  ICkDateTimeDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F063D06F-1395-4CB0-AB8A-3C86C80F077E}
// *********************************************************************//
  ICkDateTimeDisp = dispinterface
    ['{F063D06F-1395-4CB0-AB8A-3C86C80F077E}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property UtcOffset: Integer readonly dispid 100;
    property IsDst: Integer readonly dispid 101;
    function AddDays(numDays: Integer): Integer; dispid 102;
    procedure DeSerialize(const serializedDateTime: WideString); dispid 103;
    function GetAsDosDate(bLocal: Integer): Integer; dispid 104;
    function GetAsOleDate(bLocal: Integer): Double; dispid 105;
    function GetAsRfc822(bLocal: Integer): WideString; dispid 106;
    function GetAsUnixTime(bLocal: Integer): Integer; dispid 107;
    function Serialize: WideString; dispid 108;
    procedure SetFromCurrentSystemTime; dispid 109;
    procedure SetFromDosDate(bLocal: Integer; t: Integer); dispid 110;
    procedure SetFromOleDate(bLocal: Integer; dt: Double); dispid 111;
    function SetFromRfc822(const rfc822Str: WideString): Integer; dispid 112;
    procedure SetFromUnixTime(bLocal: Integer; t: Integer); dispid 113;
  end;

// *********************************************************************//
// Interface: ICkStringArray
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6DF65A40-F292-4D8D-8738-4814084CCD6B}
// *********************************************************************//
  ICkStringArray = interface(IDispatch)
    ['{6DF65A40-F292-4D8D-8738-4814084CCD6B}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_Crlf: Integer; safecall;
    procedure Set_Crlf(pVal: Integer); safecall;
    function Get_Trim: Integer; safecall;
    procedure Set_Trim(pVal: Integer); safecall;
    function Get_Unique: Integer; safecall;
    procedure Set_Unique(pVal: Integer); safecall;
    function Get_Length: Integer; safecall;
    function Get_Count: Integer; safecall;
    function Append(const str: WideString): Integer; safecall;
    function AppendSerialized(const encodedStr: WideString): Integer; safecall;
    procedure Clear; safecall;
    function Contains(const str: WideString): Integer; safecall;
    function Find(const str: WideString; firstIndex: Integer): Integer; safecall;
    function FindFirstMatch(const str: WideString; firstIndex: Integer): Integer; safecall;
    function GetString(index: Integer): WideString; safecall;
    procedure InsertAt(index: Integer; const str: WideString); safecall;
    function LastString: WideString; safecall;
    function LoadFromFile(const filename: WideString): Integer; safecall;
    function LoadFromFile2(const filename: WideString; const charset: WideString): Integer; safecall;
    procedure LoadFromText(const str: WideString); safecall;
    function Pop: WideString; safecall;
    procedure Prepend(const str: WideString); safecall;
    procedure Remove(const str: WideString); safecall;
    function RemoveAt(index: Integer): Integer; safecall;
    function SaveNthToFile(index: Integer; const filename: WideString): Integer; safecall;
    function SaveToFile(const filename: WideString): Integer; safecall;
    function SaveToFile2(const filename: WideString; const charset: WideString): Integer; safecall;
    function SaveToText: WideString; safecall;
    function Serialize: WideString; safecall;
    procedure Sort(ascending: Integer); safecall;
    procedure SplitAndAppend(const str: WideString; const boundary: WideString); safecall;
    procedure Subtract(const sa: ICkStringArray); safecall;
    procedure Union(const sa: ICkStringArray); safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property Crlf: Integer read Get_Crlf write Set_Crlf;
    property Trim: Integer read Get_Trim write Set_Trim;
    property Unique: Integer read Get_Unique write Set_Unique;
    property Length: Integer read Get_Length;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  ICkStringArrayDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6DF65A40-F292-4D8D-8738-4814084CCD6B}
// *********************************************************************//
  ICkStringArrayDisp = dispinterface
    ['{6DF65A40-F292-4D8D-8738-4814084CCD6B}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property Crlf: Integer dispid 100;
    property Trim: Integer dispid 101;
    property Unique: Integer dispid 102;
    property Length: Integer readonly dispid 130;
    property Count: Integer readonly dispid 103;
    function Append(const str: WideString): Integer; dispid 104;
    function AppendSerialized(const encodedStr: WideString): Integer; dispid 105;
    procedure Clear; dispid 106;
    function Contains(const str: WideString): Integer; dispid 107;
    function Find(const str: WideString; firstIndex: Integer): Integer; dispid 108;
    function FindFirstMatch(const str: WideString; firstIndex: Integer): Integer; dispid 109;
    function GetString(index: Integer): WideString; dispid 110;
    procedure InsertAt(index: Integer; const str: WideString); dispid 111;
    function LastString: WideString; dispid 112;
    function LoadFromFile(const filename: WideString): Integer; dispid 113;
    function LoadFromFile2(const filename: WideString; const charset: WideString): Integer; dispid 114;
    procedure LoadFromText(const str: WideString); dispid 115;
    function Pop: WideString; dispid 116;
    procedure Prepend(const str: WideString); dispid 117;
    procedure Remove(const str: WideString); dispid 118;
    function RemoveAt(index: Integer): Integer; dispid 119;
    function SaveNthToFile(index: Integer; const filename: WideString): Integer; dispid 120;
    function SaveToFile(const filename: WideString): Integer; dispid 121;
    function SaveToFile2(const filename: WideString; const charset: WideString): Integer; dispid 122;
    function SaveToText: WideString; dispid 123;
    function Serialize: WideString; dispid 124;
    procedure Sort(ascending: Integer); dispid 125;
    procedure SplitAndAppend(const str: WideString; const boundary: WideString); dispid 126;
    procedure Subtract(const sa: ICkStringArray); dispid 127;
    procedure Union(const sa: ICkStringArray); dispid 128;
  end;

// *********************************************************************//
// Interface: IChilkatCsp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {26377592-38BD-42DC-9C8B-CB38900F250B}
// *********************************************************************//
  IChilkatCsp = interface(IDispatch)
    ['{26377592-38BD-42DC-9C8B-CB38900F250B}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_EncryptAlgorithm: WideString; safecall;
    function Get_EncryptAlgorithmID: Integer; safecall;
    function Get_EncryptNumBits: Integer; safecall;
    function Get_HashAlgorithm: WideString; safecall;
    function Get_HashAlgorithmID: Integer; safecall;
    function Get_HashNumBits: Integer; safecall;
    function Get_KeyContainerName: WideString; safecall;
    procedure Set_KeyContainerName(const pVal: WideString); safecall;
    function Get_MachineKeyset: Integer; safecall;
    procedure Set_MachineKeyset(pVal: Integer); safecall;
    function Get_NumEncryptAlgorithms: Integer; safecall;
    function Get_NumHashAlgorithms: Integer; safecall;
    function Get_NumKeyContainers: Integer; safecall;
    function Get_NumKeyExchangeAlgorithms: Integer; safecall;
    function Get_NumSignatureAlgorithms: Integer; safecall;
    function Get_ProviderName: WideString; safecall;
    procedure Set_ProviderName(const pVal: WideString); safecall;
    function Get_ProviderType: Integer; safecall;
    function GetKeyContainerNames: ICkStringArray; safecall;
    function HasEncryptAlgorithm(const name: WideString; numBits: Integer): Integer; safecall;
    function HasHashAlgorithm(const name: WideString; numBits: Integer): Integer; safecall;
    function Initialize: Integer; safecall;
    function NthEncryptionAlgorithm(index: Integer): WideString; safecall;
    function NthEncryptionNumBits(index: Integer): Integer; safecall;
    function NthHashAlgorithmName(index: Integer): WideString; safecall;
    function NthHashNumBits(index: Integer): Integer; safecall;
    function NthKeyContainerName(index: Integer): WideString; safecall;
    function NthKeyExchangeAlgorithm(index: Integer): WideString; safecall;
    function NthKeyExchangeNumBits(index: Integer): Integer; safecall;
    function NthSignatureAlgorithm(index: Integer): WideString; safecall;
    function NthSignatureNumBits(index: Integer): Integer; safecall;
    function SetEncryptAlgorithm(const name: WideString): Integer; safecall;
    function SetHashAlgorithm(const name: WideString): Integer; safecall;
    function SetProviderMicrosoftBase: Integer; safecall;
    function SetProviderMicrosoftEnhanced: Integer; safecall;
    function SetProviderMicrosoftRsaAes: Integer; safecall;
    function SetProviderMicrosoftStrong: Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property EncryptAlgorithm: WideString read Get_EncryptAlgorithm;
    property EncryptAlgorithmID: Integer read Get_EncryptAlgorithmID;
    property EncryptNumBits: Integer read Get_EncryptNumBits;
    property HashAlgorithm: WideString read Get_HashAlgorithm;
    property HashAlgorithmID: Integer read Get_HashAlgorithmID;
    property HashNumBits: Integer read Get_HashNumBits;
    property KeyContainerName: WideString read Get_KeyContainerName write Set_KeyContainerName;
    property MachineKeyset: Integer read Get_MachineKeyset write Set_MachineKeyset;
    property NumEncryptAlgorithms: Integer read Get_NumEncryptAlgorithms;
    property NumHashAlgorithms: Integer read Get_NumHashAlgorithms;
    property NumKeyContainers: Integer read Get_NumKeyContainers;
    property NumKeyExchangeAlgorithms: Integer read Get_NumKeyExchangeAlgorithms;
    property NumSignatureAlgorithms: Integer read Get_NumSignatureAlgorithms;
    property ProviderName: WideString read Get_ProviderName write Set_ProviderName;
    property ProviderType: Integer read Get_ProviderType;
  end;

// *********************************************************************//
// DispIntf:  IChilkatCspDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {26377592-38BD-42DC-9C8B-CB38900F250B}
// *********************************************************************//
  IChilkatCspDisp = dispinterface
    ['{26377592-38BD-42DC-9C8B-CB38900F250B}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property EncryptAlgorithm: WideString readonly dispid 100;
    property EncryptAlgorithmID: Integer readonly dispid 101;
    property EncryptNumBits: Integer readonly dispid 102;
    property HashAlgorithm: WideString readonly dispid 103;
    property HashAlgorithmID: Integer readonly dispid 104;
    property HashNumBits: Integer readonly dispid 105;
    property KeyContainerName: WideString dispid 106;
    property MachineKeyset: Integer dispid 107;
    property NumEncryptAlgorithms: Integer readonly dispid 108;
    property NumHashAlgorithms: Integer readonly dispid 109;
    property NumKeyContainers: Integer readonly dispid 110;
    property NumKeyExchangeAlgorithms: Integer readonly dispid 111;
    property NumSignatureAlgorithms: Integer readonly dispid 112;
    property ProviderName: WideString dispid 113;
    property ProviderType: Integer readonly dispid 114;
    function GetKeyContainerNames: ICkStringArray; dispid 115;
    function HasEncryptAlgorithm(const name: WideString; numBits: Integer): Integer; dispid 116;
    function HasHashAlgorithm(const name: WideString; numBits: Integer): Integer; dispid 117;
    function Initialize: Integer; dispid 118;
    function NthEncryptionAlgorithm(index: Integer): WideString; dispid 119;
    function NthEncryptionNumBits(index: Integer): Integer; dispid 120;
    function NthHashAlgorithmName(index: Integer): WideString; dispid 121;
    function NthHashNumBits(index: Integer): Integer; dispid 122;
    function NthKeyContainerName(index: Integer): WideString; dispid 123;
    function NthKeyExchangeAlgorithm(index: Integer): WideString; dispid 124;
    function NthKeyExchangeNumBits(index: Integer): Integer; dispid 125;
    function NthSignatureAlgorithm(index: Integer): WideString; dispid 126;
    function NthSignatureNumBits(index: Integer): Integer; dispid 127;
    function SetEncryptAlgorithm(const name: WideString): Integer; dispid 128;
    function SetHashAlgorithm(const name: WideString): Integer; dispid 129;
    function SetProviderMicrosoftBase: Integer; dispid 130;
    function SetProviderMicrosoftEnhanced: Integer; dispid 131;
    function SetProviderMicrosoftRsaAes: Integer; dispid 132;
    function SetProviderMicrosoftStrong: Integer; dispid 133;
  end;

// *********************************************************************//
// Interface: IPublicKey
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D1EC207F-F466-4114-A304-DF34751223A1}
// *********************************************************************//
  IPublicKey = interface(IDispatch)
    ['{D1EC207F-F466-4114-A304-DF34751223A1}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function GetOpenSslDer: OleVariant; safecall;
    function GetOpenSslPem: WideString; safecall;
    function GetRsaDer: OleVariant; safecall;
    function GetXml: WideString; safecall;
    function LoadOpenSslDer(data: OleVariant): Integer; safecall;
    function LoadOpenSslDerFile(const path: WideString): Integer; safecall;
    function LoadOpenSslPem(const str: WideString): Integer; safecall;
    function LoadOpenSslPemFile(const path: WideString): Integer; safecall;
    function LoadPkcs1Pem(const str: WideString): Integer; safecall;
    function LoadRsaDer(data: OleVariant): Integer; safecall;
    function LoadRsaDerFile(const path: WideString): Integer; safecall;
    function LoadXml(const xml: WideString): Integer; safecall;
    function LoadXmlFile(const path: WideString): Integer; safecall;
    function SaveOpenSslDerFile(const path: WideString): Integer; safecall;
    function SaveOpenSslPemFile(const path: WideString): Integer; safecall;
    function SaveRsaDerFile(const path: WideString): Integer; safecall;
    function SaveXmlFile(const path: WideString): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
  end;

// *********************************************************************//
// DispIntf:  IPublicKeyDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D1EC207F-F466-4114-A304-DF34751223A1}
// *********************************************************************//
  IPublicKeyDisp = dispinterface
    ['{D1EC207F-F466-4114-A304-DF34751223A1}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    function GetOpenSslDer: OleVariant; dispid 100;
    function GetOpenSslPem: WideString; dispid 101;
    function GetRsaDer: OleVariant; dispid 102;
    function GetXml: WideString; dispid 103;
    function LoadOpenSslDer(data: OleVariant): Integer; dispid 104;
    function LoadOpenSslDerFile(const path: WideString): Integer; dispid 105;
    function LoadOpenSslPem(const str: WideString): Integer; dispid 106;
    function LoadOpenSslPemFile(const path: WideString): Integer; dispid 107;
    function LoadPkcs1Pem(const str: WideString): Integer; dispid 108;
    function LoadRsaDer(data: OleVariant): Integer; dispid 109;
    function LoadRsaDerFile(const path: WideString): Integer; dispid 110;
    function LoadXml(const xml: WideString): Integer; dispid 111;
    function LoadXmlFile(const path: WideString): Integer; dispid 112;
    function SaveOpenSslDerFile(const path: WideString): Integer; dispid 113;
    function SaveOpenSslPemFile(const path: WideString): Integer; dispid 114;
    function SaveRsaDerFile(const path: WideString): Integer; dispid 115;
    function SaveXmlFile(const path: WideString): Integer; dispid 116;
  end;

// *********************************************************************//
// Interface: IPrivateKey
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C791AB84-B72F-4DEF-82ED-156F4B027876}
// *********************************************************************//
  IPrivateKey = interface(IDispatch)
    ['{C791AB84-B72F-4DEF-82ED-156F4B027876}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function GetPkcs8: OleVariant; safecall;
    function GetPkcs8Encrypted(const password: WideString): OleVariant; safecall;
    function GetPkcs8EncryptedPem(const password: WideString): WideString; safecall;
    function GetPkcs8Pem: WideString; safecall;
    function GetRsaDer: OleVariant; safecall;
    function GetRsaPem: WideString; safecall;
    function GetXml: WideString; safecall;
    function LoadEncryptedPem(const pemStr: WideString; const password: WideString): Integer; safecall;
    function LoadEncryptedPemFile(const path: WideString; const password: WideString): Integer; safecall;
    function LoadPem(const str: WideString): Integer; safecall;
    function LoadPemFile(const path: WideString): Integer; safecall;
    function LoadPkcs8(data: OleVariant): Integer; safecall;
    function LoadPkcs8Encrypted(data: OleVariant; const password: WideString): Integer; safecall;
    function LoadPkcs8EncryptedFile(const path: WideString; const password: WideString): Integer; safecall;
    function LoadPkcs8File(const path: WideString): Integer; safecall;
    function LoadPvk(data: OleVariant; const password: WideString): Integer; safecall;
    function LoadPvkFile(const path: WideString; const password: WideString): Integer; safecall;
    function LoadRsaDer(data: OleVariant): Integer; safecall;
    function LoadRsaDerFile(const path: WideString): Integer; safecall;
    function LoadXml(const xml: WideString): Integer; safecall;
    function LoadXmlFile(const path: WideString): Integer; safecall;
    function SavePkcs8EncryptedFile(const password: WideString; const path: WideString): Integer; safecall;
    function SavePkcs8EncryptedPemFile(const password: WideString; const path: WideString): Integer; safecall;
    function SavePkcs8File(const path: WideString): Integer; safecall;
    function SavePkcs8PemFile(const path: WideString): Integer; safecall;
    function SaveRsaDerFile(const path: WideString): Integer; safecall;
    function SaveRsaPemFile(const path: WideString): Integer; safecall;
    function SaveXmlFile(const path: WideString): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
  end;

// *********************************************************************//
// DispIntf:  IPrivateKeyDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C791AB84-B72F-4DEF-82ED-156F4B027876}
// *********************************************************************//
  IPrivateKeyDisp = dispinterface
    ['{C791AB84-B72F-4DEF-82ED-156F4B027876}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    function GetPkcs8: OleVariant; dispid 100;
    function GetPkcs8Encrypted(const password: WideString): OleVariant; dispid 101;
    function GetPkcs8EncryptedPem(const password: WideString): WideString; dispid 102;
    function GetPkcs8Pem: WideString; dispid 103;
    function GetRsaDer: OleVariant; dispid 104;
    function GetRsaPem: WideString; dispid 105;
    function GetXml: WideString; dispid 106;
    function LoadEncryptedPem(const pemStr: WideString; const password: WideString): Integer; dispid 107;
    function LoadEncryptedPemFile(const path: WideString; const password: WideString): Integer; dispid 108;
    function LoadPem(const str: WideString): Integer; dispid 109;
    function LoadPemFile(const path: WideString): Integer; dispid 110;
    function LoadPkcs8(data: OleVariant): Integer; dispid 111;
    function LoadPkcs8Encrypted(data: OleVariant; const password: WideString): Integer; dispid 112;
    function LoadPkcs8EncryptedFile(const path: WideString; const password: WideString): Integer; dispid 113;
    function LoadPkcs8File(const path: WideString): Integer; dispid 114;
    function LoadPvk(data: OleVariant; const password: WideString): Integer; dispid 115;
    function LoadPvkFile(const path: WideString; const password: WideString): Integer; dispid 116;
    function LoadRsaDer(data: OleVariant): Integer; dispid 117;
    function LoadRsaDerFile(const path: WideString): Integer; dispid 118;
    function LoadXml(const xml: WideString): Integer; dispid 119;
    function LoadXmlFile(const path: WideString): Integer; dispid 120;
    function SavePkcs8EncryptedFile(const password: WideString; const path: WideString): Integer; dispid 121;
    function SavePkcs8EncryptedPemFile(const password: WideString; const path: WideString): Integer; dispid 122;
    function SavePkcs8File(const path: WideString): Integer; dispid 123;
    function SavePkcs8PemFile(const path: WideString): Integer; dispid 124;
    function SaveRsaDerFile(const path: WideString): Integer; dispid 125;
    function SaveRsaPemFile(const path: WideString): Integer; dispid 126;
    function SaveXmlFile(const path: WideString): Integer; dispid 127;
  end;

// *********************************************************************//
// Interface: IChilkatCert
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2CABA7DB-F1DD-4E6D-943B-330CF27F6A5D}
// *********************************************************************//
  IChilkatCert = interface(IDispatch)
    ['{2CABA7DB-F1DD-4E6D-943B-330CF27F6A5D}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_AvoidWindowsPkAccess: Integer; safecall;
    procedure Set_AvoidWindowsPkAccess(pVal: Integer); safecall;
    function Get_CertVersion: Integer; safecall;
    function Get_CspName: WideString; safecall;
    function Get_Expired: Integer; safecall;
    function Get_ForClientAuthentication: Integer; safecall;
    function Get_ForCodeSigning: Integer; safecall;
    function Get_ForSecureEmail: Integer; safecall;
    function Get_ForServerAuthentication: Integer; safecall;
    function Get_ForTimeStamping: Integer; safecall;
    function Get_HasKeyContainer: Integer; safecall;
    function Get_IntendedKeyUsage: Integer; safecall;
    function Get_IsRoot: Integer; safecall;
    function Get_IssuerC: WideString; safecall;
    function Get_IssuerCN: WideString; safecall;
    function Get_IssuerDN: WideString; safecall;
    function Get_IssuerE: WideString; safecall;
    function Get_IssuerL: WideString; safecall;
    function Get_IssuerO: WideString; safecall;
    function Get_IssuerOU: WideString; safecall;
    function Get_IssuerS: WideString; safecall;
    function Get_KeyContainerName: WideString; safecall;
    function Get_MachineKeyset: Integer; safecall;
    function Get_OcspUrl: WideString; safecall;
    function Get_PrivateKeyExportable: Integer; safecall;
    function Get_Revoked: Integer; safecall;
    function Get_Rfc822Name: WideString; safecall;
    function Get_SelfSigned: Integer; safecall;
    function Get_SerialNumber: WideString; safecall;
    function Get_Sha1Thumbprint: WideString; safecall;
    function Get_SignatureVerified: Integer; safecall;
    function Get_Silent: Integer; safecall;
    function Get_SubjectC: WideString; safecall;
    function Get_SubjectCN: WideString; safecall;
    function Get_SubjectDN: WideString; safecall;
    function Get_SubjectE: WideString; safecall;
    function Get_SubjectL: WideString; safecall;
    function Get_SubjectO: WideString; safecall;
    function Get_SubjectOU: WideString; safecall;
    function Get_SubjectS: WideString; safecall;
    function Get_TrustedRoot: Integer; safecall;
    function Get_ValidFrom: TDateTime; safecall;
    function Get_ValidFromStr: WideString; safecall;
    function Get_ValidTo: TDateTime; safecall;
    function Get_ValidToStr: WideString; safecall;
    function Get_SubjectKeyId: WideString; safecall;
    function Get_AuthorityKeyId: WideString; safecall;
    function CheckRevoked: Integer; safecall;
    function ExportCertDer: OleVariant; safecall;
    function ExportCertDerFile(const path: WideString): Integer; safecall;
    function ExportCertPem: WideString; safecall;
    function ExportCertPemFile(const path: WideString): Integer; safecall;
    function ExportCertXml: WideString; safecall;
    function ExportPrivateKey: IPrivateKey; safecall;
    function ExportPublicKey: IPublicKey; safecall;
    function ExportToPfxFile(const pfxFilename: WideString; const password: WideString; 
                             bIncludeChain: Integer): Integer; safecall;
    function FindIssuer: IChilkatCert; safecall;
    function GetEncoded: WideString; safecall;
    function GetPrivateKeyPem: WideString; safecall;
    function GetValidFromDt: ICkDateTime; safecall;
    function GetValidToDt: ICkDateTime; safecall;
    function HasPrivateKey: Integer; safecall;
    function LinkPrivateKey(const KeyContainerName: WideString; bMachineKeyset: Integer; 
                            bForSigning: Integer): Integer; safecall;
    function LoadByCommonName(const cn: WideString): Integer; safecall;
    function LoadByEmailAddress(const emailAddress: WideString): Integer; safecall;
    function LoadByIssuerAndSerialNumber(const IssuerCN: WideString; const serialNum: WideString): Integer; safecall;
    function LoadFromBase64(const encodedCert: WideString): Integer; safecall;
    function LoadFromBinary(data: OleVariant): Integer; safecall;
    function LoadFromFile(const path: WideString): Integer; safecall;
    function LoadPfxData(pfxData: OleVariant; const password: WideString): Integer; safecall;
    function LoadPfxFile(const pfxPath: WideString; const password: WideString): Integer; safecall;
    function PemFileToDerFile(const fromPath: WideString; const toPath: WideString): Integer; safecall;
    function SaveToFile(const path: WideString): Integer; safecall;
    function SetFromEncoded(const encodedCert: WideString): Integer; safecall;
    function SetPrivateKey(const privKey: IPrivateKey): Integer; safecall;
    function SetPrivateKeyPem(const privKeyPem: WideString): Integer; safecall;
    function ExportToPfxData(const password: WideString; includeCertChain: Integer): OleVariant; safecall;
    function UseCertVault(const vault: IChilkatXmlCertVault): Integer; safecall;
    function GetCertChain: IChilkatCertChain; safecall;
    function VerifySignature: Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property AvoidWindowsPkAccess: Integer read Get_AvoidWindowsPkAccess write Set_AvoidWindowsPkAccess;
    property CertVersion: Integer read Get_CertVersion;
    property CspName: WideString read Get_CspName;
    property Expired: Integer read Get_Expired;
    property ForClientAuthentication: Integer read Get_ForClientAuthentication;
    property ForCodeSigning: Integer read Get_ForCodeSigning;
    property ForSecureEmail: Integer read Get_ForSecureEmail;
    property ForServerAuthentication: Integer read Get_ForServerAuthentication;
    property ForTimeStamping: Integer read Get_ForTimeStamping;
    property HasKeyContainer: Integer read Get_HasKeyContainer;
    property IntendedKeyUsage: Integer read Get_IntendedKeyUsage;
    property IsRoot: Integer read Get_IsRoot;
    property IssuerC: WideString read Get_IssuerC;
    property IssuerCN: WideString read Get_IssuerCN;
    property IssuerDN: WideString read Get_IssuerDN;
    property IssuerE: WideString read Get_IssuerE;
    property IssuerL: WideString read Get_IssuerL;
    property IssuerO: WideString read Get_IssuerO;
    property IssuerOU: WideString read Get_IssuerOU;
    property IssuerS: WideString read Get_IssuerS;
    property KeyContainerName: WideString read Get_KeyContainerName;
    property MachineKeyset: Integer read Get_MachineKeyset;
    property OcspUrl: WideString read Get_OcspUrl;
    property PrivateKeyExportable: Integer read Get_PrivateKeyExportable;
    property Revoked: Integer read Get_Revoked;
    property Rfc822Name: WideString read Get_Rfc822Name;
    property SelfSigned: Integer read Get_SelfSigned;
    property SerialNumber: WideString read Get_SerialNumber;
    property Sha1Thumbprint: WideString read Get_Sha1Thumbprint;
    property SignatureVerified: Integer read Get_SignatureVerified;
    property Silent: Integer read Get_Silent;
    property SubjectC: WideString read Get_SubjectC;
    property SubjectCN: WideString read Get_SubjectCN;
    property SubjectDN: WideString read Get_SubjectDN;
    property SubjectE: WideString read Get_SubjectE;
    property SubjectL: WideString read Get_SubjectL;
    property SubjectO: WideString read Get_SubjectO;
    property SubjectOU: WideString read Get_SubjectOU;
    property SubjectS: WideString read Get_SubjectS;
    property TrustedRoot: Integer read Get_TrustedRoot;
    property ValidFrom: TDateTime read Get_ValidFrom;
    property ValidFromStr: WideString read Get_ValidFromStr;
    property ValidTo: TDateTime read Get_ValidTo;
    property ValidToStr: WideString read Get_ValidToStr;
    property SubjectKeyId: WideString read Get_SubjectKeyId;
    property AuthorityKeyId: WideString read Get_AuthorityKeyId;
  end;

// *********************************************************************//
// DispIntf:  IChilkatCertDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2CABA7DB-F1DD-4E6D-943B-330CF27F6A5D}
// *********************************************************************//
  IChilkatCertDisp = dispinterface
    ['{2CABA7DB-F1DD-4E6D-943B-330CF27F6A5D}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property AvoidWindowsPkAccess: Integer dispid 100;
    property CertVersion: Integer readonly dispid 101;
    property CspName: WideString readonly dispid 102;
    property Expired: Integer readonly dispid 103;
    property ForClientAuthentication: Integer readonly dispid 104;
    property ForCodeSigning: Integer readonly dispid 105;
    property ForSecureEmail: Integer readonly dispid 106;
    property ForServerAuthentication: Integer readonly dispid 107;
    property ForTimeStamping: Integer readonly dispid 108;
    property HasKeyContainer: Integer readonly dispid 109;
    property IntendedKeyUsage: Integer readonly dispid 110;
    property IsRoot: Integer readonly dispid 111;
    property IssuerC: WideString readonly dispid 112;
    property IssuerCN: WideString readonly dispid 113;
    property IssuerDN: WideString readonly dispid 114;
    property IssuerE: WideString readonly dispid 115;
    property IssuerL: WideString readonly dispid 116;
    property IssuerO: WideString readonly dispid 117;
    property IssuerOU: WideString readonly dispid 118;
    property IssuerS: WideString readonly dispid 119;
    property KeyContainerName: WideString readonly dispid 120;
    property MachineKeyset: Integer readonly dispid 121;
    property OcspUrl: WideString readonly dispid 122;
    property PrivateKeyExportable: Integer readonly dispid 123;
    property Revoked: Integer readonly dispid 124;
    property Rfc822Name: WideString readonly dispid 125;
    property SelfSigned: Integer readonly dispid 126;
    property SerialNumber: WideString readonly dispid 127;
    property Sha1Thumbprint: WideString readonly dispid 128;
    property SignatureVerified: Integer readonly dispid 129;
    property Silent: Integer readonly dispid 130;
    property SubjectC: WideString readonly dispid 131;
    property SubjectCN: WideString readonly dispid 132;
    property SubjectDN: WideString readonly dispid 133;
    property SubjectE: WideString readonly dispid 134;
    property SubjectL: WideString readonly dispid 135;
    property SubjectO: WideString readonly dispid 136;
    property SubjectOU: WideString readonly dispid 137;
    property SubjectS: WideString readonly dispid 138;
    property TrustedRoot: Integer readonly dispid 139;
    property ValidFrom: TDateTime readonly dispid 140;
    property ValidFromStr: WideString readonly dispid 141;
    property ValidTo: TDateTime readonly dispid 142;
    property ValidToStr: WideString readonly dispid 143;
    property SubjectKeyId: WideString readonly dispid 175;
    property AuthorityKeyId: WideString readonly dispid 176;
    function CheckRevoked: Integer; dispid 144;
    function ExportCertDer: OleVariant; dispid 145;
    function ExportCertDerFile(const path: WideString): Integer; dispid 146;
    function ExportCertPem: WideString; dispid 147;
    function ExportCertPemFile(const path: WideString): Integer; dispid 148;
    function ExportCertXml: WideString; dispid 149;
    function ExportPrivateKey: IPrivateKey; dispid 150;
    function ExportPublicKey: IPublicKey; dispid 151;
    function ExportToPfxFile(const pfxFilename: WideString; const password: WideString; 
                             bIncludeChain: Integer): Integer; dispid 152;
    function FindIssuer: IChilkatCert; dispid 153;
    function GetEncoded: WideString; dispid 154;
    function GetPrivateKeyPem: WideString; dispid 155;
    function GetValidFromDt: ICkDateTime; dispid 156;
    function GetValidToDt: ICkDateTime; dispid 157;
    function HasPrivateKey: Integer; dispid 158;
    function LinkPrivateKey(const KeyContainerName: WideString; bMachineKeyset: Integer; 
                            bForSigning: Integer): Integer; dispid 159;
    function LoadByCommonName(const cn: WideString): Integer; dispid 160;
    function LoadByEmailAddress(const emailAddress: WideString): Integer; dispid 161;
    function LoadByIssuerAndSerialNumber(const IssuerCN: WideString; const serialNum: WideString): Integer; dispid 162;
    function LoadFromBase64(const encodedCert: WideString): Integer; dispid 163;
    function LoadFromBinary(data: OleVariant): Integer; dispid 164;
    function LoadFromFile(const path: WideString): Integer; dispid 165;
    function LoadPfxData(pfxData: OleVariant; const password: WideString): Integer; dispid 166;
    function LoadPfxFile(const pfxPath: WideString; const password: WideString): Integer; dispid 167;
    function PemFileToDerFile(const fromPath: WideString; const toPath: WideString): Integer; dispid 168;
    function SaveToFile(const path: WideString): Integer; dispid 169;
    function SetFromEncoded(const encodedCert: WideString): Integer; dispid 170;
    function SetPrivateKey(const privKey: IPrivateKey): Integer; dispid 171;
    function SetPrivateKeyPem(const privKeyPem: WideString): Integer; dispid 172;
    function ExportToPfxData(const password: WideString; includeCertChain: Integer): OleVariant; dispid 174;
    function UseCertVault(const vault: IChilkatXmlCertVault): Integer; dispid 177;
    function GetCertChain: IChilkatCertChain; dispid 178;
    function VerifySignature: Integer; dispid 179;
  end;

// *********************************************************************//
// Interface: IChilkatXmlCertVault
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {4C963716-FB14-4D7F-A176-1AC6E30BDEDA}
// *********************************************************************//
  IChilkatXmlCertVault = interface(IDispatch)
    ['{4C963716-FB14-4D7F-A176-1AC6E30BDEDA}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_MasterPassword: WideString; safecall;
    procedure Set_MasterPassword(const pVal: WideString); safecall;
    function AddPfxFile(const path: WideString; const password: WideString): Integer; safecall;
    function AddCertFile(const path: WideString): Integer; safecall;
    function AddPemFile(const path: WideString; const password: WideString): Integer; safecall;
    function SaveXml(const path: WideString): Integer; safecall;
    function LoadXml(const xml: WideString): Integer; safecall;
    function LoadXmlFile(const path: WideString): Integer; safecall;
    function GetXml: WideString; safecall;
    function AddCertBinary(certBytes: OleVariant): Integer; safecall;
    function AddPfxBinary(pfxBytes: OleVariant; const password: WideString): Integer; safecall;
    function AddCertString(const certData: WideString): Integer; safecall;
    function AddPfxEncoded(const encodedBytes: WideString; const encoding: WideString; 
                           const password: WideString): Integer; safecall;
    function AddCertEncoded(const encodedBytes: WideString; const encoding: WideString): Integer; safecall;
    function AddCert(const cert: IChilkatCert): Integer; safecall;
    function AddPfx(const pfx: IChilkatPfx): Integer; safecall;
    function AddCertChain(const certChain: IChilkatCertChain): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property MasterPassword: WideString read Get_MasterPassword write Set_MasterPassword;
  end;

// *********************************************************************//
// DispIntf:  IChilkatXmlCertVaultDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {4C963716-FB14-4D7F-A176-1AC6E30BDEDA}
// *********************************************************************//
  IChilkatXmlCertVaultDisp = dispinterface
    ['{4C963716-FB14-4D7F-A176-1AC6E30BDEDA}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property MasterPassword: WideString dispid 100;
    function AddPfxFile(const path: WideString; const password: WideString): Integer; dispid 101;
    function AddCertFile(const path: WideString): Integer; dispid 102;
    function AddPemFile(const path: WideString; const password: WideString): Integer; dispid 103;
    function SaveXml(const path: WideString): Integer; dispid 104;
    function LoadXml(const xml: WideString): Integer; dispid 105;
    function LoadXmlFile(const path: WideString): Integer; dispid 106;
    function GetXml: WideString; dispid 107;
    function AddCertBinary(certBytes: OleVariant): Integer; dispid 108;
    function AddPfxBinary(pfxBytes: OleVariant; const password: WideString): Integer; dispid 109;
    function AddCertString(const certData: WideString): Integer; dispid 110;
    function AddPfxEncoded(const encodedBytes: WideString; const encoding: WideString; 
                           const password: WideString): Integer; dispid 111;
    function AddCertEncoded(const encodedBytes: WideString; const encoding: WideString): Integer; dispid 112;
    function AddCert(const cert: IChilkatCert): Integer; dispid 113;
    function AddPfx(const pfx: IChilkatPfx): Integer; dispid 114;
    function AddCertChain(const certChain: IChilkatCertChain): Integer; dispid 115;
  end;

// *********************************************************************//
// Interface: IChilkatPfx
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1B708D67-5ED0-4A1E-8894-144C531FB095}
// *********************************************************************//
  IChilkatPfx = interface(IDispatch)
    ['{1B708D67-5ED0-4A1E-8894-144C531FB095}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_NumCerts: Integer; safecall;
    function Get_NumPrivateKeys: Integer; safecall;
    function GetCert(index: Integer): IChilkatCert; safecall;
    function GetPrivateKey(index: Integer): IPrivateKey; safecall;
    function LoadPfxBytes(pfxData: OleVariant; const password: WideString): Integer; safecall;
    function LoadPfxEncoded(const encodedData: WideString; const encoding: WideString; 
                            const password: WideString): Integer; safecall;
    function LoadPfxFile(const path: WideString; const password: WideString): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property NumCerts: Integer read Get_NumCerts;
    property NumPrivateKeys: Integer read Get_NumPrivateKeys;
  end;

// *********************************************************************//
// DispIntf:  IChilkatPfxDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1B708D67-5ED0-4A1E-8894-144C531FB095}
// *********************************************************************//
  IChilkatPfxDisp = dispinterface
    ['{1B708D67-5ED0-4A1E-8894-144C531FB095}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property NumCerts: Integer readonly dispid 100;
    property NumPrivateKeys: Integer readonly dispid 101;
    function GetCert(index: Integer): IChilkatCert; dispid 102;
    function GetPrivateKey(index: Integer): IPrivateKey; dispid 103;
    function LoadPfxBytes(pfxData: OleVariant; const password: WideString): Integer; dispid 104;
    function LoadPfxEncoded(const encodedData: WideString; const encoding: WideString; 
                            const password: WideString): Integer; dispid 105;
    function LoadPfxFile(const path: WideString; const password: WideString): Integer; dispid 106;
  end;

// *********************************************************************//
// Interface: IChilkatCertChain
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E05C10E0-F9E3-4E4E-8784-E4DA4285A085}
// *********************************************************************//
  IChilkatCertChain = interface(IDispatch)
    ['{E05C10E0-F9E3-4E4E-8784-E4DA4285A085}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_NumCerts: Integer; safecall;
    function Get_NumExpiredCerts: Integer; safecall;
    function GetCert(index: Integer): IChilkatCert; safecall;
    function VerifyCertSignatures: Integer; safecall;
    function IsRootTrusted(const trustedRoots: IChilkatTrustedRoots): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property NumCerts: Integer read Get_NumCerts;
    property NumExpiredCerts: Integer read Get_NumExpiredCerts;
  end;

// *********************************************************************//
// DispIntf:  IChilkatCertChainDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E05C10E0-F9E3-4E4E-8784-E4DA4285A085}
// *********************************************************************//
  IChilkatCertChainDisp = dispinterface
    ['{E05C10E0-F9E3-4E4E-8784-E4DA4285A085}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property NumCerts: Integer readonly dispid 100;
    property NumExpiredCerts: Integer readonly dispid 101;
    function GetCert(index: Integer): IChilkatCert; dispid 102;
    function VerifyCertSignatures: Integer; dispid 103;
    function IsRootTrusted(const trustedRoots: IChilkatTrustedRoots): Integer; dispid 104;
  end;

// *********************************************************************//
// Interface: IChilkatTrustedRoots
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8B32E2E7-6846-4B3F-B686-A2E62F6A85C4}
// *********************************************************************//
  IChilkatTrustedRoots = interface(IDispatch)
    ['{8B32E2E7-6846-4B3F-B686-A2E62F6A85C4}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_NumCerts: Integer; safecall;
    function LoadCaCertsPem(const path: WideString): Integer; safecall;
    function GetCert(index: Integer): IChilkatCert; safecall;
    function Activate: Integer; safecall;
    function Deactivate: Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property NumCerts: Integer read Get_NumCerts;
  end;

// *********************************************************************//
// DispIntf:  IChilkatTrustedRootsDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8B32E2E7-6846-4B3F-B686-A2E62F6A85C4}
// *********************************************************************//
  IChilkatTrustedRootsDisp = dispinterface
    ['{8B32E2E7-6846-4B3F-B686-A2E62F6A85C4}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property NumCerts: Integer readonly dispid 100;
    function LoadCaCertsPem(const path: WideString): Integer; dispid 101;
    function GetCert(index: Integer): IChilkatCert; dispid 102;
    function Activate: Integer; dispid 103;
    function Deactivate: Integer; dispid 104;
  end;

// *********************************************************************//
// Interface: IChilkatCertStore
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8CBE1840-52FA-4404-824C-139577309528}
// *********************************************************************//
  IChilkatCertStore = interface(IDispatch)
    ['{8CBE1840-52FA-4404-824C-139577309528}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_NumCertificates: Integer; safecall;
    function Get_NumEmailCerts: Integer; safecall;
    function Get_AvoidWindowsPkAccess: Integer; safecall;
    procedure Set_AvoidWindowsPkAccess(pVal: Integer); safecall;
    function AddCertificate(const cert: IChilkatCert): Integer; safecall;
    function CreateFileStore(const filename: WideString): Integer; safecall;
    function CreateMemoryStore: Integer; safecall;
    function CreateRegistryStore(const regRoot: WideString; const regPath: WideString): Integer; safecall;
    function FindCertByRfc822Name(const name: WideString): IChilkatCert; safecall;
    function FindCertBySerial(const str: WideString): IChilkatCert; safecall;
    function FindCertBySha1Thumbprint(const str: WideString): IChilkatCert; safecall;
    function FindCertBySubject(const str: WideString): IChilkatCert; safecall;
    function FindCertBySubjectCN(const str: WideString): IChilkatCert; safecall;
    function FindCertBySubjectE(const str: WideString): IChilkatCert; safecall;
    function FindCertBySubjectO(const str: WideString): IChilkatCert; safecall;
    function FindCertForEmail(const emailAddress: WideString): IChilkatCert; safecall;
    function GetCertificate(index: Integer): IChilkatCert; safecall;
    function GetEmailCert(index: Integer): IChilkatCert; safecall;
    function LoadPemFile(const pemPath: WideString): Integer; safecall;
    function LoadPemStr(const pemString: WideString): Integer; safecall;
    function LoadPfxData(pfxData: OleVariant; const password: WideString): Integer; safecall;
    function LoadPfxFile(const pfxFilename: WideString; const password: WideString): Integer; safecall;
    function OpenCurrentUserStore(readOnly: Integer): Integer; safecall;
    function OpenFileStore(const filename: WideString; readOnly: Integer): Integer; safecall;
    function OpenLocalSystemStore(readOnly: Integer): Integer; safecall;
    function OpenRegistryStore(const regRoot: WideString; const regPath: WideString; 
                               readOnly: Integer): Integer; safecall;
    function RemoveCertificate(const cert: IChilkatCert): Integer; safecall;
    function OpenChilkatStore(readOnly: Integer): Integer; safecall;
    function OpenOutlookStore(readOnly: Integer): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property NumCertificates: Integer read Get_NumCertificates;
    property NumEmailCerts: Integer read Get_NumEmailCerts;
    property AvoidWindowsPkAccess: Integer read Get_AvoidWindowsPkAccess write Set_AvoidWindowsPkAccess;
  end;

// *********************************************************************//
// DispIntf:  IChilkatCertStoreDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8CBE1840-52FA-4404-824C-139577309528}
// *********************************************************************//
  IChilkatCertStoreDisp = dispinterface
    ['{8CBE1840-52FA-4404-824C-139577309528}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property NumCertificates: Integer readonly dispid 100;
    property NumEmailCerts: Integer readonly dispid 101;
    property AvoidWindowsPkAccess: Integer dispid 103;
    function AddCertificate(const cert: IChilkatCert): Integer; dispid 104;
    function CreateFileStore(const filename: WideString): Integer; dispid 105;
    function CreateMemoryStore: Integer; dispid 106;
    function CreateRegistryStore(const regRoot: WideString; const regPath: WideString): Integer; dispid 107;
    function FindCertByRfc822Name(const name: WideString): IChilkatCert; dispid 108;
    function FindCertBySerial(const str: WideString): IChilkatCert; dispid 109;
    function FindCertBySha1Thumbprint(const str: WideString): IChilkatCert; dispid 110;
    function FindCertBySubject(const str: WideString): IChilkatCert; dispid 111;
    function FindCertBySubjectCN(const str: WideString): IChilkatCert; dispid 112;
    function FindCertBySubjectE(const str: WideString): IChilkatCert; dispid 113;
    function FindCertBySubjectO(const str: WideString): IChilkatCert; dispid 114;
    function FindCertForEmail(const emailAddress: WideString): IChilkatCert; dispid 115;
    function GetCertificate(index: Integer): IChilkatCert; dispid 116;
    function GetEmailCert(index: Integer): IChilkatCert; dispid 117;
    function LoadPemFile(const pemPath: WideString): Integer; dispid 118;
    function LoadPemStr(const pemString: WideString): Integer; dispid 119;
    function LoadPfxData(pfxData: OleVariant; const password: WideString): Integer; dispid 120;
    function LoadPfxFile(const pfxFilename: WideString; const password: WideString): Integer; dispid 121;
    function OpenCurrentUserStore(readOnly: Integer): Integer; dispid 122;
    function OpenFileStore(const filename: WideString; readOnly: Integer): Integer; dispid 123;
    function OpenLocalSystemStore(readOnly: Integer): Integer; dispid 124;
    function OpenRegistryStore(const regRoot: WideString; const regPath: WideString; 
                               readOnly: Integer): Integer; dispid 125;
    function RemoveCertificate(const cert: IChilkatCert): Integer; dispid 126;
    function OpenChilkatStore(readOnly: Integer): Integer; dispid 127;
    function OpenOutlookStore(readOnly: Integer): Integer; dispid 128;
  end;

// *********************************************************************//
// Interface: IChilkatCrypt2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {380B144D-5AF4-4DC3-BBDF-AD8E25F16188}
// *********************************************************************//
  IChilkatCrypt2 = interface(IDispatch)
    ['{380B144D-5AF4-4DC3-BBDF-AD8E25F16188}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_BlockSize: Integer; safecall;
    function Get_CadesEnabled: Integer; safecall;
    procedure Set_CadesEnabled(pVal: Integer); safecall;
    function Get_CadesSigPolicyHash: WideString; safecall;
    procedure Set_CadesSigPolicyHash(const pVal: WideString); safecall;
    function Get_CadesSigPolicyId: WideString; safecall;
    procedure Set_CadesSigPolicyId(const pVal: WideString); safecall;
    function Get_CadesSigPolicyUri: WideString; safecall;
    procedure Set_CadesSigPolicyUri(const pVal: WideString); safecall;
    function Get_charset: WideString; safecall;
    procedure Set_charset(const pVal: WideString); safecall;
    function Get_CipherMode: WideString; safecall;
    procedure Set_CipherMode(const pVal: WideString); safecall;
    function Get_CompressionAlgorithm: WideString; safecall;
    procedure Set_CompressionAlgorithm(const pVal: WideString); safecall;
    function Get_CryptAlgorithm: WideString; safecall;
    procedure Set_CryptAlgorithm(const pVal: WideString); safecall;
    function Get_EncodingMode: WideString; safecall;
    procedure Set_EncodingMode(const pVal: WideString); safecall;
    function Get_FirstChunk: Integer; safecall;
    procedure Set_FirstChunk(pVal: Integer); safecall;
    function Get_HashAlgorithm: WideString; safecall;
    procedure Set_HashAlgorithm(const pVal: WideString); safecall;
    function Get_HavalRounds: Integer; safecall;
    procedure Set_HavalRounds(pVal: Integer); safecall;
    function Get_HeartbeatMs: Integer; safecall;
    procedure Set_HeartbeatMs(pVal: Integer); safecall;
    function Get_IV: OleVariant; safecall;
    procedure Set_IV(pVal: OleVariant); safecall;
    function Get_includeCertChain: Integer; safecall;
    procedure Set_includeCertChain(pVal: Integer); safecall;
    function Get_IterationCount: Integer; safecall;
    procedure Set_IterationCount(pVal: Integer); safecall;
    function Get_KeyLength: Integer; safecall;
    procedure Set_KeyLength(pVal: Integer); safecall;
    function Get_LastChunk: Integer; safecall;
    procedure Set_LastChunk(pVal: Integer); safecall;
    function Get_NumSignerCerts: Integer; safecall;
    function Get_PaddingScheme: Integer; safecall;
    procedure Set_PaddingScheme(pVal: Integer); safecall;
    function Get_PbesAlgorithm: WideString; safecall;
    procedure Set_PbesAlgorithm(const pVal: WideString); safecall;
    function Get_PbesPassword: WideString; safecall;
    procedure Set_PbesPassword(const pVal: WideString); safecall;
    function Get_Pkcs7CryptAlg: WideString; safecall;
    procedure Set_Pkcs7CryptAlg(const pVal: WideString); safecall;
    function Get_Rc2EffectiveKeyLength: Integer; safecall;
    procedure Set_Rc2EffectiveKeyLength(pVal: Integer); safecall;
    function Get_Salt: OleVariant; safecall;
    procedure Set_Salt(pVal: OleVariant); safecall;
    function Get_SecretKey: OleVariant; safecall;
    procedure Set_SecretKey(pVal: OleVariant); safecall;
    function Get_UuFilename: WideString; safecall;
    procedure Set_UuFilename(const pVal: WideString); safecall;
    function Get_UuMode: WideString; safecall;
    procedure Set_UuMode(const pVal: WideString); safecall;
    function Get_ByteSwapOnDecrypt: Integer; safecall;
    procedure Set_ByteSwapOnDecrypt(pVal: Integer); safecall;
    procedure AddEncryptCert(const cert: IChilkatCert); safecall;
    function AddPfxSourceData(pfxData: OleVariant; const password: WideString): Integer; safecall;
    function AddPfxSourceFile(const pfxFilePath: WideString; const password: WideString): Integer; safecall;
    function ByteSwap4321(data: OleVariant): OleVariant; safecall;
    function BytesToString(inData: OleVariant; const charset: WideString): WideString; safecall;
    function CkDecryptFile(const srcFile: WideString; const destFile: WideString): Integer; safecall;
    function CkEncryptFile(const srcFile: WideString; const destFile: WideString): Integer; safecall;
    procedure ClearEncryptCerts; safecall;
    function CompressBytes(data: OleVariant): OleVariant; safecall;
    function CompressBytesENC(data: OleVariant): WideString; safecall;
    function CompressString(const str: WideString): OleVariant; safecall;
    function CompressStringENC(const str: WideString): WideString; safecall;
    function CreateDetachedSignature(const filename: WideString; const sigFile: WideString): Integer; safecall;
    function CreateP7M(const inFilename: WideString; const p7mFilename: WideString): Integer; safecall;
    function CreateP7S(const inFilename: WideString; const p7sFilename: WideString): Integer; safecall;
    function Decode(const str: WideString; const encoding: WideString): OleVariant; safecall;
    function DecodeString(const inStr: WideString; const charset: WideString; 
                          const encoding: WideString): WideString; safecall;
    function DecryptBytes(data: OleVariant): OleVariant; safecall;
    function DecryptBytesENC(const str: WideString): OleVariant; safecall;
    function DecryptEncoded(const str: WideString): WideString; safecall;
    function DecryptString(data: OleVariant): WideString; safecall;
    function DecryptStringENC(const str: WideString): WideString; safecall;
    function Encode(data: OleVariant; const encoding: WideString): WideString; safecall;
    function EncodeString(const inStr: WideString; const charset: WideString; 
                          const encoding: WideString): WideString; safecall;
    function EncryptBytes(data: OleVariant): OleVariant; safecall;
    function EncryptBytesENC(data: OleVariant): WideString; safecall;
    function EncryptEncoded(const str: WideString): WideString; safecall;
    function EncryptString(const str: WideString): OleVariant; safecall;
    function EncryptStringENC(const str: WideString): WideString; safecall;
    function GenEncodedSecretKey(const password: WideString; const encoding: WideString): WideString; safecall;
    function GenRandomBytesENC(numBytes: Integer): WideString; safecall;
    function GenerateSecretKey(const password: WideString): OleVariant; safecall;
    function GetEncodedIV(const encoding: WideString): WideString; safecall;
    function GetEncodedKey(const encoding: WideString): WideString; safecall;
    function GetEncodedSalt(const encoding: WideString): WideString; safecall;
    function GetLastCert: IChilkatCert; safecall;
    function GetSignatureSigningTime(index: Integer): TDateTime; safecall;
    function GetSignatureSigningTimeStr(index: Integer): WideString; safecall;
    function GetSignerCert(index: Integer): IChilkatCert; safecall;
    function HasSignatureSigningTime(index: Integer): Integer; safecall;
    function HashBeginBytes(data: OleVariant): Integer; safecall;
    function HashBeginString(const strData: WideString): Integer; safecall;
    function HashBytes(data: OleVariant): OleVariant; safecall;
    function HashBytesENC(data: OleVariant): WideString; safecall;
    function HashFile(const filename: WideString): OleVariant; safecall;
    function HashFileENC(const filename: WideString): WideString; safecall;
    function HashFinal: OleVariant; safecall;
    function HashFinalENC: WideString; safecall;
    function HashMoreBytes(data: OleVariant): Integer; safecall;
    function HashMoreString(const strData: WideString): Integer; safecall;
    function HashString(const str: WideString): OleVariant; safecall;
    function HashStringENC(const str: WideString): WideString; safecall;
    function HmacBytes(inBytes: OleVariant): OleVariant; safecall;
    function HmacBytesENC(inBytes: OleVariant): WideString; safecall;
    function HmacString(const inText: WideString): OleVariant; safecall;
    function HmacStringENC(const inText: WideString): WideString; safecall;
    function InflateBytes(data: OleVariant): OleVariant; safecall;
    function InflateBytesENC(const str: WideString): OleVariant; safecall;
    function InflateString(data: OleVariant): WideString; safecall;
    function InflateStringENC(const str: WideString): WideString; safecall;
    function IsUnlocked: Integer; safecall;
    function MySqlAesDecrypt(const strEncrypted: WideString; const strKey: WideString): WideString; safecall;
    function MySqlAesEncrypt(const strData: WideString; const strKey: WideString): WideString; safecall;
    function OpaqueSignBytes(data: OleVariant): OleVariant; safecall;
    function OpaqueSignBytesENC(data: OleVariant): WideString; safecall;
    function OpaqueSignString(const str: WideString): OleVariant; safecall;
    function OpaqueSignStringENC(const str: WideString): WideString; safecall;
    function OpaqueVerifyBytes(p7s: OleVariant): OleVariant; safecall;
    function OpaqueVerifyBytesENC(const p7s: WideString): OleVariant; safecall;
    function OpaqueVerifyString(p7s: OleVariant): WideString; safecall;
    function OpaqueVerifyStringENC(const p7s: WideString): WideString; safecall;
    function Pbkdf1(const password: WideString; const charset: WideString; 
                    const hashAlg: WideString; const Salt: WideString; IterationCount: Integer; 
                    outputKeyBitLen: Integer; const encoding: WideString): WideString; safecall;
    function Pbkdf2(const password: WideString; const charset: WideString; 
                    const hashAlg: WideString; const Salt: WideString; IterationCount: Integer; 
                    outputKeyBitLen: Integer; const encoding: WideString): WideString; safecall;
    procedure RandomizeIV; safecall;
    procedure RandomizeKey; safecall;
    function ReEncode(const data: WideString; const fromEncoding: WideString; 
                      const toEncoding: WideString): WideString; safecall;
    function ReadFile(const filename: WideString): OleVariant; safecall;
    function SetCSP(const csp: IChilkatCsp): Integer; safecall;
    function SetDecryptCert(const cert: IChilkatCert): Integer; safecall;
    function SetDecryptCert2(const cert: IChilkatCert; const key: IPrivateKey): Integer; safecall;
    procedure SetEncodedIV(const ivStr: WideString; const encoding: WideString); safecall;
    procedure SetEncodedKey(const keyStr: WideString; const encoding: WideString); safecall;
    procedure SetEncodedSalt(const saltStr: WideString; const encoding: WideString); safecall;
    function SetEncryptCert(const cert: IChilkatCert): Integer; safecall;
    procedure SetHmacKeyBytes(keyBytes: OleVariant); safecall;
    procedure SetHmacKeyEncoded(const key: WideString; const encoding: WideString); safecall;
    procedure SetHmacKeyString(const key: WideString); safecall;
    procedure SetSecretKeyViaPassword(const password: WideString); safecall;
    function SetSigningCert(const cert: IChilkatCert): Integer; safecall;
    function SetSigningCert2(const cert: IChilkatCert; const key: IPrivateKey): Integer; safecall;
    function SetVerifyCert(const cert: IChilkatCert): Integer; safecall;
    function SignBytes(data: OleVariant): OleVariant; safecall;
    function SignBytesENC(data: OleVariant): WideString; safecall;
    function SignString(const str: WideString): OleVariant; safecall;
    function SignStringENC(const str: WideString): WideString; safecall;
    function StringToBytes(const inStr: WideString; const charset: WideString): OleVariant; safecall;
    function TrimEndingWith(const inStr: WideString; const ending: WideString): WideString; safecall;
    function UnlockComponent(const b1: WideString): Integer; safecall;
    function VerifyBytes(data: OleVariant; sig: OleVariant): Integer; safecall;
    function VerifyBytesENC(data: OleVariant; const encodedSig: WideString): Integer; safecall;
    function VerifyDetachedSignature(const filename: WideString; const sigFile: WideString): Integer; safecall;
    function VerifyP7M(const p7mPath: WideString; const destPath: WideString): Integer; safecall;
    function VerifyP7S(const inFilename: WideString; const p7sFilename: WideString): Integer; safecall;
    function VerifyString(const str: WideString; sig: OleVariant): Integer; safecall;
    function VerifyStringENC(const str: WideString; const encodedSig: WideString): Integer; safecall;
    function WriteFile(const filename: WideString; fileData: OleVariant): Integer; safecall;
    function Shorten(inData: OleVariant; numBytes: Integer): OleVariant; safecall;
    function CrcFile(const crcAlg: WideString; const path: WideString): Integer; safecall;
    function CrcBytes(const crcAlg: WideString; byteData: OleVariant): Integer; safecall;
    function UseCertVault(const vault: IChilkatXmlCertVault): Integer; safecall;
    function GetSignerCertChain(index: Integer): IChilkatCertChain; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property BlockSize: Integer read Get_BlockSize;
    property CadesEnabled: Integer read Get_CadesEnabled write Set_CadesEnabled;
    property CadesSigPolicyHash: WideString read Get_CadesSigPolicyHash write Set_CadesSigPolicyHash;
    property CadesSigPolicyId: WideString read Get_CadesSigPolicyId write Set_CadesSigPolicyId;
    property CadesSigPolicyUri: WideString read Get_CadesSigPolicyUri write Set_CadesSigPolicyUri;
    property charset: WideString read Get_charset write Set_charset;
    property CipherMode: WideString read Get_CipherMode write Set_CipherMode;
    property CompressionAlgorithm: WideString read Get_CompressionAlgorithm write Set_CompressionAlgorithm;
    property CryptAlgorithm: WideString read Get_CryptAlgorithm write Set_CryptAlgorithm;
    property EncodingMode: WideString read Get_EncodingMode write Set_EncodingMode;
    property FirstChunk: Integer read Get_FirstChunk write Set_FirstChunk;
    property HashAlgorithm: WideString read Get_HashAlgorithm write Set_HashAlgorithm;
    property HavalRounds: Integer read Get_HavalRounds write Set_HavalRounds;
    property HeartbeatMs: Integer read Get_HeartbeatMs write Set_HeartbeatMs;
    property IV: OleVariant read Get_IV write Set_IV;
    property includeCertChain: Integer read Get_includeCertChain write Set_includeCertChain;
    property IterationCount: Integer read Get_IterationCount write Set_IterationCount;
    property KeyLength: Integer read Get_KeyLength write Set_KeyLength;
    property LastChunk: Integer read Get_LastChunk write Set_LastChunk;
    property NumSignerCerts: Integer read Get_NumSignerCerts;
    property PaddingScheme: Integer read Get_PaddingScheme write Set_PaddingScheme;
    property PbesAlgorithm: WideString read Get_PbesAlgorithm write Set_PbesAlgorithm;
    property PbesPassword: WideString read Get_PbesPassword write Set_PbesPassword;
    property Pkcs7CryptAlg: WideString read Get_Pkcs7CryptAlg write Set_Pkcs7CryptAlg;
    property Rc2EffectiveKeyLength: Integer read Get_Rc2EffectiveKeyLength write Set_Rc2EffectiveKeyLength;
    property Salt: OleVariant read Get_Salt write Set_Salt;
    property SecretKey: OleVariant read Get_SecretKey write Set_SecretKey;
    property UuFilename: WideString read Get_UuFilename write Set_UuFilename;
    property UuMode: WideString read Get_UuMode write Set_UuMode;
    property ByteSwapOnDecrypt: Integer read Get_ByteSwapOnDecrypt write Set_ByteSwapOnDecrypt;
  end;

// *********************************************************************//
// DispIntf:  IChilkatCrypt2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {380B144D-5AF4-4DC3-BBDF-AD8E25F16188}
// *********************************************************************//
  IChilkatCrypt2Disp = dispinterface
    ['{380B144D-5AF4-4DC3-BBDF-AD8E25F16188}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property BlockSize: Integer readonly dispid 100;
    property CadesEnabled: Integer dispid 101;
    property CadesSigPolicyHash: WideString dispid 102;
    property CadesSigPolicyId: WideString dispid 103;
    property CadesSigPolicyUri: WideString dispid 104;
    property charset: WideString dispid 105;
    property CipherMode: WideString dispid 106;
    property CompressionAlgorithm: WideString dispid 107;
    property CryptAlgorithm: WideString dispid 108;
    property EncodingMode: WideString dispid 109;
    property FirstChunk: Integer dispid 110;
    property HashAlgorithm: WideString dispid 111;
    property HavalRounds: Integer dispid 112;
    property HeartbeatMs: Integer dispid 113;
    property IV: OleVariant dispid 114;
    property includeCertChain: Integer dispid 115;
    property IterationCount: Integer dispid 116;
    property KeyLength: Integer dispid 117;
    property LastChunk: Integer dispid 118;
    property NumSignerCerts: Integer readonly dispid 119;
    property PaddingScheme: Integer dispid 120;
    property PbesAlgorithm: WideString dispid 121;
    property PbesPassword: WideString dispid 122;
    property Pkcs7CryptAlg: WideString dispid 123;
    property Rc2EffectiveKeyLength: Integer dispid 124;
    property Salt: OleVariant dispid 125;
    property SecretKey: OleVariant dispid 126;
    property UuFilename: WideString dispid 127;
    property UuMode: WideString dispid 128;
    property ByteSwapOnDecrypt: Integer dispid 129;
    procedure AddEncryptCert(const cert: IChilkatCert); dispid 130;
    function AddPfxSourceData(pfxData: OleVariant; const password: WideString): Integer; dispid 131;
    function AddPfxSourceFile(const pfxFilePath: WideString; const password: WideString): Integer; dispid 132;
    function ByteSwap4321(data: OleVariant): OleVariant; dispid 133;
    function BytesToString(inData: OleVariant; const charset: WideString): WideString; dispid 134;
    function CkDecryptFile(const srcFile: WideString; const destFile: WideString): Integer; dispid 135;
    function CkEncryptFile(const srcFile: WideString; const destFile: WideString): Integer; dispid 136;
    procedure ClearEncryptCerts; dispid 137;
    function CompressBytes(data: OleVariant): OleVariant; dispid 138;
    function CompressBytesENC(data: OleVariant): WideString; dispid 139;
    function CompressString(const str: WideString): OleVariant; dispid 140;
    function CompressStringENC(const str: WideString): WideString; dispid 141;
    function CreateDetachedSignature(const filename: WideString; const sigFile: WideString): Integer; dispid 142;
    function CreateP7M(const inFilename: WideString; const p7mFilename: WideString): Integer; dispid 143;
    function CreateP7S(const inFilename: WideString; const p7sFilename: WideString): Integer; dispid 144;
    function Decode(const str: WideString; const encoding: WideString): OleVariant; dispid 145;
    function DecodeString(const inStr: WideString; const charset: WideString; 
                          const encoding: WideString): WideString; dispid 146;
    function DecryptBytes(data: OleVariant): OleVariant; dispid 147;
    function DecryptBytesENC(const str: WideString): OleVariant; dispid 148;
    function DecryptEncoded(const str: WideString): WideString; dispid 149;
    function DecryptString(data: OleVariant): WideString; dispid 150;
    function DecryptStringENC(const str: WideString): WideString; dispid 151;
    function Encode(data: OleVariant; const encoding: WideString): WideString; dispid 152;
    function EncodeString(const inStr: WideString; const charset: WideString; 
                          const encoding: WideString): WideString; dispid 153;
    function EncryptBytes(data: OleVariant): OleVariant; dispid 154;
    function EncryptBytesENC(data: OleVariant): WideString; dispid 155;
    function EncryptEncoded(const str: WideString): WideString; dispid 156;
    function EncryptString(const str: WideString): OleVariant; dispid 157;
    function EncryptStringENC(const str: WideString): WideString; dispid 158;
    function GenEncodedSecretKey(const password: WideString; const encoding: WideString): WideString; dispid 159;
    function GenRandomBytesENC(numBytes: Integer): WideString; dispid 160;
    function GenerateSecretKey(const password: WideString): OleVariant; dispid 161;
    function GetEncodedIV(const encoding: WideString): WideString; dispid 162;
    function GetEncodedKey(const encoding: WideString): WideString; dispid 163;
    function GetEncodedSalt(const encoding: WideString): WideString; dispid 164;
    function GetLastCert: IChilkatCert; dispid 165;
    function GetSignatureSigningTime(index: Integer): TDateTime; dispid 166;
    function GetSignatureSigningTimeStr(index: Integer): WideString; dispid 167;
    function GetSignerCert(index: Integer): IChilkatCert; dispid 168;
    function HasSignatureSigningTime(index: Integer): Integer; dispid 169;
    function HashBeginBytes(data: OleVariant): Integer; dispid 170;
    function HashBeginString(const strData: WideString): Integer; dispid 171;
    function HashBytes(data: OleVariant): OleVariant; dispid 172;
    function HashBytesENC(data: OleVariant): WideString; dispid 173;
    function HashFile(const filename: WideString): OleVariant; dispid 174;
    function HashFileENC(const filename: WideString): WideString; dispid 175;
    function HashFinal: OleVariant; dispid 176;
    function HashFinalENC: WideString; dispid 177;
    function HashMoreBytes(data: OleVariant): Integer; dispid 178;
    function HashMoreString(const strData: WideString): Integer; dispid 179;
    function HashString(const str: WideString): OleVariant; dispid 180;
    function HashStringENC(const str: WideString): WideString; dispid 181;
    function HmacBytes(inBytes: OleVariant): OleVariant; dispid 182;
    function HmacBytesENC(inBytes: OleVariant): WideString; dispid 183;
    function HmacString(const inText: WideString): OleVariant; dispid 184;
    function HmacStringENC(const inText: WideString): WideString; dispid 185;
    function InflateBytes(data: OleVariant): OleVariant; dispid 186;
    function InflateBytesENC(const str: WideString): OleVariant; dispid 187;
    function InflateString(data: OleVariant): WideString; dispid 188;
    function InflateStringENC(const str: WideString): WideString; dispid 189;
    function IsUnlocked: Integer; dispid 190;
    function MySqlAesDecrypt(const strEncrypted: WideString; const strKey: WideString): WideString; dispid 191;
    function MySqlAesEncrypt(const strData: WideString; const strKey: WideString): WideString; dispid 192;
    function OpaqueSignBytes(data: OleVariant): OleVariant; dispid 193;
    function OpaqueSignBytesENC(data: OleVariant): WideString; dispid 194;
    function OpaqueSignString(const str: WideString): OleVariant; dispid 195;
    function OpaqueSignStringENC(const str: WideString): WideString; dispid 196;
    function OpaqueVerifyBytes(p7s: OleVariant): OleVariant; dispid 197;
    function OpaqueVerifyBytesENC(const p7s: WideString): OleVariant; dispid 198;
    function OpaqueVerifyString(p7s: OleVariant): WideString; dispid 199;
    function OpaqueVerifyStringENC(const p7s: WideString): WideString; dispid 200;
    function Pbkdf1(const password: WideString; const charset: WideString; 
                    const hashAlg: WideString; const Salt: WideString; IterationCount: Integer; 
                    outputKeyBitLen: Integer; const encoding: WideString): WideString; dispid 201;
    function Pbkdf2(const password: WideString; const charset: WideString; 
                    const hashAlg: WideString; const Salt: WideString; IterationCount: Integer; 
                    outputKeyBitLen: Integer; const encoding: WideString): WideString; dispid 202;
    procedure RandomizeIV; dispid 203;
    procedure RandomizeKey; dispid 204;
    function ReEncode(const data: WideString; const fromEncoding: WideString; 
                      const toEncoding: WideString): WideString; dispid 205;
    function ReadFile(const filename: WideString): OleVariant; dispid 206;
    function SetCSP(const csp: IChilkatCsp): Integer; dispid 207;
    function SetDecryptCert(const cert: IChilkatCert): Integer; dispid 208;
    function SetDecryptCert2(const cert: IChilkatCert; const key: IPrivateKey): Integer; dispid 209;
    procedure SetEncodedIV(const ivStr: WideString; const encoding: WideString); dispid 210;
    procedure SetEncodedKey(const keyStr: WideString; const encoding: WideString); dispid 211;
    procedure SetEncodedSalt(const saltStr: WideString; const encoding: WideString); dispid 212;
    function SetEncryptCert(const cert: IChilkatCert): Integer; dispid 213;
    procedure SetHmacKeyBytes(keyBytes: OleVariant); dispid 214;
    procedure SetHmacKeyEncoded(const key: WideString; const encoding: WideString); dispid 215;
    procedure SetHmacKeyString(const key: WideString); dispid 216;
    procedure SetSecretKeyViaPassword(const password: WideString); dispid 217;
    function SetSigningCert(const cert: IChilkatCert): Integer; dispid 218;
    function SetSigningCert2(const cert: IChilkatCert; const key: IPrivateKey): Integer; dispid 219;
    function SetVerifyCert(const cert: IChilkatCert): Integer; dispid 220;
    function SignBytes(data: OleVariant): OleVariant; dispid 221;
    function SignBytesENC(data: OleVariant): WideString; dispid 222;
    function SignString(const str: WideString): OleVariant; dispid 223;
    function SignStringENC(const str: WideString): WideString; dispid 224;
    function StringToBytes(const inStr: WideString; const charset: WideString): OleVariant; dispid 225;
    function TrimEndingWith(const inStr: WideString; const ending: WideString): WideString; dispid 226;
    function UnlockComponent(const b1: WideString): Integer; dispid 227;
    function VerifyBytes(data: OleVariant; sig: OleVariant): Integer; dispid 228;
    function VerifyBytesENC(data: OleVariant; const encodedSig: WideString): Integer; dispid 229;
    function VerifyDetachedSignature(const filename: WideString; const sigFile: WideString): Integer; dispid 230;
    function VerifyP7M(const p7mPath: WideString; const destPath: WideString): Integer; dispid 231;
    function VerifyP7S(const inFilename: WideString; const p7sFilename: WideString): Integer; dispid 232;
    function VerifyString(const str: WideString; sig: OleVariant): Integer; dispid 233;
    function VerifyStringENC(const str: WideString; const encodedSig: WideString): Integer; dispid 234;
    function WriteFile(const filename: WideString; fileData: OleVariant): Integer; dispid 235;
    function Shorten(inData: OleVariant; numBytes: Integer): OleVariant; dispid 236;
    function CrcFile(const crcAlg: WideString; const path: WideString): Integer; dispid 237;
    function CrcBytes(const crcAlg: WideString; byteData: OleVariant): Integer; dispid 238;
    function UseCertVault(const vault: IChilkatXmlCertVault): Integer; dispid 239;
    function GetSignerCertChain(index: Integer): IChilkatCertChain; dispid 240;
  end;

// *********************************************************************//
// Interface: ICkString
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {47F0E40C-D2E5-4E14-8133-750275823B82}
// *********************************************************************//
  ICkString = interface(IDispatch)
    ['{47F0E40C-D2E5-4E14-8133-750275823B82}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_NumArabic: Integer; safecall;
    function Get_NumAscii: Integer; safecall;
    function Get_NumCentralEuro: Integer; safecall;
    function Get_NumChars: Integer; safecall;
    function Get_NumChinese: Integer; safecall;
    function Get_NumCyrillic: Integer; safecall;
    function Get_NumGreek: Integer; safecall;
    function Get_NumHebrew: Integer; safecall;
    function Get_NumJapanese: Integer; safecall;
    function Get_NumKorean: Integer; safecall;
    function Get_NumLatin: Integer; safecall;
    function Get_NumThai: Integer; safecall;
    function Get_SizeAnsi: Integer; safecall;
    function Get_SizeUtf8: Integer; safecall;
    function Get_str: WideString; safecall;
    procedure Set_str(const pVal: WideString); safecall;
    function AnsiCharAt(index: Integer): Integer; safecall;
    procedure Append(const inStr: WideString); safecall;
    procedure AppendDateRfc3339(dt: TDateTime); safecall;
    procedure AppendDateRfc822(dt: TDateTime); safecall;
    procedure AppendEncoded(const str: WideString; const encoding: WideString; 
                            const charset: WideString); safecall;
    procedure AppendMultibyte(mbtext: OleVariant; const charset: WideString); safecall;
    function AppendToFile(const filename: WideString; const charset: WideString): Integer; safecall;
    function BeginsWith(const substr: WideString): Integer; safecall;
    procedure ChopAfter(const findStr: WideString); safecall;
    procedure ChopBefore(const findStr: WideString); safecall;
    procedure Clear; safecall;
    function Contains(const substr: WideString): Integer; safecall;
    function EmitMultibyte(const charset: WideString): OleVariant; safecall;
    function EndsWith(const substr: WideString): Integer; safecall;
    function GetEncoded(const encoding: WideString; const charset: WideString): WideString; safecall;
    procedure HtmlEntityDecode; safecall;
    procedure HtmlEntityEncode; safecall;
    function LastAnsiChar: Integer; safecall;
    function Left(NumChars: Integer): WideString; safecall;
    function Length: Integer; safecall;
    function LoadFile(const filename: WideString; const charset: WideString): Integer; safecall;
    procedure LoadXmlDoc(xmlDoc: OleVariant); safecall;
    function Matches(const pattern: WideString; caseSensitive: Integer): Integer; safecall;
    function Mid(idx: Integer; NumChars: Integer): WideString; safecall;
    function ParseDateRfc3339: TDateTime; safecall;
    function ParseDateRfc822: TDateTime; safecall;
    procedure Pluralize; safecall;
    procedure Prepend(const inStr: WideString); safecall;
    procedure RemoveAnsiChar(ch: Integer); safecall;
    procedure ReplaceAll(const substr: WideString; const replacement: WideString); safecall;
    procedure ReplaceAnsiChar(c1: Integer; c2: Integer); safecall;
    procedure ReplaceFirst(const substr: WideString; const replacement: WideString); safecall;
    function Right(NumChars: Integer): WideString; safecall;
    function SaveToFile(const filename: WideString; const charset: WideString): Integer; safecall;
    procedure Shorten(NumChars: Integer); safecall;
    function StrComp(const inStr: WideString; caseSensitive: Integer): Integer; safecall;
    procedure StripHtml; safecall;
    procedure ToCRLF; safecall;
    procedure ToLF; safecall;
    procedure Trim; safecall;
    procedure Trim2; safecall;
    procedure TrimInside; safecall;
    procedure Unpluralize; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property NumArabic: Integer read Get_NumArabic;
    property NumAscii: Integer read Get_NumAscii;
    property NumCentralEuro: Integer read Get_NumCentralEuro;
    property NumChars: Integer read Get_NumChars;
    property NumChinese: Integer read Get_NumChinese;
    property NumCyrillic: Integer read Get_NumCyrillic;
    property NumGreek: Integer read Get_NumGreek;
    property NumHebrew: Integer read Get_NumHebrew;
    property NumJapanese: Integer read Get_NumJapanese;
    property NumKorean: Integer read Get_NumKorean;
    property NumLatin: Integer read Get_NumLatin;
    property NumThai: Integer read Get_NumThai;
    property SizeAnsi: Integer read Get_SizeAnsi;
    property SizeUtf8: Integer read Get_SizeUtf8;
    property str: WideString read Get_str write Set_str;
  end;

// *********************************************************************//
// DispIntf:  ICkStringDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {47F0E40C-D2E5-4E14-8133-750275823B82}
// *********************************************************************//
  ICkStringDisp = dispinterface
    ['{47F0E40C-D2E5-4E14-8133-750275823B82}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property NumArabic: Integer readonly dispid 100;
    property NumAscii: Integer readonly dispid 101;
    property NumCentralEuro: Integer readonly dispid 102;
    property NumChars: Integer readonly dispid 103;
    property NumChinese: Integer readonly dispid 104;
    property NumCyrillic: Integer readonly dispid 105;
    property NumGreek: Integer readonly dispid 106;
    property NumHebrew: Integer readonly dispid 107;
    property NumJapanese: Integer readonly dispid 108;
    property NumKorean: Integer readonly dispid 109;
    property NumLatin: Integer readonly dispid 110;
    property NumThai: Integer readonly dispid 111;
    property SizeAnsi: Integer readonly dispid 112;
    property SizeUtf8: Integer readonly dispid 113;
    property str: WideString dispid 114;
    function AnsiCharAt(index: Integer): Integer; dispid 115;
    procedure Append(const inStr: WideString); dispid 116;
    procedure AppendDateRfc3339(dt: TDateTime); dispid 117;
    procedure AppendDateRfc822(dt: TDateTime); dispid 118;
    procedure AppendEncoded(const str: WideString; const encoding: WideString; 
                            const charset: WideString); dispid 119;
    procedure AppendMultibyte(mbtext: OleVariant; const charset: WideString); dispid 120;
    function AppendToFile(const filename: WideString; const charset: WideString): Integer; dispid 121;
    function BeginsWith(const substr: WideString): Integer; dispid 122;
    procedure ChopAfter(const findStr: WideString); dispid 123;
    procedure ChopBefore(const findStr: WideString); dispid 124;
    procedure Clear; dispid 125;
    function Contains(const substr: WideString): Integer; dispid 126;
    function EmitMultibyte(const charset: WideString): OleVariant; dispid 127;
    function EndsWith(const substr: WideString): Integer; dispid 128;
    function GetEncoded(const encoding: WideString; const charset: WideString): WideString; dispid 129;
    procedure HtmlEntityDecode; dispid 130;
    procedure HtmlEntityEncode; dispid 131;
    function LastAnsiChar: Integer; dispid 132;
    function Left(NumChars: Integer): WideString; dispid 133;
    function Length: Integer; dispid 134;
    function LoadFile(const filename: WideString; const charset: WideString): Integer; dispid 135;
    procedure LoadXmlDoc(xmlDoc: OleVariant); dispid 136;
    function Matches(const pattern: WideString; caseSensitive: Integer): Integer; dispid 137;
    function Mid(idx: Integer; NumChars: Integer): WideString; dispid 138;
    function ParseDateRfc3339: TDateTime; dispid 139;
    function ParseDateRfc822: TDateTime; dispid 140;
    procedure Pluralize; dispid 141;
    procedure Prepend(const inStr: WideString); dispid 142;
    procedure RemoveAnsiChar(ch: Integer); dispid 143;
    procedure ReplaceAll(const substr: WideString; const replacement: WideString); dispid 144;
    procedure ReplaceAnsiChar(c1: Integer; c2: Integer); dispid 145;
    procedure ReplaceFirst(const substr: WideString; const replacement: WideString); dispid 146;
    function Right(NumChars: Integer): WideString; dispid 147;
    function SaveToFile(const filename: WideString; const charset: WideString): Integer; dispid 148;
    procedure Shorten(NumChars: Integer); dispid 149;
    function StrComp(const inStr: WideString; caseSensitive: Integer): Integer; dispid 150;
    procedure StripHtml; dispid 151;
    procedure ToCRLF; dispid 152;
    procedure ToLF; dispid 153;
    procedure Trim; dispid 154;
    procedure Trim2; dispid 155;
    procedure TrimInside; dispid 156;
    procedure Unpluralize; dispid 157;
  end;

// *********************************************************************//
// Interface: IChilkatZipEntry
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C68497C9-2779-48A4-9062-6DAD6EA5E1C6}
// *********************************************************************//
  IChilkatZipEntry = interface(IDispatch)
    ['{C68497C9-2779-48A4-9062-6DAD6EA5E1C6}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_Comment: WideString; safecall;
    procedure Set_Comment(const pVal: WideString); safecall;
    function Get_CompressedLength: Integer; safecall;
    function Get_CompressedLengthStr: WideString; safecall;
    function Get_CompressionLevel: Integer; safecall;
    procedure Set_CompressionLevel(pVal: Integer); safecall;
    function Get_CompressionMethod: Integer; safecall;
    procedure Set_CompressionMethod(pVal: Integer); safecall;
    function Get_Crc: Integer; safecall;
    function Get_EntryID: Integer; safecall;
    function Get_EntryType: Integer; safecall;
    function Get_FileDateTime: TDateTime; safecall;
    procedure Set_FileDateTime(pVal: TDateTime); safecall;
    function Get_FileDateTimeStr: WideString; safecall;
    procedure Set_FileDateTimeStr(const pVal: WideString); safecall;
    function Get_filename: WideString; safecall;
    procedure Set_filename(const pVal: WideString); safecall;
    function Get_HeartbeatMs: Integer; safecall;
    procedure Set_HeartbeatMs(pVal: Integer); safecall;
    function Get_isDirectory: Integer; safecall;
    function Get_TextFlag: Integer; safecall;
    procedure Set_TextFlag(pVal: Integer); safecall;
    function Get_UncompressedLength: Integer; safecall;
    function Get_UncompressedLengthStr: WideString; safecall;
    function Get_FileNameHex: WideString; safecall;
    function AppendData(inData: OleVariant): Integer; safecall;
    function AppendString(const inStr: WideString; const charset: WideString): Integer; safecall;
    function Copy: OleVariant; safecall;
    function CopyToBase64: WideString; safecall;
    function CopyToHex: WideString; safecall;
    function Extract(const dirPath: WideString): Integer; safecall;
    function ExtractInto(const dirPath: WideString): Integer; safecall;
    function GetDt: ICkDateTime; safecall;
    function Inflate: OleVariant; safecall;
    function NextEntry: IChilkatZipEntry; safecall;
    function ReplaceData(inData: OleVariant): Integer; safecall;
    function ReplaceString(const inStr: WideString; const charset: WideString): Integer; safecall;
    procedure SetDt(const dt: ICkDateTime); safecall;
    function UnzipToString(lineEndingBehavior: Integer; const srcCharset: WideString): WideString; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property Comment: WideString read Get_Comment write Set_Comment;
    property CompressedLength: Integer read Get_CompressedLength;
    property CompressedLengthStr: WideString read Get_CompressedLengthStr;
    property CompressionLevel: Integer read Get_CompressionLevel write Set_CompressionLevel;
    property CompressionMethod: Integer read Get_CompressionMethod write Set_CompressionMethod;
    property Crc: Integer read Get_Crc;
    property EntryID: Integer read Get_EntryID;
    property EntryType: Integer read Get_EntryType;
    property FileDateTime: TDateTime read Get_FileDateTime write Set_FileDateTime;
    property FileDateTimeStr: WideString read Get_FileDateTimeStr write Set_FileDateTimeStr;
    property filename: WideString read Get_filename write Set_filename;
    property HeartbeatMs: Integer read Get_HeartbeatMs write Set_HeartbeatMs;
    property isDirectory: Integer read Get_isDirectory;
    property TextFlag: Integer read Get_TextFlag write Set_TextFlag;
    property UncompressedLength: Integer read Get_UncompressedLength;
    property UncompressedLengthStr: WideString read Get_UncompressedLengthStr;
    property FileNameHex: WideString read Get_FileNameHex;
  end;

// *********************************************************************//
// DispIntf:  IChilkatZipEntryDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C68497C9-2779-48A4-9062-6DAD6EA5E1C6}
// *********************************************************************//
  IChilkatZipEntryDisp = dispinterface
    ['{C68497C9-2779-48A4-9062-6DAD6EA5E1C6}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property Comment: WideString dispid 100;
    property CompressedLength: Integer readonly dispid 101;
    property CompressedLengthStr: WideString readonly dispid 102;
    property CompressionLevel: Integer dispid 103;
    property CompressionMethod: Integer dispid 104;
    property Crc: Integer readonly dispid 105;
    property EntryID: Integer readonly dispid 106;
    property EntryType: Integer readonly dispid 107;
    property FileDateTime: TDateTime dispid 108;
    property FileDateTimeStr: WideString dispid 109;
    property filename: WideString dispid 110;
    property HeartbeatMs: Integer dispid 111;
    property isDirectory: Integer readonly dispid 112;
    property TextFlag: Integer dispid 113;
    property UncompressedLength: Integer readonly dispid 114;
    property UncompressedLengthStr: WideString readonly dispid 115;
    property FileNameHex: WideString readonly dispid 133;
    function AppendData(inData: OleVariant): Integer; dispid 116;
    function AppendString(const inStr: WideString; const charset: WideString): Integer; dispid 117;
    function Copy: OleVariant; dispid 118;
    function CopyToBase64: WideString; dispid 119;
    function CopyToHex: WideString; dispid 120;
    function Extract(const dirPath: WideString): Integer; dispid 121;
    function ExtractInto(const dirPath: WideString): Integer; dispid 122;
    function GetDt: ICkDateTime; dispid 123;
    function Inflate: OleVariant; dispid 124;
    function NextEntry: IChilkatZipEntry; dispid 125;
    function ReplaceData(inData: OleVariant): Integer; dispid 126;
    function ReplaceString(const inStr: WideString; const charset: WideString): Integer; dispid 127;
    procedure SetDt(const dt: ICkDateTime); dispid 128;
    function UnzipToString(lineEndingBehavior: Integer; const srcCharset: WideString): WideString; dispid 129;
  end;

// *********************************************************************//
// Interface: IChilkatZip
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {EFE9ADE4-0851-49E2-BC0B-AB26E0353B1B}
// *********************************************************************//
  IChilkatZip = interface(IDispatch)
    ['{EFE9ADE4-0851-49E2-BC0B-AB26E0353B1B}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_AppendFromDir: WideString; safecall;
    procedure Set_AppendFromDir(const pVal: WideString); safecall;
    function Get_AutoRun: WideString; safecall;
    procedure Set_AutoRun(const pVal: WideString); safecall;
    function Get_AutoRunParams: WideString; safecall;
    procedure Set_AutoRunParams(const pVal: WideString); safecall;
    function Get_AutoTemp: Integer; safecall;
    procedure Set_AutoTemp(pVal: Integer); safecall;
    function Get_caseSensitive: Integer; safecall;
    procedure Set_caseSensitive(pVal: Integer); safecall;
    function Get_ClearArchiveAttribute: Integer; safecall;
    procedure Set_ClearArchiveAttribute(pVal: Integer); safecall;
    function Get_ClearReadOnlyAttr: Integer; safecall;
    procedure Set_ClearReadOnlyAttr(pVal: Integer); safecall;
    function Get_Comment: WideString; safecall;
    procedure Set_Comment(const pVal: WideString); safecall;
    function Get_DecryptPassword: WideString; safecall;
    procedure Set_DecryptPassword(const pVal: WideString); safecall;
    function Get_DiscardPaths: Integer; safecall;
    procedure Set_DiscardPaths(pVal: Integer); safecall;
    function Get_EncryptKeyLength: Integer; safecall;
    procedure Set_EncryptKeyLength(pVal: Integer); safecall;
    function Get_EncryptPassword: WideString; safecall;
    procedure Set_EncryptPassword(const pVal: WideString); safecall;
    function Get_Encryption: Integer; safecall;
    procedure Set_Encryption(pVal: Integer); safecall;
    function Get_ExeDefaultDir: WideString; safecall;
    procedure Set_ExeDefaultDir(const pVal: WideString); safecall;
    function Get_ExeFinishNotifier: Integer; safecall;
    procedure Set_ExeFinishNotifier(pVal: Integer); safecall;
    function Get_ExeIconFile: WideString; safecall;
    procedure Set_ExeIconFile(const pVal: WideString); safecall;
    function Get_ExeNoInterface: Integer; safecall;
    procedure Set_ExeNoInterface(pVal: Integer); safecall;
    function Get_ExeSilentProgress: Integer; safecall;
    procedure Set_ExeSilentProgress(pVal: Integer); safecall;
    function Get_ExeTitle: WideString; safecall;
    procedure Set_ExeTitle(const pVal: WideString); safecall;
    function Get_ExeUnzipCaption: WideString; safecall;
    procedure Set_ExeUnzipCaption(const pVal: WideString); safecall;
    function Get_ExeUnzipDir: WideString; safecall;
    procedure Set_ExeUnzipDir(const pVal: WideString); safecall;
    function Get_ExeWaitForSetup: Integer; safecall;
    procedure Set_ExeWaitForSetup(pVal: Integer); safecall;
    function Get_ExeXmlConfig: WideString; safecall;
    procedure Set_ExeXmlConfig(const pVal: WideString); safecall;
    function Get_FileCount: Integer; safecall;
    function Get_filename: WideString; safecall;
    procedure Set_filename(const pVal: WideString); safecall;
    function Get_HasZipFormatErrors: Integer; safecall;
    function Get_HeartbeatMs: Integer; safecall;
    procedure Set_HeartbeatMs(pVal: Integer); safecall;
    function Get_IgnoreAccessDenied: Integer; safecall;
    procedure Set_IgnoreAccessDenied(pVal: Integer); safecall;
    function Get_NumEntries: Integer; safecall;
    function Get_OemCodePage: Integer; safecall;
    procedure Set_OemCodePage(pVal: Integer); safecall;
    function Get_OverwriteExisting: Integer; safecall;
    procedure Set_OverwriteExisting(pVal: Integer); safecall;
    function Get_PasswordProtect: Integer; safecall;
    procedure Set_PasswordProtect(pVal: Integer); safecall;
    function Get_PathPrefix: WideString; safecall;
    procedure Set_PathPrefix(const pVal: WideString); safecall;
    function Get_TempDir: WideString; safecall;
    procedure Set_TempDir(const pVal: WideString); safecall;
    function Get_TextFlag: Integer; safecall;
    procedure Set_TextFlag(pVal: Integer); safecall;
    function Get_Zipx: Integer; safecall;
    procedure Set_Zipx(pVal: Integer); safecall;
    function Get_ZipxDefaultAlg: WideString; safecall;
    procedure Set_ZipxDefaultAlg(const pVal: WideString); safecall;
    function AddEmbedded(const exeFilename: WideString; const resourceName: WideString; 
                         const zipFilename: WideString): Integer; safecall;
    procedure AddNoCompressExtension(const fileExtension: WideString); safecall;
    function AppendBase64(const filename: WideString; const encodedCompressedData: WideString): IChilkatZipEntry; safecall;
    function AppendCompressed(const filename: WideString; inData: OleVariant): IChilkatZipEntry; safecall;
    function AppendData(const filename: WideString; inData: OleVariant): IChilkatZipEntry; safecall;
    function AppendFiles(const filePattern: WideString; recurse: Integer): Integer; safecall;
    function AppendFilesEx(const filePattern: WideString; recurse: Integer; saveExtraPath: Integer; 
                           archiveOnly: Integer; includeHidden: Integer; includeSystem: Integer): Integer; safecall;
    function AppendHex(const filename: WideString; const encodedCompressedData: WideString): IChilkatZipEntry; safecall;
    function AppendMultiple(const fileSpecs: ICkStringArray; recurse: Integer): Integer; safecall;
    function AppendNew(const filename: WideString): IChilkatZipEntry; safecall;
    function AppendNewDir(const dirName: WideString): IChilkatZipEntry; safecall;
    function AppendOneFileOrDir(const fileOrDirName: WideString; saveExtraPath: Integer): Integer; safecall;
    function AppendString(const filename: WideString; const str: WideString): IChilkatZipEntry; safecall;
    function AppendString2(const filename: WideString; const str: WideString; 
                           const charset: WideString): IChilkatZipEntry; safecall;
    function AppendZip(const zipFilename: WideString): Integer; safecall;
    procedure CloseZip; safecall;
    function DeleteEntry(const entry: IChilkatZipEntry): Integer; safecall;
    procedure ExcludeDir(const dirName: WideString); safecall;
    function Extract(const dirPath: WideString): Integer; safecall;
    function FirstEntry: IChilkatZipEntry; safecall;
    function FirstMatchingEntry(const pattern: WideString): IChilkatZipEntry; safecall;
    function GetDirectoryAsXML: WideString; safecall;
    function GetEntryByID(EntryID: Integer): IChilkatZipEntry; safecall;
    function GetEntryByIndex(index: Integer): IChilkatZipEntry; safecall;
    function GetEntryByName(const entryName: WideString): IChilkatZipEntry; safecall;
    function GetExclusions: ICkStringArray; safecall;
    function GetExeConfigParam(const name: WideString): WideString; safecall;
    function InsertNew(const filename: WideString; beforeIndex: Integer): IChilkatZipEntry; safecall;
    function IsNoCompressExtension(const fileExtension: WideString): Integer; safecall;
    function IsPasswordProtected(const zipFilename: WideString): Integer; safecall;
    function IsUnlocked: Integer; safecall;
    function NewZip(const zipFilename: WideString): Integer; safecall;
    function OpenEmbedded(const exeFilename: WideString; const resourceName: WideString): Integer; safecall;
    function OpenFromByteData(byteData: OleVariant): Integer; safecall;
    function OpenFromMemory(inData: OleVariant): Integer; safecall;
    function OpenMyEmbedded(const resourceName: WideString): Integer; safecall;
    function OpenZip(const zipFilename: WideString): Integer; safecall;
    function QuickAppend(const zipFilename: WideString): Integer; safecall;
    function RemoveEmbedded(const exeFilename: WideString; const resourceName: WideString): Integer; safecall;
    procedure RemoveNoCompressExtension(const fileExtension: WideString); safecall;
    function ReplaceEmbedded(const exeFilename: WideString; const resourceName: WideString; 
                             const zipFilename: WideString): Integer; safecall;
    procedure SetCompressionLevel(level: Integer); safecall;
    procedure SetExclusions(const excludePatterns: ICkStringArray); safecall;
    procedure SetExeConfigParam(const name: WideString; const value: WideString); safecall;
    procedure SetPassword(const password: WideString); safecall;
    function UnlockComponent(const regCode: WideString): Integer; safecall;
    function Unzip(const dirPath: WideString): Integer; safecall;
    function UnzipInto(const dirPath: WideString): Integer; safecall;
    function UnzipMatching(const dirPath: WideString; const pattern: WideString; verbose: Integer): Integer; safecall;
    function UnzipMatchingInto(const dirPath: WideString; const pattern: WideString; 
                               verbose: Integer): Integer; safecall;
    function UnzipNewer(const dirPath: WideString): Integer; safecall;
    function VerifyPassword: Integer; safecall;
    function WriteExe(const exeFilename: WideString): Integer; safecall;
    function WriteExe2(const exePath: WideString; const destExePath: WideString; 
                       bAesEncrypt: Integer; KeyLength: Integer; const password: WideString): Integer; safecall;
    function WriteExeToMemory: OleVariant; safecall;
    function WriteToMemory: OleVariant; safecall;
    function WriteZip: Integer; safecall;
    function WriteZipAndClose: Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property AppendFromDir: WideString read Get_AppendFromDir write Set_AppendFromDir;
    property AutoRun: WideString read Get_AutoRun write Set_AutoRun;
    property AutoRunParams: WideString read Get_AutoRunParams write Set_AutoRunParams;
    property AutoTemp: Integer read Get_AutoTemp write Set_AutoTemp;
    property caseSensitive: Integer read Get_caseSensitive write Set_caseSensitive;
    property ClearArchiveAttribute: Integer read Get_ClearArchiveAttribute write Set_ClearArchiveAttribute;
    property ClearReadOnlyAttr: Integer read Get_ClearReadOnlyAttr write Set_ClearReadOnlyAttr;
    property Comment: WideString read Get_Comment write Set_Comment;
    property DecryptPassword: WideString read Get_DecryptPassword write Set_DecryptPassword;
    property DiscardPaths: Integer read Get_DiscardPaths write Set_DiscardPaths;
    property EncryptKeyLength: Integer read Get_EncryptKeyLength write Set_EncryptKeyLength;
    property EncryptPassword: WideString read Get_EncryptPassword write Set_EncryptPassword;
    property Encryption: Integer read Get_Encryption write Set_Encryption;
    property ExeDefaultDir: WideString read Get_ExeDefaultDir write Set_ExeDefaultDir;
    property ExeFinishNotifier: Integer read Get_ExeFinishNotifier write Set_ExeFinishNotifier;
    property ExeIconFile: WideString read Get_ExeIconFile write Set_ExeIconFile;
    property ExeNoInterface: Integer read Get_ExeNoInterface write Set_ExeNoInterface;
    property ExeSilentProgress: Integer read Get_ExeSilentProgress write Set_ExeSilentProgress;
    property ExeTitle: WideString read Get_ExeTitle write Set_ExeTitle;
    property ExeUnzipCaption: WideString read Get_ExeUnzipCaption write Set_ExeUnzipCaption;
    property ExeUnzipDir: WideString read Get_ExeUnzipDir write Set_ExeUnzipDir;
    property ExeWaitForSetup: Integer read Get_ExeWaitForSetup write Set_ExeWaitForSetup;
    property ExeXmlConfig: WideString read Get_ExeXmlConfig write Set_ExeXmlConfig;
    property FileCount: Integer read Get_FileCount;
    property filename: WideString read Get_filename write Set_filename;
    property HasZipFormatErrors: Integer read Get_HasZipFormatErrors;
    property HeartbeatMs: Integer read Get_HeartbeatMs write Set_HeartbeatMs;
    property IgnoreAccessDenied: Integer read Get_IgnoreAccessDenied write Set_IgnoreAccessDenied;
    property NumEntries: Integer read Get_NumEntries;
    property OemCodePage: Integer read Get_OemCodePage write Set_OemCodePage;
    property OverwriteExisting: Integer read Get_OverwriteExisting write Set_OverwriteExisting;
    property PasswordProtect: Integer read Get_PasswordProtect write Set_PasswordProtect;
    property PathPrefix: WideString read Get_PathPrefix write Set_PathPrefix;
    property TempDir: WideString read Get_TempDir write Set_TempDir;
    property TextFlag: Integer read Get_TextFlag write Set_TextFlag;
    property Zipx: Integer read Get_Zipx write Set_Zipx;
    property ZipxDefaultAlg: WideString read Get_ZipxDefaultAlg write Set_ZipxDefaultAlg;
  end;

// *********************************************************************//
// DispIntf:  IChilkatZipDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {EFE9ADE4-0851-49E2-BC0B-AB26E0353B1B}
// *********************************************************************//
  IChilkatZipDisp = dispinterface
    ['{EFE9ADE4-0851-49E2-BC0B-AB26E0353B1B}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property AppendFromDir: WideString dispid 100;
    property AutoRun: WideString dispid 101;
    property AutoRunParams: WideString dispid 102;
    property AutoTemp: Integer dispid 103;
    property caseSensitive: Integer dispid 104;
    property ClearArchiveAttribute: Integer dispid 105;
    property ClearReadOnlyAttr: Integer dispid 106;
    property Comment: WideString dispid 107;
    property DecryptPassword: WideString dispid 108;
    property DiscardPaths: Integer dispid 109;
    property EncryptKeyLength: Integer dispid 110;
    property EncryptPassword: WideString dispid 111;
    property Encryption: Integer dispid 112;
    property ExeDefaultDir: WideString dispid 113;
    property ExeFinishNotifier: Integer dispid 114;
    property ExeIconFile: WideString dispid 115;
    property ExeNoInterface: Integer dispid 116;
    property ExeSilentProgress: Integer dispid 117;
    property ExeTitle: WideString dispid 118;
    property ExeUnzipCaption: WideString dispid 119;
    property ExeUnzipDir: WideString dispid 120;
    property ExeWaitForSetup: Integer dispid 121;
    property ExeXmlConfig: WideString dispid 122;
    property FileCount: Integer readonly dispid 123;
    property filename: WideString dispid 124;
    property HasZipFormatErrors: Integer readonly dispid 125;
    property HeartbeatMs: Integer dispid 126;
    property IgnoreAccessDenied: Integer dispid 127;
    property NumEntries: Integer readonly dispid 128;
    property OemCodePage: Integer dispid 129;
    property OverwriteExisting: Integer dispid 130;
    property PasswordProtect: Integer dispid 131;
    property PathPrefix: WideString dispid 132;
    property TempDir: WideString dispid 134;
    property TextFlag: Integer dispid 135;
    property Zipx: Integer dispid 136;
    property ZipxDefaultAlg: WideString dispid 137;
    function AddEmbedded(const exeFilename: WideString; const resourceName: WideString; 
                         const zipFilename: WideString): Integer; dispid 138;
    procedure AddNoCompressExtension(const fileExtension: WideString); dispid 139;
    function AppendBase64(const filename: WideString; const encodedCompressedData: WideString): IChilkatZipEntry; dispid 140;
    function AppendCompressed(const filename: WideString; inData: OleVariant): IChilkatZipEntry; dispid 141;
    function AppendData(const filename: WideString; inData: OleVariant): IChilkatZipEntry; dispid 142;
    function AppendFiles(const filePattern: WideString; recurse: Integer): Integer; dispid 143;
    function AppendFilesEx(const filePattern: WideString; recurse: Integer; saveExtraPath: Integer; 
                           archiveOnly: Integer; includeHidden: Integer; includeSystem: Integer): Integer; dispid 144;
    function AppendHex(const filename: WideString; const encodedCompressedData: WideString): IChilkatZipEntry; dispid 145;
    function AppendMultiple(const fileSpecs: ICkStringArray; recurse: Integer): Integer; dispid 146;
    function AppendNew(const filename: WideString): IChilkatZipEntry; dispid 147;
    function AppendNewDir(const dirName: WideString): IChilkatZipEntry; dispid 148;
    function AppendOneFileOrDir(const fileOrDirName: WideString; saveExtraPath: Integer): Integer; dispid 149;
    function AppendString(const filename: WideString; const str: WideString): IChilkatZipEntry; dispid 150;
    function AppendString2(const filename: WideString; const str: WideString; 
                           const charset: WideString): IChilkatZipEntry; dispid 151;
    function AppendZip(const zipFilename: WideString): Integer; dispid 152;
    procedure CloseZip; dispid 153;
    function DeleteEntry(const entry: IChilkatZipEntry): Integer; dispid 154;
    procedure ExcludeDir(const dirName: WideString); dispid 155;
    function Extract(const dirPath: WideString): Integer; dispid 156;
    function FirstEntry: IChilkatZipEntry; dispid 157;
    function FirstMatchingEntry(const pattern: WideString): IChilkatZipEntry; dispid 158;
    function GetDirectoryAsXML: WideString; dispid 159;
    function GetEntryByID(EntryID: Integer): IChilkatZipEntry; dispid 160;
    function GetEntryByIndex(index: Integer): IChilkatZipEntry; dispid 161;
    function GetEntryByName(const entryName: WideString): IChilkatZipEntry; dispid 162;
    function GetExclusions: ICkStringArray; dispid 163;
    function GetExeConfigParam(const name: WideString): WideString; dispid 164;
    function InsertNew(const filename: WideString; beforeIndex: Integer): IChilkatZipEntry; dispid 165;
    function IsNoCompressExtension(const fileExtension: WideString): Integer; dispid 166;
    function IsPasswordProtected(const zipFilename: WideString): Integer; dispid 167;
    function IsUnlocked: Integer; dispid 168;
    function NewZip(const zipFilename: WideString): Integer; dispid 169;
    function OpenEmbedded(const exeFilename: WideString; const resourceName: WideString): Integer; dispid 170;
    function OpenFromByteData(byteData: OleVariant): Integer; dispid 171;
    function OpenFromMemory(inData: OleVariant): Integer; dispid 172;
    function OpenMyEmbedded(const resourceName: WideString): Integer; dispid 174;
    function OpenZip(const zipFilename: WideString): Integer; dispid 175;
    function QuickAppend(const zipFilename: WideString): Integer; dispid 176;
    function RemoveEmbedded(const exeFilename: WideString; const resourceName: WideString): Integer; dispid 177;
    procedure RemoveNoCompressExtension(const fileExtension: WideString); dispid 178;
    function ReplaceEmbedded(const exeFilename: WideString; const resourceName: WideString; 
                             const zipFilename: WideString): Integer; dispid 179;
    procedure SetCompressionLevel(level: Integer); dispid 180;
    procedure SetExclusions(const excludePatterns: ICkStringArray); dispid 181;
    procedure SetExeConfigParam(const name: WideString; const value: WideString); dispid 182;
    procedure SetPassword(const password: WideString); dispid 183;
    function UnlockComponent(const regCode: WideString): Integer; dispid 184;
    function Unzip(const dirPath: WideString): Integer; dispid 185;
    function UnzipInto(const dirPath: WideString): Integer; dispid 186;
    function UnzipMatching(const dirPath: WideString; const pattern: WideString; verbose: Integer): Integer; dispid 187;
    function UnzipMatchingInto(const dirPath: WideString; const pattern: WideString; 
                               verbose: Integer): Integer; dispid 188;
    function UnzipNewer(const dirPath: WideString): Integer; dispid 189;
    function VerifyPassword: Integer; dispid 190;
    function WriteExe(const exeFilename: WideString): Integer; dispid 191;
    function WriteExe2(const exePath: WideString; const destExePath: WideString; 
                       bAesEncrypt: Integer; KeyLength: Integer; const password: WideString): Integer; dispid 192;
    function WriteExeToMemory: OleVariant; dispid 193;
    function WriteToMemory: OleVariant; dispid 194;
    function WriteZip: Integer; dispid 195;
    function WriteZipAndClose: Integer; dispid 196;
  end;

// *********************************************************************//
// Interface: IChilkatXmp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {17F00BC0-F47D-4AC2-9C20-16D73BA9D42D}
// *********************************************************************//
  IChilkatXmp = interface(IDispatch)
    ['{17F00BC0-F47D-4AC2-9C20-16D73BA9D42D}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_StructInnerDescrip: Integer; safecall;
    procedure Set_StructInnerDescrip(pVal: Integer); safecall;
    function Get_NumEmbedded: Integer; safecall;
    function AddArray(const xml: IChilkatXml; const arrType: WideString; 
                      const propName: WideString; const values: ICkStringArray): Integer; safecall;
    procedure AddNsMapping(const ns: WideString; const uri: WideString); safecall;
    function AddSimpleDate(const iXml: IChilkatXml; const propName: WideString; propVal: TDateTime): Integer; safecall;
    function AddSimpleInt(const iXml: IChilkatXml; const propName: WideString; propVal: Integer): Integer; safecall;
    function AddSimpleStr(const iXml: IChilkatXml; const propName: WideString; 
                          const propVal: WideString): Integer; safecall;
    function AddStructProp(const IChilkatXml: IChilkatXml; const structName: WideString; 
                           const propName: WideString; const propValue: WideString): Integer; safecall;
    function Append(const iXml: IChilkatXml): Integer; safecall;
    function DateToString(d: TDateTime): WideString; safecall;
    function GetArray(const iXml: IChilkatXml; const propName: WideString): ICkStringArray; safecall;
    function GetEmbedded(index: Integer): IChilkatXml; safecall;
    function GetProperty(const iXml: IChilkatXml; const propName: WideString): IChilkatXml; safecall;
    function GetSimpleDate(const iXml: IChilkatXml; const propName: WideString): TDateTime; safecall;
    function GetSimpleInt(const iXml: IChilkatXml; const propName: WideString): Integer; safecall;
    function GetSimpleStr(const iXml: IChilkatXml; const propName: WideString): WideString; safecall;
    function GetStructPropNames(const iXml: IChilkatXml; const structName: WideString): ICkStringArray; safecall;
    function GetStructValue(const iXml: IChilkatXml; const structName: WideString; 
                            const propName: WideString): WideString; safecall;
    function LoadAppFile(const filename: WideString): Integer; safecall;
    function LoadFromBuffer(fileData: OleVariant; const ext: WideString): Integer; safecall;
    function NewXmp: IChilkatXml; safecall;
    function RemoveAllEmbedded: Integer; safecall;
    function RemoveArray(const iXml: IChilkatXml; const propName: WideString): Integer; safecall;
    function RemoveEmbedded(index: Integer): Integer; safecall;
    procedure RemoveNsMapping(const ns: WideString); safecall;
    function RemoveSimple(const iXml: IChilkatXml; const propName: WideString): Integer; safecall;
    function RemoveStruct(const iXml: IChilkatXml; const structName: WideString): Integer; safecall;
    function RemoveStructProp(const iXml: IChilkatXml; const structName: WideString; 
                              const propName: WideString): Integer; safecall;
    function SaveAppFile(const filename: WideString): Integer; safecall;
    function SaveToBuffer: OleVariant; safecall;
    function StringToDate(const str: WideString): TDateTime; safecall;
    function UnlockComponent(const unlockCode: WideString): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property StructInnerDescrip: Integer read Get_StructInnerDescrip write Set_StructInnerDescrip;
    property NumEmbedded: Integer read Get_NumEmbedded;
  end;

// *********************************************************************//
// DispIntf:  IChilkatXmpDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {17F00BC0-F47D-4AC2-9C20-16D73BA9D42D}
// *********************************************************************//
  IChilkatXmpDisp = dispinterface
    ['{17F00BC0-F47D-4AC2-9C20-16D73BA9D42D}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property StructInnerDescrip: Integer dispid 100;
    property NumEmbedded: Integer readonly dispid 101;
    function AddArray(const xml: IChilkatXml; const arrType: WideString; 
                      const propName: WideString; const values: ICkStringArray): Integer; dispid 102;
    procedure AddNsMapping(const ns: WideString; const uri: WideString); dispid 103;
    function AddSimpleDate(const iXml: IChilkatXml; const propName: WideString; propVal: TDateTime): Integer; dispid 104;
    function AddSimpleInt(const iXml: IChilkatXml; const propName: WideString; propVal: Integer): Integer; dispid 105;
    function AddSimpleStr(const iXml: IChilkatXml; const propName: WideString; 
                          const propVal: WideString): Integer; dispid 106;
    function AddStructProp(const IChilkatXml: IChilkatXml; const structName: WideString; 
                           const propName: WideString; const propValue: WideString): Integer; dispid 107;
    function Append(const iXml: IChilkatXml): Integer; dispid 108;
    function DateToString(d: TDateTime): WideString; dispid 109;
    function GetArray(const iXml: IChilkatXml; const propName: WideString): ICkStringArray; dispid 110;
    function GetEmbedded(index: Integer): IChilkatXml; dispid 111;
    function GetProperty(const iXml: IChilkatXml; const propName: WideString): IChilkatXml; dispid 112;
    function GetSimpleDate(const iXml: IChilkatXml; const propName: WideString): TDateTime; dispid 113;
    function GetSimpleInt(const iXml: IChilkatXml; const propName: WideString): Integer; dispid 114;
    function GetSimpleStr(const iXml: IChilkatXml; const propName: WideString): WideString; dispid 115;
    function GetStructPropNames(const iXml: IChilkatXml; const structName: WideString): ICkStringArray; dispid 116;
    function GetStructValue(const iXml: IChilkatXml; const structName: WideString; 
                            const propName: WideString): WideString; dispid 117;
    function LoadAppFile(const filename: WideString): Integer; dispid 118;
    function LoadFromBuffer(fileData: OleVariant; const ext: WideString): Integer; dispid 119;
    function NewXmp: IChilkatXml; dispid 120;
    function RemoveAllEmbedded: Integer; dispid 121;
    function RemoveArray(const iXml: IChilkatXml; const propName: WideString): Integer; dispid 122;
    function RemoveEmbedded(index: Integer): Integer; dispid 123;
    procedure RemoveNsMapping(const ns: WideString); dispid 124;
    function RemoveSimple(const iXml: IChilkatXml; const propName: WideString): Integer; dispid 125;
    function RemoveStruct(const iXml: IChilkatXml; const structName: WideString): Integer; dispid 126;
    function RemoveStructProp(const iXml: IChilkatXml; const structName: WideString; 
                              const propName: WideString): Integer; dispid 127;
    function SaveAppFile(const filename: WideString): Integer; dispid 128;
    function SaveToBuffer: OleVariant; dispid 129;
    function StringToDate(const str: WideString): TDateTime; dispid 130;
    function UnlockComponent(const unlockCode: WideString): Integer; dispid 131;
  end;

// *********************************************************************//
// Interface: IChilkatXml
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2077C1B5-FBD0-40DF-B7AA-E07CBA589CB0}
// *********************************************************************//
  IChilkatXml = interface(IDispatch)
    ['{2077C1B5-FBD0-40DF-B7AA-E07CBA589CB0}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_Cdata: Integer; safecall;
    procedure Set_Cdata(pVal: Integer); safecall;
    function Get_Content: WideString; safecall;
    procedure Set_Content(const pVal: WideString); safecall;
    function Get_ContentInt: Integer; safecall;
    procedure Set_ContentInt(pVal: Integer); safecall;
    function Get_DocType: WideString; safecall;
    procedure Set_DocType(const pVal: WideString); safecall;
    function Get_EmitXmlDecl: Integer; safecall;
    procedure Set_EmitXmlDecl(pVal: Integer); safecall;
    function Get_encoding: WideString; safecall;
    procedure Set_encoding(const pVal: WideString); safecall;
    function Get_NumAttributes: Integer; safecall;
    function Get_NumChildren: Integer; safecall;
    function Get_SortCaseInsensitive: Integer; safecall;
    procedure Set_SortCaseInsensitive(pVal: Integer); safecall;
    function Get_Standalone: Integer; safecall;
    procedure Set_Standalone(pVal: Integer); safecall;
    function Get_Tag: WideString; safecall;
    procedure Set_Tag(const pVal: WideString); safecall;
    function Get_TreeId: Integer; safecall;
    function AccumulateTagContent(const Tag: WideString; const skipTags: WideString): WideString; safecall;
    function AddAttribute(const name: WideString; const value: WideString): Integer; safecall;
    function AddAttributeInt(const name: WideString; value: Integer): Integer; safecall;
    function AddChildTree(const tree: IChilkatXml): Integer; safecall;
    procedure AddOrUpdateAttribute(const name: WideString; const value: WideString); safecall;
    procedure AddOrUpdateAttributeI(const name: WideString; value: Integer); safecall;
    procedure AddStyleSheet(const styleSheet: WideString); safecall;
    procedure AddToAttribute(const name: WideString; amount: Integer); safecall;
    procedure AddToChildContent(const Tag: WideString; amount: Integer); safecall;
    procedure AddToContent(amount: Integer); safecall;
    function AppendToContent(const str: WideString): Integer; safecall;
    function BEncodeContent(const charset: WideString; inData: OleVariant): Integer; safecall;
    function ChildContentMatches(const Tag: WideString; const pattern: WideString; 
                                 caseSensitive: Integer): Integer; safecall;
    function ChilkatPath(const pathCmd: WideString): WideString; safecall;
    procedure Clear; safecall;
    function ContentMatches(const pattern: WideString; caseSensitive: Integer): Integer; safecall;
    procedure Copy(const node: IChilkatXml); safecall;
    procedure CopyRef(const node: IChilkatXml); safecall;
    function DecodeContent: OleVariant; safecall;
    function DecodeEntities(const str: WideString): WideString; safecall;
    function DecryptContent(const password: WideString): Integer; safecall;
    function EncryptContent(const password: WideString): Integer; safecall;
    function ExtractChildByIndex(index: Integer): IChilkatXml; safecall;
    function ExtractChildByName(const Tag: WideString; const attrName: WideString; 
                                const attrValue: WideString): IChilkatXml; safecall;
    function FindChild(const Tag: WideString): IChilkatXml; safecall;
    function FindChild2(const Tag: WideString): Integer; safecall;
    function FindNextRecord(const Tag: WideString; const contentPattern: WideString): IChilkatXml; safecall;
    function FindOrAddNewChild(const Tag: WideString): IChilkatXml; safecall;
    function FirstChild: IChilkatXml; safecall;
    function FirstChild2: Integer; safecall;
    function GetAttrValue(const name: WideString): WideString; safecall;
    function GetAttrValueInt(const name: WideString): Integer; safecall;
    function GetAttributeName(index: Integer): WideString; safecall;
    function GetAttributeValue(index: Integer): WideString; safecall;
    function GetAttributeValueInt(index: Integer): Integer; safecall;
    function GetBinaryContent(unzipFlag: Integer; decryptFlag: Integer; const password: WideString): OleVariant; safecall;
    function GetChild(index: Integer): IChilkatXml; safecall;
    function GetChild2(index: Integer): Integer; safecall;
    function GetChildBoolValue(const Tag: WideString): Integer; safecall;
    function GetChildContent(const Tag: WideString): WideString; safecall;
    function GetChildContentByIndex(index: Integer): WideString; safecall;
    function GetChildExact(const Tag: WideString; const Content: WideString): IChilkatXml; safecall;
    function GetChildIntValue(const Tag: WideString): Integer; safecall;
    function GetChildTag(index: Integer): WideString; safecall;
    function GetChildTagByIndex(index: Integer): WideString; safecall;
    function GetChildWithAttr(const Tag: WideString; const attrName: WideString; 
                              const attrValue: WideString): IChilkatXml; safecall;
    function GetChildWithContent(const Content: WideString): IChilkatXml; safecall;
    function GetChildWithTag(const Tag: WideString): IChilkatXml; safecall;
    function GetNthChildWithTag(const Tag: WideString; n: Integer): IChilkatXml; safecall;
    function GetNthChildWithTag2(const Tag: WideString; n: Integer): Integer; safecall;
    function GetParent: IChilkatXml; safecall;
    function GetParent2: Integer; safecall;
    function GetRoot: IChilkatXml; safecall;
    procedure GetRoot2; safecall;
    function GetSelf: IChilkatXml; safecall;
    function GetXml: WideString; safecall;
    function HasAttrWithValue(const name: WideString; const value: WideString): Integer; safecall;
    function HasAttribute(const name: WideString): Integer; safecall;
    function HasChildWithContent(const Content: WideString): Integer; safecall;
    function HasChildWithTag(const Tag: WideString): Integer; safecall;
    function HasChildWithTagAndContent(const Tag: WideString; const Content: WideString): Integer; safecall;
    procedure InsertChildTreeAfter(index: Integer; const tree: IChilkatXml); safecall;
    procedure InsertChildTreeBefore(index: Integer; const tree: IChilkatXml); safecall;
    function LastChild: IChilkatXml; safecall;
    function LastChild2: Integer; safecall;
    function LoadXml(const xmlData: WideString): Integer; safecall;
    function LoadXml2(const xmlData: WideString; autoTrim: Integer): Integer; safecall;
    function LoadXmlFile(const filename: WideString): Integer; safecall;
    function LoadXmlFile2(const filename: WideString; autoTrim: Integer): Integer; safecall;
    function NewChild(const Tag: WideString; const Content: WideString): IChilkatXml; safecall;
    procedure NewChild2(const Tag: WideString; const Content: WideString); safecall;
    function NewChildAfter(index: Integer; const Tag: WideString; const Content: WideString): IChilkatXml; safecall;
    function NewChildBefore(index: Integer; const Tag: WideString; const Content: WideString): IChilkatXml; safecall;
    procedure NewChildInt2(const Tag: WideString; value: Integer); safecall;
    function NextSibling: IChilkatXml; safecall;
    function NextSibling2: Integer; safecall;
    function NumChildrenHavingTag(const Tag: WideString): Integer; safecall;
    function PreviousSibling: IChilkatXml; safecall;
    function PreviousSibling2: Integer; safecall;
    function QEncodeContent(const charset: WideString; inData: OleVariant): Integer; safecall;
    function RemoveAllAttributes: Integer; safecall;
    procedure RemoveAllChildren; safecall;
    function RemoveAttribute(const name: WideString): Integer; safecall;
    procedure RemoveChild(const Tag: WideString); safecall;
    procedure RemoveChildByIndex(index: Integer); safecall;
    procedure RemoveChildWithContent(const Content: WideString); safecall;
    procedure RemoveFromTree; safecall;
    function SaveBinaryContent(const filename: WideString; unzipFlag: Integer; 
                               decryptFlag: Integer; const password: WideString): Integer; safecall;
    function SaveXml(const filename: WideString): Integer; safecall;
    function SearchAllForContent(const afterPtr: IChilkatXml; const contentPattern: WideString): IChilkatXml; safecall;
    function SearchAllForContent2(const afterPtr: IChilkatXml; const contentPattern: WideString): Integer; safecall;
    function SearchForAttribute(const afterPtr: IChilkatXml; const Tag: WideString; 
                                const attr: WideString; const valuePattern: WideString): IChilkatXml; safecall;
    function SearchForAttribute2(const afterPtr: IChilkatXml; const Tag: WideString; 
                                 const attr: WideString; const valuePattern: WideString): Integer; safecall;
    function SearchForContent(const afterPtr: IChilkatXml; const Tag: WideString; 
                              const contentPattern: WideString): IChilkatXml; safecall;
    function SearchForContent2(const afterPtr: IChilkatXml; const Tag: WideString; 
                               const contentPattern: WideString): Integer; safecall;
    function SearchForTag(const afterPtr: IChilkatXml; const Tag: WideString): IChilkatXml; safecall;
    function SearchForTag2(const afterPtr: IChilkatXml; const Tag: WideString): Integer; safecall;
    function SetBinaryContent(inData: OleVariant; zipFlag: Integer; encryptFlag: Integer; 
                              const password: WideString): Integer; safecall;
    function SetBinaryContentFromFile(const filename: WideString; zipFlag: Integer; 
                                      encryptFlag: Integer; const password: WideString): Integer; safecall;
    procedure SortByAttribute(const attrName: WideString; ascending: Integer); safecall;
    procedure SortByAttributeInt(const attrName: WideString; ascending: Integer); safecall;
    procedure SortByContent(ascending: Integer); safecall;
    procedure SortByTag(ascending: Integer); safecall;
    procedure SortRecordsByAttribute(const sortTag: WideString; const attrName: WideString; 
                                     ascending: Integer); safecall;
    procedure SortRecordsByContent(const sortTag: WideString; ascending: Integer); safecall;
    procedure SortRecordsByContentInt(const sortTag: WideString; ascending: Integer); safecall;
    function SwapNode(const node: IChilkatXml): Integer; safecall;
    function SwapTree(const tree: IChilkatXml): Integer; safecall;
    function TagContent(const Tag: WideString): WideString; safecall;
    function TagEquals(const Tag: WideString): Integer; safecall;
    function UnzipContent: Integer; safecall;
    function UnzipTree: Integer; safecall;
    function UpdateAttribute(const attrName: WideString; const attrValue: WideString): Integer; safecall;
    function UpdateAttributeInt(const attrName: WideString; value: Integer): Integer; safecall;
    procedure UpdateChildContent(const Tag: WideString; const value: WideString); safecall;
    procedure UpdateChildContentInt(const Tag: WideString; value: Integer); safecall;
    function ZipContent: Integer; safecall;
    function ZipTree: Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property Cdata: Integer read Get_Cdata write Set_Cdata;
    property Content: WideString read Get_Content write Set_Content;
    property ContentInt: Integer read Get_ContentInt write Set_ContentInt;
    property DocType: WideString read Get_DocType write Set_DocType;
    property EmitXmlDecl: Integer read Get_EmitXmlDecl write Set_EmitXmlDecl;
    property encoding: WideString read Get_encoding write Set_encoding;
    property NumAttributes: Integer read Get_NumAttributes;
    property NumChildren: Integer read Get_NumChildren;
    property SortCaseInsensitive: Integer read Get_SortCaseInsensitive write Set_SortCaseInsensitive;
    property Standalone: Integer read Get_Standalone write Set_Standalone;
    property Tag: WideString read Get_Tag write Set_Tag;
    property TreeId: Integer read Get_TreeId;
  end;

// *********************************************************************//
// DispIntf:  IChilkatXmlDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2077C1B5-FBD0-40DF-B7AA-E07CBA589CB0}
// *********************************************************************//
  IChilkatXmlDisp = dispinterface
    ['{2077C1B5-FBD0-40DF-B7AA-E07CBA589CB0}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property Cdata: Integer dispid 100;
    property Content: WideString dispid 101;
    property ContentInt: Integer dispid 102;
    property DocType: WideString dispid 103;
    property EmitXmlDecl: Integer dispid 104;
    property encoding: WideString dispid 105;
    property NumAttributes: Integer readonly dispid 106;
    property NumChildren: Integer readonly dispid 107;
    property SortCaseInsensitive: Integer dispid 108;
    property Standalone: Integer dispid 109;
    property Tag: WideString dispid 110;
    property TreeId: Integer readonly dispid 111;
    function AccumulateTagContent(const Tag: WideString; const skipTags: WideString): WideString; dispid 112;
    function AddAttribute(const name: WideString; const value: WideString): Integer; dispid 113;
    function AddAttributeInt(const name: WideString; value: Integer): Integer; dispid 114;
    function AddChildTree(const tree: IChilkatXml): Integer; dispid 115;
    procedure AddOrUpdateAttribute(const name: WideString; const value: WideString); dispid 116;
    procedure AddOrUpdateAttributeI(const name: WideString; value: Integer); dispid 117;
    procedure AddStyleSheet(const styleSheet: WideString); dispid 118;
    procedure AddToAttribute(const name: WideString; amount: Integer); dispid 119;
    procedure AddToChildContent(const Tag: WideString; amount: Integer); dispid 120;
    procedure AddToContent(amount: Integer); dispid 121;
    function AppendToContent(const str: WideString): Integer; dispid 122;
    function BEncodeContent(const charset: WideString; inData: OleVariant): Integer; dispid 123;
    function ChildContentMatches(const Tag: WideString; const pattern: WideString; 
                                 caseSensitive: Integer): Integer; dispid 124;
    function ChilkatPath(const pathCmd: WideString): WideString; dispid 125;
    procedure Clear; dispid 126;
    function ContentMatches(const pattern: WideString; caseSensitive: Integer): Integer; dispid 127;
    procedure Copy(const node: IChilkatXml); dispid 128;
    procedure CopyRef(const node: IChilkatXml); dispid 129;
    function DecodeContent: OleVariant; dispid 130;
    function DecodeEntities(const str: WideString): WideString; dispid 131;
    function DecryptContent(const password: WideString): Integer; dispid 132;
    function EncryptContent(const password: WideString): Integer; dispid 133;
    function ExtractChildByIndex(index: Integer): IChilkatXml; dispid 134;
    function ExtractChildByName(const Tag: WideString; const attrName: WideString; 
                                const attrValue: WideString): IChilkatXml; dispid 135;
    function FindChild(const Tag: WideString): IChilkatXml; dispid 136;
    function FindChild2(const Tag: WideString): Integer; dispid 137;
    function FindNextRecord(const Tag: WideString; const contentPattern: WideString): IChilkatXml; dispid 138;
    function FindOrAddNewChild(const Tag: WideString): IChilkatXml; dispid 139;
    function FirstChild: IChilkatXml; dispid 140;
    function FirstChild2: Integer; dispid 141;
    function GetAttrValue(const name: WideString): WideString; dispid 142;
    function GetAttrValueInt(const name: WideString): Integer; dispid 143;
    function GetAttributeName(index: Integer): WideString; dispid 144;
    function GetAttributeValue(index: Integer): WideString; dispid 145;
    function GetAttributeValueInt(index: Integer): Integer; dispid 146;
    function GetBinaryContent(unzipFlag: Integer; decryptFlag: Integer; const password: WideString): OleVariant; dispid 147;
    function GetChild(index: Integer): IChilkatXml; dispid 148;
    function GetChild2(index: Integer): Integer; dispid 149;
    function GetChildBoolValue(const Tag: WideString): Integer; dispid 150;
    function GetChildContent(const Tag: WideString): WideString; dispid 151;
    function GetChildContentByIndex(index: Integer): WideString; dispid 152;
    function GetChildExact(const Tag: WideString; const Content: WideString): IChilkatXml; dispid 153;
    function GetChildIntValue(const Tag: WideString): Integer; dispid 154;
    function GetChildTag(index: Integer): WideString; dispid 155;
    function GetChildTagByIndex(index: Integer): WideString; dispid 156;
    function GetChildWithAttr(const Tag: WideString; const attrName: WideString; 
                              const attrValue: WideString): IChilkatXml; dispid 157;
    function GetChildWithContent(const Content: WideString): IChilkatXml; dispid 158;
    function GetChildWithTag(const Tag: WideString): IChilkatXml; dispid 159;
    function GetNthChildWithTag(const Tag: WideString; n: Integer): IChilkatXml; dispid 160;
    function GetNthChildWithTag2(const Tag: WideString; n: Integer): Integer; dispid 161;
    function GetParent: IChilkatXml; dispid 162;
    function GetParent2: Integer; dispid 163;
    function GetRoot: IChilkatXml; dispid 164;
    procedure GetRoot2; dispid 165;
    function GetSelf: IChilkatXml; dispid 166;
    function GetXml: WideString; dispid 167;
    function HasAttrWithValue(const name: WideString; const value: WideString): Integer; dispid 168;
    function HasAttribute(const name: WideString): Integer; dispid 169;
    function HasChildWithContent(const Content: WideString): Integer; dispid 170;
    function HasChildWithTag(const Tag: WideString): Integer; dispid 171;
    function HasChildWithTagAndContent(const Tag: WideString; const Content: WideString): Integer; dispid 172;
    procedure InsertChildTreeAfter(index: Integer; const tree: IChilkatXml); dispid 173;
    procedure InsertChildTreeBefore(index: Integer; const tree: IChilkatXml); dispid 174;
    function LastChild: IChilkatXml; dispid 175;
    function LastChild2: Integer; dispid 176;
    function LoadXml(const xmlData: WideString): Integer; dispid 177;
    function LoadXml2(const xmlData: WideString; autoTrim: Integer): Integer; dispid 178;
    function LoadXmlFile(const filename: WideString): Integer; dispid 179;
    function LoadXmlFile2(const filename: WideString; autoTrim: Integer): Integer; dispid 180;
    function NewChild(const Tag: WideString; const Content: WideString): IChilkatXml; dispid 181;
    procedure NewChild2(const Tag: WideString; const Content: WideString); dispid 182;
    function NewChildAfter(index: Integer; const Tag: WideString; const Content: WideString): IChilkatXml; dispid 183;
    function NewChildBefore(index: Integer; const Tag: WideString; const Content: WideString): IChilkatXml; dispid 184;
    procedure NewChildInt2(const Tag: WideString; value: Integer); dispid 185;
    function NextSibling: IChilkatXml; dispid 186;
    function NextSibling2: Integer; dispid 187;
    function NumChildrenHavingTag(const Tag: WideString): Integer; dispid 188;
    function PreviousSibling: IChilkatXml; dispid 189;
    function PreviousSibling2: Integer; dispid 190;
    function QEncodeContent(const charset: WideString; inData: OleVariant): Integer; dispid 191;
    function RemoveAllAttributes: Integer; dispid 192;
    procedure RemoveAllChildren; dispid 193;
    function RemoveAttribute(const name: WideString): Integer; dispid 194;
    procedure RemoveChild(const Tag: WideString); dispid 195;
    procedure RemoveChildByIndex(index: Integer); dispid 196;
    procedure RemoveChildWithContent(const Content: WideString); dispid 197;
    procedure RemoveFromTree; dispid 198;
    function SaveBinaryContent(const filename: WideString; unzipFlag: Integer; 
                               decryptFlag: Integer; const password: WideString): Integer; dispid 199;
    function SaveXml(const filename: WideString): Integer; dispid 200;
    function SearchAllForContent(const afterPtr: IChilkatXml; const contentPattern: WideString): IChilkatXml; dispid 201;
    function SearchAllForContent2(const afterPtr: IChilkatXml; const contentPattern: WideString): Integer; dispid 202;
    function SearchForAttribute(const afterPtr: IChilkatXml; const Tag: WideString; 
                                const attr: WideString; const valuePattern: WideString): IChilkatXml; dispid 203;
    function SearchForAttribute2(const afterPtr: IChilkatXml; const Tag: WideString; 
                                 const attr: WideString; const valuePattern: WideString): Integer; dispid 204;
    function SearchForContent(const afterPtr: IChilkatXml; const Tag: WideString; 
                              const contentPattern: WideString): IChilkatXml; dispid 205;
    function SearchForContent2(const afterPtr: IChilkatXml; const Tag: WideString; 
                               const contentPattern: WideString): Integer; dispid 206;
    function SearchForTag(const afterPtr: IChilkatXml; const Tag: WideString): IChilkatXml; dispid 207;
    function SearchForTag2(const afterPtr: IChilkatXml; const Tag: WideString): Integer; dispid 208;
    function SetBinaryContent(inData: OleVariant; zipFlag: Integer; encryptFlag: Integer; 
                              const password: WideString): Integer; dispid 209;
    function SetBinaryContentFromFile(const filename: WideString; zipFlag: Integer; 
                                      encryptFlag: Integer; const password: WideString): Integer; dispid 210;
    procedure SortByAttribute(const attrName: WideString; ascending: Integer); dispid 211;
    procedure SortByAttributeInt(const attrName: WideString; ascending: Integer); dispid 212;
    procedure SortByContent(ascending: Integer); dispid 213;
    procedure SortByTag(ascending: Integer); dispid 214;
    procedure SortRecordsByAttribute(const sortTag: WideString; const attrName: WideString; 
                                     ascending: Integer); dispid 215;
    procedure SortRecordsByContent(const sortTag: WideString; ascending: Integer); dispid 216;
    procedure SortRecordsByContentInt(const sortTag: WideString; ascending: Integer); dispid 217;
    function SwapNode(const node: IChilkatXml): Integer; dispid 218;
    function SwapTree(const tree: IChilkatXml): Integer; dispid 219;
    function TagContent(const Tag: WideString): WideString; dispid 220;
    function TagEquals(const Tag: WideString): Integer; dispid 221;
    function UnzipContent: Integer; dispid 222;
    function UnzipTree: Integer; dispid 223;
    function UpdateAttribute(const attrName: WideString; const attrValue: WideString): Integer; dispid 224;
    function UpdateAttributeInt(const attrName: WideString; value: Integer): Integer; dispid 225;
    procedure UpdateChildContent(const Tag: WideString; const value: WideString); dispid 226;
    procedure UpdateChildContentInt(const Tag: WideString; value: Integer); dispid 227;
    function ZipContent: Integer; dispid 228;
    function ZipTree: Integer; dispid 229;
  end;

// *********************************************************************//
// Interface: IChilkatUpload
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D72E7F04-7817-4BA7-8FC2-6C890E94BC86}
// *********************************************************************//
  IChilkatUpload = interface(IDispatch)
    ['{D72E7F04-7817-4BA7-8FC2-6C890E94BC86}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_ChunkSize: Integer; safecall;
    procedure Set_ChunkSize(pVal: Integer); safecall;
    function Get_Expect100Continue: Integer; safecall;
    procedure Set_Expect100Continue(pVal: Integer); safecall;
    function Get_HeartbeatMs: Integer; safecall;
    procedure Set_HeartbeatMs(pVal: Integer); safecall;
    function Get_Hostname: WideString; safecall;
    procedure Set_Hostname(const pVal: WideString); safecall;
    function Get_IdleTimeoutMs: Integer; safecall;
    procedure Set_IdleTimeoutMs(pVal: Integer); safecall;
    function Get_Login: WideString; safecall;
    procedure Set_Login(const pVal: WideString); safecall;
    function Get_NumBytesSent: Integer; safecall;
    function Get_password: WideString; safecall;
    procedure Set_password(const pVal: WideString); safecall;
    function Get_path: WideString; safecall;
    procedure Set_path(const pVal: WideString); safecall;
    function Get_PercentUploaded: Integer; safecall;
    function Get_Port: Integer; safecall;
    procedure Set_Port(pVal: Integer); safecall;
    function Get_ProxyDomain: WideString; safecall;
    procedure Set_ProxyDomain(const pVal: WideString); safecall;
    function Get_ProxyLogin: WideString; safecall;
    procedure Set_ProxyLogin(const pVal: WideString); safecall;
    function Get_ProxyPassword: WideString; safecall;
    procedure Set_ProxyPassword(const pVal: WideString); safecall;
    function Get_ProxyPort: Integer; safecall;
    procedure Set_ProxyPort(pVal: Integer); safecall;
    function Get_ResponseBody: OleVariant; safecall;
    function Get_ResponseHeader: WideString; safecall;
    function Get_ResponseStatus: Integer; safecall;
    function Get_Ssl: Integer; safecall;
    procedure Set_Ssl(pVal: Integer); safecall;
    function Get_TotalUploadSize: Integer; safecall;
    function Get_UploadInProgress: Integer; safecall;
    function Get_UploadSuccess: Integer; safecall;
    function Get_PreferIpv6: Integer; safecall;
    procedure Set_PreferIpv6(pVal: Integer); safecall;
    procedure AbortUpload; safecall;
    procedure AddCustomHeader(const name: WideString; const value: WideString); safecall;
    procedure AddFileReference(const name: WideString; const filename: WideString); safecall;
    procedure AddParam(const name: WideString; const value: WideString); safecall;
    function BeginUpload: Integer; safecall;
    function BlockingUpload: Integer; safecall;
    procedure ClearFileReferences; safecall;
    procedure ClearParams; safecall;
    procedure SleepMs(millisec: Integer); safecall;
    function UploadToMemory: OleVariant; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property ChunkSize: Integer read Get_ChunkSize write Set_ChunkSize;
    property Expect100Continue: Integer read Get_Expect100Continue write Set_Expect100Continue;
    property HeartbeatMs: Integer read Get_HeartbeatMs write Set_HeartbeatMs;
    property Hostname: WideString read Get_Hostname write Set_Hostname;
    property IdleTimeoutMs: Integer read Get_IdleTimeoutMs write Set_IdleTimeoutMs;
    property Login: WideString read Get_Login write Set_Login;
    property NumBytesSent: Integer read Get_NumBytesSent;
    property password: WideString read Get_password write Set_password;
    property path: WideString read Get_path write Set_path;
    property PercentUploaded: Integer read Get_PercentUploaded;
    property Port: Integer read Get_Port write Set_Port;
    property ProxyDomain: WideString read Get_ProxyDomain write Set_ProxyDomain;
    property ProxyLogin: WideString read Get_ProxyLogin write Set_ProxyLogin;
    property ProxyPassword: WideString read Get_ProxyPassword write Set_ProxyPassword;
    property ProxyPort: Integer read Get_ProxyPort write Set_ProxyPort;
    property ResponseBody: OleVariant read Get_ResponseBody;
    property ResponseHeader: WideString read Get_ResponseHeader;
    property ResponseStatus: Integer read Get_ResponseStatus;
    property Ssl: Integer read Get_Ssl write Set_Ssl;
    property TotalUploadSize: Integer read Get_TotalUploadSize;
    property UploadInProgress: Integer read Get_UploadInProgress;
    property UploadSuccess: Integer read Get_UploadSuccess;
    property PreferIpv6: Integer read Get_PreferIpv6 write Set_PreferIpv6;
  end;

// *********************************************************************//
// DispIntf:  IChilkatUploadDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D72E7F04-7817-4BA7-8FC2-6C890E94BC86}
// *********************************************************************//
  IChilkatUploadDisp = dispinterface
    ['{D72E7F04-7817-4BA7-8FC2-6C890E94BC86}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property ChunkSize: Integer dispid 100;
    property Expect100Continue: Integer dispid 101;
    property HeartbeatMs: Integer dispid 102;
    property Hostname: WideString dispid 103;
    property IdleTimeoutMs: Integer dispid 104;
    property Login: WideString dispid 105;
    property NumBytesSent: Integer readonly dispid 106;
    property password: WideString dispid 107;
    property path: WideString dispid 108;
    property PercentUploaded: Integer readonly dispid 109;
    property Port: Integer dispid 110;
    property ProxyDomain: WideString dispid 111;
    property ProxyLogin: WideString dispid 112;
    property ProxyPassword: WideString dispid 113;
    property ProxyPort: Integer dispid 114;
    property ResponseBody: OleVariant readonly dispid 115;
    property ResponseHeader: WideString readonly dispid 116;
    property ResponseStatus: Integer readonly dispid 117;
    property Ssl: Integer dispid 118;
    property TotalUploadSize: Integer readonly dispid 119;
    property UploadInProgress: Integer readonly dispid 120;
    property UploadSuccess: Integer readonly dispid 121;
    property PreferIpv6: Integer dispid 133;
    procedure AbortUpload; dispid 122;
    procedure AddCustomHeader(const name: WideString; const value: WideString); dispid 123;
    procedure AddFileReference(const name: WideString; const filename: WideString); dispid 124;
    procedure AddParam(const name: WideString; const value: WideString); dispid 125;
    function BeginUpload: Integer; dispid 126;
    function BlockingUpload: Integer; dispid 127;
    procedure ClearFileReferences; dispid 128;
    procedure ClearParams; dispid 129;
    procedure SleepMs(millisec: Integer); dispid 130;
    function UploadToMemory: OleVariant; dispid 131;
  end;

// *********************************************************************//
// Interface: IUnixCompress
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {68CB048E-A120-4A99-B9DC-650775764421}
// *********************************************************************//
  IUnixCompress = interface(IDispatch)
    ['{68CB048E-A120-4A99-B9DC-650775764421}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_HeartbeatMs: Integer; safecall;
    procedure Set_HeartbeatMs(pVal: Integer); safecall;
    function CompressFile(const inFilename: WideString; const destPath: WideString): Integer; safecall;
    function CompressFileToMem(const inFilename: WideString): OleVariant; safecall;
    function CompressMemToFile(inData: OleVariant; const destPath: WideString): Integer; safecall;
    function CompressMemory(inData: OleVariant): OleVariant; safecall;
    function CompressString(const inStr: WideString; const charset: WideString): OleVariant; safecall;
    function CompressStringToFile(const inStr: WideString; const charset: WideString; 
                                  const destPath: WideString): Integer; safecall;
    function IsUnlocked: Integer; safecall;
    function UnTarZ(const zFilename: WideString; const destDir: WideString; bNoAbsolute: Integer): Integer; safecall;
    function UncompressFile(const inFilename: WideString; const destPath: WideString): Integer; safecall;
    function UncompressFileToMem(const inFilename: WideString): OleVariant; safecall;
    function UncompressFileToString(const inFilename: WideString; const inCharset: WideString): WideString; safecall;
    function UncompressMemToFile(inData: OleVariant; const destPath: WideString): Integer; safecall;
    function UncompressMemory(inData: OleVariant): OleVariant; safecall;
    function UncompressString(inData: OleVariant; const inCharset: WideString): WideString; safecall;
    function UnlockComponent(const unlockCode: WideString): Integer; safecall;
    function ReadFile(const filename: WideString): OleVariant; safecall;
    function WriteFile(const filename: WideString; binaryData: OleVariant): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property HeartbeatMs: Integer read Get_HeartbeatMs write Set_HeartbeatMs;
  end;

// *********************************************************************//
// DispIntf:  IUnixCompressDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {68CB048E-A120-4A99-B9DC-650775764421}
// *********************************************************************//
  IUnixCompressDisp = dispinterface
    ['{68CB048E-A120-4A99-B9DC-650775764421}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property HeartbeatMs: Integer dispid 100;
    function CompressFile(const inFilename: WideString; const destPath: WideString): Integer; dispid 101;
    function CompressFileToMem(const inFilename: WideString): OleVariant; dispid 102;
    function CompressMemToFile(inData: OleVariant; const destPath: WideString): Integer; dispid 103;
    function CompressMemory(inData: OleVariant): OleVariant; dispid 104;
    function CompressString(const inStr: WideString; const charset: WideString): OleVariant; dispid 105;
    function CompressStringToFile(const inStr: WideString; const charset: WideString; 
                                  const destPath: WideString): Integer; dispid 106;
    function IsUnlocked: Integer; dispid 107;
    function UnTarZ(const zFilename: WideString; const destDir: WideString; bNoAbsolute: Integer): Integer; dispid 108;
    function UncompressFile(const inFilename: WideString; const destPath: WideString): Integer; dispid 109;
    function UncompressFileToMem(const inFilename: WideString): OleVariant; dispid 110;
    function UncompressFileToString(const inFilename: WideString; const inCharset: WideString): WideString; dispid 111;
    function UncompressMemToFile(inData: OleVariant; const destPath: WideString): Integer; dispid 112;
    function UncompressMemory(inData: OleVariant): OleVariant; dispid 113;
    function UncompressString(inData: OleVariant; const inCharset: WideString): WideString; dispid 114;
    function UnlockComponent(const unlockCode: WideString): Integer; dispid 115;
    function ReadFile(const filename: WideString): OleVariant; dispid 116;
    function WriteFile(const filename: WideString; binaryData: OleVariant): Integer; dispid 117;
  end;

// *********************************************************************//
// Interface: IChilkatTar
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6D9CB79B-EDFF-4B36-8A2B-E24A0D94838C}
// *********************************************************************//
  IChilkatTar = interface(IDispatch)
    ['{6D9CB79B-EDFF-4B36-8A2B-E24A0D94838C}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_charset: WideString; safecall;
    procedure Set_charset(const pVal: WideString); safecall;
    function Get_DirMode: Integer; safecall;
    procedure Set_DirMode(pVal: Integer); safecall;
    function Get_DirPrefix: WideString; safecall;
    procedure Set_DirPrefix(const pVal: WideString); safecall;
    function Get_FileMode: Integer; safecall;
    procedure Set_FileMode(pVal: Integer); safecall;
    function Get_GroupId: Integer; safecall;
    procedure Set_GroupId(pVal: Integer); safecall;
    function Get_GroupName: WideString; safecall;
    procedure Set_GroupName(const pVal: WideString); safecall;
    function Get_HeartbeatMs: Integer; safecall;
    procedure Set_HeartbeatMs(pVal: Integer); safecall;
    function Get_NoAbsolutePaths: Integer; safecall;
    procedure Set_NoAbsolutePaths(pVal: Integer); safecall;
    function Get_NumDirRoots: Integer; safecall;
    function Get_ScriptFileMode: Integer; safecall;
    procedure Set_ScriptFileMode(pVal: Integer); safecall;
    function Get_UntarCaseSensitive: Integer; safecall;
    procedure Set_UntarCaseSensitive(pVal: Integer); safecall;
    function Get_UntarDebugLog: Integer; safecall;
    procedure Set_UntarDebugLog(pVal: Integer); safecall;
    function Get_UntarDiscardPaths: Integer; safecall;
    procedure Set_UntarDiscardPaths(pVal: Integer); safecall;
    function Get_UntarFromDir: WideString; safecall;
    procedure Set_UntarFromDir(const pVal: WideString); safecall;
    function Get_UntarMatchPattern: WideString; safecall;
    procedure Set_UntarMatchPattern(const pVal: WideString); safecall;
    function Get_UntarMaxCount: Integer; safecall;
    procedure Set_UntarMaxCount(pVal: Integer); safecall;
    function Get_UserId: Integer; safecall;
    procedure Set_UserId(pVal: Integer); safecall;
    function Get_UserName: WideString; safecall;
    procedure Set_UserName(const pVal: WideString); safecall;
    function Get_WriteFormat: WideString; safecall;
    procedure Set_WriteFormat(const pVal: WideString); safecall;
    function AddDirRoot(const dirPath: WideString): Integer; safecall;
    function GetDirRoot(index: Integer): WideString; safecall;
    function ListXml(const tarPath: WideString): WideString; safecall;
    function UnlockComponent(const unlockCode: WideString): Integer; safecall;
    function Untar(const tarPath: WideString): Integer; safecall;
    function UntarBz2(const tarPath: WideString): Integer; safecall;
    function UntarFirstMatchingToMemory(tarFileBytes: OleVariant; const matchPattern: WideString): OleVariant; safecall;
    function UntarFromMemory(tarFileBytes: OleVariant): Integer; safecall;
    function UntarGz(const tarPath: WideString): Integer; safecall;
    function UnTarZ(const tarPath: WideString): Integer; safecall;
    function VerifyTar(const tarPath: WideString): Integer; safecall;
    function WriteTar(const tarPath: WideString): Integer; safecall;
    function WriteTarBz2(const bz2Path: WideString): Integer; safecall;
    function WriteTarGz(const gzPath: WideString): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property charset: WideString read Get_charset write Set_charset;
    property DirMode: Integer read Get_DirMode write Set_DirMode;
    property DirPrefix: WideString read Get_DirPrefix write Set_DirPrefix;
    property FileMode: Integer read Get_FileMode write Set_FileMode;
    property GroupId: Integer read Get_GroupId write Set_GroupId;
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property HeartbeatMs: Integer read Get_HeartbeatMs write Set_HeartbeatMs;
    property NoAbsolutePaths: Integer read Get_NoAbsolutePaths write Set_NoAbsolutePaths;
    property NumDirRoots: Integer read Get_NumDirRoots;
    property ScriptFileMode: Integer read Get_ScriptFileMode write Set_ScriptFileMode;
    property UntarCaseSensitive: Integer read Get_UntarCaseSensitive write Set_UntarCaseSensitive;
    property UntarDebugLog: Integer read Get_UntarDebugLog write Set_UntarDebugLog;
    property UntarDiscardPaths: Integer read Get_UntarDiscardPaths write Set_UntarDiscardPaths;
    property UntarFromDir: WideString read Get_UntarFromDir write Set_UntarFromDir;
    property UntarMatchPattern: WideString read Get_UntarMatchPattern write Set_UntarMatchPattern;
    property UntarMaxCount: Integer read Get_UntarMaxCount write Set_UntarMaxCount;
    property UserId: Integer read Get_UserId write Set_UserId;
    property UserName: WideString read Get_UserName write Set_UserName;
    property WriteFormat: WideString read Get_WriteFormat write Set_WriteFormat;
  end;

// *********************************************************************//
// DispIntf:  IChilkatTarDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6D9CB79B-EDFF-4B36-8A2B-E24A0D94838C}
// *********************************************************************//
  IChilkatTarDisp = dispinterface
    ['{6D9CB79B-EDFF-4B36-8A2B-E24A0D94838C}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property charset: WideString dispid 100;
    property DirMode: Integer dispid 101;
    property DirPrefix: WideString dispid 102;
    property FileMode: Integer dispid 103;
    property GroupId: Integer dispid 104;
    property GroupName: WideString dispid 105;
    property HeartbeatMs: Integer dispid 106;
    property NoAbsolutePaths: Integer dispid 107;
    property NumDirRoots: Integer readonly dispid 108;
    property ScriptFileMode: Integer dispid 109;
    property UntarCaseSensitive: Integer dispid 110;
    property UntarDebugLog: Integer dispid 111;
    property UntarDiscardPaths: Integer dispid 112;
    property UntarFromDir: WideString dispid 113;
    property UntarMatchPattern: WideString dispid 114;
    property UntarMaxCount: Integer dispid 115;
    property UserId: Integer dispid 116;
    property UserName: WideString dispid 117;
    property WriteFormat: WideString dispid 118;
    function AddDirRoot(const dirPath: WideString): Integer; dispid 119;
    function GetDirRoot(index: Integer): WideString; dispid 120;
    function ListXml(const tarPath: WideString): WideString; dispid 121;
    function UnlockComponent(const unlockCode: WideString): Integer; dispid 122;
    function Untar(const tarPath: WideString): Integer; dispid 123;
    function UntarBz2(const tarPath: WideString): Integer; dispid 124;
    function UntarFirstMatchingToMemory(tarFileBytes: OleVariant; const matchPattern: WideString): OleVariant; dispid 125;
    function UntarFromMemory(tarFileBytes: OleVariant): Integer; dispid 126;
    function UntarGz(const tarPath: WideString): Integer; dispid 127;
    function UnTarZ(const tarPath: WideString): Integer; dispid 128;
    function VerifyTar(const tarPath: WideString): Integer; dispid 129;
    function WriteTar(const tarPath: WideString): Integer; dispid 130;
    function WriteTarBz2(const bz2Path: WideString): Integer; dispid 131;
    function WriteTarGz(const gzPath: WideString): Integer; dispid 132;
  end;

// *********************************************************************//
// Interface: IChilkatSshTunnel
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B777D3CD-07A8-4E22-9AB2-EC62B7160ABF}
// *********************************************************************//
  IChilkatSshTunnel = interface(IDispatch)
    ['{B777D3CD-07A8-4E22-9AB2-EC62B7160ABF}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_AcceptThreadSessionLogPath: WideString; safecall;
    procedure Set_AcceptThreadSessionLogPath(const pVal: WideString); safecall;
    function Get_ConnectLog: WideString; safecall;
    procedure Set_ConnectLog(const pVal: WideString); safecall;
    function Get_ConnectTimeoutMs: Integer; safecall;
    procedure Set_ConnectTimeoutMs(pVal: Integer); safecall;
    function Get_DestHostname: WideString; safecall;
    procedure Set_DestHostname(const pVal: WideString); safecall;
    function Get_DestPort: Integer; safecall;
    procedure Set_DestPort(pVal: Integer); safecall;
    function Get_HttpProxyAuthMethod: WideString; safecall;
    procedure Set_HttpProxyAuthMethod(const pVal: WideString); safecall;
    function Get_HttpProxyDomain: WideString; safecall;
    procedure Set_HttpProxyDomain(const pVal: WideString); safecall;
    function Get_HttpProxyHostname: WideString; safecall;
    procedure Set_HttpProxyHostname(const pVal: WideString); safecall;
    function Get_HttpProxyPassword: WideString; safecall;
    procedure Set_HttpProxyPassword(const pVal: WideString); safecall;
    function Get_HttpProxyPort: Integer; safecall;
    procedure Set_HttpProxyPort(pVal: Integer); safecall;
    function Get_HttpProxyUsername: WideString; safecall;
    procedure Set_HttpProxyUsername(const pVal: WideString); safecall;
    function Get_IdleTimeoutMs: Integer; safecall;
    procedure Set_IdleTimeoutMs(pVal: Integer); safecall;
    function Get_IsAccepting: Integer; safecall;
    function Get_KeepConnectLog: Integer; safecall;
    procedure Set_KeepConnectLog(pVal: Integer); safecall;
    function Get_ListenBindIpAddress: WideString; safecall;
    procedure Set_ListenBindIpAddress(const pVal: WideString); safecall;
    function Get_ListenPort: Integer; safecall;
    function Get_MaxPacketSize: Integer; safecall;
    procedure Set_MaxPacketSize(pVal: Integer); safecall;
    function Get_OutboundBindIpAddress: WideString; safecall;
    procedure Set_OutboundBindIpAddress(const pVal: WideString); safecall;
    function Get_OutboundBindPort: Integer; safecall;
    procedure Set_OutboundBindPort(pVal: Integer); safecall;
    function Get_SoRcvBuf: Integer; safecall;
    procedure Set_SoRcvBuf(pVal: Integer); safecall;
    function Get_SoSndBuf: Integer; safecall;
    procedure Set_SoSndBuf(pVal: Integer); safecall;
    function Get_SocksHostname: WideString; safecall;
    procedure Set_SocksHostname(const pVal: WideString); safecall;
    function Get_SocksPassword: WideString; safecall;
    procedure Set_SocksPassword(const pVal: WideString); safecall;
    function Get_SocksPort: Integer; safecall;
    procedure Set_SocksPort(pVal: Integer); safecall;
    function Get_SocksUsername: WideString; safecall;
    procedure Set_SocksUsername(const pVal: WideString); safecall;
    function Get_SocksVersion: Integer; safecall;
    procedure Set_SocksVersion(pVal: Integer); safecall;
    function Get_SshHostname: WideString; safecall;
    procedure Set_SshHostname(const pVal: WideString); safecall;
    function Get_SshLogin: WideString; safecall;
    procedure Set_SshLogin(const pVal: WideString); safecall;
    function Get_SshPassword: WideString; safecall;
    procedure Set_SshPassword(const pVal: WideString); safecall;
    function Get_SshPort: Integer; safecall;
    procedure Set_SshPort(pVal: Integer); safecall;
    function Get_TcpNoDelay: Integer; safecall;
    procedure Set_TcpNoDelay(pVal: Integer); safecall;
    function Get_TunnelErrors: WideString; safecall;
    function Get_TunnelThreadSessionLogPath: WideString; safecall;
    procedure Set_TunnelThreadSessionLogPath(const pVal: WideString); safecall;
    procedure ClearTunnelErrors; safecall;
    function GetTunnelsXml: WideString; safecall;
    function SetSshAuthenticationKey(const key: IChilkatSshKey): Integer; safecall;
    function StopAccepting: Integer; safecall;
    function StopAllTunnels(maxWaitMs: Integer): Integer; safecall;
    function UnlockComponent(const unlockCode: WideString): Integer; safecall;
    function BeginAccepting(ListenPort: Integer): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property AcceptThreadSessionLogPath: WideString read Get_AcceptThreadSessionLogPath write Set_AcceptThreadSessionLogPath;
    property ConnectLog: WideString read Get_ConnectLog write Set_ConnectLog;
    property ConnectTimeoutMs: Integer read Get_ConnectTimeoutMs write Set_ConnectTimeoutMs;
    property DestHostname: WideString read Get_DestHostname write Set_DestHostname;
    property DestPort: Integer read Get_DestPort write Set_DestPort;
    property HttpProxyAuthMethod: WideString read Get_HttpProxyAuthMethod write Set_HttpProxyAuthMethod;
    property HttpProxyDomain: WideString read Get_HttpProxyDomain write Set_HttpProxyDomain;
    property HttpProxyHostname: WideString read Get_HttpProxyHostname write Set_HttpProxyHostname;
    property HttpProxyPassword: WideString read Get_HttpProxyPassword write Set_HttpProxyPassword;
    property HttpProxyPort: Integer read Get_HttpProxyPort write Set_HttpProxyPort;
    property HttpProxyUsername: WideString read Get_HttpProxyUsername write Set_HttpProxyUsername;
    property IdleTimeoutMs: Integer read Get_IdleTimeoutMs write Set_IdleTimeoutMs;
    property IsAccepting: Integer read Get_IsAccepting;
    property KeepConnectLog: Integer read Get_KeepConnectLog write Set_KeepConnectLog;
    property ListenBindIpAddress: WideString read Get_ListenBindIpAddress write Set_ListenBindIpAddress;
    property ListenPort: Integer read Get_ListenPort;
    property MaxPacketSize: Integer read Get_MaxPacketSize write Set_MaxPacketSize;
    property OutboundBindIpAddress: WideString read Get_OutboundBindIpAddress write Set_OutboundBindIpAddress;
    property OutboundBindPort: Integer read Get_OutboundBindPort write Set_OutboundBindPort;
    property SoRcvBuf: Integer read Get_SoRcvBuf write Set_SoRcvBuf;
    property SoSndBuf: Integer read Get_SoSndBuf write Set_SoSndBuf;
    property SocksHostname: WideString read Get_SocksHostname write Set_SocksHostname;
    property SocksPassword: WideString read Get_SocksPassword write Set_SocksPassword;
    property SocksPort: Integer read Get_SocksPort write Set_SocksPort;
    property SocksUsername: WideString read Get_SocksUsername write Set_SocksUsername;
    property SocksVersion: Integer read Get_SocksVersion write Set_SocksVersion;
    property SshHostname: WideString read Get_SshHostname write Set_SshHostname;
    property SshLogin: WideString read Get_SshLogin write Set_SshLogin;
    property SshPassword: WideString read Get_SshPassword write Set_SshPassword;
    property SshPort: Integer read Get_SshPort write Set_SshPort;
    property TcpNoDelay: Integer read Get_TcpNoDelay write Set_TcpNoDelay;
    property TunnelErrors: WideString read Get_TunnelErrors;
    property TunnelThreadSessionLogPath: WideString read Get_TunnelThreadSessionLogPath write Set_TunnelThreadSessionLogPath;
  end;

// *********************************************************************//
// DispIntf:  IChilkatSshTunnelDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B777D3CD-07A8-4E22-9AB2-EC62B7160ABF}
// *********************************************************************//
  IChilkatSshTunnelDisp = dispinterface
    ['{B777D3CD-07A8-4E22-9AB2-EC62B7160ABF}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property AcceptThreadSessionLogPath: WideString dispid 100;
    property ConnectLog: WideString dispid 101;
    property ConnectTimeoutMs: Integer dispid 102;
    property DestHostname: WideString dispid 103;
    property DestPort: Integer dispid 104;
    property HttpProxyAuthMethod: WideString dispid 105;
    property HttpProxyDomain: WideString dispid 106;
    property HttpProxyHostname: WideString dispid 107;
    property HttpProxyPassword: WideString dispid 108;
    property HttpProxyPort: Integer dispid 109;
    property HttpProxyUsername: WideString dispid 110;
    property IdleTimeoutMs: Integer dispid 111;
    property IsAccepting: Integer readonly dispid 112;
    property KeepConnectLog: Integer dispid 113;
    property ListenBindIpAddress: WideString dispid 114;
    property ListenPort: Integer readonly dispid 115;
    property MaxPacketSize: Integer dispid 116;
    property OutboundBindIpAddress: WideString dispid 117;
    property OutboundBindPort: Integer dispid 118;
    property SoRcvBuf: Integer dispid 119;
    property SoSndBuf: Integer dispid 120;
    property SocksHostname: WideString dispid 121;
    property SocksPassword: WideString dispid 122;
    property SocksPort: Integer dispid 123;
    property SocksUsername: WideString dispid 124;
    property SocksVersion: Integer dispid 125;
    property SshHostname: WideString dispid 126;
    property SshLogin: WideString dispid 127;
    property SshPassword: WideString dispid 128;
    property SshPort: Integer dispid 129;
    property TcpNoDelay: Integer dispid 130;
    property TunnelErrors: WideString readonly dispid 131;
    property TunnelThreadSessionLogPath: WideString dispid 132;
    procedure ClearTunnelErrors; dispid 133;
    function GetTunnelsXml: WideString; dispid 134;
    function SetSshAuthenticationKey(const key: IChilkatSshKey): Integer; dispid 135;
    function StopAccepting: Integer; dispid 136;
    function StopAllTunnels(maxWaitMs: Integer): Integer; dispid 137;
    function UnlockComponent(const unlockCode: WideString): Integer; dispid 138;
    function BeginAccepting(ListenPort: Integer): Integer; dispid 139;
  end;

// *********************************************************************//
// Interface: IChilkatSshKey
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C574CD73-D2A4-43C4-8A00-3A8A8FC3FA79}
// *********************************************************************//
  IChilkatSshKey = interface(IDispatch)
    ['{C574CD73-D2A4-43C4-8A00-3A8A8FC3FA79}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_IsDsaKey: Integer; safecall;
    function Get_IsPrivateKey: Integer; safecall;
    function Get_IsRsaKey: Integer; safecall;
    function Get_password: WideString; safecall;
    procedure Set_password(const pVal: WideString); safecall;
    function Get_Comment: WideString; safecall;
    procedure Set_Comment(const pVal: WideString); safecall;
    function FromOpenSshPrivateKey(const keyStr: WideString): Integer; safecall;
    function FromOpenSshPublicKey(const keyStr: WideString): Integer; safecall;
    function FromPuttyPrivateKey(const keyStr: WideString): Integer; safecall;
    function FromRfc4716PublicKey(const keyStr: WideString): Integer; safecall;
    function FromXml(const xmlKey: WideString): Integer; safecall;
    function GenFingerprint: WideString; safecall;
    function GenerateDsaKey(numBits: Integer): Integer; safecall;
    function GenerateRsaKey(numBits: Integer; exponent: Integer): Integer; safecall;
    function LoadText(const filename: WideString): WideString; safecall;
    function SaveText(const strToSave: WideString; const filename: WideString): Integer; safecall;
    function ToOpenSshPrivateKey(bEncrypt: Integer): WideString; safecall;
    function ToOpenSshPublicKey: WideString; safecall;
    function ToPuttyPrivateKey(bEncrypt: Integer): WideString; safecall;
    function ToRfc4716PublicKey: WideString; safecall;
    function ToXml: WideString; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property IsDsaKey: Integer read Get_IsDsaKey;
    property IsPrivateKey: Integer read Get_IsPrivateKey;
    property IsRsaKey: Integer read Get_IsRsaKey;
    property password: WideString read Get_password write Set_password;
    property Comment: WideString read Get_Comment write Set_Comment;
  end;

// *********************************************************************//
// DispIntf:  IChilkatSshKeyDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C574CD73-D2A4-43C4-8A00-3A8A8FC3FA79}
// *********************************************************************//
  IChilkatSshKeyDisp = dispinterface
    ['{C574CD73-D2A4-43C4-8A00-3A8A8FC3FA79}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property IsDsaKey: Integer readonly dispid 100;
    property IsPrivateKey: Integer readonly dispid 101;
    property IsRsaKey: Integer readonly dispid 102;
    property password: WideString dispid 103;
    property Comment: WideString dispid 104;
    function FromOpenSshPrivateKey(const keyStr: WideString): Integer; dispid 105;
    function FromOpenSshPublicKey(const keyStr: WideString): Integer; dispid 106;
    function FromPuttyPrivateKey(const keyStr: WideString): Integer; dispid 107;
    function FromRfc4716PublicKey(const keyStr: WideString): Integer; dispid 108;
    function FromXml(const xmlKey: WideString): Integer; dispid 109;
    function GenFingerprint: WideString; dispid 110;
    function GenerateDsaKey(numBits: Integer): Integer; dispid 111;
    function GenerateRsaKey(numBits: Integer; exponent: Integer): Integer; dispid 112;
    function LoadText(const filename: WideString): WideString; dispid 113;
    function SaveText(const strToSave: WideString; const filename: WideString): Integer; dispid 114;
    function ToOpenSshPrivateKey(bEncrypt: Integer): WideString; dispid 115;
    function ToOpenSshPublicKey: WideString; dispid 116;
    function ToPuttyPrivateKey(bEncrypt: Integer): WideString; dispid 117;
    function ToRfc4716PublicKey: WideString; dispid 118;
    function ToXml: WideString; dispid 119;
  end;

// *********************************************************************//
// Interface: IChilkatSsh
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {792D2027-B40F-4894-9248-5E9A3FA09F36}
// *********************************************************************//
  IChilkatSsh = interface(IDispatch)
    ['{792D2027-B40F-4894-9248-5E9A3FA09F36}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_ChannelOpenFailCode: Integer; safecall;
    function Get_ChannelOpenFailReason: WideString; safecall;
    function Get_ClientIdentifier: WideString; safecall;
    procedure Set_ClientIdentifier(const pVal: WideString); safecall;
    function Get_ClientIpAddress: WideString; safecall;
    procedure Set_ClientIpAddress(const pVal: WideString); safecall;
    function Get_ConnectTimeoutMs: Integer; safecall;
    procedure Set_ConnectTimeoutMs(pVal: Integer); safecall;
    function Get_DisconnectCode: Integer; safecall;
    function Get_DisconnectReason: WideString; safecall;
    function Get_ForceCipher: WideString; safecall;
    procedure Set_ForceCipher(const pVal: WideString); safecall;
    function Get_HeartbeatMs: Integer; safecall;
    procedure Set_HeartbeatMs(pVal: Integer); safecall;
    function Get_HostKeyAlg: WideString; safecall;
    procedure Set_HostKeyAlg(const pVal: WideString); safecall;
    function Get_HostKeyFingerprint: WideString; safecall;
    function Get_HttpProxyAuthMethod: WideString; safecall;
    procedure Set_HttpProxyAuthMethod(const pVal: WideString); safecall;
    function Get_HttpProxyDomain: WideString; safecall;
    procedure Set_HttpProxyDomain(const pVal: WideString); safecall;
    function Get_HttpProxyHostname: WideString; safecall;
    procedure Set_HttpProxyHostname(const pVal: WideString); safecall;
    function Get_HttpProxyPassword: WideString; safecall;
    procedure Set_HttpProxyPassword(const pVal: WideString); safecall;
    function Get_HttpProxyPort: Integer; safecall;
    procedure Set_HttpProxyPort(pVal: Integer); safecall;
    function Get_HttpProxyUsername: WideString; safecall;
    procedure Set_HttpProxyUsername(const pVal: WideString); safecall;
    function Get_IdleTimeoutMs: Integer; safecall;
    procedure Set_IdleTimeoutMs(pVal: Integer); safecall;
    function Get_IsConnected: Integer; safecall;
    function Get_KeepSessionLog: Integer; safecall;
    procedure Set_KeepSessionLog(pVal: Integer); safecall;
    function Get_MaxPacketSize: Integer; safecall;
    procedure Set_MaxPacketSize(pVal: Integer); safecall;
    function Get_NumOpenChannels: Integer; safecall;
    function Get_PasswordChangeRequested: Integer; safecall;
    function Get_ReadTimeoutMs: Integer; safecall;
    procedure Set_ReadTimeoutMs(pVal: Integer); safecall;
    function Get_SessionLog: WideString; safecall;
    function Get_SoRcvBuf: Integer; safecall;
    procedure Set_SoRcvBuf(pVal: Integer); safecall;
    function Get_SoSndBuf: Integer; safecall;
    procedure Set_SoSndBuf(pVal: Integer); safecall;
    function Get_SocksHostname: WideString; safecall;
    procedure Set_SocksHostname(const pVal: WideString); safecall;
    function Get_SocksPassword: WideString; safecall;
    procedure Set_SocksPassword(const pVal: WideString); safecall;
    function Get_SocksPort: Integer; safecall;
    procedure Set_SocksPort(pVal: Integer); safecall;
    function Get_SocksUsername: WideString; safecall;
    procedure Set_SocksUsername(const pVal: WideString); safecall;
    function Get_SocksVersion: Integer; safecall;
    procedure Set_SocksVersion(pVal: Integer); safecall;
    function Get_StderrToStdout: Integer; safecall;
    procedure Set_StderrToStdout(pVal: Integer); safecall;
    function Get_TcpNoDelay: Integer; safecall;
    procedure Set_TcpNoDelay(pVal: Integer); safecall;
    function Get_PreferIpv6: Integer; safecall;
    procedure Set_PreferIpv6(pVal: Integer); safecall;
    function AuthenticatePk(const UserName: WideString; const PrivateKey: IChilkatSshKey): Integer; safecall;
    function AuthenticatePw(const Login: WideString; const password: WideString): Integer; safecall;
    function AuthenticatePwPk(const UserName: WideString; const password: WideString; 
                              const PrivateKey: IChilkatSshKey): Integer; safecall;
    function ChannelIsOpen(channelNum: Integer): Integer; safecall;
    function ChannelPoll(channelNum: Integer; pollTimeoutMs: Integer): Integer; safecall;
    function ChannelRead(channelNum: Integer): Integer; safecall;
    function ChannelReadAndPoll(channelNum: Integer; pollTimeoutMs: Integer): Integer; safecall;
    function ChannelReadAndPoll2(channelNum: Integer; pollTimeoutMs: Integer; maxNumBytes: Integer): Integer; safecall;
    function ChannelReceiveToClose(channelNum: Integer): Integer; safecall;
    function ChannelReceiveUntilMatch(channelNum: Integer; const matchPattern: WideString; 
                                      const charset: WideString; caseSensitive: Integer): Integer; safecall;
    function ChannelReceiveUntilMatchN(channelNum: Integer; const matchPatterns: ICkStringArray; 
                                       const charset: WideString; caseSensitive: Integer): Integer; safecall;
    function ChannelReceivedClose(channelNum: Integer): Integer; safecall;
    function ChannelReceivedEof(channelNum: Integer): Integer; safecall;
    function ChannelReceivedExitStatus(channelNum: Integer): Integer; safecall;
    function ChannelSendClose(channelNum: Integer): Integer; safecall;
    function ChannelSendData(channelNum: Integer; data: OleVariant): Integer; safecall;
    function ChannelSendEof(channelNum: Integer): Integer; safecall;
    function ChannelSendString(channelNum: Integer; const strData: WideString; 
                               const charset: WideString): Integer; safecall;
    procedure ClearTtyModes; safecall;
    function Connect(const Hostname: WideString; Port: Integer): Integer; safecall;
    procedure Disconnect; safecall;
    function GetChannelExitStatus(channelNum: Integer): Integer; safecall;
    function GetChannelNumber(index: Integer): Integer; safecall;
    function GetChannelType(index: Integer): WideString; safecall;
    function GetReceivedData(channelNum: Integer): OleVariant; safecall;
    function GetReceivedDataN(channelNum: Integer; numBytes: Integer): OleVariant; safecall;
    function GetReceivedNumBytes(channelNum: Integer): Integer; safecall;
    function GetReceivedStderr(channelNum: Integer): OleVariant; safecall;
    function GetReceivedText(channelNum: Integer; const charset: WideString): WideString; safecall;
    function GetReceivedTextS(channelNum: Integer; const substr: WideString; 
                              const charset: WideString): WideString; safecall;
    function OpenCustomChannel(const channelType: WideString): Integer; safecall;
    function OpenDirectTcpIpChannel(const Hostname: WideString; Port: Integer): Integer; safecall;
    function OpenSessionChannel: Integer; safecall;
    function PeekReceivedText(channelNum: Integer; const charset: WideString): WideString; safecall;
    function ReKey: Integer; safecall;
    function SendIgnore: Integer; safecall;
    function SendReqExec(channelNum: Integer; const command: WideString): Integer; safecall;
    function SendReqPty(channelNum: Integer; const xTermEnvVar: WideString; widthInChars: Integer; 
                        heightInRows: Integer; pixWidth: Integer; pixHeight: Integer): Integer; safecall;
    function SendReqSetEnv(channelNum: Integer; const name: WideString; const value: WideString): Integer; safecall;
    function SendReqShell(channelNum: Integer): Integer; safecall;
    function SendReqSignal(channelNum: Integer; const signalName: WideString): Integer; safecall;
    function SendReqSubsystem(channelNum: Integer; const subsystemName: WideString): Integer; safecall;
    function SendReqWindowChange(channelNum: Integer; widthInChars: Integer; heightInRows: Integer; 
                                 pixWidth: Integer; pixHeight: Integer): Integer; safecall;
    function SendReqX11Forwarding(channelNum: Integer; singleConnection: Integer; 
                                  const authProt: WideString; const authCookie: WideString; 
                                  screenNum: Integer): Integer; safecall;
    function SendReqXonXoff(channelNum: Integer; clientCanDo: Integer): Integer; safecall;
    function SetTtyMode(const name: WideString; value: Integer): Integer; safecall;
    function UnlockComponent(const unlockCode: WideString): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property ChannelOpenFailCode: Integer read Get_ChannelOpenFailCode;
    property ChannelOpenFailReason: WideString read Get_ChannelOpenFailReason;
    property ClientIdentifier: WideString read Get_ClientIdentifier write Set_ClientIdentifier;
    property ClientIpAddress: WideString read Get_ClientIpAddress write Set_ClientIpAddress;
    property ConnectTimeoutMs: Integer read Get_ConnectTimeoutMs write Set_ConnectTimeoutMs;
    property DisconnectCode: Integer read Get_DisconnectCode;
    property DisconnectReason: WideString read Get_DisconnectReason;
    property ForceCipher: WideString read Get_ForceCipher write Set_ForceCipher;
    property HeartbeatMs: Integer read Get_HeartbeatMs write Set_HeartbeatMs;
    property HostKeyAlg: WideString read Get_HostKeyAlg write Set_HostKeyAlg;
    property HostKeyFingerprint: WideString read Get_HostKeyFingerprint;
    property HttpProxyAuthMethod: WideString read Get_HttpProxyAuthMethod write Set_HttpProxyAuthMethod;
    property HttpProxyDomain: WideString read Get_HttpProxyDomain write Set_HttpProxyDomain;
    property HttpProxyHostname: WideString read Get_HttpProxyHostname write Set_HttpProxyHostname;
    property HttpProxyPassword: WideString read Get_HttpProxyPassword write Set_HttpProxyPassword;
    property HttpProxyPort: Integer read Get_HttpProxyPort write Set_HttpProxyPort;
    property HttpProxyUsername: WideString read Get_HttpProxyUsername write Set_HttpProxyUsername;
    property IdleTimeoutMs: Integer read Get_IdleTimeoutMs write Set_IdleTimeoutMs;
    property IsConnected: Integer read Get_IsConnected;
    property KeepSessionLog: Integer read Get_KeepSessionLog write Set_KeepSessionLog;
    property MaxPacketSize: Integer read Get_MaxPacketSize write Set_MaxPacketSize;
    property NumOpenChannels: Integer read Get_NumOpenChannels;
    property PasswordChangeRequested: Integer read Get_PasswordChangeRequested;
    property ReadTimeoutMs: Integer read Get_ReadTimeoutMs write Set_ReadTimeoutMs;
    property SessionLog: WideString read Get_SessionLog;
    property SoRcvBuf: Integer read Get_SoRcvBuf write Set_SoRcvBuf;
    property SoSndBuf: Integer read Get_SoSndBuf write Set_SoSndBuf;
    property SocksHostname: WideString read Get_SocksHostname write Set_SocksHostname;
    property SocksPassword: WideString read Get_SocksPassword write Set_SocksPassword;
    property SocksPort: Integer read Get_SocksPort write Set_SocksPort;
    property SocksUsername: WideString read Get_SocksUsername write Set_SocksUsername;
    property SocksVersion: Integer read Get_SocksVersion write Set_SocksVersion;
    property StderrToStdout: Integer read Get_StderrToStdout write Set_StderrToStdout;
    property TcpNoDelay: Integer read Get_TcpNoDelay write Set_TcpNoDelay;
    property PreferIpv6: Integer read Get_PreferIpv6 write Set_PreferIpv6;
  end;

// *********************************************************************//
// DispIntf:  IChilkatSshDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {792D2027-B40F-4894-9248-5E9A3FA09F36}
// *********************************************************************//
  IChilkatSshDisp = dispinterface
    ['{792D2027-B40F-4894-9248-5E9A3FA09F36}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property ChannelOpenFailCode: Integer readonly dispid 100;
    property ChannelOpenFailReason: WideString readonly dispid 101;
    property ClientIdentifier: WideString dispid 102;
    property ClientIpAddress: WideString dispid 103;
    property ConnectTimeoutMs: Integer dispid 104;
    property DisconnectCode: Integer readonly dispid 105;
    property DisconnectReason: WideString readonly dispid 106;
    property ForceCipher: WideString dispid 107;
    property HeartbeatMs: Integer dispid 108;
    property HostKeyAlg: WideString dispid 109;
    property HostKeyFingerprint: WideString readonly dispid 110;
    property HttpProxyAuthMethod: WideString dispid 111;
    property HttpProxyDomain: WideString dispid 112;
    property HttpProxyHostname: WideString dispid 113;
    property HttpProxyPassword: WideString dispid 114;
    property HttpProxyPort: Integer dispid 115;
    property HttpProxyUsername: WideString dispid 116;
    property IdleTimeoutMs: Integer dispid 117;
    property IsConnected: Integer readonly dispid 118;
    property KeepSessionLog: Integer dispid 119;
    property MaxPacketSize: Integer dispid 120;
    property NumOpenChannels: Integer readonly dispid 121;
    property PasswordChangeRequested: Integer readonly dispid 122;
    property ReadTimeoutMs: Integer dispid 123;
    property SessionLog: WideString readonly dispid 124;
    property SoRcvBuf: Integer dispid 125;
    property SoSndBuf: Integer dispid 126;
    property SocksHostname: WideString dispid 127;
    property SocksPassword: WideString dispid 128;
    property SocksPort: Integer dispid 129;
    property SocksUsername: WideString dispid 130;
    property SocksVersion: Integer dispid 131;
    property StderrToStdout: Integer dispid 132;
    property TcpNoDelay: Integer dispid 133;
    property PreferIpv6: Integer dispid 181;
    function AuthenticatePk(const UserName: WideString; const PrivateKey: IChilkatSshKey): Integer; dispid 134;
    function AuthenticatePw(const Login: WideString; const password: WideString): Integer; dispid 135;
    function AuthenticatePwPk(const UserName: WideString; const password: WideString; 
                              const PrivateKey: IChilkatSshKey): Integer; dispid 136;
    function ChannelIsOpen(channelNum: Integer): Integer; dispid 137;
    function ChannelPoll(channelNum: Integer; pollTimeoutMs: Integer): Integer; dispid 138;
    function ChannelRead(channelNum: Integer): Integer; dispid 139;
    function ChannelReadAndPoll(channelNum: Integer; pollTimeoutMs: Integer): Integer; dispid 140;
    function ChannelReadAndPoll2(channelNum: Integer; pollTimeoutMs: Integer; maxNumBytes: Integer): Integer; dispid 141;
    function ChannelReceiveToClose(channelNum: Integer): Integer; dispid 142;
    function ChannelReceiveUntilMatch(channelNum: Integer; const matchPattern: WideString; 
                                      const charset: WideString; caseSensitive: Integer): Integer; dispid 143;
    function ChannelReceiveUntilMatchN(channelNum: Integer; const matchPatterns: ICkStringArray; 
                                       const charset: WideString; caseSensitive: Integer): Integer; dispid 144;
    function ChannelReceivedClose(channelNum: Integer): Integer; dispid 145;
    function ChannelReceivedEof(channelNum: Integer): Integer; dispid 146;
    function ChannelReceivedExitStatus(channelNum: Integer): Integer; dispid 147;
    function ChannelSendClose(channelNum: Integer): Integer; dispid 148;
    function ChannelSendData(channelNum: Integer; data: OleVariant): Integer; dispid 149;
    function ChannelSendEof(channelNum: Integer): Integer; dispid 150;
    function ChannelSendString(channelNum: Integer; const strData: WideString; 
                               const charset: WideString): Integer; dispid 151;
    procedure ClearTtyModes; dispid 152;
    function Connect(const Hostname: WideString; Port: Integer): Integer; dispid 153;
    procedure Disconnect; dispid 154;
    function GetChannelExitStatus(channelNum: Integer): Integer; dispid 155;
    function GetChannelNumber(index: Integer): Integer; dispid 156;
    function GetChannelType(index: Integer): WideString; dispid 157;
    function GetReceivedData(channelNum: Integer): OleVariant; dispid 158;
    function GetReceivedDataN(channelNum: Integer; numBytes: Integer): OleVariant; dispid 159;
    function GetReceivedNumBytes(channelNum: Integer): Integer; dispid 160;
    function GetReceivedStderr(channelNum: Integer): OleVariant; dispid 161;
    function GetReceivedText(channelNum: Integer; const charset: WideString): WideString; dispid 162;
    function GetReceivedTextS(channelNum: Integer; const substr: WideString; 
                              const charset: WideString): WideString; dispid 163;
    function OpenCustomChannel(const channelType: WideString): Integer; dispid 164;
    function OpenDirectTcpIpChannel(const Hostname: WideString; Port: Integer): Integer; dispid 165;
    function OpenSessionChannel: Integer; dispid 166;
    function PeekReceivedText(channelNum: Integer; const charset: WideString): WideString; dispid 167;
    function ReKey: Integer; dispid 168;
    function SendIgnore: Integer; dispid 169;
    function SendReqExec(channelNum: Integer; const command: WideString): Integer; dispid 170;
    function SendReqPty(channelNum: Integer; const xTermEnvVar: WideString; widthInChars: Integer; 
                        heightInRows: Integer; pixWidth: Integer; pixHeight: Integer): Integer; dispid 171;
    function SendReqSetEnv(channelNum: Integer; const name: WideString; const value: WideString): Integer; dispid 172;
    function SendReqShell(channelNum: Integer): Integer; dispid 173;
    function SendReqSignal(channelNum: Integer; const signalName: WideString): Integer; dispid 174;
    function SendReqSubsystem(channelNum: Integer; const subsystemName: WideString): Integer; dispid 175;
    function SendReqWindowChange(channelNum: Integer; widthInChars: Integer; heightInRows: Integer; 
                                 pixWidth: Integer; pixHeight: Integer): Integer; dispid 176;
    function SendReqX11Forwarding(channelNum: Integer; singleConnection: Integer; 
                                  const authProt: WideString; const authCookie: WideString; 
                                  screenNum: Integer): Integer; dispid 177;
    function SendReqXonXoff(channelNum: Integer; clientCanDo: Integer): Integer; dispid 178;
    function SetTtyMode(const name: WideString; value: Integer): Integer; dispid 179;
    function UnlockComponent(const unlockCode: WideString): Integer; dispid 180;
  end;

// *********************************************************************//
// Interface: IChilkatSpider
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {CB3E07ED-EBD4-4CEA-949F-53EDE8806F8F}
// *********************************************************************//
  IChilkatSpider = interface(IDispatch)
    ['{CB3E07ED-EBD4-4CEA-949F-53EDE8806F8F}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_AvoidHttps: Integer; safecall;
    procedure Set_AvoidHttps(pVal: Integer); safecall;
    function Get_CacheDir: WideString; safecall;
    procedure Set_CacheDir(const pVal: WideString); safecall;
    function Get_ChopAtQuery: Integer; safecall;
    procedure Set_ChopAtQuery(pVal: Integer); safecall;
    function Get_ConnectTimeout: Integer; safecall;
    procedure Set_ConnectTimeout(pVal: Integer); safecall;
    function Get_Domain: WideString; safecall;
    function Get_FetchFromCache: Integer; safecall;
    procedure Set_FetchFromCache(pVal: Integer); safecall;
    function Get_HeartbeatMs: Integer; safecall;
    procedure Set_HeartbeatMs(pVal: Integer); safecall;
    function Get_LastFromCache: Integer; safecall;
    function Get_LastHtml: WideString; safecall;
    function Get_LastHtmlDescription: WideString; safecall;
    function Get_LastHtmlKeywords: WideString; safecall;
    function Get_LastHtmlTitle: WideString; safecall;
    function Get_LastModDate: TDateTime; safecall;
    function Get_LastUrl: WideString; safecall;
    function Get_MaxResponseSize: Integer; safecall;
    procedure Set_MaxResponseSize(pVal: Integer); safecall;
    function Get_MaxUrlLen: Integer; safecall;
    procedure Set_MaxUrlLen(pVal: Integer); safecall;
    function Get_NumAvoidPatterns: Integer; safecall;
    function Get_NumFailed: Integer; safecall;
    function Get_NumOutboundLinks: Integer; safecall;
    function Get_NumSpidered: Integer; safecall;
    function Get_NumUnspidered: Integer; safecall;
    function Get_ProxyDomain: WideString; safecall;
    procedure Set_ProxyDomain(const pVal: WideString); safecall;
    function Get_ProxyLogin: WideString; safecall;
    procedure Set_ProxyLogin(const pVal: WideString); safecall;
    function Get_ProxyPassword: WideString; safecall;
    procedure Set_ProxyPassword(const pVal: WideString); safecall;
    function Get_ProxyPort: Integer; safecall;
    procedure Set_ProxyPort(pVal: Integer); safecall;
    function Get_ReadTimeout: Integer; safecall;
    procedure Set_ReadTimeout(pVal: Integer); safecall;
    function Get_UpdateCache: Integer; safecall;
    procedure Set_UpdateCache(pVal: Integer); safecall;
    function Get_UserAgent: WideString; safecall;
    procedure Set_UserAgent(const pVal: WideString); safecall;
    function Get_WindDownCount: Integer; safecall;
    procedure Set_WindDownCount(pVal: Integer); safecall;
    function Get_PreferIpv6: Integer; safecall;
    procedure Set_PreferIpv6(pVal: Integer); safecall;
    procedure AddAvoidOutboundLinkPattern(const pattern: WideString); safecall;
    procedure AddAvoidPattern(const pattern: WideString); safecall;
    procedure AddMustMatchPattern(const pattern: WideString); safecall;
    procedure AddUnspidered(const url: WideString); safecall;
    function CanonicalizeUrl(const url: WideString): WideString; safecall;
    procedure ClearFailedUrls; safecall;
    procedure ClearOutboundLinks; safecall;
    procedure ClearSpideredUrls; safecall;
    function CrawlNext: Integer; safecall;
    function FetchRobotsText: WideString; safecall;
    function GetAvoidPattern(index: Integer): WideString; safecall;
    function GetBaseDomain(const Domain: WideString): WideString; safecall;
    function GetFailedUrl(index: Integer): WideString; safecall;
    function GetOutboundLink(index: Integer): WideString; safecall;
    function GetSpideredUrl(index: Integer): WideString; safecall;
    function GetUnspideredUrl(index: Integer): WideString; safecall;
    function GetUrlDomain(const url: WideString): WideString; safecall;
    procedure Initialize(const Domain: WideString); safecall;
    function RecrawlLast: Integer; safecall;
    procedure SkipUnspidered(index: Integer); safecall;
    procedure SleepMs(millisec: Integer); safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property AvoidHttps: Integer read Get_AvoidHttps write Set_AvoidHttps;
    property CacheDir: WideString read Get_CacheDir write Set_CacheDir;
    property ChopAtQuery: Integer read Get_ChopAtQuery write Set_ChopAtQuery;
    property ConnectTimeout: Integer read Get_ConnectTimeout write Set_ConnectTimeout;
    property Domain: WideString read Get_Domain;
    property FetchFromCache: Integer read Get_FetchFromCache write Set_FetchFromCache;
    property HeartbeatMs: Integer read Get_HeartbeatMs write Set_HeartbeatMs;
    property LastFromCache: Integer read Get_LastFromCache;
    property LastHtml: WideString read Get_LastHtml;
    property LastHtmlDescription: WideString read Get_LastHtmlDescription;
    property LastHtmlKeywords: WideString read Get_LastHtmlKeywords;
    property LastHtmlTitle: WideString read Get_LastHtmlTitle;
    property LastModDate: TDateTime read Get_LastModDate;
    property LastUrl: WideString read Get_LastUrl;
    property MaxResponseSize: Integer read Get_MaxResponseSize write Set_MaxResponseSize;
    property MaxUrlLen: Integer read Get_MaxUrlLen write Set_MaxUrlLen;
    property NumAvoidPatterns: Integer read Get_NumAvoidPatterns;
    property NumFailed: Integer read Get_NumFailed;
    property NumOutboundLinks: Integer read Get_NumOutboundLinks;
    property NumSpidered: Integer read Get_NumSpidered;
    property NumUnspidered: Integer read Get_NumUnspidered;
    property ProxyDomain: WideString read Get_ProxyDomain write Set_ProxyDomain;
    property ProxyLogin: WideString read Get_ProxyLogin write Set_ProxyLogin;
    property ProxyPassword: WideString read Get_ProxyPassword write Set_ProxyPassword;
    property ProxyPort: Integer read Get_ProxyPort write Set_ProxyPort;
    property ReadTimeout: Integer read Get_ReadTimeout write Set_ReadTimeout;
    property UpdateCache: Integer read Get_UpdateCache write Set_UpdateCache;
    property UserAgent: WideString read Get_UserAgent write Set_UserAgent;
    property WindDownCount: Integer read Get_WindDownCount write Set_WindDownCount;
    property PreferIpv6: Integer read Get_PreferIpv6 write Set_PreferIpv6;
  end;

// *********************************************************************//
// DispIntf:  IChilkatSpiderDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {CB3E07ED-EBD4-4CEA-949F-53EDE8806F8F}
// *********************************************************************//
  IChilkatSpiderDisp = dispinterface
    ['{CB3E07ED-EBD4-4CEA-949F-53EDE8806F8F}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property AvoidHttps: Integer dispid 100;
    property CacheDir: WideString dispid 101;
    property ChopAtQuery: Integer dispid 102;
    property ConnectTimeout: Integer dispid 103;
    property Domain: WideString readonly dispid 104;
    property FetchFromCache: Integer dispid 105;
    property HeartbeatMs: Integer dispid 106;
    property LastFromCache: Integer readonly dispid 107;
    property LastHtml: WideString readonly dispid 108;
    property LastHtmlDescription: WideString readonly dispid 109;
    property LastHtmlKeywords: WideString readonly dispid 110;
    property LastHtmlTitle: WideString readonly dispid 111;
    property LastModDate: TDateTime readonly dispid 112;
    property LastUrl: WideString readonly dispid 113;
    property MaxResponseSize: Integer dispid 114;
    property MaxUrlLen: Integer dispid 115;
    property NumAvoidPatterns: Integer readonly dispid 116;
    property NumFailed: Integer readonly dispid 117;
    property NumOutboundLinks: Integer readonly dispid 118;
    property NumSpidered: Integer readonly dispid 119;
    property NumUnspidered: Integer readonly dispid 120;
    property ProxyDomain: WideString dispid 121;
    property ProxyLogin: WideString dispid 122;
    property ProxyPassword: WideString dispid 123;
    property ProxyPort: Integer dispid 124;
    property ReadTimeout: Integer dispid 125;
    property UpdateCache: Integer dispid 126;
    property UserAgent: WideString dispid 127;
    property WindDownCount: Integer dispid 128;
    property PreferIpv6: Integer dispid 152;
    procedure AddAvoidOutboundLinkPattern(const pattern: WideString); dispid 129;
    procedure AddAvoidPattern(const pattern: WideString); dispid 130;
    procedure AddMustMatchPattern(const pattern: WideString); dispid 131;
    procedure AddUnspidered(const url: WideString); dispid 132;
    function CanonicalizeUrl(const url: WideString): WideString; dispid 133;
    procedure ClearFailedUrls; dispid 134;
    procedure ClearOutboundLinks; dispid 135;
    procedure ClearSpideredUrls; dispid 136;
    function CrawlNext: Integer; dispid 137;
    function FetchRobotsText: WideString; dispid 138;
    function GetAvoidPattern(index: Integer): WideString; dispid 139;
    function GetBaseDomain(const Domain: WideString): WideString; dispid 140;
    function GetFailedUrl(index: Integer): WideString; dispid 141;
    function GetOutboundLink(index: Integer): WideString; dispid 142;
    function GetSpideredUrl(index: Integer): WideString; dispid 143;
    function GetUnspideredUrl(index: Integer): WideString; dispid 144;
    function GetUrlDomain(const url: WideString): WideString; dispid 145;
    procedure Initialize(const Domain: WideString); dispid 146;
    function RecrawlLast: Integer; dispid 147;
    procedure SkipUnspidered(index: Integer); dispid 148;
    procedure SleepMs(millisec: Integer); dispid 149;
  end;

// *********************************************************************//
// Interface: IChilkatSocksProxy
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {AA6BF3BD-B645-4ECE-A8D5-DF6A8832D567}
// *********************************************************************//
  IChilkatSocksProxy = interface(IDispatch)
    ['{AA6BF3BD-B645-4ECE-A8D5-DF6A8832D567}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_AllowUnauthenticatedSocks5: Integer; safecall;
    procedure Set_AllowUnauthenticatedSocks5(pVal: Integer); safecall;
    function Get_AuthenticatedSocks5: Integer; safecall;
    function Get_ClientIp: WideString; safecall;
    function Get_ClientPort: Integer; safecall;
    function Get_ConnectionPending: Integer; safecall;
    function Get_ListenBindIpAddress: WideString; safecall;
    procedure Set_ListenBindIpAddress(const pVal: WideString); safecall;
    function Get_Login: WideString; safecall;
    function Get_OutboundBindIpAddress: WideString; safecall;
    procedure Set_OutboundBindIpAddress(const pVal: WideString); safecall;
    function Get_OutboundBindPort: Integer; safecall;
    procedure Set_OutboundBindPort(pVal: Integer); safecall;
    function Get_password: WideString; safecall;
    function Get_ServerIp: WideString; safecall;
    function Get_ServerPort: Integer; safecall;
    function Get_SocksVersion: Integer; safecall;
    function AllowConnection: Integer; safecall;
    function GetTunnelsXml: WideString; safecall;
    function Initialize(Port: Integer): Integer; safecall;
    function ProceedSocks5: Integer; safecall;
    function RejectConnection: Integer; safecall;
    function StopAllTunnels(maxWaitMs: Integer): Integer; safecall;
    function UnlockComponent(const unlockCode: WideString): Integer; safecall;
    function WaitForConnection(maxWaitMs: Integer): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property AllowUnauthenticatedSocks5: Integer read Get_AllowUnauthenticatedSocks5 write Set_AllowUnauthenticatedSocks5;
    property AuthenticatedSocks5: Integer read Get_AuthenticatedSocks5;
    property ClientIp: WideString read Get_ClientIp;
    property ClientPort: Integer read Get_ClientPort;
    property ConnectionPending: Integer read Get_ConnectionPending;
    property ListenBindIpAddress: WideString read Get_ListenBindIpAddress write Set_ListenBindIpAddress;
    property Login: WideString read Get_Login;
    property OutboundBindIpAddress: WideString read Get_OutboundBindIpAddress write Set_OutboundBindIpAddress;
    property OutboundBindPort: Integer read Get_OutboundBindPort write Set_OutboundBindPort;
    property password: WideString read Get_password;
    property ServerIp: WideString read Get_ServerIp;
    property ServerPort: Integer read Get_ServerPort;
    property SocksVersion: Integer read Get_SocksVersion;
  end;

// *********************************************************************//
// DispIntf:  IChilkatSocksProxyDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {AA6BF3BD-B645-4ECE-A8D5-DF6A8832D567}
// *********************************************************************//
  IChilkatSocksProxyDisp = dispinterface
    ['{AA6BF3BD-B645-4ECE-A8D5-DF6A8832D567}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property AllowUnauthenticatedSocks5: Integer dispid 100;
    property AuthenticatedSocks5: Integer readonly dispid 101;
    property ClientIp: WideString readonly dispid 102;
    property ClientPort: Integer readonly dispid 103;
    property ConnectionPending: Integer readonly dispid 104;
    property ListenBindIpAddress: WideString dispid 105;
    property Login: WideString readonly dispid 106;
    property OutboundBindIpAddress: WideString dispid 107;
    property OutboundBindPort: Integer dispid 108;
    property password: WideString readonly dispid 109;
    property ServerIp: WideString readonly dispid 110;
    property ServerPort: Integer readonly dispid 111;
    property SocksVersion: Integer readonly dispid 112;
    function AllowConnection: Integer; dispid 113;
    function GetTunnelsXml: WideString; dispid 114;
    function Initialize(Port: Integer): Integer; dispid 115;
    function ProceedSocks5: Integer; dispid 116;
    function RejectConnection: Integer; dispid 117;
    function StopAllTunnels(maxWaitMs: Integer): Integer; dispid 118;
    function UnlockComponent(const unlockCode: WideString): Integer; dispid 119;
    function WaitForConnection(maxWaitMs: Integer): Integer; dispid 120;
  end;

// *********************************************************************//
// Interface: IChilkatSocket
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {93FCA31B-08C3-4E72-836B-B31123F7C2CC}
// *********************************************************************//
  IChilkatSocket = interface(IDispatch)
    ['{93FCA31B-08C3-4E72-836B-B31123F7C2CC}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_AsyncAcceptFinished: Integer; safecall;
    function Get_AsyncAcceptLog: WideString; safecall;
    function Get_AsyncAcceptSuccess: Integer; safecall;
    function Get_AsyncConnectFinished: Integer; safecall;
    function Get_AsyncConnectLog: WideString; safecall;
    function Get_AsyncConnectSuccess: Integer; safecall;
    function Get_AsyncDnsFinished: Integer; safecall;
    function Get_AsyncDnsLog: WideString; safecall;
    function Get_AsyncDnsResult: WideString; safecall;
    function Get_AsyncDnsSuccess: Integer; safecall;
    function Get_AsyncReceiveFinished: Integer; safecall;
    function Get_AsyncReceiveLog: WideString; safecall;
    function Get_AsyncReceiveSuccess: Integer; safecall;
    function Get_AsyncReceivedBytes: OleVariant; safecall;
    function Get_AsyncReceivedString: WideString; safecall;
    function Get_AsyncSendFinished: Integer; safecall;
    function Get_AsyncSendLog: WideString; safecall;
    function Get_AsyncSendSuccess: Integer; safecall;
    function Get_BigEndian: Integer; safecall;
    procedure Set_BigEndian(pVal: Integer); safecall;
    function Get_ClientIpAddress: WideString; safecall;
    procedure Set_ClientIpAddress(const pVal: WideString); safecall;
    function Get_ClientPort: Integer; safecall;
    procedure Set_ClientPort(pVal: Integer); safecall;
    function Get_ConnectFailReason: Integer; safecall;
    function Get_DebugConnectDelayMs: Integer; safecall;
    procedure Set_DebugConnectDelayMs(pVal: Integer); safecall;
    function Get_DebugDnsDelayMs: Integer; safecall;
    procedure Set_DebugDnsDelayMs(pVal: Integer); safecall;
    function Get_ElapsedSeconds: Integer; safecall;
    function Get_HeartbeatMs: Integer; safecall;
    procedure Set_HeartbeatMs(pVal: Integer); safecall;
    function Get_HttpProxyAuthMethod: WideString; safecall;
    procedure Set_HttpProxyAuthMethod(const pVal: WideString); safecall;
    function Get_HttpProxyDomain: WideString; safecall;
    procedure Set_HttpProxyDomain(const pVal: WideString); safecall;
    function Get_HttpProxyHostname: WideString; safecall;
    procedure Set_HttpProxyHostname(const pVal: WideString); safecall;
    function Get_HttpProxyPassword: WideString; safecall;
    procedure Set_HttpProxyPassword(const pVal: WideString); safecall;
    function Get_HttpProxyPort: Integer; safecall;
    procedure Set_HttpProxyPort(pVal: Integer); safecall;
    function Get_HttpProxyUsername: WideString; safecall;
    procedure Set_HttpProxyUsername(const pVal: WideString); safecall;
    function Get_IsConnected: Integer; safecall;
    function Get_KeepSessionLog: Integer; safecall;
    procedure Set_KeepSessionLog(pVal: Integer); safecall;
    function Get_LastMethodFailed: Integer; safecall;
    function Get_ListenIpv6: Integer; safecall;
    procedure Set_ListenIpv6(pVal: Integer); safecall;
    function Get_LocalIpAddress: WideString; safecall;
    function Get_LocalPort: Integer; safecall;
    function Get_MaxReadIdleMs: Integer; safecall;
    procedure Set_MaxReadIdleMs(pVal: Integer); safecall;
    function Get_MaxSendIdleMs: Integer; safecall;
    procedure Set_MaxSendIdleMs(pVal: Integer); safecall;
    function Get_MyIpAddress: WideString; safecall;
    function Get_NumReceivedClientCerts: Integer; safecall;
    function Get_NumSocketsInSet: Integer; safecall;
    function Get_NumSslAcceptableClientCAs: Integer; safecall;
    function Get_ObjectId: Integer; safecall;
    function Get_ReceivePacketSize: Integer; safecall;
    procedure Set_ReceivePacketSize(pVal: Integer); safecall;
    function Get_ReceivedCount: Integer; safecall;
    procedure Set_ReceivedCount(pVal: Integer); safecall;
    function Get_RemoteIpAddress: WideString; safecall;
    function Get_RemotePort: Integer; safecall;
    function Get_SelectorIndex: Integer; safecall;
    procedure Set_SelectorIndex(pVal: Integer); safecall;
    function Get_SelectorReadIndex: Integer; safecall;
    procedure Set_SelectorReadIndex(pVal: Integer); safecall;
    function Get_SelectorWriteIndex: Integer; safecall;
    procedure Set_SelectorWriteIndex(pVal: Integer); safecall;
    function Get_SendPacketSize: Integer; safecall;
    procedure Set_SendPacketSize(pVal: Integer); safecall;
    function Get_SessionLog: WideString; safecall;
    function Get_SessionLogEncoding: WideString; safecall;
    procedure Set_SessionLogEncoding(const pVal: WideString); safecall;
    function Get_SoRcvBuf: Integer; safecall;
    procedure Set_SoRcvBuf(pVal: Integer); safecall;
    function Get_SoReuseAddr: Integer; safecall;
    procedure Set_SoReuseAddr(pVal: Integer); safecall;
    function Get_SoSndBuf: Integer; safecall;
    procedure Set_SoSndBuf(pVal: Integer); safecall;
    function Get_SocksHostname: WideString; safecall;
    procedure Set_SocksHostname(const pVal: WideString); safecall;
    function Get_SocksPassword: WideString; safecall;
    procedure Set_SocksPassword(const pVal: WideString); safecall;
    function Get_SocksPort: Integer; safecall;
    procedure Set_SocksPort(pVal: Integer); safecall;
    function Get_SocksUsername: WideString; safecall;
    procedure Set_SocksUsername(const pVal: WideString); safecall;
    function Get_SocksVersion: Integer; safecall;
    procedure Set_SocksVersion(pVal: Integer); safecall;
    function Get_Ssl: Integer; safecall;
    procedure Set_Ssl(pVal: Integer); safecall;
    function Get_SslProtocol: WideString; safecall;
    procedure Set_SslProtocol(const pVal: WideString); safecall;
    function Get_StringCharset: WideString; safecall;
    procedure Set_StringCharset(const pVal: WideString); safecall;
    function Get_TcpNoDelay: Integer; safecall;
    procedure Set_TcpNoDelay(pVal: Integer); safecall;
    function Get_UserData: WideString; safecall;
    procedure Set_UserData(const pVal: WideString); safecall;
    function Get_RequireSslCertVerify: Integer; safecall;
    procedure Set_RequireSslCertVerify(pVal: Integer); safecall;
    function Get_PreferIpv6: Integer; safecall;
    procedure Set_PreferIpv6(pVal: Integer); safecall;
    function AcceptNextConnection(maxWaitMs: Integer): IChilkatSocket; safecall;
    function AddSslAcceptableClientCaDn(const certAuthDN: WideString): Integer; safecall;
    procedure AsyncAcceptAbort; safecall;
    function AsyncAcceptSocket: IChilkatSocket; safecall;
    function AsyncAcceptStart(maxWaitMs: Integer): Integer; safecall;
    procedure AsyncConnectAbort; safecall;
    function AsyncConnectStart(const Hostname: WideString; Port: Integer; Ssl: Integer; 
                               maxWaitMs: Integer): Integer; safecall;
    procedure AsyncDnsAbort; safecall;
    function AsyncDnsStart(const Hostname: WideString; maxWaitMs: Integer): Integer; safecall;
    procedure AsyncReceiveAbort; safecall;
    function AsyncReceiveBytes: Integer; safecall;
    function AsyncReceiveBytesN(numBytes: Integer): Integer; safecall;
    function AsyncReceiveString: Integer; safecall;
    function AsyncReceiveToCRLF: Integer; safecall;
    function AsyncReceiveUntilMatch(const matchStr: WideString): Integer; safecall;
    procedure AsyncSendAbort; safecall;
    function AsyncSendByteData(data: OleVariant): Integer; safecall;
    function AsyncSendBytes(data: OleVariant): Integer; safecall;
    function AsyncSendString(const str: WideString): Integer; safecall;
    function BindAndListen(Port: Integer; backlog: Integer): Integer; safecall;
    function CheckWriteable(maxWaitMs: Integer): Integer; safecall;
    procedure ClearSessionLog; safecall;
    procedure Close(maxWaitMs: Integer); safecall;
    function Connect(const Hostname: WideString; Port: Integer; Ssl: Integer; maxWaitMs: Integer): Integer; safecall;
    function ConvertFromSsl: Integer; safecall;
    function ConvertToSsl: Integer; safecall;
    function DnsLookup(const Hostname: WideString; maxWaitMs: Integer): WideString; safecall;
    function GetMyCert: IChilkatCert; safecall;
    function GetReceivedClientCert(index: Integer): IChilkatCert; safecall;
    function GetSslAcceptableClientCaDn(index: Integer): WideString; safecall;
    function GetSslServerCert: IChilkatCert; safecall;
    function InitSslServer(const cert: IChilkatCert): Integer; safecall;
    function IsUnlocked: Integer; safecall;
    function PollDataAvailable: Integer; safecall;
    function ReceiveBytes: OleVariant; safecall;
    function ReceiveBytesENC(const encodingAlg: WideString): WideString; safecall;
    function ReceiveBytesN(numBytes: Integer): OleVariant; safecall;
    function ReceiveBytesToFile(const appendFilename: WideString): Integer; safecall;
    function ReceiveCount: Integer; safecall;
    function ReceiveNBytesENC(numBytes: Integer; const encodingAlg: WideString): WideString; safecall;
    function ReceiveString: WideString; safecall;
    function ReceiveStringMaxN(maxBytes: Integer): WideString; safecall;
    function ReceiveStringUntilByte(byteValue: Integer): WideString; safecall;
    function ReceiveToCRLF: WideString; safecall;
    function ReceiveUntilByte(byteValue: Integer): OleVariant; safecall;
    function ReceiveUntilMatch(const matchStr: WideString): WideString; safecall;
    function SelectForReading(timeoutMs: Integer): Integer; safecall;
    function SelectForWriting(timeoutMs: Integer): Integer; safecall;
    function SendBytes(data: OleVariant): Integer; safecall;
    function SendBytesENC(const encodedBytes: WideString; const encodingAlg: WideString): Integer; safecall;
    function SendCount(byteCount: Integer): Integer; safecall;
    function SendString(const str: WideString): Integer; safecall;
    function SetSslClientCert(const cert: IChilkatCert): Integer; safecall;
    function SetSslClientCertPem(const pemDataOrFilename: WideString; const pemPassword: WideString): Integer; safecall;
    function SetSslClientCertPfx(const pfxFilename: WideString; const pfxPassword: WideString): Integer; safecall;
    procedure SleepMs(millisec: Integer); safecall;
    procedure StartTiming; safecall;
    function TakeSocket(const sock: IChilkatSocket): Integer; safecall;
    function UnlockComponent(const unlockCode: WideString): Integer; safecall;
    procedure Dispose; safecall;
    function BuildHttpGetRequest(const url: WideString): WideString; safecall;
    procedure DnsCacheClear; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property AsyncAcceptFinished: Integer read Get_AsyncAcceptFinished;
    property AsyncAcceptLog: WideString read Get_AsyncAcceptLog;
    property AsyncAcceptSuccess: Integer read Get_AsyncAcceptSuccess;
    property AsyncConnectFinished: Integer read Get_AsyncConnectFinished;
    property AsyncConnectLog: WideString read Get_AsyncConnectLog;
    property AsyncConnectSuccess: Integer read Get_AsyncConnectSuccess;
    property AsyncDnsFinished: Integer read Get_AsyncDnsFinished;
    property AsyncDnsLog: WideString read Get_AsyncDnsLog;
    property AsyncDnsResult: WideString read Get_AsyncDnsResult;
    property AsyncDnsSuccess: Integer read Get_AsyncDnsSuccess;
    property AsyncReceiveFinished: Integer read Get_AsyncReceiveFinished;
    property AsyncReceiveLog: WideString read Get_AsyncReceiveLog;
    property AsyncReceiveSuccess: Integer read Get_AsyncReceiveSuccess;
    property AsyncReceivedBytes: OleVariant read Get_AsyncReceivedBytes;
    property AsyncReceivedString: WideString read Get_AsyncReceivedString;
    property AsyncSendFinished: Integer read Get_AsyncSendFinished;
    property AsyncSendLog: WideString read Get_AsyncSendLog;
    property AsyncSendSuccess: Integer read Get_AsyncSendSuccess;
    property BigEndian: Integer read Get_BigEndian write Set_BigEndian;
    property ClientIpAddress: WideString read Get_ClientIpAddress write Set_ClientIpAddress;
    property ClientPort: Integer read Get_ClientPort write Set_ClientPort;
    property ConnectFailReason: Integer read Get_ConnectFailReason;
    property DebugConnectDelayMs: Integer read Get_DebugConnectDelayMs write Set_DebugConnectDelayMs;
    property DebugDnsDelayMs: Integer read Get_DebugDnsDelayMs write Set_DebugDnsDelayMs;
    property ElapsedSeconds: Integer read Get_ElapsedSeconds;
    property HeartbeatMs: Integer read Get_HeartbeatMs write Set_HeartbeatMs;
    property HttpProxyAuthMethod: WideString read Get_HttpProxyAuthMethod write Set_HttpProxyAuthMethod;
    property HttpProxyDomain: WideString read Get_HttpProxyDomain write Set_HttpProxyDomain;
    property HttpProxyHostname: WideString read Get_HttpProxyHostname write Set_HttpProxyHostname;
    property HttpProxyPassword: WideString read Get_HttpProxyPassword write Set_HttpProxyPassword;
    property HttpProxyPort: Integer read Get_HttpProxyPort write Set_HttpProxyPort;
    property HttpProxyUsername: WideString read Get_HttpProxyUsername write Set_HttpProxyUsername;
    property IsConnected: Integer read Get_IsConnected;
    property KeepSessionLog: Integer read Get_KeepSessionLog write Set_KeepSessionLog;
    property LastMethodFailed: Integer read Get_LastMethodFailed;
    property ListenIpv6: Integer read Get_ListenIpv6 write Set_ListenIpv6;
    property LocalIpAddress: WideString read Get_LocalIpAddress;
    property LocalPort: Integer read Get_LocalPort;
    property MaxReadIdleMs: Integer read Get_MaxReadIdleMs write Set_MaxReadIdleMs;
    property MaxSendIdleMs: Integer read Get_MaxSendIdleMs write Set_MaxSendIdleMs;
    property MyIpAddress: WideString read Get_MyIpAddress;
    property NumReceivedClientCerts: Integer read Get_NumReceivedClientCerts;
    property NumSocketsInSet: Integer read Get_NumSocketsInSet;
    property NumSslAcceptableClientCAs: Integer read Get_NumSslAcceptableClientCAs;
    property ObjectId: Integer read Get_ObjectId;
    property ReceivePacketSize: Integer read Get_ReceivePacketSize write Set_ReceivePacketSize;
    property ReceivedCount: Integer read Get_ReceivedCount write Set_ReceivedCount;
    property RemoteIpAddress: WideString read Get_RemoteIpAddress;
    property RemotePort: Integer read Get_RemotePort;
    property SelectorIndex: Integer read Get_SelectorIndex write Set_SelectorIndex;
    property SelectorReadIndex: Integer read Get_SelectorReadIndex write Set_SelectorReadIndex;
    property SelectorWriteIndex: Integer read Get_SelectorWriteIndex write Set_SelectorWriteIndex;
    property SendPacketSize: Integer read Get_SendPacketSize write Set_SendPacketSize;
    property SessionLog: WideString read Get_SessionLog;
    property SessionLogEncoding: WideString read Get_SessionLogEncoding write Set_SessionLogEncoding;
    property SoRcvBuf: Integer read Get_SoRcvBuf write Set_SoRcvBuf;
    property SoReuseAddr: Integer read Get_SoReuseAddr write Set_SoReuseAddr;
    property SoSndBuf: Integer read Get_SoSndBuf write Set_SoSndBuf;
    property SocksHostname: WideString read Get_SocksHostname write Set_SocksHostname;
    property SocksPassword: WideString read Get_SocksPassword write Set_SocksPassword;
    property SocksPort: Integer read Get_SocksPort write Set_SocksPort;
    property SocksUsername: WideString read Get_SocksUsername write Set_SocksUsername;
    property SocksVersion: Integer read Get_SocksVersion write Set_SocksVersion;
    property Ssl: Integer read Get_Ssl write Set_Ssl;
    property SslProtocol: WideString read Get_SslProtocol write Set_SslProtocol;
    property StringCharset: WideString read Get_StringCharset write Set_StringCharset;
    property TcpNoDelay: Integer read Get_TcpNoDelay write Set_TcpNoDelay;
    property UserData: WideString read Get_UserData write Set_UserData;
    property RequireSslCertVerify: Integer read Get_RequireSslCertVerify write Set_RequireSslCertVerify;
    property PreferIpv6: Integer read Get_PreferIpv6 write Set_PreferIpv6;
  end;

// *********************************************************************//
// DispIntf:  IChilkatSocketDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {93FCA31B-08C3-4E72-836B-B31123F7C2CC}
// *********************************************************************//
  IChilkatSocketDisp = dispinterface
    ['{93FCA31B-08C3-4E72-836B-B31123F7C2CC}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property AsyncAcceptFinished: Integer readonly dispid 100;
    property AsyncAcceptLog: WideString readonly dispid 101;
    property AsyncAcceptSuccess: Integer readonly dispid 102;
    property AsyncConnectFinished: Integer readonly dispid 103;
    property AsyncConnectLog: WideString readonly dispid 104;
    property AsyncConnectSuccess: Integer readonly dispid 105;
    property AsyncDnsFinished: Integer readonly dispid 106;
    property AsyncDnsLog: WideString readonly dispid 107;
    property AsyncDnsResult: WideString readonly dispid 108;
    property AsyncDnsSuccess: Integer readonly dispid 109;
    property AsyncReceiveFinished: Integer readonly dispid 110;
    property AsyncReceiveLog: WideString readonly dispid 111;
    property AsyncReceiveSuccess: Integer readonly dispid 112;
    property AsyncReceivedBytes: OleVariant readonly dispid 113;
    property AsyncReceivedString: WideString readonly dispid 114;
    property AsyncSendFinished: Integer readonly dispid 115;
    property AsyncSendLog: WideString readonly dispid 116;
    property AsyncSendSuccess: Integer readonly dispid 117;
    property BigEndian: Integer dispid 118;
    property ClientIpAddress: WideString dispid 119;
    property ClientPort: Integer dispid 120;
    property ConnectFailReason: Integer readonly dispid 121;
    property DebugConnectDelayMs: Integer dispid 122;
    property DebugDnsDelayMs: Integer dispid 123;
    property ElapsedSeconds: Integer readonly dispid 124;
    property HeartbeatMs: Integer dispid 125;
    property HttpProxyAuthMethod: WideString dispid 126;
    property HttpProxyDomain: WideString dispid 127;
    property HttpProxyHostname: WideString dispid 128;
    property HttpProxyPassword: WideString dispid 129;
    property HttpProxyPort: Integer dispid 130;
    property HttpProxyUsername: WideString dispid 131;
    property IsConnected: Integer readonly dispid 132;
    property KeepSessionLog: Integer dispid 133;
    property LastMethodFailed: Integer readonly dispid 134;
    property ListenIpv6: Integer dispid 135;
    property LocalIpAddress: WideString readonly dispid 136;
    property LocalPort: Integer readonly dispid 137;
    property MaxReadIdleMs: Integer dispid 138;
    property MaxSendIdleMs: Integer dispid 139;
    property MyIpAddress: WideString readonly dispid 140;
    property NumReceivedClientCerts: Integer readonly dispid 141;
    property NumSocketsInSet: Integer readonly dispid 142;
    property NumSslAcceptableClientCAs: Integer readonly dispid 143;
    property ObjectId: Integer readonly dispid 144;
    property ReceivePacketSize: Integer dispid 145;
    property ReceivedCount: Integer dispid 146;
    property RemoteIpAddress: WideString readonly dispid 147;
    property RemotePort: Integer readonly dispid 148;
    property SelectorIndex: Integer dispid 149;
    property SelectorReadIndex: Integer dispid 150;
    property SelectorWriteIndex: Integer dispid 151;
    property SendPacketSize: Integer dispid 152;
    property SessionLog: WideString readonly dispid 153;
    property SessionLogEncoding: WideString dispid 154;
    property SoRcvBuf: Integer dispid 155;
    property SoReuseAddr: Integer dispid 156;
    property SoSndBuf: Integer dispid 157;
    property SocksHostname: WideString dispid 158;
    property SocksPassword: WideString dispid 159;
    property SocksPort: Integer dispid 160;
    property SocksUsername: WideString dispid 161;
    property SocksVersion: Integer dispid 162;
    property Ssl: Integer dispid 163;
    property SslProtocol: WideString dispid 164;
    property StringCharset: WideString dispid 165;
    property TcpNoDelay: Integer dispid 166;
    property UserData: WideString dispid 167;
    property RequireSslCertVerify: Integer dispid 229;
    property PreferIpv6: Integer dispid 232;
    function AcceptNextConnection(maxWaitMs: Integer): IChilkatSocket; dispid 168;
    function AddSslAcceptableClientCaDn(const certAuthDN: WideString): Integer; dispid 169;
    procedure AsyncAcceptAbort; dispid 170;
    function AsyncAcceptSocket: IChilkatSocket; dispid 171;
    function AsyncAcceptStart(maxWaitMs: Integer): Integer; dispid 172;
    procedure AsyncConnectAbort; dispid 173;
    function AsyncConnectStart(const Hostname: WideString; Port: Integer; Ssl: Integer; 
                               maxWaitMs: Integer): Integer; dispid 174;
    procedure AsyncDnsAbort; dispid 175;
    function AsyncDnsStart(const Hostname: WideString; maxWaitMs: Integer): Integer; dispid 176;
    procedure AsyncReceiveAbort; dispid 177;
    function AsyncReceiveBytes: Integer; dispid 178;
    function AsyncReceiveBytesN(numBytes: Integer): Integer; dispid 179;
    function AsyncReceiveString: Integer; dispid 180;
    function AsyncReceiveToCRLF: Integer; dispid 181;
    function AsyncReceiveUntilMatch(const matchStr: WideString): Integer; dispid 182;
    procedure AsyncSendAbort; dispid 183;
    function AsyncSendByteData(data: OleVariant): Integer; dispid 184;
    function AsyncSendBytes(data: OleVariant): Integer; dispid 185;
    function AsyncSendString(const str: WideString): Integer; dispid 186;
    function BindAndListen(Port: Integer; backlog: Integer): Integer; dispid 187;
    function CheckWriteable(maxWaitMs: Integer): Integer; dispid 189;
    procedure ClearSessionLog; dispid 190;
    procedure Close(maxWaitMs: Integer); dispid 191;
    function Connect(const Hostname: WideString; Port: Integer; Ssl: Integer; maxWaitMs: Integer): Integer; dispid 192;
    function ConvertFromSsl: Integer; dispid 193;
    function ConvertToSsl: Integer; dispid 194;
    function DnsLookup(const Hostname: WideString; maxWaitMs: Integer): WideString; dispid 195;
    function GetMyCert: IChilkatCert; dispid 196;
    function GetReceivedClientCert(index: Integer): IChilkatCert; dispid 197;
    function GetSslAcceptableClientCaDn(index: Integer): WideString; dispid 198;
    function GetSslServerCert: IChilkatCert; dispid 199;
    function InitSslServer(const cert: IChilkatCert): Integer; dispid 200;
    function IsUnlocked: Integer; dispid 201;
    function PollDataAvailable: Integer; dispid 202;
    function ReceiveBytes: OleVariant; dispid 203;
    function ReceiveBytesENC(const encodingAlg: WideString): WideString; dispid 204;
    function ReceiveBytesN(numBytes: Integer): OleVariant; dispid 205;
    function ReceiveBytesToFile(const appendFilename: WideString): Integer; dispid 206;
    function ReceiveCount: Integer; dispid 207;
    function ReceiveNBytesENC(numBytes: Integer; const encodingAlg: WideString): WideString; dispid 208;
    function ReceiveString: WideString; dispid 209;
    function ReceiveStringMaxN(maxBytes: Integer): WideString; dispid 210;
    function ReceiveStringUntilByte(byteValue: Integer): WideString; dispid 211;
    function ReceiveToCRLF: WideString; dispid 212;
    function ReceiveUntilByte(byteValue: Integer): OleVariant; dispid 213;
    function ReceiveUntilMatch(const matchStr: WideString): WideString; dispid 214;
    function SelectForReading(timeoutMs: Integer): Integer; dispid 215;
    function SelectForWriting(timeoutMs: Integer): Integer; dispid 216;
    function SendBytes(data: OleVariant): Integer; dispid 217;
    function SendBytesENC(const encodedBytes: WideString; const encodingAlg: WideString): Integer; dispid 218;
    function SendCount(byteCount: Integer): Integer; dispid 219;
    function SendString(const str: WideString): Integer; dispid 220;
    function SetSslClientCert(const cert: IChilkatCert): Integer; dispid 221;
    function SetSslClientCertPem(const pemDataOrFilename: WideString; const pemPassword: WideString): Integer; dispid 222;
    function SetSslClientCertPfx(const pfxFilename: WideString; const pfxPassword: WideString): Integer; dispid 223;
    procedure SleepMs(millisec: Integer); dispid 224;
    procedure StartTiming; dispid 225;
    function TakeSocket(const sock: IChilkatSocket): Integer; dispid 226;
    function UnlockComponent(const unlockCode: WideString): Integer; dispid 227;
    procedure Dispose; dispid 228;
    function BuildHttpGetRequest(const url: WideString): WideString; dispid 230;
    procedure DnsCacheClear; dispid 231;
  end;

// *********************************************************************//
// Interface: IChilkatSFtpFile
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {62E25622-219C-4569-97FA-89594674076A}
// *********************************************************************//
  IChilkatSFtpFile = interface(IDispatch)
    ['{62E25622-219C-4569-97FA-89594674076A}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_CreateTime: TDateTime; safecall;
    function Get_CreateTimeStr: WideString; safecall;
    function Get_FileType: WideString; safecall;
    function Get_filename: WideString; safecall;
    function Get_Gid: Integer; safecall;
    function Get_Group: WideString; safecall;
    function Get_IsAppendOnly: Integer; safecall;
    function Get_IsArchive: Integer; safecall;
    function Get_IsCaseInsensitive: Integer; safecall;
    function Get_IsCompressed: Integer; safecall;
    function Get_isDirectory: Integer; safecall;
    function Get_IsEncrypted: Integer; safecall;
    function Get_IsHidden: Integer; safecall;
    function Get_IsImmutable: Integer; safecall;
    function Get_IsReadOnly: Integer; safecall;
    function Get_IsRegular: Integer; safecall;
    function Get_IsSparse: Integer; safecall;
    function Get_IsSymLink: Integer; safecall;
    function Get_IsSync: Integer; safecall;
    function Get_IsSystem: Integer; safecall;
    function Get_LastAccessTime: TDateTime; safecall;
    function Get_LastAccessTimeStr: WideString; safecall;
    function Get_LastModifiedTime: TDateTime; safecall;
    function Get_LastModifiedTimeStr: WideString; safecall;
    function Get_Owner: WideString; safecall;
    function Get_Permissions: Integer; safecall;
    function Get_Size32: Integer; safecall;
    function Get_SizeStr: WideString; safecall;
    function Get_Uid: Integer; safecall;
    function GetLastAccessDt: ICkDateTime; safecall;
    function GetLastModifiedDt: ICkDateTime; safecall;
    function GetCreateDt: ICkDateTime; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property CreateTime: TDateTime read Get_CreateTime;
    property CreateTimeStr: WideString read Get_CreateTimeStr;
    property FileType: WideString read Get_FileType;
    property filename: WideString read Get_filename;
    property Gid: Integer read Get_Gid;
    property Group: WideString read Get_Group;
    property IsAppendOnly: Integer read Get_IsAppendOnly;
    property IsArchive: Integer read Get_IsArchive;
    property IsCaseInsensitive: Integer read Get_IsCaseInsensitive;
    property IsCompressed: Integer read Get_IsCompressed;
    property isDirectory: Integer read Get_isDirectory;
    property IsEncrypted: Integer read Get_IsEncrypted;
    property IsHidden: Integer read Get_IsHidden;
    property IsImmutable: Integer read Get_IsImmutable;
    property IsReadOnly: Integer read Get_IsReadOnly;
    property IsRegular: Integer read Get_IsRegular;
    property IsSparse: Integer read Get_IsSparse;
    property IsSymLink: Integer read Get_IsSymLink;
    property IsSync: Integer read Get_IsSync;
    property IsSystem: Integer read Get_IsSystem;
    property LastAccessTime: TDateTime read Get_LastAccessTime;
    property LastAccessTimeStr: WideString read Get_LastAccessTimeStr;
    property LastModifiedTime: TDateTime read Get_LastModifiedTime;
    property LastModifiedTimeStr: WideString read Get_LastModifiedTimeStr;
    property Owner: WideString read Get_Owner;
    property Permissions: Integer read Get_Permissions;
    property Size32: Integer read Get_Size32;
    property SizeStr: WideString read Get_SizeStr;
    property Uid: Integer read Get_Uid;
  end;

// *********************************************************************//
// DispIntf:  IChilkatSFtpFileDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {62E25622-219C-4569-97FA-89594674076A}
// *********************************************************************//
  IChilkatSFtpFileDisp = dispinterface
    ['{62E25622-219C-4569-97FA-89594674076A}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property CreateTime: TDateTime readonly dispid 100;
    property CreateTimeStr: WideString readonly dispid 101;
    property FileType: WideString readonly dispid 102;
    property filename: WideString readonly dispid 103;
    property Gid: Integer readonly dispid 104;
    property Group: WideString readonly dispid 105;
    property IsAppendOnly: Integer readonly dispid 106;
    property IsArchive: Integer readonly dispid 107;
    property IsCaseInsensitive: Integer readonly dispid 108;
    property IsCompressed: Integer readonly dispid 109;
    property isDirectory: Integer readonly dispid 110;
    property IsEncrypted: Integer readonly dispid 111;
    property IsHidden: Integer readonly dispid 112;
    property IsImmutable: Integer readonly dispid 113;
    property IsReadOnly: Integer readonly dispid 114;
    property IsRegular: Integer readonly dispid 115;
    property IsSparse: Integer readonly dispid 116;
    property IsSymLink: Integer readonly dispid 117;
    property IsSync: Integer readonly dispid 118;
    property IsSystem: Integer readonly dispid 119;
    property LastAccessTime: TDateTime readonly dispid 120;
    property LastAccessTimeStr: WideString readonly dispid 121;
    property LastModifiedTime: TDateTime readonly dispid 122;
    property LastModifiedTimeStr: WideString readonly dispid 123;
    property Owner: WideString readonly dispid 124;
    property Permissions: Integer readonly dispid 125;
    property Size32: Integer readonly dispid 126;
    property SizeStr: WideString readonly dispid 127;
    property Uid: Integer readonly dispid 128;
    function GetLastAccessDt: ICkDateTime; dispid 129;
    function GetLastModifiedDt: ICkDateTime; dispid 130;
    function GetCreateDt: ICkDateTime; dispid 133;
  end;

// *********************************************************************//
// Interface: IChilkatSFtpDir
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {38C0D3A8-6FB8-42B1-BDC0-077177D72323}
// *********************************************************************//
  IChilkatSFtpDir = interface(IDispatch)
    ['{38C0D3A8-6FB8-42B1-BDC0-077177D72323}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_OriginalPath: WideString; safecall;
    function Get_NumFilesAndDirs: Integer; safecall;
    function GetFilename(index: Integer): WideString; safecall;
    function GetFileObject(index: Integer): IChilkatSFtpFile; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property OriginalPath: WideString read Get_OriginalPath;
    property NumFilesAndDirs: Integer read Get_NumFilesAndDirs;
  end;

// *********************************************************************//
// DispIntf:  IChilkatSFtpDirDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {38C0D3A8-6FB8-42B1-BDC0-077177D72323}
// *********************************************************************//
  IChilkatSFtpDirDisp = dispinterface
    ['{38C0D3A8-6FB8-42B1-BDC0-077177D72323}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property OriginalPath: WideString readonly dispid 100;
    property NumFilesAndDirs: Integer readonly dispid 101;
    function GetFilename(index: Integer): WideString; dispid 102;
    function GetFileObject(index: Integer): IChilkatSFtpFile; dispid 105;
  end;

// *********************************************************************//
// Interface: IChilkatSFtp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2701FB1F-7865-4CD0-8E1B-2BB97F701946}
// *********************************************************************//
  IChilkatSFtp = interface(IDispatch)
    ['{2701FB1F-7865-4CD0-8E1B-2BB97F701946}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_AccumulateBuffer: OleVariant; safecall;
    function Get_ClientIdentifier: WideString; safecall;
    procedure Set_ClientIdentifier(const pVal: WideString); safecall;
    function Get_ClientIpAddress: WideString; safecall;
    procedure Set_ClientIpAddress(const pVal: WideString); safecall;
    function Get_ConnectTimeoutMs: Integer; safecall;
    procedure Set_ConnectTimeoutMs(pVal: Integer); safecall;
    function Get_DisconnectCode: Integer; safecall;
    function Get_DisconnectReason: WideString; safecall;
    function Get_EnableCache: Integer; safecall;
    procedure Set_EnableCache(pVal: Integer); safecall;
    function Get_FilenameCharset: WideString; safecall;
    procedure Set_FilenameCharset(const pVal: WideString); safecall;
    function Get_ForceCipher: WideString; safecall;
    procedure Set_ForceCipher(const pVal: WideString); safecall;
    function Get_ForceV3: Integer; safecall;
    procedure Set_ForceV3(pVal: Integer); safecall;
    function Get_HeartbeatMs: Integer; safecall;
    procedure Set_HeartbeatMs(pVal: Integer); safecall;
    function Get_HostKeyAlg: WideString; safecall;
    procedure Set_HostKeyAlg(const pVal: WideString); safecall;
    function Get_HostKeyFingerprint: WideString; safecall;
    function Get_HttpProxyAuthMethod: WideString; safecall;
    procedure Set_HttpProxyAuthMethod(const pVal: WideString); safecall;
    function Get_HttpProxyDomain: WideString; safecall;
    procedure Set_HttpProxyDomain(const pVal: WideString); safecall;
    function Get_HttpProxyHostname: WideString; safecall;
    procedure Set_HttpProxyHostname(const pVal: WideString); safecall;
    function Get_HttpProxyPassword: WideString; safecall;
    procedure Set_HttpProxyPassword(const pVal: WideString); safecall;
    function Get_HttpProxyPort: Integer; safecall;
    procedure Set_HttpProxyPort(pVal: Integer); safecall;
    function Get_HttpProxyUsername: WideString; safecall;
    procedure Set_HttpProxyUsername(const pVal: WideString); safecall;
    function Get_IdleTimeoutMs: Integer; safecall;
    procedure Set_IdleTimeoutMs(pVal: Integer); safecall;
    function Get_IncludeDotDirs: Integer; safecall;
    procedure Set_IncludeDotDirs(pVal: Integer); safecall;
    function Get_InitializeFailCode: Integer; safecall;
    function Get_InitializeFailReason: WideString; safecall;
    function Get_IsConnected: Integer; safecall;
    function Get_KeepSessionLog: Integer; safecall;
    procedure Set_KeepSessionLog(pVal: Integer); safecall;
    function Get_MaxPacketSize: Integer; safecall;
    procedure Set_MaxPacketSize(pVal: Integer); safecall;
    function Get_PasswordChangeRequested: Integer; safecall;
    function Get_PreserveDate: Integer; safecall;
    procedure Set_PreserveDate(pVal: Integer); safecall;
    function Get_ProtocolVersion: Integer; safecall;
    function Get_SessionLog: WideString; safecall;
    function Get_SoRcvBuf: Integer; safecall;
    procedure Set_SoRcvBuf(pVal: Integer); safecall;
    function Get_SoSndBuf: Integer; safecall;
    procedure Set_SoSndBuf(pVal: Integer); safecall;
    function Get_SocksHostname: WideString; safecall;
    procedure Set_SocksHostname(const pVal: WideString); safecall;
    function Get_SocksPassword: WideString; safecall;
    procedure Set_SocksPassword(const pVal: WideString); safecall;
    function Get_SocksPort: Integer; safecall;
    procedure Set_SocksPort(pVal: Integer); safecall;
    function Get_SocksUsername: WideString; safecall;
    procedure Set_SocksUsername(const pVal: WideString); safecall;
    function Get_SocksVersion: Integer; safecall;
    procedure Set_SocksVersion(pVal: Integer); safecall;
    function Get_SyncMustMatch: WideString; safecall;
    procedure Set_SyncMustMatch(const pVal: WideString); safecall;
    function Get_TcpNoDelay: Integer; safecall;
    procedure Set_TcpNoDelay(pVal: Integer); safecall;
    function Get_UploadChunkSize: Integer; safecall;
    procedure Set_UploadChunkSize(pVal: Integer); safecall;
    function Get_UtcMode: Integer; safecall;
    procedure Set_UtcMode(pVal: Integer); safecall;
    function Get_SyncMustNotMatch: WideString; safecall;
    procedure Set_SyncMustNotMatch(const pVal: WideString); safecall;
    function Get_PreferIpv6: Integer; safecall;
    procedure Set_PreferIpv6(pVal: Integer); safecall;
    function AccumulateBytes(const handle: WideString; maxBytes: Integer): Integer; safecall;
    function Add64(const n1: WideString; const n2: WideString): WideString; safecall;
    function AuthenticatePk(const UserName: WideString; const PrivateKey: IChilkatSshKey): Integer; safecall;
    function AuthenticatePw(const Login: WideString; const password: WideString): Integer; safecall;
    function AuthenticatePwPk(const UserName: WideString; const password: WideString; 
                              const PrivateKey: IChilkatSshKey): Integer; safecall;
    procedure ClearAccumulateBuffer; safecall;
    procedure ClearCache; safecall;
    procedure ClearSessionLog; safecall;
    function CloseHandle(const handle: WideString): Integer; safecall;
    function Connect(const Hostname: WideString; Port: Integer): Integer; safecall;
    function CopyFileAttr(const localFilename: WideString; const remoteFilename: WideString; 
                          bIsHandle: Integer): Integer; safecall;
    function CreateDir(const path: WideString): Integer; safecall;
    procedure Disconnect; safecall;
    function DownloadFile(const handle: WideString; const toFilename: WideString): Integer; safecall;
    function DownloadFileByName(const remoteFilePath: WideString; const localFilePath: WideString): Integer; safecall;
    function Eof(const handle: WideString): Integer; safecall;
    function GetFileCreateDt(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                             bIsHandle: Integer): ICkDateTime; safecall;
    function GetFileCreateTime(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                               bIsHandle: Integer): TDateTime; safecall;
    function GetFileCreateTimeStr(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                                  bIsHandle: Integer): WideString; safecall;
    function GetFileGroup(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                          bIsHandle: Integer): WideString; safecall;
    function GetFileLastAccess(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                               bIsHandle: Integer): TDateTime; safecall;
    function GetFileLastAccessDt(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                                 bIsHandle: Integer): ICkDateTime; safecall;
    function GetFileLastAccessStr(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                                  bIsHandle: Integer): WideString; safecall;
    function GetFileLastModified(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                                 bIsHandle: Integer): TDateTime; safecall;
    function GetFileLastModifiedDt(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                                   bIsHandle: Integer): ICkDateTime; safecall;
    function GetFileLastModifiedStr(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                                    bIsHandle: Integer): WideString; safecall;
    function GetFileOwner(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                          bIsHandle: Integer): WideString; safecall;
    function GetFilePermissions(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                                bIsHandle: Integer): Integer; safecall;
    function GetFileSize32(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                           bIsHandle: Integer): Integer; safecall;
    function GetFileSizeStr(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                            bIsHandle: Integer): WideString; safecall;
    function InitializeSftp: Integer; safecall;
    function LastReadFailed(const handle: WideString): Integer; safecall;
    function LastReadNumBytes(const handle: WideString): Integer; safecall;
    function OpenDir(const path: WideString): WideString; safecall;
    function OpenFile(const filename: WideString; const access: WideString; 
                      const createDisp: WideString): WideString; safecall;
    function ReadDir(const handle: WideString): IChilkatSFtpDir; safecall;
    function ReadFileBytes(const handle: WideString; numBytes: Integer): OleVariant; safecall;
    function ReadFileBytes32(const handle: WideString; offset: Integer; numBytes: Integer): OleVariant; safecall;
    function ReadFileBytes64s(const handle: WideString; const offset64: WideString; 
                              numBytes: Integer): OleVariant; safecall;
    function ReadFileText(const handle: WideString; numBytes: Integer; const charset: WideString): WideString; safecall;
    function ReadFileText32(const handle: WideString; offset32: Integer; numBytes: Integer; 
                            const charset: WideString): WideString; safecall;
    function ReadFileText64s(const handle: WideString; const offset64: WideString; 
                             numBytes: Integer; const charset: WideString): WideString; safecall;
    function RealPath(const OriginalPath: WideString; const composePath: WideString): WideString; safecall;
    function RemoveDir(const path: WideString): Integer; safecall;
    function RemoveFile(const filename: WideString): Integer; safecall;
    function RenameFileOrDir(const oldPath: WideString; const newPath: WideString): Integer; safecall;
    function ResumeDownloadFileByName(const remoteFilePath: WideString; 
                                      const localFilePath: WideString): Integer; safecall;
    function ResumeUploadFileByName(const remoteFilePath: WideString; 
                                    const localFilePath: WideString): Integer; safecall;
    function SetCreateDt(const pathOrHandle: WideString; bIsHandle: Integer; 
                         const CreateTime: ICkDateTime): Integer; safecall;
    function SetCreateTime(const pathOrHandle: WideString; bIsHandle: Integer; CreateTime: TDateTime): Integer; safecall;
    function SetCreateTimeStr(const pathOrHandle: WideString; bIsHandle: Integer; 
                              const dateTimeStr: WideString): Integer; safecall;
    function SetLastAccessDt(const pathOrHandle: WideString; bIsHandle: Integer; 
                             const CreateTime: ICkDateTime): Integer; safecall;
    function SetLastAccessTime(const pathOrHandle: WideString; bIsHandle: Integer; 
                               CreateTime: TDateTime): Integer; safecall;
    function SetLastAccessTimeStr(const pathOrHandle: WideString; bIsHandle: Integer; 
                                  const dateTimeStr: WideString): Integer; safecall;
    function SetLastModifiedDt(const pathOrHandle: WideString; bIsHandle: Integer; 
                               const CreateTime: ICkDateTime): Integer; safecall;
    function SetLastModifiedTime(const pathOrHandle: WideString; bIsHandle: Integer; 
                                 CreateTime: TDateTime): Integer; safecall;
    function SetLastModifiedTimeStr(const pathOrHandle: WideString; bIsHandle: Integer; 
                                    const dateTimeStr: WideString): Integer; safecall;
    function SetOwnerAndGroup(const pathOrHandle: WideString; bIsHandle: Integer; 
                              const Owner: WideString; const Group: WideString): Integer; safecall;
    function SetPermissions(const pathOrHandle: WideString; bIsHandle: Integer; perm: Integer): Integer; safecall;
    function SyncTreeUpload(const localBaseDir: WideString; const remoteBaseDir: WideString; 
                            mode: Integer; bRecurse: Integer): Integer; safecall;
    function UnlockComponent(const unlockCode: WideString): Integer; safecall;
    function UploadFile(const handle: WideString; const fromFilename: WideString): Integer; safecall;
    function UploadFileByName(const remoteFilePath: WideString; const localFilePath: WideString): Integer; safecall;
    function WriteFileBytes(const handle: WideString; data: OleVariant): Integer; safecall;
    function WriteFileBytes32(const handle: WideString; offset: Integer; data: OleVariant): Integer; safecall;
    function WriteFileBytes64s(const handle: WideString; const offset64: WideString; 
                               data: OleVariant): Integer; safecall;
    function WriteFileText(const handle: WideString; const charset: WideString; 
                           const textData: WideString): Integer; safecall;
    function WriteFileText32(const handle: WideString; offset32: Integer; 
                             const charset: WideString; const textData: WideString): Integer; safecall;
    function WriteFileText64s(const handle: WideString; const offset64: WideString; 
                              const charset: WideString; const textData: WideString): Integer; safecall;
    function SyncTreeDownload(const remoteRoot: WideString; const localRoot: WideString; 
                              mode: Integer; recurse: Integer): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property AccumulateBuffer: OleVariant read Get_AccumulateBuffer;
    property ClientIdentifier: WideString read Get_ClientIdentifier write Set_ClientIdentifier;
    property ClientIpAddress: WideString read Get_ClientIpAddress write Set_ClientIpAddress;
    property ConnectTimeoutMs: Integer read Get_ConnectTimeoutMs write Set_ConnectTimeoutMs;
    property DisconnectCode: Integer read Get_DisconnectCode;
    property DisconnectReason: WideString read Get_DisconnectReason;
    property EnableCache: Integer read Get_EnableCache write Set_EnableCache;
    property FilenameCharset: WideString read Get_FilenameCharset write Set_FilenameCharset;
    property ForceCipher: WideString read Get_ForceCipher write Set_ForceCipher;
    property ForceV3: Integer read Get_ForceV3 write Set_ForceV3;
    property HeartbeatMs: Integer read Get_HeartbeatMs write Set_HeartbeatMs;
    property HostKeyAlg: WideString read Get_HostKeyAlg write Set_HostKeyAlg;
    property HostKeyFingerprint: WideString read Get_HostKeyFingerprint;
    property HttpProxyAuthMethod: WideString read Get_HttpProxyAuthMethod write Set_HttpProxyAuthMethod;
    property HttpProxyDomain: WideString read Get_HttpProxyDomain write Set_HttpProxyDomain;
    property HttpProxyHostname: WideString read Get_HttpProxyHostname write Set_HttpProxyHostname;
    property HttpProxyPassword: WideString read Get_HttpProxyPassword write Set_HttpProxyPassword;
    property HttpProxyPort: Integer read Get_HttpProxyPort write Set_HttpProxyPort;
    property HttpProxyUsername: WideString read Get_HttpProxyUsername write Set_HttpProxyUsername;
    property IdleTimeoutMs: Integer read Get_IdleTimeoutMs write Set_IdleTimeoutMs;
    property IncludeDotDirs: Integer read Get_IncludeDotDirs write Set_IncludeDotDirs;
    property InitializeFailCode: Integer read Get_InitializeFailCode;
    property InitializeFailReason: WideString read Get_InitializeFailReason;
    property IsConnected: Integer read Get_IsConnected;
    property KeepSessionLog: Integer read Get_KeepSessionLog write Set_KeepSessionLog;
    property MaxPacketSize: Integer read Get_MaxPacketSize write Set_MaxPacketSize;
    property PasswordChangeRequested: Integer read Get_PasswordChangeRequested;
    property PreserveDate: Integer read Get_PreserveDate write Set_PreserveDate;
    property ProtocolVersion: Integer read Get_ProtocolVersion;
    property SessionLog: WideString read Get_SessionLog;
    property SoRcvBuf: Integer read Get_SoRcvBuf write Set_SoRcvBuf;
    property SoSndBuf: Integer read Get_SoSndBuf write Set_SoSndBuf;
    property SocksHostname: WideString read Get_SocksHostname write Set_SocksHostname;
    property SocksPassword: WideString read Get_SocksPassword write Set_SocksPassword;
    property SocksPort: Integer read Get_SocksPort write Set_SocksPort;
    property SocksUsername: WideString read Get_SocksUsername write Set_SocksUsername;
    property SocksVersion: Integer read Get_SocksVersion write Set_SocksVersion;
    property SyncMustMatch: WideString read Get_SyncMustMatch write Set_SyncMustMatch;
    property TcpNoDelay: Integer read Get_TcpNoDelay write Set_TcpNoDelay;
    property UploadChunkSize: Integer read Get_UploadChunkSize write Set_UploadChunkSize;
    property UtcMode: Integer read Get_UtcMode write Set_UtcMode;
    property SyncMustNotMatch: WideString read Get_SyncMustNotMatch write Set_SyncMustNotMatch;
    property PreferIpv6: Integer read Get_PreferIpv6 write Set_PreferIpv6;
  end;

// *********************************************************************//
// DispIntf:  IChilkatSFtpDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2701FB1F-7865-4CD0-8E1B-2BB97F701946}
// *********************************************************************//
  IChilkatSFtpDisp = dispinterface
    ['{2701FB1F-7865-4CD0-8E1B-2BB97F701946}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property AccumulateBuffer: OleVariant readonly dispid 100;
    property ClientIdentifier: WideString dispid 101;
    property ClientIpAddress: WideString dispid 102;
    property ConnectTimeoutMs: Integer dispid 103;
    property DisconnectCode: Integer readonly dispid 104;
    property DisconnectReason: WideString readonly dispid 105;
    property EnableCache: Integer dispid 106;
    property FilenameCharset: WideString dispid 107;
    property ForceCipher: WideString dispid 108;
    property ForceV3: Integer dispid 109;
    property HeartbeatMs: Integer dispid 110;
    property HostKeyAlg: WideString dispid 111;
    property HostKeyFingerprint: WideString readonly dispid 112;
    property HttpProxyAuthMethod: WideString dispid 113;
    property HttpProxyDomain: WideString dispid 114;
    property HttpProxyHostname: WideString dispid 115;
    property HttpProxyPassword: WideString dispid 116;
    property HttpProxyPort: Integer dispid 117;
    property HttpProxyUsername: WideString dispid 118;
    property IdleTimeoutMs: Integer dispid 119;
    property IncludeDotDirs: Integer dispid 120;
    property InitializeFailCode: Integer readonly dispid 121;
    property InitializeFailReason: WideString readonly dispid 122;
    property IsConnected: Integer readonly dispid 123;
    property KeepSessionLog: Integer dispid 124;
    property MaxPacketSize: Integer dispid 125;
    property PasswordChangeRequested: Integer readonly dispid 126;
    property PreserveDate: Integer dispid 127;
    property ProtocolVersion: Integer readonly dispid 128;
    property SessionLog: WideString readonly dispid 129;
    property SoRcvBuf: Integer dispid 130;
    property SoSndBuf: Integer dispid 131;
    property SocksHostname: WideString dispid 132;
    property SocksPassword: WideString dispid 133;
    property SocksPort: Integer dispid 134;
    property SocksUsername: WideString dispid 135;
    property SocksVersion: Integer dispid 136;
    property SyncMustMatch: WideString dispid 137;
    property TcpNoDelay: Integer dispid 138;
    property UploadChunkSize: Integer dispid 139;
    property UtcMode: Integer dispid 140;
    property SyncMustNotMatch: WideString dispid 141;
    property PreferIpv6: Integer dispid 212;
    function AccumulateBytes(const handle: WideString; maxBytes: Integer): Integer; dispid 142;
    function Add64(const n1: WideString; const n2: WideString): WideString; dispid 143;
    function AuthenticatePk(const UserName: WideString; const PrivateKey: IChilkatSshKey): Integer; dispid 144;
    function AuthenticatePw(const Login: WideString; const password: WideString): Integer; dispid 145;
    function AuthenticatePwPk(const UserName: WideString; const password: WideString; 
                              const PrivateKey: IChilkatSshKey): Integer; dispid 146;
    procedure ClearAccumulateBuffer; dispid 147;
    procedure ClearCache; dispid 148;
    procedure ClearSessionLog; dispid 149;
    function CloseHandle(const handle: WideString): Integer; dispid 150;
    function Connect(const Hostname: WideString; Port: Integer): Integer; dispid 151;
    function CopyFileAttr(const localFilename: WideString; const remoteFilename: WideString; 
                          bIsHandle: Integer): Integer; dispid 152;
    function CreateDir(const path: WideString): Integer; dispid 153;
    procedure Disconnect; dispid 154;
    function DownloadFile(const handle: WideString; const toFilename: WideString): Integer; dispid 155;
    function DownloadFileByName(const remoteFilePath: WideString; const localFilePath: WideString): Integer; dispid 156;
    function Eof(const handle: WideString): Integer; dispid 157;
    function GetFileCreateDt(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                             bIsHandle: Integer): ICkDateTime; dispid 158;
    function GetFileCreateTime(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                               bIsHandle: Integer): TDateTime; dispid 159;
    function GetFileCreateTimeStr(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                                  bIsHandle: Integer): WideString; dispid 160;
    function GetFileGroup(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                          bIsHandle: Integer): WideString; dispid 161;
    function GetFileLastAccess(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                               bIsHandle: Integer): TDateTime; dispid 162;
    function GetFileLastAccessDt(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                                 bIsHandle: Integer): ICkDateTime; dispid 163;
    function GetFileLastAccessStr(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                                  bIsHandle: Integer): WideString; dispid 164;
    function GetFileLastModified(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                                 bIsHandle: Integer): TDateTime; dispid 165;
    function GetFileLastModifiedDt(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                                   bIsHandle: Integer): ICkDateTime; dispid 166;
    function GetFileLastModifiedStr(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                                    bIsHandle: Integer): WideString; dispid 167;
    function GetFileOwner(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                          bIsHandle: Integer): WideString; dispid 168;
    function GetFilePermissions(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                                bIsHandle: Integer): Integer; dispid 169;
    function GetFileSize32(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                           bIsHandle: Integer): Integer; dispid 170;
    function GetFileSizeStr(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                            bIsHandle: Integer): WideString; dispid 171;
    function InitializeSftp: Integer; dispid 172;
    function LastReadFailed(const handle: WideString): Integer; dispid 173;
    function LastReadNumBytes(const handle: WideString): Integer; dispid 174;
    function OpenDir(const path: WideString): WideString; dispid 175;
    function OpenFile(const filename: WideString; const access: WideString; 
                      const createDisp: WideString): WideString; dispid 176;
    function ReadDir(const handle: WideString): IChilkatSFtpDir; dispid 177;
    function ReadFileBytes(const handle: WideString; numBytes: Integer): OleVariant; dispid 178;
    function ReadFileBytes32(const handle: WideString; offset: Integer; numBytes: Integer): OleVariant; dispid 179;
    function ReadFileBytes64s(const handle: WideString; const offset64: WideString; 
                              numBytes: Integer): OleVariant; dispid 180;
    function ReadFileText(const handle: WideString; numBytes: Integer; const charset: WideString): WideString; dispid 181;
    function ReadFileText32(const handle: WideString; offset32: Integer; numBytes: Integer; 
                            const charset: WideString): WideString; dispid 182;
    function ReadFileText64s(const handle: WideString; const offset64: WideString; 
                             numBytes: Integer; const charset: WideString): WideString; dispid 183;
    function RealPath(const OriginalPath: WideString; const composePath: WideString): WideString; dispid 184;
    function RemoveDir(const path: WideString): Integer; dispid 185;
    function RemoveFile(const filename: WideString): Integer; dispid 186;
    function RenameFileOrDir(const oldPath: WideString; const newPath: WideString): Integer; dispid 187;
    function ResumeDownloadFileByName(const remoteFilePath: WideString; 
                                      const localFilePath: WideString): Integer; dispid 188;
    function ResumeUploadFileByName(const remoteFilePath: WideString; 
                                    const localFilePath: WideString): Integer; dispid 189;
    function SetCreateDt(const pathOrHandle: WideString; bIsHandle: Integer; 
                         const CreateTime: ICkDateTime): Integer; dispid 190;
    function SetCreateTime(const pathOrHandle: WideString; bIsHandle: Integer; CreateTime: TDateTime): Integer; dispid 191;
    function SetCreateTimeStr(const pathOrHandle: WideString; bIsHandle: Integer; 
                              const dateTimeStr: WideString): Integer; dispid 192;
    function SetLastAccessDt(const pathOrHandle: WideString; bIsHandle: Integer; 
                             const CreateTime: ICkDateTime): Integer; dispid 193;
    function SetLastAccessTime(const pathOrHandle: WideString; bIsHandle: Integer; 
                               CreateTime: TDateTime): Integer; dispid 194;
    function SetLastAccessTimeStr(const pathOrHandle: WideString; bIsHandle: Integer; 
                                  const dateTimeStr: WideString): Integer; dispid 195;
    function SetLastModifiedDt(const pathOrHandle: WideString; bIsHandle: Integer; 
                               const CreateTime: ICkDateTime): Integer; dispid 196;
    function SetLastModifiedTime(const pathOrHandle: WideString; bIsHandle: Integer; 
                                 CreateTime: TDateTime): Integer; dispid 197;
    function SetLastModifiedTimeStr(const pathOrHandle: WideString; bIsHandle: Integer; 
                                    const dateTimeStr: WideString): Integer; dispid 198;
    function SetOwnerAndGroup(const pathOrHandle: WideString; bIsHandle: Integer; 
                              const Owner: WideString; const Group: WideString): Integer; dispid 199;
    function SetPermissions(const pathOrHandle: WideString; bIsHandle: Integer; perm: Integer): Integer; dispid 200;
    function SyncTreeUpload(const localBaseDir: WideString; const remoteBaseDir: WideString; 
                            mode: Integer; bRecurse: Integer): Integer; dispid 201;
    function UnlockComponent(const unlockCode: WideString): Integer; dispid 202;
    function UploadFile(const handle: WideString; const fromFilename: WideString): Integer; dispid 203;
    function UploadFileByName(const remoteFilePath: WideString; const localFilePath: WideString): Integer; dispid 204;
    function WriteFileBytes(const handle: WideString; data: OleVariant): Integer; dispid 205;
    function WriteFileBytes32(const handle: WideString; offset: Integer; data: OleVariant): Integer; dispid 206;
    function WriteFileBytes64s(const handle: WideString; const offset64: WideString; 
                               data: OleVariant): Integer; dispid 207;
    function WriteFileText(const handle: WideString; const charset: WideString; 
                           const textData: WideString): Integer; dispid 208;
    function WriteFileText32(const handle: WideString; offset32: Integer; 
                             const charset: WideString; const textData: WideString): Integer; dispid 209;
    function WriteFileText64s(const handle: WideString; const offset64: WideString; 
                              const charset: WideString; const textData: WideString): Integer; dispid 210;
    function SyncTreeDownload(const remoteRoot: WideString; const localRoot: WideString; 
                              mode: Integer; recurse: Integer): Integer; dispid 211;
  end;

// *********************************************************************//
// Interface: IChilkatRss
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {270A27B7-1D62-490D-82E4-A35269722E23}
// *********************************************************************//
  IChilkatRss = interface(IDispatch)
    ['{270A27B7-1D62-490D-82E4-A35269722E23}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_NumItems: Integer; safecall;
    function Get_NumChannels: Integer; safecall;
    function AddNewChannel: IChilkatRss; safecall;
    function AddNewImage: IChilkatRss; safecall;
    function AddNewItem: IChilkatRss; safecall;
    function DownloadRss(const url: WideString): Integer; safecall;
    function GetAttr(const Tag: WideString; const attrName: WideString): WideString; safecall;
    function GetChannel(index: Integer): IChilkatRss; safecall;
    function GetCount(const Tag: WideString): Integer; safecall;
    function GetDate(const Tag: WideString): TDateTime; safecall;
    function GetDateStr(const Tag: WideString): WideString; safecall;
    function GetImage: IChilkatRss; safecall;
    function GetInt(const Tag: WideString): Integer; safecall;
    function GetItem(index: Integer): IChilkatRss; safecall;
    function GetString(const Tag: WideString): WideString; safecall;
    function LoadRssFile(const filename: WideString): Integer; safecall;
    function LoadRssString(const rssString: WideString): Integer; safecall;
    function MGetAttr(const Tag: WideString; index: Integer; const attrName: WideString): WideString; safecall;
    function MGetString(const Tag: WideString; index: Integer): WideString; safecall;
    function MSetAttr(const Tag: WideString; idx: Integer; const attrName: WideString; 
                      const value: WideString): Integer; safecall;
    function MSetString(const Tag: WideString; idx: Integer; const value: WideString): Integer; safecall;
    procedure NewRss; safecall;
    procedure Remove(const Tag: WideString); safecall;
    procedure SetAttr(const Tag: WideString; const attrName: WideString; const value: WideString); safecall;
    procedure SetDate(const Tag: WideString; dateTime: TDateTime); safecall;
    procedure SetDateNow(const Tag: WideString); safecall;
    procedure SetDateStr(const Tag: WideString; const dateTimeStr: WideString); safecall;
    procedure SetInt(const Tag: WideString; value: Integer); safecall;
    procedure SetString(const Tag: WideString; const value: WideString); safecall;
    function ToXmlString: WideString; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property NumItems: Integer read Get_NumItems;
    property NumChannels: Integer read Get_NumChannels;
  end;

// *********************************************************************//
// DispIntf:  IChilkatRssDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {270A27B7-1D62-490D-82E4-A35269722E23}
// *********************************************************************//
  IChilkatRssDisp = dispinterface
    ['{270A27B7-1D62-490D-82E4-A35269722E23}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property NumItems: Integer readonly dispid 100;
    property NumChannels: Integer readonly dispid 101;
    function AddNewChannel: IChilkatRss; dispid 102;
    function AddNewImage: IChilkatRss; dispid 103;
    function AddNewItem: IChilkatRss; dispid 104;
    function DownloadRss(const url: WideString): Integer; dispid 105;
    function GetAttr(const Tag: WideString; const attrName: WideString): WideString; dispid 106;
    function GetChannel(index: Integer): IChilkatRss; dispid 107;
    function GetCount(const Tag: WideString): Integer; dispid 108;
    function GetDate(const Tag: WideString): TDateTime; dispid 109;
    function GetDateStr(const Tag: WideString): WideString; dispid 110;
    function GetImage: IChilkatRss; dispid 111;
    function GetInt(const Tag: WideString): Integer; dispid 112;
    function GetItem(index: Integer): IChilkatRss; dispid 113;
    function GetString(const Tag: WideString): WideString; dispid 114;
    function LoadRssFile(const filename: WideString): Integer; dispid 115;
    function LoadRssString(const rssString: WideString): Integer; dispid 116;
    function MGetAttr(const Tag: WideString; index: Integer; const attrName: WideString): WideString; dispid 117;
    function MGetString(const Tag: WideString; index: Integer): WideString; dispid 118;
    function MSetAttr(const Tag: WideString; idx: Integer; const attrName: WideString; 
                      const value: WideString): Integer; dispid 119;
    function MSetString(const Tag: WideString; idx: Integer; const value: WideString): Integer; dispid 120;
    procedure NewRss; dispid 121;
    procedure Remove(const Tag: WideString); dispid 122;
    procedure SetAttr(const Tag: WideString; const attrName: WideString; const value: WideString); dispid 123;
    procedure SetDate(const Tag: WideString; dateTime: TDateTime); dispid 124;
    procedure SetDateNow(const Tag: WideString); dispid 125;
    procedure SetDateStr(const Tag: WideString; const dateTimeStr: WideString); dispid 126;
    procedure SetInt(const Tag: WideString; value: Integer); dispid 127;
    procedure SetString(const Tag: WideString; const value: WideString); dispid 128;
    function ToXmlString: WideString; dispid 129;
  end;

// *********************************************************************//
// Interface: IChilkatRsa
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C931B7DB-71FB-45CE-BA70-36BEF6CEAF1E}
// *********************************************************************//
  IChilkatRsa = interface(IDispatch)
    ['{C931B7DB-71FB-45CE-BA70-36BEF6CEAF1E}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_EncodingMode: WideString; safecall;
    procedure Set_EncodingMode(const pVal: WideString); safecall;
    function Get_LittleEndian: Integer; safecall;
    procedure Set_LittleEndian(pVal: Integer); safecall;
    function Get_NoUnpad: Integer; safecall;
    procedure Set_NoUnpad(pVal: Integer); safecall;
    function Get_numBits: Integer; safecall;
    function Get_OaepPadding: Integer; safecall;
    procedure Set_OaepPadding(pVal: Integer); safecall;
    function Get_charset: WideString; safecall;
    procedure Set_charset(const pVal: WideString); safecall;
    function DecryptBytes(data: OleVariant; bUsePrivateKey: Integer): OleVariant; safecall;
    function DecryptBytesENC(const str: WideString; bUsePrivateKey: Integer): OleVariant; safecall;
    function DecryptString(data: OleVariant; bUsePrivateKey: Integer): WideString; safecall;
    function DecryptStringENC(const str: WideString; bUsePrivateKey: Integer): WideString; safecall;
    function EncryptBytes(data: OleVariant; bUsePrivateKey: Integer): OleVariant; safecall;
    function EncryptBytesENC(data: OleVariant; bUsePrivateKey: Integer): WideString; safecall;
    function EncryptString(const str: WideString; bUsePrivateKey: Integer): OleVariant; safecall;
    function EncryptStringENC(const str: WideString; bUsePrivateKey: Integer): WideString; safecall;
    function ExportPrivateKey: WideString; safecall;
    function ExportPublicKey: WideString; safecall;
    function GenerateKey(numBits: Integer): Integer; safecall;
    function ImportPrivateKey(const xml: WideString): Integer; safecall;
    function ImportPublicKey(const xml: WideString): Integer; safecall;
    function OpenSslSignBytes(data: OleVariant): OleVariant; safecall;
    function OpenSslSignBytesENC(data: OleVariant): WideString; safecall;
    function OpenSslSignString(const str: WideString): OleVariant; safecall;
    function OpenSslSignStringENC(const str: WideString): WideString; safecall;
    function OpenSslVerifyBytes(signature: OleVariant): OleVariant; safecall;
    function OpenSslVerifyBytesENC(const str: WideString): OleVariant; safecall;
    function OpenSslVerifyString(data: OleVariant): WideString; safecall;
    function OpenSslVerifyStringENC(const str: WideString): WideString; safecall;
    function SignBytes(data: OleVariant; const hashAlg: WideString): OleVariant; safecall;
    function SignBytesENC(data: OleVariant; const hashAlg: WideString): WideString; safecall;
    function SignHash(HashBytes: OleVariant; const hashAlg: WideString): OleVariant; safecall;
    function SignHashENC(const encodedHash: WideString; const hashAlg: WideString): WideString; safecall;
    function SignString(const str: WideString; const hashAlg: WideString): OleVariant; safecall;
    function SignStringENC(const str: WideString; const hashAlg: WideString): WideString; safecall;
    function SnkToXml(const filename: WideString): WideString; safecall;
    function UnlockComponent(const unlockCode: WideString): Integer; safecall;
    function VerifyBytes(data: OleVariant; const hashAlg: WideString; sig: OleVariant): Integer; safecall;
    function VerifyBytesENC(data: OleVariant; const hashAlg: WideString; 
                            const encodedSig: WideString): Integer; safecall;
    function VerifyHash(HashBytes: OleVariant; const hashAlg: WideString; sigBytes: OleVariant): Integer; safecall;
    function VerifyHashENC(const encodedHash: WideString; const hashAlg: WideString; 
                           const encodedSig: WideString): Integer; safecall;
    function VerifyPrivateKey(const xml: WideString): Integer; safecall;
    function VerifyString(const str: WideString; const hashAlg: WideString; sig: OleVariant): Integer; safecall;
    function VerifyStringENC(const str: WideString; const hashAlg: WideString; const sig: WideString): Integer; safecall;
    function ImportPrivateKeyObj(const key: IPrivateKey): Integer; safecall;
    function ImportPublicKeyObj(const key: IPublicKey): Integer; safecall;
    function ExportPrivateKeyObj: IPrivateKey; safecall;
    function ExportPublicKeyObj: IPublicKey; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property EncodingMode: WideString read Get_EncodingMode write Set_EncodingMode;
    property LittleEndian: Integer read Get_LittleEndian write Set_LittleEndian;
    property NoUnpad: Integer read Get_NoUnpad write Set_NoUnpad;
    property numBits: Integer read Get_numBits;
    property OaepPadding: Integer read Get_OaepPadding write Set_OaepPadding;
    property charset: WideString read Get_charset write Set_charset;
  end;

// *********************************************************************//
// DispIntf:  IChilkatRsaDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C931B7DB-71FB-45CE-BA70-36BEF6CEAF1E}
// *********************************************************************//
  IChilkatRsaDisp = dispinterface
    ['{C931B7DB-71FB-45CE-BA70-36BEF6CEAF1E}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property EncodingMode: WideString dispid 100;
    property LittleEndian: Integer dispid 101;
    property NoUnpad: Integer dispid 102;
    property numBits: Integer readonly dispid 103;
    property OaepPadding: Integer dispid 104;
    property charset: WideString dispid 105;
    function DecryptBytes(data: OleVariant; bUsePrivateKey: Integer): OleVariant; dispid 106;
    function DecryptBytesENC(const str: WideString; bUsePrivateKey: Integer): OleVariant; dispid 107;
    function DecryptString(data: OleVariant; bUsePrivateKey: Integer): WideString; dispid 108;
    function DecryptStringENC(const str: WideString; bUsePrivateKey: Integer): WideString; dispid 109;
    function EncryptBytes(data: OleVariant; bUsePrivateKey: Integer): OleVariant; dispid 110;
    function EncryptBytesENC(data: OleVariant; bUsePrivateKey: Integer): WideString; dispid 111;
    function EncryptString(const str: WideString; bUsePrivateKey: Integer): OleVariant; dispid 112;
    function EncryptStringENC(const str: WideString; bUsePrivateKey: Integer): WideString; dispid 113;
    function ExportPrivateKey: WideString; dispid 114;
    function ExportPublicKey: WideString; dispid 115;
    function GenerateKey(numBits: Integer): Integer; dispid 116;
    function ImportPrivateKey(const xml: WideString): Integer; dispid 117;
    function ImportPublicKey(const xml: WideString): Integer; dispid 118;
    function OpenSslSignBytes(data: OleVariant): OleVariant; dispid 119;
    function OpenSslSignBytesENC(data: OleVariant): WideString; dispid 120;
    function OpenSslSignString(const str: WideString): OleVariant; dispid 121;
    function OpenSslSignStringENC(const str: WideString): WideString; dispid 122;
    function OpenSslVerifyBytes(signature: OleVariant): OleVariant; dispid 123;
    function OpenSslVerifyBytesENC(const str: WideString): OleVariant; dispid 124;
    function OpenSslVerifyString(data: OleVariant): WideString; dispid 125;
    function OpenSslVerifyStringENC(const str: WideString): WideString; dispid 126;
    function SignBytes(data: OleVariant; const hashAlg: WideString): OleVariant; dispid 127;
    function SignBytesENC(data: OleVariant; const hashAlg: WideString): WideString; dispid 128;
    function SignHash(HashBytes: OleVariant; const hashAlg: WideString): OleVariant; dispid 129;
    function SignHashENC(const encodedHash: WideString; const hashAlg: WideString): WideString; dispid 130;
    function SignString(const str: WideString; const hashAlg: WideString): OleVariant; dispid 131;
    function SignStringENC(const str: WideString; const hashAlg: WideString): WideString; dispid 132;
    function SnkToXml(const filename: WideString): WideString; dispid 133;
    function UnlockComponent(const unlockCode: WideString): Integer; dispid 134;
    function VerifyBytes(data: OleVariant; const hashAlg: WideString; sig: OleVariant): Integer; dispid 135;
    function VerifyBytesENC(data: OleVariant; const hashAlg: WideString; 
                            const encodedSig: WideString): Integer; dispid 136;
    function VerifyHash(HashBytes: OleVariant; const hashAlg: WideString; sigBytes: OleVariant): Integer; dispid 137;
    function VerifyHashENC(const encodedHash: WideString; const hashAlg: WideString; 
                           const encodedSig: WideString): Integer; dispid 138;
    function VerifyPrivateKey(const xml: WideString): Integer; dispid 139;
    function VerifyString(const str: WideString; const hashAlg: WideString; sig: OleVariant): Integer; dispid 140;
    function VerifyStringENC(const str: WideString; const hashAlg: WideString; const sig: WideString): Integer; dispid 141;
    function ImportPrivateKeyObj(const key: IPrivateKey): Integer; dispid 142;
    function ImportPublicKeyObj(const key: IPublicKey): Integer; dispid 143;
    function ExportPrivateKeyObj: IPrivateKey; dispid 144;
    function ExportPublicKeyObj: IPublicKey; dispid 145;
  end;

// *********************************************************************//
// Interface: IChilkatOmaDrm
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3F8F6E46-6782-4D77-9352-926BC73D8761}
// *********************************************************************//
  IChilkatOmaDrm = interface(IDispatch)
    ['{3F8F6E46-6782-4D77-9352-926BC73D8761}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_Base64Key: WideString; safecall;
    procedure Set_Base64Key(const pVal: WideString); safecall;
    function Get_ContentType: WideString; safecall;
    procedure Set_ContentType(const pVal: WideString); safecall;
    function Get_ContentUri: WideString; safecall;
    procedure Set_ContentUri(const pVal: WideString); safecall;
    function Get_DecryptedData: OleVariant; safecall;
    function Get_DrmContentVersion: Integer; safecall;
    function Get_EncryptedData: OleVariant; safecall;
    function Get_Headers: WideString; safecall;
    procedure Set_Headers(const pVal: WideString); safecall;
    function Get_IV: OleVariant; safecall;
    procedure Set_IV(pVal: OleVariant); safecall;
    function CreateDcfFile(const filename: WideString): Integer; safecall;
    function GetHeaderField(const fieldName: WideString): WideString; safecall;
    function LoadDcfData(data: OleVariant): Integer; safecall;
    function LoadDcfFile(const filename: WideString): Integer; safecall;
    procedure LoadUnencryptedData(data: OleVariant); safecall;
    function LoadUnencryptedFile(const filename: WideString): Integer; safecall;
    function SaveDecrypted(const filename: WideString): Integer; safecall;
    procedure SetEncodedIV(const encodedIv: WideString; const encoding: WideString); safecall;
    function UnlockComponent(const b1: WideString): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property Base64Key: WideString read Get_Base64Key write Set_Base64Key;
    property ContentType: WideString read Get_ContentType write Set_ContentType;
    property ContentUri: WideString read Get_ContentUri write Set_ContentUri;
    property DecryptedData: OleVariant read Get_DecryptedData;
    property DrmContentVersion: Integer read Get_DrmContentVersion;
    property EncryptedData: OleVariant read Get_EncryptedData;
    property Headers: WideString read Get_Headers write Set_Headers;
    property IV: OleVariant read Get_IV write Set_IV;
  end;

// *********************************************************************//
// DispIntf:  IChilkatOmaDrmDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3F8F6E46-6782-4D77-9352-926BC73D8761}
// *********************************************************************//
  IChilkatOmaDrmDisp = dispinterface
    ['{3F8F6E46-6782-4D77-9352-926BC73D8761}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property Base64Key: WideString dispid 100;
    property ContentType: WideString dispid 101;
    property ContentUri: WideString dispid 102;
    property DecryptedData: OleVariant readonly dispid 103;
    property DrmContentVersion: Integer readonly dispid 104;
    property EncryptedData: OleVariant readonly dispid 105;
    property Headers: WideString dispid 106;
    property IV: OleVariant dispid 107;
    function CreateDcfFile(const filename: WideString): Integer; dispid 108;
    function GetHeaderField(const fieldName: WideString): WideString; dispid 109;
    function LoadDcfData(data: OleVariant): Integer; dispid 110;
    function LoadDcfFile(const filename: WideString): Integer; dispid 111;
    procedure LoadUnencryptedData(data: OleVariant); dispid 112;
    function LoadUnencryptedFile(const filename: WideString): Integer; dispid 113;
    function SaveDecrypted(const filename: WideString): Integer; dispid 114;
    procedure SetEncodedIV(const encodedIv: WideString; const encoding: WideString); dispid 115;
    function UnlockComponent(const b1: WideString): Integer; dispid 116;
  end;

// *********************************************************************//
// Interface: IChilkatNtlm
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B7C0253A-251F-4BC7-98D1-31A045DCE65D}
// *********************************************************************//
  IChilkatNtlm = interface(IDispatch)
    ['{B7C0253A-251F-4BC7-98D1-31A045DCE65D}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_ClientChallenge: WideString; safecall;
    procedure Set_ClientChallenge(const pVal: WideString); safecall;
    function Get_DnsComputerName: WideString; safecall;
    procedure Set_DnsComputerName(const pVal: WideString); safecall;
    function Get_DnsDomainName: WideString; safecall;
    procedure Set_DnsDomainName(const pVal: WideString); safecall;
    function Get_Domain: WideString; safecall;
    procedure Set_Domain(const pVal: WideString); safecall;
    function Get_EncodingMode: WideString; safecall;
    procedure Set_EncodingMode(const pVal: WideString); safecall;
    function Get_Flags: WideString; safecall;
    procedure Set_Flags(const pVal: WideString); safecall;
    function Get_NetBiosComputerName: WideString; safecall;
    procedure Set_NetBiosComputerName(const pVal: WideString); safecall;
    function Get_NetBiosDomainName: WideString; safecall;
    procedure Set_NetBiosDomainName(const pVal: WideString); safecall;
    function Get_NtlmVersion: Integer; safecall;
    procedure Set_NtlmVersion(pVal: Integer); safecall;
    function Get_OemCodePage: Integer; safecall;
    procedure Set_OemCodePage(pVal: Integer); safecall;
    function Get_password: WideString; safecall;
    procedure Set_password(const pVal: WideString); safecall;
    function Get_ServerChallenge: WideString; safecall;
    procedure Set_ServerChallenge(const pVal: WideString); safecall;
    function Get_TargetName: WideString; safecall;
    procedure Set_TargetName(const pVal: WideString); safecall;
    function Get_UserName: WideString; safecall;
    procedure Set_UserName(const pVal: WideString); safecall;
    function Get_Workstation: WideString; safecall;
    procedure Set_Workstation(const pVal: WideString); safecall;
    function CompareType3(const msg1: WideString; const msg2: WideString): Integer; safecall;
    function GenType1: WideString; safecall;
    function GenType2(const type1Msg: WideString): WideString; safecall;
    function GenType3(const type2Msg: WideString): WideString; safecall;
    function LoadType3(const type3Msg: WideString): Integer; safecall;
    function ParseType1(const type1Msg: WideString): WideString; safecall;
    function ParseType2(const type2Msg: WideString): WideString; safecall;
    function ParseType3(const type3Msg: WideString): WideString; safecall;
    function SetFlag(const flagLetter: WideString; onOrOff: Integer): Integer; safecall;
    function UnlockComponent(const unlockCode: WideString): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property ClientChallenge: WideString read Get_ClientChallenge write Set_ClientChallenge;
    property DnsComputerName: WideString read Get_DnsComputerName write Set_DnsComputerName;
    property DnsDomainName: WideString read Get_DnsDomainName write Set_DnsDomainName;
    property Domain: WideString read Get_Domain write Set_Domain;
    property EncodingMode: WideString read Get_EncodingMode write Set_EncodingMode;
    property Flags: WideString read Get_Flags write Set_Flags;
    property NetBiosComputerName: WideString read Get_NetBiosComputerName write Set_NetBiosComputerName;
    property NetBiosDomainName: WideString read Get_NetBiosDomainName write Set_NetBiosDomainName;
    property NtlmVersion: Integer read Get_NtlmVersion write Set_NtlmVersion;
    property OemCodePage: Integer read Get_OemCodePage write Set_OemCodePage;
    property password: WideString read Get_password write Set_password;
    property ServerChallenge: WideString read Get_ServerChallenge write Set_ServerChallenge;
    property TargetName: WideString read Get_TargetName write Set_TargetName;
    property UserName: WideString read Get_UserName write Set_UserName;
    property Workstation: WideString read Get_Workstation write Set_Workstation;
  end;

// *********************************************************************//
// DispIntf:  IChilkatNtlmDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B7C0253A-251F-4BC7-98D1-31A045DCE65D}
// *********************************************************************//
  IChilkatNtlmDisp = dispinterface
    ['{B7C0253A-251F-4BC7-98D1-31A045DCE65D}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property ClientChallenge: WideString dispid 100;
    property DnsComputerName: WideString dispid 101;
    property DnsDomainName: WideString dispid 102;
    property Domain: WideString dispid 103;
    property EncodingMode: WideString dispid 104;
    property Flags: WideString dispid 105;
    property NetBiosComputerName: WideString dispid 106;
    property NetBiosDomainName: WideString dispid 107;
    property NtlmVersion: Integer dispid 108;
    property OemCodePage: Integer dispid 109;
    property password: WideString dispid 110;
    property ServerChallenge: WideString dispid 111;
    property TargetName: WideString dispid 112;
    property UserName: WideString dispid 113;
    property Workstation: WideString dispid 114;
    function CompareType3(const msg1: WideString; const msg2: WideString): Integer; dispid 115;
    function GenType1: WideString; dispid 116;
    function GenType2(const type1Msg: WideString): WideString; dispid 117;
    function GenType3(const type2Msg: WideString): WideString; dispid 118;
    function LoadType3(const type3Msg: WideString): Integer; dispid 119;
    function ParseType1(const type1Msg: WideString): WideString; dispid 120;
    function ParseType2(const type2Msg: WideString): WideString; dispid 121;
    function ParseType3(const type3Msg: WideString): WideString; dispid 122;
    function SetFlag(const flagLetter: WideString; onOrOff: Integer): Integer; dispid 123;
    function UnlockComponent(const unlockCode: WideString): Integer; dispid 124;
  end;

// *********************************************************************//
// Interface: IChilkatMime
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {45484EC9-E196-492F-8C1F-6D311F89036E}
// *********************************************************************//
  IChilkatMime = interface(IDispatch)
    ['{45484EC9-E196-492F-8C1F-6D311F89036E}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_boundary: WideString; safecall;
    procedure Set_boundary(const pVal: WideString); safecall;
    function Get_charset: WideString; safecall;
    procedure Set_charset(const pVal: WideString); safecall;
    function Get_ContentType: WideString; safecall;
    procedure Set_ContentType(const pVal: WideString); safecall;
    function Get_CurrentDateTime: WideString; safecall;
    function Get_Disposition: WideString; safecall;
    procedure Set_Disposition(const pVal: WideString); safecall;
    function Get_encoding: WideString; safecall;
    procedure Set_encoding(const pVal: WideString); safecall;
    function Get_filename: WideString; safecall;
    procedure Set_filename(const pVal: WideString); safecall;
    function Get_Micalg: WideString; safecall;
    procedure Set_Micalg(const pVal: WideString); safecall;
    function Get_name: WideString; safecall;
    procedure Set_name(const pVal: WideString); safecall;
    function Get_NumEncryptCerts: Integer; safecall;
    function Get_NumHeaderFields: Integer; safecall;
    function Get_NumParts: Integer; safecall;
    function Get_NumSignerCerts: Integer; safecall;
    function Get_Pkcs7CryptAlg: WideString; safecall;
    procedure Set_Pkcs7CryptAlg(const pVal: WideString); safecall;
    function Get_Pkcs7KeyLength: Integer; safecall;
    procedure Set_Pkcs7KeyLength(pVal: Integer); safecall;
    function Get_Protocol: WideString; safecall;
    procedure Set_Protocol(const pVal: WideString); safecall;
    function Get_SigningHashAlg: WideString; safecall;
    procedure Set_SigningHashAlg(const pVal: WideString); safecall;
    function Get_UnwrapExtras: Integer; safecall;
    procedure Set_UnwrapExtras(pVal: Integer); safecall;
    function Get_UseMmDescription: Integer; safecall;
    procedure Set_UseMmDescription(pVal: Integer); safecall;
    function Get_UseXPkcs7: Integer; safecall;
    procedure Set_UseXPkcs7(pVal: Integer); safecall;
    procedure AddContentLength; safecall;
    function AddDetachedSignature(const cert: IChilkatCert): Integer; safecall;
    function AddDetachedSignature2(const cert: IChilkatCert; transferHeaderFields: Integer): Integer; safecall;
    function AddDetachedSignaturePk(const cert: IChilkatCert; const PrivateKey: IPrivateKey): Integer; safecall;
    function AddDetachedSignaturePk2(const cert: IChilkatCert; const PrivateKey: IPrivateKey; 
                                     transferHeaderFields: Integer): Integer; safecall;
    function AddEncryptCert(const cert: IChilkatCert): Integer; safecall;
    function AddHeaderField(const name: WideString; const value: WideString): Integer; safecall;
    function AddPfxSourceData(pfxData: OleVariant; const password: WideString): Integer; safecall;
    function AddPfxSourceFile(const pfxFilePath: WideString; const password: WideString): Integer; safecall;
    function AppendPart(const mime: IChilkatMime): Integer; safecall;
    function AppendPartFromFile(const filename: WideString): Integer; safecall;
    function AsnBodyToXml: WideString; safecall;
    procedure ClearEncryptCerts; safecall;
    function ContainsEncryptedParts: Integer; safecall;
    function ContainsSignedParts: Integer; safecall;
    procedure Convert8Bit; safecall;
    function ConvertToMultipartAlt: Integer; safecall;
    function ConvertToMultipartMixed: Integer; safecall;
    function ConvertToSigned(const cert: IChilkatCert): Integer; safecall;
    function ConvertToSignedPk(const cert: IChilkatCert; const PrivateKey: IPrivateKey): Integer; safecall;
    function Decrypt: Integer; safecall;
    function Decrypt2(const cert: IChilkatCert; const PrivateKey: IPrivateKey): Integer; safecall;
    function DecryptUsingPfxData(pfxData: OleVariant; const password: WideString): Integer; safecall;
    function DecryptUsingPfxFile(const pfxFilePath: WideString; const password: WideString): Integer; safecall;
    function Encrypt(const cert: IChilkatCert): Integer; safecall;
    function EncryptN: Integer; safecall;
    function ExtractPartsToFiles(const dirPath: WideString): ICkStringArray; safecall;
    function FindIssuer(const cert: IChilkatCert): IChilkatCert; safecall;
    function GetBodyBinary: OleVariant; safecall;
    function GetBodyDecoded: WideString; safecall;
    function GetBodyEncoded: WideString; safecall;
    function GetEncryptCert(index: Integer): IChilkatCert; safecall;
    function GetEntireBody: WideString; safecall;
    function GetEntireHead: WideString; safecall;
    function GetHeaderField(const name: WideString): WideString; safecall;
    function GetHeaderFieldAttribute(const name: WideString; const attrName: WideString): WideString; safecall;
    function GetHeaderFieldName(index: Integer): WideString; safecall;
    function GetHeaderFieldValue(index: Integer): WideString; safecall;
    function GetMime: WideString; safecall;
    function GetMimeBytes: OleVariant; safecall;
    function GetPart(index: Integer): IChilkatMime; safecall;
    function GetSignatureSigningTime(index: Integer): TDateTime; safecall;
    function GetSignatureSigningTimeStr(index: Integer): WideString; safecall;
    function GetSignerCert(index: Integer): IChilkatCert; safecall;
    function GetXml: WideString; safecall;
    function HasSignatureSigningTime(index: Integer): Integer; safecall;
    function IsApplicationData: Integer; safecall;
    function IsAttachment: Integer; safecall;
    function IsAudio: Integer; safecall;
    function IsEncrypted: Integer; safecall;
    function IsHtml: Integer; safecall;
    function IsImage: Integer; safecall;
    function IsMultipart: Integer; safecall;
    function IsMultipartAlternative: Integer; safecall;
    function IsMultipartMixed: Integer; safecall;
    function IsMultipartRelated: Integer; safecall;
    function IsPlainText: Integer; safecall;
    function IsSigned: Integer; safecall;
    function IsText: Integer; safecall;
    function IsUnlocked: Integer; safecall;
    function IsVideo: Integer; safecall;
    function IsXml: Integer; safecall;
    function LoadMime(const mimeMsg: WideString): Integer; safecall;
    function LoadMimeBytes(binData: OleVariant): Integer; safecall;
    function LoadMimeFile(const filename: WideString): Integer; safecall;
    function LoadXml(const xml: WideString): Integer; safecall;
    function LoadXmlFile(const filename: WideString): Integer; safecall;
    function NewMessageRfc822(const mimeObject: IChilkatMime): Integer; safecall;
    function NewMultipartAlternative: Integer; safecall;
    function NewMultipartMixed: Integer; safecall;
    function NewMultipartRelated: Integer; safecall;
    procedure RemoveHeaderField(const name: WideString; bAllOccurances: Integer); safecall;
    function RemovePart(index: Integer): Integer; safecall;
    function SaveBody(const filename: WideString): Integer; safecall;
    function SaveMime(const filename: WideString): Integer; safecall;
    function SaveXml(const filename: WideString): Integer; safecall;
    procedure SetBody(const str: WideString); safecall;
    function SetBodyFromBinary(binData: OleVariant): Integer; safecall;
    function SetBodyFromEncoded(const encoding: WideString; const str: WideString): Integer; safecall;
    function SetBodyFromFile(const filename: WideString): Integer; safecall;
    function SetBodyFromHtml(const str: WideString): Integer; safecall;
    function SetBodyFromPlainText(const str: WideString): Integer; safecall;
    function SetBodyFromXml(const str: WideString): Integer; safecall;
    function SetCSP(const csp: IChilkatCsp): Integer; safecall;
    function SetHeaderField(const name: WideString; const value: WideString): Integer; safecall;
    function SetVerifyCert(const cert: IChilkatCert): Integer; safecall;
    function UnlockComponent(const unlockCode: WideString): Integer; safecall;
    function UnwrapSecurity: Integer; safecall;
    procedure UrlEncodeBody(const charset: WideString); safecall;
    function Verify: Integer; safecall;
    function GetSignerCertChain(index: Integer): IChilkatCertChain; safecall;
    function UseCertVault(const vault: IChilkatXmlCertVault): Integer; safecall;
    function DecryptUsingCert(const cert: IChilkatCert): Integer; safecall;
    function AddDecryptCert(const cert: IChilkatCert): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property boundary: WideString read Get_boundary write Set_boundary;
    property charset: WideString read Get_charset write Set_charset;
    property ContentType: WideString read Get_ContentType write Set_ContentType;
    property CurrentDateTime: WideString read Get_CurrentDateTime;
    property Disposition: WideString read Get_Disposition write Set_Disposition;
    property encoding: WideString read Get_encoding write Set_encoding;
    property filename: WideString read Get_filename write Set_filename;
    property Micalg: WideString read Get_Micalg write Set_Micalg;
    property name: WideString read Get_name write Set_name;
    property NumEncryptCerts: Integer read Get_NumEncryptCerts;
    property NumHeaderFields: Integer read Get_NumHeaderFields;
    property NumParts: Integer read Get_NumParts;
    property NumSignerCerts: Integer read Get_NumSignerCerts;
    property Pkcs7CryptAlg: WideString read Get_Pkcs7CryptAlg write Set_Pkcs7CryptAlg;
    property Pkcs7KeyLength: Integer read Get_Pkcs7KeyLength write Set_Pkcs7KeyLength;
    property Protocol: WideString read Get_Protocol write Set_Protocol;
    property SigningHashAlg: WideString read Get_SigningHashAlg write Set_SigningHashAlg;
    property UnwrapExtras: Integer read Get_UnwrapExtras write Set_UnwrapExtras;
    property UseMmDescription: Integer read Get_UseMmDescription write Set_UseMmDescription;
    property UseXPkcs7: Integer read Get_UseXPkcs7 write Set_UseXPkcs7;
  end;

// *********************************************************************//
// DispIntf:  IChilkatMimeDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {45484EC9-E196-492F-8C1F-6D311F89036E}
// *********************************************************************//
  IChilkatMimeDisp = dispinterface
    ['{45484EC9-E196-492F-8C1F-6D311F89036E}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property boundary: WideString dispid 100;
    property charset: WideString dispid 101;
    property ContentType: WideString dispid 102;
    property CurrentDateTime: WideString readonly dispid 103;
    property Disposition: WideString dispid 104;
    property encoding: WideString dispid 105;
    property filename: WideString dispid 106;
    property Micalg: WideString dispid 107;
    property name: WideString dispid 108;
    property NumEncryptCerts: Integer readonly dispid 109;
    property NumHeaderFields: Integer readonly dispid 110;
    property NumParts: Integer readonly dispid 111;
    property NumSignerCerts: Integer readonly dispid 112;
    property Pkcs7CryptAlg: WideString dispid 113;
    property Pkcs7KeyLength: Integer dispid 114;
    property Protocol: WideString dispid 115;
    property SigningHashAlg: WideString dispid 116;
    property UnwrapExtras: Integer dispid 117;
    property UseMmDescription: Integer dispid 118;
    property UseXPkcs7: Integer dispid 119;
    procedure AddContentLength; dispid 120;
    function AddDetachedSignature(const cert: IChilkatCert): Integer; dispid 121;
    function AddDetachedSignature2(const cert: IChilkatCert; transferHeaderFields: Integer): Integer; dispid 122;
    function AddDetachedSignaturePk(const cert: IChilkatCert; const PrivateKey: IPrivateKey): Integer; dispid 123;
    function AddDetachedSignaturePk2(const cert: IChilkatCert; const PrivateKey: IPrivateKey; 
                                     transferHeaderFields: Integer): Integer; dispid 124;
    function AddEncryptCert(const cert: IChilkatCert): Integer; dispid 125;
    function AddHeaderField(const name: WideString; const value: WideString): Integer; dispid 126;
    function AddPfxSourceData(pfxData: OleVariant; const password: WideString): Integer; dispid 127;
    function AddPfxSourceFile(const pfxFilePath: WideString; const password: WideString): Integer; dispid 128;
    function AppendPart(const mime: IChilkatMime): Integer; dispid 129;
    function AppendPartFromFile(const filename: WideString): Integer; dispid 130;
    function AsnBodyToXml: WideString; dispid 131;
    procedure ClearEncryptCerts; dispid 132;
    function ContainsEncryptedParts: Integer; dispid 133;
    function ContainsSignedParts: Integer; dispid 134;
    procedure Convert8Bit; dispid 135;
    function ConvertToMultipartAlt: Integer; dispid 136;
    function ConvertToMultipartMixed: Integer; dispid 137;
    function ConvertToSigned(const cert: IChilkatCert): Integer; dispid 138;
    function ConvertToSignedPk(const cert: IChilkatCert; const PrivateKey: IPrivateKey): Integer; dispid 139;
    function Decrypt: Integer; dispid 140;
    function Decrypt2(const cert: IChilkatCert; const PrivateKey: IPrivateKey): Integer; dispid 141;
    function DecryptUsingPfxData(pfxData: OleVariant; const password: WideString): Integer; dispid 142;
    function DecryptUsingPfxFile(const pfxFilePath: WideString; const password: WideString): Integer; dispid 143;
    function Encrypt(const cert: IChilkatCert): Integer; dispid 144;
    function EncryptN: Integer; dispid 145;
    function ExtractPartsToFiles(const dirPath: WideString): ICkStringArray; dispid 146;
    function FindIssuer(const cert: IChilkatCert): IChilkatCert; dispid 147;
    function GetBodyBinary: OleVariant; dispid 148;
    function GetBodyDecoded: WideString; dispid 149;
    function GetBodyEncoded: WideString; dispid 150;
    function GetEncryptCert(index: Integer): IChilkatCert; dispid 151;
    function GetEntireBody: WideString; dispid 152;
    function GetEntireHead: WideString; dispid 153;
    function GetHeaderField(const name: WideString): WideString; dispid 154;
    function GetHeaderFieldAttribute(const name: WideString; const attrName: WideString): WideString; dispid 155;
    function GetHeaderFieldName(index: Integer): WideString; dispid 156;
    function GetHeaderFieldValue(index: Integer): WideString; dispid 157;
    function GetMime: WideString; dispid 158;
    function GetMimeBytes: OleVariant; dispid 159;
    function GetPart(index: Integer): IChilkatMime; dispid 160;
    function GetSignatureSigningTime(index: Integer): TDateTime; dispid 161;
    function GetSignatureSigningTimeStr(index: Integer): WideString; dispid 162;
    function GetSignerCert(index: Integer): IChilkatCert; dispid 163;
    function GetXml: WideString; dispid 164;
    function HasSignatureSigningTime(index: Integer): Integer; dispid 165;
    function IsApplicationData: Integer; dispid 166;
    function IsAttachment: Integer; dispid 167;
    function IsAudio: Integer; dispid 168;
    function IsEncrypted: Integer; dispid 169;
    function IsHtml: Integer; dispid 170;
    function IsImage: Integer; dispid 171;
    function IsMultipart: Integer; dispid 172;
    function IsMultipartAlternative: Integer; dispid 173;
    function IsMultipartMixed: Integer; dispid 174;
    function IsMultipartRelated: Integer; dispid 175;
    function IsPlainText: Integer; dispid 176;
    function IsSigned: Integer; dispid 177;
    function IsText: Integer; dispid 178;
    function IsUnlocked: Integer; dispid 179;
    function IsVideo: Integer; dispid 180;
    function IsXml: Integer; dispid 181;
    function LoadMime(const mimeMsg: WideString): Integer; dispid 182;
    function LoadMimeBytes(binData: OleVariant): Integer; dispid 183;
    function LoadMimeFile(const filename: WideString): Integer; dispid 184;
    function LoadXml(const xml: WideString): Integer; dispid 185;
    function LoadXmlFile(const filename: WideString): Integer; dispid 186;
    function NewMessageRfc822(const mimeObject: IChilkatMime): Integer; dispid 187;
    function NewMultipartAlternative: Integer; dispid 188;
    function NewMultipartMixed: Integer; dispid 189;
    function NewMultipartRelated: Integer; dispid 190;
    procedure RemoveHeaderField(const name: WideString; bAllOccurances: Integer); dispid 191;
    function RemovePart(index: Integer): Integer; dispid 192;
    function SaveBody(const filename: WideString): Integer; dispid 193;
    function SaveMime(const filename: WideString): Integer; dispid 194;
    function SaveXml(const filename: WideString): Integer; dispid 195;
    procedure SetBody(const str: WideString); dispid 196;
    function SetBodyFromBinary(binData: OleVariant): Integer; dispid 197;
    function SetBodyFromEncoded(const encoding: WideString; const str: WideString): Integer; dispid 198;
    function SetBodyFromFile(const filename: WideString): Integer; dispid 199;
    function SetBodyFromHtml(const str: WideString): Integer; dispid 200;
    function SetBodyFromPlainText(const str: WideString): Integer; dispid 201;
    function SetBodyFromXml(const str: WideString): Integer; dispid 202;
    function SetCSP(const csp: IChilkatCsp): Integer; dispid 203;
    function SetHeaderField(const name: WideString; const value: WideString): Integer; dispid 204;
    function SetVerifyCert(const cert: IChilkatCert): Integer; dispid 205;
    function UnlockComponent(const unlockCode: WideString): Integer; dispid 206;
    function UnwrapSecurity: Integer; dispid 207;
    procedure UrlEncodeBody(const charset: WideString); dispid 208;
    function Verify: Integer; dispid 209;
    function GetSignerCertChain(index: Integer): IChilkatCertChain; dispid 210;
    function UseCertVault(const vault: IChilkatXmlCertVault): Integer; dispid 211;
    function DecryptUsingCert(const cert: IChilkatCert): Integer; dispid 212;
    function AddDecryptCert(const cert: IChilkatCert): Integer; dispid 213;
  end;

// *********************************************************************//
// Interface: IChilkatMht
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F1089DE8-926E-4BB9-ADAF-9E312F1BBD78}
// *********************************************************************//
  IChilkatMht = interface(IDispatch)
    ['{F1089DE8-926E-4BB9-ADAF-9E312F1BBD78}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_BaseUrl: WideString; safecall;
    procedure Set_BaseUrl(const pVal: WideString); safecall;
    function Get_ConnectTimeout: Integer; safecall;
    procedure Set_ConnectTimeout(pVal: Integer); safecall;
    function Get_DebugHtmlAfter: WideString; safecall;
    procedure Set_DebugHtmlAfter(const pVal: WideString); safecall;
    function Get_DebugHtmlBefore: WideString; safecall;
    procedure Set_DebugHtmlBefore(const pVal: WideString); safecall;
    function Get_DebugTagCleaning: Integer; safecall;
    procedure Set_DebugTagCleaning(pVal: Integer); safecall;
    function Get_EmbedImages: Integer; safecall;
    procedure Set_EmbedImages(pVal: Integer); safecall;
    function Get_EmbedLocalOnly: Integer; safecall;
    procedure Set_EmbedLocalOnly(pVal: Integer); safecall;
    function Get_FetchFromCache: Integer; safecall;
    procedure Set_FetchFromCache(pVal: Integer); safecall;
    function Get_HeartbeatMs: Integer; safecall;
    procedure Set_HeartbeatMs(pVal: Integer); safecall;
    function Get_IgnoreMustRevalidate: Integer; safecall;
    procedure Set_IgnoreMustRevalidate(pVal: Integer); safecall;
    function Get_IgnoreNoCache: Integer; safecall;
    procedure Set_IgnoreNoCache(pVal: Integer); safecall;
    function Get_NoScripts: Integer; safecall;
    procedure Set_NoScripts(pVal: Integer); safecall;
    function Get_NtlmAuth: Integer; safecall;
    procedure Set_NtlmAuth(pVal: Integer); safecall;
    function Get_NumCacheLevels: Integer; safecall;
    procedure Set_NumCacheLevels(pVal: Integer); safecall;
    function Get_NumCacheRoots: Integer; safecall;
    function Get_PreferMHTScripts: Integer; safecall;
    procedure Set_PreferMHTScripts(pVal: Integer); safecall;
    function Get_Proxy: WideString; safecall;
    procedure Set_Proxy(const pVal: WideString); safecall;
    function Get_ProxyLogin: WideString; safecall;
    procedure Set_ProxyLogin(const pVal: WideString); safecall;
    function Get_ProxyPassword: WideString; safecall;
    procedure Set_ProxyPassword(const pVal: WideString); safecall;
    function Get_ReadTimeout: Integer; safecall;
    procedure Set_ReadTimeout(pVal: Integer); safecall;
    function Get_SocksHostname: WideString; safecall;
    procedure Set_SocksHostname(const pVal: WideString); safecall;
    function Get_SocksPassword: WideString; safecall;
    procedure Set_SocksPassword(const pVal: WideString); safecall;
    function Get_SocksPort: Integer; safecall;
    procedure Set_SocksPort(pVal: Integer); safecall;
    function Get_SocksUsername: WideString; safecall;
    procedure Set_SocksUsername(const pVal: WideString); safecall;
    function Get_SocksVersion: Integer; safecall;
    procedure Set_SocksVersion(pVal: Integer); safecall;
    function Get_UnpackUseRelPaths: Integer; safecall;
    procedure Set_UnpackUseRelPaths(pVal: Integer); safecall;
    function Get_UpdateCache: Integer; safecall;
    procedure Set_UpdateCache(pVal: Integer); safecall;
    function Get_UseCids: Integer; safecall;
    procedure Set_UseCids(pVal: Integer); safecall;
    function Get_UseFilename: Integer; safecall;
    procedure Set_UseFilename(pVal: Integer); safecall;
    function Get_UseIEProxy: Integer; safecall;
    procedure Set_UseIEProxy(pVal: Integer); safecall;
    function Get_UseInline: Integer; safecall;
    procedure Set_UseInline(pVal: Integer); safecall;
    function Get_WebSiteLogin: WideString; safecall;
    procedure Set_WebSiteLogin(const pVal: WideString); safecall;
    function Get_WebSiteLoginDomain: WideString; safecall;
    procedure Set_WebSiteLoginDomain(const pVal: WideString); safecall;
    function Get_WebSitePassword: WideString; safecall;
    procedure Set_WebSitePassword(const pVal: WideString); safecall;
    function Get_RequireSslCertVerify: Integer; safecall;
    procedure Set_RequireSslCertVerify(pVal: Integer); safecall;
    function Get_PreferIpv6: Integer; safecall;
    procedure Set_PreferIpv6(pVal: Integer); safecall;
    procedure AddCacheRoot(const dir: WideString); safecall;
    procedure AddCustomHeader(const name: WideString; const value: WideString); safecall;
    procedure AddExternalStyleSheet(const url: WideString); safecall;
    procedure ClearCustomHeaders; safecall;
    procedure ExcludeImagesMatching(const pattern: WideString); safecall;
    function GetAndSaveEML(const url: WideString; const emlFilename: WideString): Integer; safecall;
    function GetAndSaveMHT(const url: WideString; const mhtFilename: WideString): Integer; safecall;
    function GetAndZipEML(const url: WideString; const zipEntryFilename: WideString; 
                          const zipFilename: WideString): Integer; safecall;
    function GetAndZipMHT(const url: WideString; const zipEntryFilename: WideString; 
                          const zipFilename: WideString): Integer; safecall;
    function GetCacheRoot(index: Integer): WideString; safecall;
    function GetEML(const url: WideString): WideString; safecall;
    function GetMHT(const url: WideString): WideString; safecall;
    function HtmlToEML(const htmlText: WideString): WideString; safecall;
    function HtmlToEMLFile(const html: WideString; const emlFilename: WideString): Integer; safecall;
    function HtmlToMHT(const htmlText: WideString): WideString; safecall;
    function HtmlToMHTFile(const html: WideString; const mhtFilename: WideString): Integer; safecall;
    function IsUnlocked: Integer; safecall;
    procedure RemoveCustomHeader(const name: WideString); safecall;
    procedure RestoreDefaults; safecall;
    function UnlockComponent(const unlockCode: WideString): Integer; safecall;
    function UnpackMHT(const mhtFilename: WideString; const unpackDir: WideString; 
                       const htmlFilename: WideString; const partsSubDir: WideString): Integer; safecall;
    function UnpackMHTString(const mhtString: WideString; const unpackDir: WideString; 
                             const htmlFilename: WideString; const partsSubDir: WideString): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property BaseUrl: WideString read Get_BaseUrl write Set_BaseUrl;
    property ConnectTimeout: Integer read Get_ConnectTimeout write Set_ConnectTimeout;
    property DebugHtmlAfter: WideString read Get_DebugHtmlAfter write Set_DebugHtmlAfter;
    property DebugHtmlBefore: WideString read Get_DebugHtmlBefore write Set_DebugHtmlBefore;
    property DebugTagCleaning: Integer read Get_DebugTagCleaning write Set_DebugTagCleaning;
    property EmbedImages: Integer read Get_EmbedImages write Set_EmbedImages;
    property EmbedLocalOnly: Integer read Get_EmbedLocalOnly write Set_EmbedLocalOnly;
    property FetchFromCache: Integer read Get_FetchFromCache write Set_FetchFromCache;
    property HeartbeatMs: Integer read Get_HeartbeatMs write Set_HeartbeatMs;
    property IgnoreMustRevalidate: Integer read Get_IgnoreMustRevalidate write Set_IgnoreMustRevalidate;
    property IgnoreNoCache: Integer read Get_IgnoreNoCache write Set_IgnoreNoCache;
    property NoScripts: Integer read Get_NoScripts write Set_NoScripts;
    property NtlmAuth: Integer read Get_NtlmAuth write Set_NtlmAuth;
    property NumCacheLevels: Integer read Get_NumCacheLevels write Set_NumCacheLevels;
    property NumCacheRoots: Integer read Get_NumCacheRoots;
    property PreferMHTScripts: Integer read Get_PreferMHTScripts write Set_PreferMHTScripts;
    property Proxy: WideString read Get_Proxy write Set_Proxy;
    property ProxyLogin: WideString read Get_ProxyLogin write Set_ProxyLogin;
    property ProxyPassword: WideString read Get_ProxyPassword write Set_ProxyPassword;
    property ReadTimeout: Integer read Get_ReadTimeout write Set_ReadTimeout;
    property SocksHostname: WideString read Get_SocksHostname write Set_SocksHostname;
    property SocksPassword: WideString read Get_SocksPassword write Set_SocksPassword;
    property SocksPort: Integer read Get_SocksPort write Set_SocksPort;
    property SocksUsername: WideString read Get_SocksUsername write Set_SocksUsername;
    property SocksVersion: Integer read Get_SocksVersion write Set_SocksVersion;
    property UnpackUseRelPaths: Integer read Get_UnpackUseRelPaths write Set_UnpackUseRelPaths;
    property UpdateCache: Integer read Get_UpdateCache write Set_UpdateCache;
    property UseCids: Integer read Get_UseCids write Set_UseCids;
    property UseFilename: Integer read Get_UseFilename write Set_UseFilename;
    property UseIEProxy: Integer read Get_UseIEProxy write Set_UseIEProxy;
    property UseInline: Integer read Get_UseInline write Set_UseInline;
    property WebSiteLogin: WideString read Get_WebSiteLogin write Set_WebSiteLogin;
    property WebSiteLoginDomain: WideString read Get_WebSiteLoginDomain write Set_WebSiteLoginDomain;
    property WebSitePassword: WideString read Get_WebSitePassword write Set_WebSitePassword;
    property RequireSslCertVerify: Integer read Get_RequireSslCertVerify write Set_RequireSslCertVerify;
    property PreferIpv6: Integer read Get_PreferIpv6 write Set_PreferIpv6;
  end;

// *********************************************************************//
// DispIntf:  IChilkatMhtDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F1089DE8-926E-4BB9-ADAF-9E312F1BBD78}
// *********************************************************************//
  IChilkatMhtDisp = dispinterface
    ['{F1089DE8-926E-4BB9-ADAF-9E312F1BBD78}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property BaseUrl: WideString dispid 100;
    property ConnectTimeout: Integer dispid 101;
    property DebugHtmlAfter: WideString dispid 102;
    property DebugHtmlBefore: WideString dispid 103;
    property DebugTagCleaning: Integer dispid 104;
    property EmbedImages: Integer dispid 105;
    property EmbedLocalOnly: Integer dispid 106;
    property FetchFromCache: Integer dispid 107;
    property HeartbeatMs: Integer dispid 108;
    property IgnoreMustRevalidate: Integer dispid 109;
    property IgnoreNoCache: Integer dispid 110;
    property NoScripts: Integer dispid 111;
    property NtlmAuth: Integer dispid 112;
    property NumCacheLevels: Integer dispid 113;
    property NumCacheRoots: Integer readonly dispid 114;
    property PreferMHTScripts: Integer dispid 115;
    property Proxy: WideString dispid 116;
    property ProxyLogin: WideString dispid 117;
    property ProxyPassword: WideString dispid 118;
    property ReadTimeout: Integer dispid 119;
    property SocksHostname: WideString dispid 120;
    property SocksPassword: WideString dispid 121;
    property SocksPort: Integer dispid 122;
    property SocksUsername: WideString dispid 123;
    property SocksVersion: Integer dispid 124;
    property UnpackUseRelPaths: Integer dispid 125;
    property UpdateCache: Integer dispid 126;
    property UseCids: Integer dispid 127;
    property UseFilename: Integer dispid 128;
    property UseIEProxy: Integer dispid 129;
    property UseInline: Integer dispid 130;
    property WebSiteLogin: WideString dispid 131;
    property WebSiteLoginDomain: WideString dispid 132;
    property WebSitePassword: WideString dispid 133;
    property RequireSslCertVerify: Integer dispid 159;
    property PreferIpv6: Integer dispid 160;
    procedure AddCacheRoot(const dir: WideString); dispid 134;
    procedure AddCustomHeader(const name: WideString; const value: WideString); dispid 135;
    procedure AddExternalStyleSheet(const url: WideString); dispid 136;
    procedure ClearCustomHeaders; dispid 137;
    procedure ExcludeImagesMatching(const pattern: WideString); dispid 138;
    function GetAndSaveEML(const url: WideString; const emlFilename: WideString): Integer; dispid 139;
    function GetAndSaveMHT(const url: WideString; const mhtFilename: WideString): Integer; dispid 140;
    function GetAndZipEML(const url: WideString; const zipEntryFilename: WideString; 
                          const zipFilename: WideString): Integer; dispid 141;
    function GetAndZipMHT(const url: WideString; const zipEntryFilename: WideString; 
                          const zipFilename: WideString): Integer; dispid 142;
    function GetCacheRoot(index: Integer): WideString; dispid 143;
    function GetEML(const url: WideString): WideString; dispid 144;
    function GetMHT(const url: WideString): WideString; dispid 146;
    function HtmlToEML(const htmlText: WideString): WideString; dispid 148;
    function HtmlToEMLFile(const html: WideString; const emlFilename: WideString): Integer; dispid 149;
    function HtmlToMHT(const htmlText: WideString): WideString; dispid 151;
    function HtmlToMHTFile(const html: WideString; const mhtFilename: WideString): Integer; dispid 152;
    function IsUnlocked: Integer; dispid 153;
    procedure RemoveCustomHeader(const name: WideString); dispid 154;
    procedure RestoreDefaults; dispid 155;
    function UnlockComponent(const unlockCode: WideString): Integer; dispid 156;
    function UnpackMHT(const mhtFilename: WideString; const unpackDir: WideString; 
                       const htmlFilename: WideString; const partsSubDir: WideString): Integer; dispid 157;
    function UnpackMHTString(const mhtString: WideString; const unpackDir: WideString; 
                             const htmlFilename: WideString; const partsSubDir: WideString): Integer; dispid 158;
  end;

// *********************************************************************//
// Interface: IMessageSet
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0F01CF8C-CE79-4812-8D55-3BD7CC34A318}
// *********************************************************************//
  IMessageSet = interface(IDispatch)
    ['{0F01CF8C-CE79-4812-8D55-3BD7CC34A318}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_HasUids: Integer; safecall;
    procedure Set_HasUids(pVal: Integer); safecall;
    function Get_Count: Integer; safecall;
    function ContainsId(id: Integer): Integer; safecall;
    function FromCompactString(const str: WideString): Integer; safecall;
    function GetId(index: Integer): Integer; safecall;
    procedure InsertId(id: Integer); safecall;
    procedure RemoveId(id: Integer); safecall;
    function ToCompactString: WideString; safecall;
    function ToCommaSeparatedStr: WideString; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property HasUids: Integer read Get_HasUids write Set_HasUids;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  IMessageSetDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0F01CF8C-CE79-4812-8D55-3BD7CC34A318}
// *********************************************************************//
  IMessageSetDisp = dispinterface
    ['{0F01CF8C-CE79-4812-8D55-3BD7CC34A318}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property HasUids: Integer dispid 100;
    property Count: Integer readonly dispid 101;
    function ContainsId(id: Integer): Integer; dispid 102;
    function FromCompactString(const str: WideString): Integer; dispid 103;
    function GetId(index: Integer): Integer; dispid 104;
    procedure InsertId(id: Integer); dispid 105;
    procedure RemoveId(id: Integer); dispid 106;
    function ToCompactString: WideString; dispid 107;
    function ToCommaSeparatedStr: WideString; dispid 108;
  end;

// *********************************************************************//
// Interface: IMailboxes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2DB04566-D0BC-4FCF-926A-3E11B37E0B01}
// *********************************************************************//
  IMailboxes = interface(IDispatch)
    ['{2DB04566-D0BC-4FCF-926A-3E11B37E0B01}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_Count: Integer; safecall;
    function HasInferiors(index: Integer): Integer; safecall;
    function IsMarked(index: Integer): Integer; safecall;
    function IsSelectable(index: Integer): Integer; safecall;
    function GetName(index: Integer): WideString; safecall;
    function GetFlags(index: Integer): WideString; safecall;
    function HasFlag(index: Integer; const flagName: WideString): Integer; safecall;
    function GetNumFlags(index: Integer): Integer; safecall;
    function GetNthFlag(index: Integer; flagIndex: Integer): WideString; safecall;
    function GetMailboxIndex(const mbxName: WideString): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  IMailboxesDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2DB04566-D0BC-4FCF-926A-3E11B37E0B01}
// *********************************************************************//
  IMailboxesDisp = dispinterface
    ['{2DB04566-D0BC-4FCF-926A-3E11B37E0B01}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property Count: Integer readonly dispid 100;
    function HasInferiors(index: Integer): Integer; dispid 101;
    function IsMarked(index: Integer): Integer; dispid 102;
    function IsSelectable(index: Integer): Integer; dispid 103;
    function GetName(index: Integer): WideString; dispid 104;
    function GetFlags(index: Integer): WideString; dispid 105;
    function HasFlag(index: Integer; const flagName: WideString): Integer; dispid 106;
    function GetNumFlags(index: Integer): Integer; dispid 107;
    function GetNthFlag(index: Integer; flagIndex: Integer): WideString; dispid 108;
    function GetMailboxIndex(const mbxName: WideString): Integer; dispid 109;
  end;

// *********************************************************************//
// Interface: IChilkatMailMan
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {7998B064-06E7-4960-ACEF-AAFF0A262487}
// *********************************************************************//
  IChilkatMailMan = interface(IDispatch)
    ['{7998B064-06E7-4960-ACEF-AAFF0A262487}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_AllOrNone: Integer; safecall;
    procedure Set_AllOrNone(pVal: Integer); safecall;
    function Get_AutoFix: Integer; safecall;
    procedure Set_AutoFix(pVal: Integer); safecall;
    function Get_AutoGenMessageId: Integer; safecall;
    procedure Set_AutoGenMessageId(pVal: Integer); safecall;
    function Get_AutoSmtpRset: Integer; safecall;
    procedure Set_AutoSmtpRset(pVal: Integer); safecall;
    function Get_ClientIpAddress: WideString; safecall;
    procedure Set_ClientIpAddress(const pVal: WideString); safecall;
    function Get_ConnectTimeout: Integer; safecall;
    procedure Set_ConnectTimeout(pVal: Integer); safecall;
    function Get_DsnEnvid: WideString; safecall;
    procedure Set_DsnEnvid(const pVal: WideString); safecall;
    function Get_DsnNotify: WideString; safecall;
    procedure Set_DsnNotify(const pVal: WideString); safecall;
    function Get_DsnRet: WideString; safecall;
    procedure Set_DsnRet(const pVal: WideString); safecall;
    function Get_EmbedCertChain: Integer; safecall;
    procedure Set_EmbedCertChain(pVal: Integer); safecall;
    function Get_Filter: WideString; safecall;
    procedure Set_Filter(const pVal: WideString); safecall;
    function Get_HeartbeatMs: Integer; safecall;
    procedure Set_HeartbeatMs(pVal: Integer); safecall;
    function Get_HeloHostname: WideString; safecall;
    procedure Set_HeloHostname(const pVal: WideString); safecall;
    function Get_HttpProxyAuthMethod: WideString; safecall;
    procedure Set_HttpProxyAuthMethod(const pVal: WideString); safecall;
    function Get_HttpProxyDomain: WideString; safecall;
    procedure Set_HttpProxyDomain(const pVal: WideString); safecall;
    function Get_HttpProxyHostname: WideString; safecall;
    procedure Set_HttpProxyHostname(const pVal: WideString); safecall;
    function Get_HttpProxyPassword: WideString; safecall;
    procedure Set_HttpProxyPassword(const pVal: WideString); safecall;
    function Get_HttpProxyPort: Integer; safecall;
    procedure Set_HttpProxyPort(pVal: Integer); safecall;
    function Get_HttpProxyUsername: WideString; safecall;
    procedure Set_HttpProxyUsername(const pVal: WideString); safecall;
    function Get_ImmediateDelete: Integer; safecall;
    procedure Set_ImmediateDelete(pVal: Integer); safecall;
    function Get_IncludeRootCert: Integer; safecall;
    procedure Set_IncludeRootCert(pVal: Integer); safecall;
    function Get_IsSmtpConnected: Integer; safecall;
    function Get_LastSendQFilename: WideString; safecall;
    function Get_LastSmtpStatus: Integer; safecall;
    function Get_LogMailReceivedFilename: WideString; safecall;
    procedure Set_LogMailReceivedFilename(const pVal: WideString); safecall;
    function Get_LogMailSentFilename: WideString; safecall;
    procedure Set_LogMailSentFilename(const pVal: WideString); safecall;
    function Get_MailHost: WideString; safecall;
    procedure Set_MailHost(const pVal: WideString); safecall;
    function Get_MailPort: Integer; safecall;
    procedure Set_MailPort(pVal: Integer); safecall;
    function Get_MaxCount: Integer; safecall;
    procedure Set_MaxCount(pVal: Integer); safecall;
    function Get_OpaqueSigning: Integer; safecall;
    procedure Set_OpaqueSigning(pVal: Integer); safecall;
    function Get_Pop3SPA: Integer; safecall;
    procedure Set_Pop3SPA(pVal: Integer); safecall;
    function Get_Pop3SessionId: Integer; safecall;
    function Get_Pop3SessionLog: WideString; safecall;
    function Get_Pop3SslServerCertVerified: Integer; safecall;
    function Get_Pop3Stls: Integer; safecall;
    procedure Set_Pop3Stls(pVal: Integer); safecall;
    function Get_PopPassword: WideString; safecall;
    procedure Set_PopPassword(const pVal: WideString); safecall;
    function Get_PopPasswordBase64: WideString; safecall;
    procedure Set_PopPasswordBase64(const pVal: WideString); safecall;
    function Get_PopSsl: Integer; safecall;
    procedure Set_PopSsl(pVal: Integer); safecall;
    function Get_PopUsername: WideString; safecall;
    procedure Set_PopUsername(const pVal: WideString); safecall;
    function Get_ReadTimeout: Integer; safecall;
    procedure Set_ReadTimeout(pVal: Integer); safecall;
    function Get_RequireSslCertVerify: Integer; safecall;
    procedure Set_RequireSslCertVerify(pVal: Integer); safecall;
    function Get_ResetDateOnLoad: Integer; safecall;
    procedure Set_ResetDateOnLoad(pVal: Integer); safecall;
    function Get_SendBufferSize: Integer; safecall;
    procedure Set_SendBufferSize(pVal: Integer); safecall;
    function Get_SendIndividual: Integer; safecall;
    procedure Set_SendIndividual(pVal: Integer); safecall;
    function Get_SizeLimit: Integer; safecall;
    procedure Set_SizeLimit(pVal: Integer); safecall;
    function Get_SmtpAuthMethod: WideString; safecall;
    procedure Set_SmtpAuthMethod(const pVal: WideString); safecall;
    function Get_SmtpHost: WideString; safecall;
    procedure Set_SmtpHost(const pVal: WideString); safecall;
    function Get_SmtpLoginDomain: WideString; safecall;
    procedure Set_SmtpLoginDomain(const pVal: WideString); safecall;
    function Get_SmtpPassword: WideString; safecall;
    procedure Set_SmtpPassword(const pVal: WideString); safecall;
    function Get_SmtpPort: Integer; safecall;
    procedure Set_SmtpPort(pVal: Integer); safecall;
    function Get_SmtpSessionLog: WideString; safecall;
    function Get_SmtpSsl: Integer; safecall;
    procedure Set_SmtpSsl(pVal: Integer); safecall;
    function Get_SmtpSslServerCertVerified: Integer; safecall;
    function Get_SmtpUsername: WideString; safecall;
    procedure Set_SmtpUsername(const pVal: WideString); safecall;
    function Get_SoRcvBuf: Integer; safecall;
    procedure Set_SoRcvBuf(pVal: Integer); safecall;
    function Get_SoSndBuf: Integer; safecall;
    procedure Set_SoSndBuf(pVal: Integer); safecall;
    function Get_SocksHostname: WideString; safecall;
    procedure Set_SocksHostname(const pVal: WideString); safecall;
    function Get_SocksPassword: WideString; safecall;
    procedure Set_SocksPassword(const pVal: WideString); safecall;
    function Get_SocksPort: Integer; safecall;
    procedure Set_SocksPort(pVal: Integer); safecall;
    function Get_SocksUsername: WideString; safecall;
    procedure Set_SocksUsername(const pVal: WideString); safecall;
    function Get_SocksVersion: Integer; safecall;
    procedure Set_SocksVersion(pVal: Integer); safecall;
    function Get_StartTLS: Integer; safecall;
    procedure Set_StartTLS(pVal: Integer); safecall;
    function Get_UseApop: Integer; safecall;
    procedure Set_UseApop(pVal: Integer); safecall;
    function Get_P7mEncryptAttachFilename: WideString; safecall;
    procedure Set_P7mEncryptAttachFilename(const pVal: WideString); safecall;
    function Get_P7mSigAttachFilename: WideString; safecall;
    procedure Set_P7mSigAttachFilename(const pVal: WideString); safecall;
    function Get_P7sSigAttachFilename: WideString; safecall;
    procedure Set_P7sSigAttachFilename(const pVal: WideString); safecall;
    function Get_PreferIpv6: Integer; safecall;
    procedure Set_PreferIpv6(pVal: Integer); safecall;
    function AddPfxSourceData(pfxData: OleVariant; const password: WideString): Integer; safecall;
    function AddPfxSourceFile(const pfxFilePath: WideString; const password: WideString): Integer; safecall;
    function CheckMail: Integer; safecall;
    procedure ClearBadEmailAddresses; safecall;
    procedure ClearPop3SessionLog; safecall;
    procedure ClearSmtpSessionLog; safecall;
    function CloseSmtpConnection: Integer; safecall;
    function CopyMail: IChilkatEmailBundle; safecall;
    function DeleteBundle(const bundle: IChilkatEmailBundle): Integer; safecall;
    function DeleteByMsgnum(msgnum: Integer): Integer; safecall;
    function DeleteByUidl(const uidl: WideString): Integer; safecall;
    function DeleteEmail(const email: IChilkatEmail): Integer; safecall;
    function DeleteMultiple(const uidlArray: ICkStringArray): Integer; safecall;
    function FetchByMsgnum(msgnum: Integer): IChilkatEmail; safecall;
    function FetchEmail(const uidl: WideString): IChilkatEmail; safecall;
    function FetchMime(const uidl: WideString): OleVariant; safecall;
    function FetchMimeByMsgnum(msgnum: Integer): OleVariant; safecall;
    function FetchMultiple(const uidlArray: ICkStringArray): IChilkatEmailBundle; safecall;
    function FetchMultipleHeaders(const uidlArray: ICkStringArray; numBodyLines: Integer): IChilkatEmailBundle; safecall;
    function FetchMultipleMime(const uidlArray: ICkStringArray): ICkStringArray; safecall;
    function FetchSingleHeader(numBodyLines: Integer; index: Integer): IChilkatEmail; safecall;
    function FetchSingleHeaderByUidl(numBodyLines: Integer; const uidl: WideString): IChilkatEmail; safecall;
    function GetAllHeaders(numBodyLines: Integer): IChilkatEmailBundle; safecall;
    function GetFullEmail(const email: IChilkatEmail): IChilkatEmail; safecall;
    function GetHeaders(numBodyLines: Integer; fromIndex: Integer; toIndex: Integer): IChilkatEmailBundle; safecall;
    function GetMailboxCount: Integer; safecall;
    function GetMailboxInfoXml: WideString; safecall;
    function GetMailboxSize: Integer; safecall;
    function GetPop3SslServerCert: IChilkatCert; safecall;
    function GetSentToEmailAddrs: ICkStringArray; safecall;
    function GetSizeByUidl(const uidl: WideString): Integer; safecall;
    function GetSmtpSslServerCert: IChilkatCert; safecall;
    function GetUidls: ICkStringArray; safecall;
    function IsSmtpDsnCapable: Integer; safecall;
    function IsUnlocked: Integer; safecall;
    function LoadEml(const emlFilename: WideString): IChilkatEmail; safecall;
    function LoadMbx(const mbxFileName: WideString): IChilkatEmailBundle; safecall;
    function LoadMime(const mimeText: WideString): IChilkatEmail; safecall;
    function LoadXmlEmail(const filename: WideString): IChilkatEmail; safecall;
    function LoadXmlEmailString(const xmlString: WideString): IChilkatEmail; safecall;
    function LoadXmlFile(const filename: WideString): IChilkatEmailBundle; safecall;
    function LoadXmlString(const xmlString: WideString): IChilkatEmailBundle; safecall;
    function MxLookup(const emailAddress: WideString): WideString; safecall;
    function MxLookupAll(const emailAddress: WideString): ICkStringArray; safecall;
    function OpenSmtpConnection: Integer; safecall;
    function Pop3BeginSession: Integer; safecall;
    function Pop3EndSession: Integer; safecall;
    function Pop3EndSessionNoQuit: Integer; safecall;
    function Pop3Noop: Integer; safecall;
    function Pop3Reset: Integer; safecall;
    function Pop3SendRawCommand(const command: WideString; const charset: WideString): WideString; safecall;
    function QuickSend(const fromAddr: WideString; const toAddr: WideString; 
                       const subject: WideString; const Body: WideString; 
                       const smtpServer: WideString): Integer; safecall;
    function RenderToMime(const email: IChilkatEmail): WideString; safecall;
    function RenderToMimeBytes(const email: IChilkatEmail): OleVariant; safecall;
    function SendBundle(const bundle: IChilkatEmailBundle): Integer; safecall;
    function SendEmail(const email: IChilkatEmail): Integer; safecall;
    function SendMime(const From: WideString; const recipients: WideString; 
                      const mimeText: WideString): Integer; safecall;
    function SendMimeBytes(const From: WideString; const recipients: WideString; 
                           mimeData: OleVariant): Integer; safecall;
    function SendMimeBytesQ(const From: WideString; const recipients: WideString; 
                            mimeData: OleVariant): Integer; safecall;
    function SendMimeQ(const From: WideString; const recipients: WideString; 
                       const mimeText: WideString): Integer; safecall;
    function SendMimeToList(const From: WideString; const distListFile: WideString; 
                            const mimeText: WideString): Integer; safecall;
    function SendQ(const email: IChilkatEmail): Integer; safecall;
    function SendQ2(const email: IChilkatEmail; const queueDir: WideString): Integer; safecall;
    function SendToDistributionList(const email: IChilkatEmail; const sa: ICkStringArray): Integer; safecall;
    function SetCSP(const csp: IChilkatCsp): Integer; safecall;
    function SetDecryptCert2(const cert: IChilkatCert; const key: IPrivateKey): Integer; safecall;
    function SetSslClientCert(const cert: IChilkatCert): Integer; safecall;
    function SetSslClientCertPem(const pemDataOrFilename: WideString; const pemPassword: WideString): Integer; safecall;
    function SetSslClientCertPfx(const pfxFilename: WideString; const pfxPassword: WideString): Integer; safecall;
    function SmtpNoop: Integer; safecall;
    function SmtpReset: Integer; safecall;
    function SmtpSendRawCommand(const command: WideString; const charset: WideString; 
                                bEncodeBase64: Integer): WideString; safecall;
    function SshAuthenticatePk(bSmtp: Integer; const SshLogin: WideString; 
                               const PrivateKey: IChilkatSshKey): Integer; safecall;
    function SshAuthenticatePw(bSmtp: Integer; const SshLogin: WideString; 
                               const SshPassword: WideString): Integer; safecall;
    function SshCloseTunnel(bSmtp: Integer): Integer; safecall;
    function SshTunnel(bSmtp: Integer; const sshServerHostname: WideString; sshServerPort: Integer): Integer; safecall;
    function TransferMail: IChilkatEmailBundle; safecall;
    function TransferMultipleMime(const uidlArray: ICkStringArray): ICkStringArray; safecall;
    function UnlockComponent(const code: WideString): Integer; safecall;
    function VerifyPopConnection: Integer; safecall;
    function VerifyPopLogin: Integer; safecall;
    function VerifySmtpConnection: Integer; safecall;
    function VerifySmtpLogin: Integer; safecall;
    procedure GetBadEmailAddresses(const strArray: ICkStringArray); safecall;
    function UseCertVault(const vault: IChilkatXmlCertVault): Integer; safecall;
    function SetDecryptCert(const cert: IChilkatCert): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property AllOrNone: Integer read Get_AllOrNone write Set_AllOrNone;
    property AutoFix: Integer read Get_AutoFix write Set_AutoFix;
    property AutoGenMessageId: Integer read Get_AutoGenMessageId write Set_AutoGenMessageId;
    property AutoSmtpRset: Integer read Get_AutoSmtpRset write Set_AutoSmtpRset;
    property ClientIpAddress: WideString read Get_ClientIpAddress write Set_ClientIpAddress;
    property ConnectTimeout: Integer read Get_ConnectTimeout write Set_ConnectTimeout;
    property DsnEnvid: WideString read Get_DsnEnvid write Set_DsnEnvid;
    property DsnNotify: WideString read Get_DsnNotify write Set_DsnNotify;
    property DsnRet: WideString read Get_DsnRet write Set_DsnRet;
    property EmbedCertChain: Integer read Get_EmbedCertChain write Set_EmbedCertChain;
    property Filter: WideString read Get_Filter write Set_Filter;
    property HeartbeatMs: Integer read Get_HeartbeatMs write Set_HeartbeatMs;
    property HeloHostname: WideString read Get_HeloHostname write Set_HeloHostname;
    property HttpProxyAuthMethod: WideString read Get_HttpProxyAuthMethod write Set_HttpProxyAuthMethod;
    property HttpProxyDomain: WideString read Get_HttpProxyDomain write Set_HttpProxyDomain;
    property HttpProxyHostname: WideString read Get_HttpProxyHostname write Set_HttpProxyHostname;
    property HttpProxyPassword: WideString read Get_HttpProxyPassword write Set_HttpProxyPassword;
    property HttpProxyPort: Integer read Get_HttpProxyPort write Set_HttpProxyPort;
    property HttpProxyUsername: WideString read Get_HttpProxyUsername write Set_HttpProxyUsername;
    property ImmediateDelete: Integer read Get_ImmediateDelete write Set_ImmediateDelete;
    property IncludeRootCert: Integer read Get_IncludeRootCert write Set_IncludeRootCert;
    property IsSmtpConnected: Integer read Get_IsSmtpConnected;
    property LastSendQFilename: WideString read Get_LastSendQFilename;
    property LastSmtpStatus: Integer read Get_LastSmtpStatus;
    property LogMailReceivedFilename: WideString read Get_LogMailReceivedFilename write Set_LogMailReceivedFilename;
    property LogMailSentFilename: WideString read Get_LogMailSentFilename write Set_LogMailSentFilename;
    property MailHost: WideString read Get_MailHost write Set_MailHost;
    property MailPort: Integer read Get_MailPort write Set_MailPort;
    property MaxCount: Integer read Get_MaxCount write Set_MaxCount;
    property OpaqueSigning: Integer read Get_OpaqueSigning write Set_OpaqueSigning;
    property Pop3SPA: Integer read Get_Pop3SPA write Set_Pop3SPA;
    property Pop3SessionId: Integer read Get_Pop3SessionId;
    property Pop3SessionLog: WideString read Get_Pop3SessionLog;
    property Pop3SslServerCertVerified: Integer read Get_Pop3SslServerCertVerified;
    property Pop3Stls: Integer read Get_Pop3Stls write Set_Pop3Stls;
    property PopPassword: WideString read Get_PopPassword write Set_PopPassword;
    property PopPasswordBase64: WideString read Get_PopPasswordBase64 write Set_PopPasswordBase64;
    property PopSsl: Integer read Get_PopSsl write Set_PopSsl;
    property PopUsername: WideString read Get_PopUsername write Set_PopUsername;
    property ReadTimeout: Integer read Get_ReadTimeout write Set_ReadTimeout;
    property RequireSslCertVerify: Integer read Get_RequireSslCertVerify write Set_RequireSslCertVerify;
    property ResetDateOnLoad: Integer read Get_ResetDateOnLoad write Set_ResetDateOnLoad;
    property SendBufferSize: Integer read Get_SendBufferSize write Set_SendBufferSize;
    property SendIndividual: Integer read Get_SendIndividual write Set_SendIndividual;
    property SizeLimit: Integer read Get_SizeLimit write Set_SizeLimit;
    property SmtpAuthMethod: WideString read Get_SmtpAuthMethod write Set_SmtpAuthMethod;
    property SmtpHost: WideString read Get_SmtpHost write Set_SmtpHost;
    property SmtpLoginDomain: WideString read Get_SmtpLoginDomain write Set_SmtpLoginDomain;
    property SmtpPassword: WideString read Get_SmtpPassword write Set_SmtpPassword;
    property SmtpPort: Integer read Get_SmtpPort write Set_SmtpPort;
    property SmtpSessionLog: WideString read Get_SmtpSessionLog;
    property SmtpSsl: Integer read Get_SmtpSsl write Set_SmtpSsl;
    property SmtpSslServerCertVerified: Integer read Get_SmtpSslServerCertVerified;
    property SmtpUsername: WideString read Get_SmtpUsername write Set_SmtpUsername;
    property SoRcvBuf: Integer read Get_SoRcvBuf write Set_SoRcvBuf;
    property SoSndBuf: Integer read Get_SoSndBuf write Set_SoSndBuf;
    property SocksHostname: WideString read Get_SocksHostname write Set_SocksHostname;
    property SocksPassword: WideString read Get_SocksPassword write Set_SocksPassword;
    property SocksPort: Integer read Get_SocksPort write Set_SocksPort;
    property SocksUsername: WideString read Get_SocksUsername write Set_SocksUsername;
    property SocksVersion: Integer read Get_SocksVersion write Set_SocksVersion;
    property StartTLS: Integer read Get_StartTLS write Set_StartTLS;
    property UseApop: Integer read Get_UseApop write Set_UseApop;
    property P7mEncryptAttachFilename: WideString read Get_P7mEncryptAttachFilename write Set_P7mEncryptAttachFilename;
    property P7mSigAttachFilename: WideString read Get_P7mSigAttachFilename write Set_P7mSigAttachFilename;
    property P7sSigAttachFilename: WideString read Get_P7sSigAttachFilename write Set_P7sSigAttachFilename;
    property PreferIpv6: Integer read Get_PreferIpv6 write Set_PreferIpv6;
  end;

// *********************************************************************//
// DispIntf:  IChilkatMailManDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {7998B064-06E7-4960-ACEF-AAFF0A262487}
// *********************************************************************//
  IChilkatMailManDisp = dispinterface
    ['{7998B064-06E7-4960-ACEF-AAFF0A262487}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property AllOrNone: Integer dispid 100;
    property AutoFix: Integer dispid 101;
    property AutoGenMessageId: Integer dispid 102;
    property AutoSmtpRset: Integer dispid 103;
    property ClientIpAddress: WideString dispid 104;
    property ConnectTimeout: Integer dispid 105;
    property DsnEnvid: WideString dispid 106;
    property DsnNotify: WideString dispid 107;
    property DsnRet: WideString dispid 108;
    property EmbedCertChain: Integer dispid 109;
    property Filter: WideString dispid 110;
    property HeartbeatMs: Integer dispid 111;
    property HeloHostname: WideString dispid 112;
    property HttpProxyAuthMethod: WideString dispid 113;
    property HttpProxyDomain: WideString dispid 114;
    property HttpProxyHostname: WideString dispid 115;
    property HttpProxyPassword: WideString dispid 116;
    property HttpProxyPort: Integer dispid 117;
    property HttpProxyUsername: WideString dispid 118;
    property ImmediateDelete: Integer dispid 119;
    property IncludeRootCert: Integer dispid 120;
    property IsSmtpConnected: Integer readonly dispid 121;
    property LastSendQFilename: WideString readonly dispid 122;
    property LastSmtpStatus: Integer readonly dispid 123;
    property LogMailReceivedFilename: WideString dispid 124;
    property LogMailSentFilename: WideString dispid 125;
    property MailHost: WideString dispid 126;
    property MailPort: Integer dispid 127;
    property MaxCount: Integer dispid 128;
    property OpaqueSigning: Integer dispid 129;
    property Pop3SPA: Integer dispid 130;
    property Pop3SessionId: Integer readonly dispid 131;
    property Pop3SessionLog: WideString readonly dispid 132;
    property Pop3SslServerCertVerified: Integer readonly dispid 133;
    property Pop3Stls: Integer dispid 134;
    property PopPassword: WideString dispid 135;
    property PopPasswordBase64: WideString dispid 136;
    property PopSsl: Integer dispid 137;
    property PopUsername: WideString dispid 138;
    property ReadTimeout: Integer dispid 139;
    property RequireSslCertVerify: Integer dispid 140;
    property ResetDateOnLoad: Integer dispid 141;
    property SendBufferSize: Integer dispid 142;
    property SendIndividual: Integer dispid 143;
    property SizeLimit: Integer dispid 144;
    property SmtpAuthMethod: WideString dispid 145;
    property SmtpHost: WideString dispid 146;
    property SmtpLoginDomain: WideString dispid 147;
    property SmtpPassword: WideString dispid 148;
    property SmtpPort: Integer dispid 149;
    property SmtpSessionLog: WideString readonly dispid 150;
    property SmtpSsl: Integer dispid 151;
    property SmtpSslServerCertVerified: Integer readonly dispid 152;
    property SmtpUsername: WideString dispid 153;
    property SoRcvBuf: Integer dispid 154;
    property SoSndBuf: Integer dispid 155;
    property SocksHostname: WideString dispid 156;
    property SocksPassword: WideString dispid 157;
    property SocksPort: Integer dispid 158;
    property SocksUsername: WideString dispid 159;
    property SocksVersion: Integer dispid 160;
    property StartTLS: Integer dispid 161;
    property UseApop: Integer dispid 162;
    property P7mEncryptAttachFilename: WideString dispid 250;
    property P7mSigAttachFilename: WideString dispid 251;
    property P7sSigAttachFilename: WideString dispid 252;
    property PreferIpv6: Integer dispid 253;
    function AddPfxSourceData(pfxData: OleVariant; const password: WideString): Integer; dispid 163;
    function AddPfxSourceFile(const pfxFilePath: WideString; const password: WideString): Integer; dispid 164;
    function CheckMail: Integer; dispid 165;
    procedure ClearBadEmailAddresses; dispid 166;
    procedure ClearPop3SessionLog; dispid 167;
    procedure ClearSmtpSessionLog; dispid 168;
    function CloseSmtpConnection: Integer; dispid 169;
    function CopyMail: IChilkatEmailBundle; dispid 170;
    function DeleteBundle(const bundle: IChilkatEmailBundle): Integer; dispid 171;
    function DeleteByMsgnum(msgnum: Integer): Integer; dispid 172;
    function DeleteByUidl(const uidl: WideString): Integer; dispid 173;
    function DeleteEmail(const email: IChilkatEmail): Integer; dispid 174;
    function DeleteMultiple(const uidlArray: ICkStringArray): Integer; dispid 175;
    function FetchByMsgnum(msgnum: Integer): IChilkatEmail; dispid 176;
    function FetchEmail(const uidl: WideString): IChilkatEmail; dispid 177;
    function FetchMime(const uidl: WideString): OleVariant; dispid 178;
    function FetchMimeByMsgnum(msgnum: Integer): OleVariant; dispid 179;
    function FetchMultiple(const uidlArray: ICkStringArray): IChilkatEmailBundle; dispid 180;
    function FetchMultipleHeaders(const uidlArray: ICkStringArray; numBodyLines: Integer): IChilkatEmailBundle; dispid 181;
    function FetchMultipleMime(const uidlArray: ICkStringArray): ICkStringArray; dispid 182;
    function FetchSingleHeader(numBodyLines: Integer; index: Integer): IChilkatEmail; dispid 183;
    function FetchSingleHeaderByUidl(numBodyLines: Integer; const uidl: WideString): IChilkatEmail; dispid 184;
    function GetAllHeaders(numBodyLines: Integer): IChilkatEmailBundle; dispid 185;
    function GetFullEmail(const email: IChilkatEmail): IChilkatEmail; dispid 186;
    function GetHeaders(numBodyLines: Integer; fromIndex: Integer; toIndex: Integer): IChilkatEmailBundle; dispid 187;
    function GetMailboxCount: Integer; dispid 188;
    function GetMailboxInfoXml: WideString; dispid 189;
    function GetMailboxSize: Integer; dispid 190;
    function GetPop3SslServerCert: IChilkatCert; dispid 191;
    function GetSentToEmailAddrs: ICkStringArray; dispid 192;
    function GetSizeByUidl(const uidl: WideString): Integer; dispid 193;
    function GetSmtpSslServerCert: IChilkatCert; dispid 194;
    function GetUidls: ICkStringArray; dispid 195;
    function IsSmtpDsnCapable: Integer; dispid 196;
    function IsUnlocked: Integer; dispid 197;
    function LoadEml(const emlFilename: WideString): IChilkatEmail; dispid 198;
    function LoadMbx(const mbxFileName: WideString): IChilkatEmailBundle; dispid 199;
    function LoadMime(const mimeText: WideString): IChilkatEmail; dispid 200;
    function LoadXmlEmail(const filename: WideString): IChilkatEmail; dispid 201;
    function LoadXmlEmailString(const xmlString: WideString): IChilkatEmail; dispid 202;
    function LoadXmlFile(const filename: WideString): IChilkatEmailBundle; dispid 203;
    function LoadXmlString(const xmlString: WideString): IChilkatEmailBundle; dispid 204;
    function MxLookup(const emailAddress: WideString): WideString; dispid 205;
    function MxLookupAll(const emailAddress: WideString): ICkStringArray; dispid 206;
    function OpenSmtpConnection: Integer; dispid 207;
    function Pop3BeginSession: Integer; dispid 208;
    function Pop3EndSession: Integer; dispid 209;
    function Pop3EndSessionNoQuit: Integer; dispid 210;
    function Pop3Noop: Integer; dispid 211;
    function Pop3Reset: Integer; dispid 212;
    function Pop3SendRawCommand(const command: WideString; const charset: WideString): WideString; dispid 213;
    function QuickSend(const fromAddr: WideString; const toAddr: WideString; 
                       const subject: WideString; const Body: WideString; 
                       const smtpServer: WideString): Integer; dispid 214;
    function RenderToMime(const email: IChilkatEmail): WideString; dispid 215;
    function RenderToMimeBytes(const email: IChilkatEmail): OleVariant; dispid 216;
    function SendBundle(const bundle: IChilkatEmailBundle): Integer; dispid 217;
    function SendEmail(const email: IChilkatEmail): Integer; dispid 218;
    function SendMime(const From: WideString; const recipients: WideString; 
                      const mimeText: WideString): Integer; dispid 219;
    function SendMimeBytes(const From: WideString; const recipients: WideString; 
                           mimeData: OleVariant): Integer; dispid 220;
    function SendMimeBytesQ(const From: WideString; const recipients: WideString; 
                            mimeData: OleVariant): Integer; dispid 221;
    function SendMimeQ(const From: WideString; const recipients: WideString; 
                       const mimeText: WideString): Integer; dispid 222;
    function SendMimeToList(const From: WideString; const distListFile: WideString; 
                            const mimeText: WideString): Integer; dispid 223;
    function SendQ(const email: IChilkatEmail): Integer; dispid 224;
    function SendQ2(const email: IChilkatEmail; const queueDir: WideString): Integer; dispid 225;
    function SendToDistributionList(const email: IChilkatEmail; const sa: ICkStringArray): Integer; dispid 226;
    function SetCSP(const csp: IChilkatCsp): Integer; dispid 227;
    function SetDecryptCert2(const cert: IChilkatCert; const key: IPrivateKey): Integer; dispid 228;
    function SetSslClientCert(const cert: IChilkatCert): Integer; dispid 229;
    function SetSslClientCertPem(const pemDataOrFilename: WideString; const pemPassword: WideString): Integer; dispid 230;
    function SetSslClientCertPfx(const pfxFilename: WideString; const pfxPassword: WideString): Integer; dispid 231;
    function SmtpNoop: Integer; dispid 232;
    function SmtpReset: Integer; dispid 233;
    function SmtpSendRawCommand(const command: WideString; const charset: WideString; 
                                bEncodeBase64: Integer): WideString; dispid 234;
    function SshAuthenticatePk(bSmtp: Integer; const SshLogin: WideString; 
                               const PrivateKey: IChilkatSshKey): Integer; dispid 235;
    function SshAuthenticatePw(bSmtp: Integer; const SshLogin: WideString; 
                               const SshPassword: WideString): Integer; dispid 236;
    function SshCloseTunnel(bSmtp: Integer): Integer; dispid 237;
    function SshTunnel(bSmtp: Integer; const sshServerHostname: WideString; sshServerPort: Integer): Integer; dispid 238;
    function TransferMail: IChilkatEmailBundle; dispid 239;
    function TransferMultipleMime(const uidlArray: ICkStringArray): ICkStringArray; dispid 240;
    function UnlockComponent(const code: WideString): Integer; dispid 241;
    function VerifyPopConnection: Integer; dispid 242;
    function VerifyPopLogin: Integer; dispid 243;
    function VerifySmtpConnection: Integer; dispid 244;
    function VerifySmtpLogin: Integer; dispid 245;
    procedure GetBadEmailAddresses(const strArray: ICkStringArray); dispid 246;
    function UseCertVault(const vault: IChilkatXmlCertVault): Integer; dispid 254;
    function SetDecryptCert(const cert: IChilkatCert): Integer; dispid 255;
  end;

// *********************************************************************//
// Interface: IChilkatEmailBundle
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A325D50D-6A7D-423F-9087-4242DC382181}
// *********************************************************************//
  IChilkatEmailBundle = interface(IDispatch)
    ['{A325D50D-6A7D-423F-9087-4242DC382181}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_MessageCount: Integer; safecall;
    function AddEmail(const email: IChilkatEmail): Integer; safecall;
    function FindByHeader(const name: WideString; const value: WideString): IChilkatEmail; safecall;
    function GetEmail(index: Integer): IChilkatEmail; safecall;
    function GetUidls: ICkStringArray; safecall;
    function GetXml: WideString; safecall;
    function LoadXml(const filename: WideString): Integer; safecall;
    function LoadXmlString(const xmlStr: WideString): Integer; safecall;
    function RemoveEmail(const email: IChilkatEmail): Integer; safecall;
    function RemoveEmailByIndex(index: Integer): Integer; safecall;
    function SaveXml(const filename: WideString): Integer; safecall;
    procedure SortByDate(ascending: Integer); safecall;
    procedure SortByRecipient(ascending: Integer); safecall;
    procedure SortBySender(ascending: Integer); safecall;
    procedure SortBySubject(ascending: Integer); safecall;
    function AddMimeBytes(mime: OleVariant): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property MessageCount: Integer read Get_MessageCount;
  end;

// *********************************************************************//
// DispIntf:  IChilkatEmailBundleDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A325D50D-6A7D-423F-9087-4242DC382181}
// *********************************************************************//
  IChilkatEmailBundleDisp = dispinterface
    ['{A325D50D-6A7D-423F-9087-4242DC382181}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property MessageCount: Integer readonly dispid 100;
    function AddEmail(const email: IChilkatEmail): Integer; dispid 101;
    function FindByHeader(const name: WideString; const value: WideString): IChilkatEmail; dispid 102;
    function GetEmail(index: Integer): IChilkatEmail; dispid 103;
    function GetUidls: ICkStringArray; dispid 104;
    function GetXml: WideString; dispid 105;
    function LoadXml(const filename: WideString): Integer; dispid 106;
    function LoadXmlString(const xmlStr: WideString): Integer; dispid 107;
    function RemoveEmail(const email: IChilkatEmail): Integer; dispid 108;
    function RemoveEmailByIndex(index: Integer): Integer; dispid 109;
    function SaveXml(const filename: WideString): Integer; dispid 110;
    procedure SortByDate(ascending: Integer); dispid 111;
    procedure SortByRecipient(ascending: Integer); dispid 112;
    procedure SortBySender(ascending: Integer); dispid 113;
    procedure SortBySubject(ascending: Integer); dispid 114;
    function AddMimeBytes(mime: OleVariant): Integer; dispid 115;
  end;

// *********************************************************************//
// Interface: IChilkatEmail
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3EC2BC0F-8ECB-4008-AEB7-758972455492}
// *********************************************************************//
  IChilkatEmail = interface(IDispatch)
    ['{3EC2BC0F-8ECB-4008-AEB7-758972455492}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_Body: WideString; safecall;
    procedure Set_Body(const pVal: WideString); safecall;
    function Get_BounceAddress: WideString; safecall;
    procedure Set_BounceAddress(const pVal: WideString); safecall;
    function Get_charset: WideString; safecall;
    procedure Set_charset(const pVal: WideString); safecall;
    function Get_Decrypted: Integer; safecall;
    function Get_EmailDate: TDateTime; safecall;
    procedure Set_EmailDate(pVal: TDateTime); safecall;
    function Get_EmailDateStr: WideString; safecall;
    procedure Set_EmailDateStr(const pVal: WideString); safecall;
    function Get_EncryptedBy: WideString; safecall;
    function Get_FileDistList: WideString; safecall;
    procedure Set_FileDistList(const pVal: WideString); safecall;
    function Get_From: WideString; safecall;
    procedure Set_From(const pVal: WideString); safecall;
    function Get_FromAddress: WideString; safecall;
    procedure Set_FromAddress(const pVal: WideString); safecall;
    function Get_fromName: WideString; safecall;
    procedure Set_fromName(const pVal: WideString); safecall;
    function Get_Header: WideString; safecall;
    function Get_Language: WideString; safecall;
    function Get_LocalDate: TDateTime; safecall;
    procedure Set_LocalDate(pVal: TDateTime); safecall;
    function Get_LocalDateStr: WideString; safecall;
    procedure Set_LocalDateStr(const pVal: WideString); safecall;
    function Get_Mailer: WideString; safecall;
    procedure Set_Mailer(const pVal: WideString); safecall;
    function Get_NumAlternatives: Integer; safecall;
    function Get_NumAttachedMessages: Integer; safecall;
    function Get_NumAttachments: Integer; safecall;
    function Get_NumBcc: Integer; safecall;
    function Get_NumCC: Integer; safecall;
    function Get_NumDaysOld: Integer; safecall;
    function Get_NumHeaderFields: Integer; safecall;
    function Get_NumRelatedItems: Integer; safecall;
    function Get_NumReplacePatterns: Integer; safecall;
    function Get_NumReports: Integer; safecall;
    function Get_NumTo: Integer; safecall;
    function Get_OverwriteExisting: Integer; safecall;
    procedure Set_OverwriteExisting(pVal: Integer); safecall;
    function Get_Pkcs7CryptAlg: WideString; safecall;
    procedure Set_Pkcs7CryptAlg(const pVal: WideString); safecall;
    function Get_Pkcs7KeyLength: Integer; safecall;
    procedure Set_Pkcs7KeyLength(pVal: Integer); safecall;
    function Get_PreferredCharset: WideString; safecall;
    procedure Set_PreferredCharset(const pVal: WideString); safecall;
    function Get_PrependHeaders: Integer; safecall;
    procedure Set_PrependHeaders(pVal: Integer); safecall;
    function Get_ReceivedEncrypted: Integer; safecall;
    function Get_ReceivedSigned: Integer; safecall;
    function Get_ReplyTo: WideString; safecall;
    procedure Set_ReplyTo(const pVal: WideString); safecall;
    function Get_ReturnReceipt: Integer; safecall;
    procedure Set_ReturnReceipt(pVal: Integer); safecall;
    function Get_SendEncrypted: Integer; safecall;
    procedure Set_SendEncrypted(pVal: Integer); safecall;
    function Get_SendSigned: Integer; safecall;
    procedure Set_SendSigned(pVal: Integer); safecall;
    function Get_SignaturesValid: Integer; safecall;
    function Get_SignedBy: WideString; safecall;
    function Get_SigningHashAlg: WideString; safecall;
    procedure Set_SigningHashAlg(const pVal: WideString); safecall;
    function Get_Size: Integer; safecall;
    function Get_subject: WideString; safecall;
    procedure Set_subject(const pVal: WideString); safecall;
    function Get_uidl: WideString; safecall;
    function Get_UnpackUseRelPaths: Integer; safecall;
    procedure Set_UnpackUseRelPaths(pVal: Integer); safecall;
    procedure AddAttachmentHeader(index: Integer; const fieldName: WideString; 
                                  const fieldValue: WideString); safecall;
    function AddBcc(const friendlyName: WideString; const emailAddress: WideString): Integer; safecall;
    function AddCC(const friendlyName: WideString; const emailAddress: WideString): Integer; safecall;
    function AddDataAttachment(const filePath: WideString; Content: OleVariant): Integer; safecall;
    function AddDataAttachment2(const path: WideString; Content: OleVariant; 
                                const ContentType: WideString): Integer; safecall;
    function AddEncryptCert(const cert: IChilkatCert): Integer; safecall;
    function AddFileAttachment(const path: WideString): WideString; safecall;
    function AddFileAttachment2(const path: WideString; const ContentType: WideString): Integer; safecall;
    procedure AddHeaderField(const fieldName: WideString; const fieldValue: WideString); safecall;
    procedure AddHeaderField2(const fieldName: WideString; const fieldValue: WideString); safecall;
    function AddHtmlAlternativeBody(const Body: WideString): Integer; safecall;
    function AddMultipleBcc(const commaSeparatedAddresses: WideString): Integer; safecall;
    function AddMultipleCC(const commaSeparatedAddresses: WideString): Integer; safecall;
    function AddMultipleTo(const commaSeparatedAddresses: WideString): Integer; safecall;
    function AddPfxSourceData(pfxData: OleVariant; const password: WideString): Integer; safecall;
    function AddPfxSourceFile(const pfxFilePath: WideString; const password: WideString): Integer; safecall;
    function AddPlainTextAlternativeBody(const Body: WideString): Integer; safecall;
    function AddRelatedData(const path: WideString; inData: OleVariant): WideString; safecall;
    procedure AddRelatedData2(inData: OleVariant; const fileNameInHtml: WideString); safecall;
    function AddRelatedFile(const path: WideString): WideString; safecall;
    function AddRelatedFile2(const filenameOnDisk: WideString; const fileNameInHtml: WideString): Integer; safecall;
    procedure AddRelatedHeader(index: Integer; const fieldName: WideString; 
                               const fieldValue: WideString); safecall;
    function AddRelatedString(const nameInHtml: WideString; const str: WideString; 
                              const charset: WideString): WideString; safecall;
    procedure AddRelatedString2(const Content: WideString; const charset: WideString; 
                                const fileNameInHtml: WideString); safecall;
    function AddStringAttachment(const path: WideString; const Content: WideString): Integer; safecall;
    function AddStringAttachment2(const path: WideString; const Content: WideString; 
                                  const charset: WideString): Integer; safecall;
    function AddTo(const friendlyName: WideString; const emailAddress: WideString): Integer; safecall;
    function AddiCalendarAlternativeBody(const Body: WideString; const methodName: WideString): Integer; safecall;
    function AesDecrypt(const password: WideString): Integer; safecall;
    function AesEncrypt(const password: WideString): Integer; safecall;
    procedure AppendToBody(const str: WideString); safecall;
    function AspUnpack(const prefix: WideString; const saveDir: WideString; 
                       const urlPath: WideString; cleanFiles: Integer): Integer; safecall;
    function AspUnpack2(const prefix: WideString; const saveDir: WideString; 
                        const urlPath: WideString; cleanFiles: Integer): OleVariant; safecall;
    function AttachMessage(mimeBytes: OleVariant): Integer; safecall;
    function BEncodeBytes(inData: OleVariant; const charset: WideString): WideString; safecall;
    function BEncodeString(const str: WideString; const charset: WideString): WideString; safecall;
    procedure ClearBcc; safecall;
    procedure ClearCC; safecall;
    procedure ClearEncryptCerts; safecall;
    procedure ClearTo; safecall;
    function Clone: IChilkatEmail; safecall;
    function ComputeGlobalKey(const encoding: WideString; bFold: Integer): WideString; safecall;
    function CreateDsn(const explanation: WideString; const xmlDeliveryStatus: WideString; 
                       bHeaderOnly: Integer): IChilkatEmail; safecall;
    function CreateForward: IChilkatEmail; safecall;
    function CreateMdn(const explanation: WideString; const xmlMdnFields: WideString; 
                       bHeaderOnly: Integer): IChilkatEmail; safecall;
    function CreateReply: IChilkatEmail; safecall;
    function CreateTempMht(const inFilename: WideString): WideString; safecall;
    procedure DropAttachments; safecall;
    procedure DropRelatedItem(index: Integer); safecall;
    procedure DropRelatedItems; safecall;
    function DropSingleAttachment(index: Integer): Integer; safecall;
    function FindIssuer(const cert: IChilkatCert): IChilkatCert; safecall;
    function GenerateFilename: WideString; safecall;
    function GetAltHeaderField(index: Integer; const fieldName: WideString): WideString; safecall;
    function GetAlternativeBody(index: Integer): WideString; safecall;
    function GetAlternativeBodyByContentType(const ContentType: WideString): WideString; safecall;
    function GetAlternativeContentType(index: Integer): WideString; safecall;
    function GetAttachedMessage(index: Integer): IChilkatEmail; safecall;
    function GetAttachedMessageFilename(index: Integer): WideString; safecall;
    function GetAttachmentContentID(index: Integer): WideString; safecall;
    function GetAttachmentContentType(index: Integer): WideString; safecall;
    function GetAttachmentData(index: Integer): OleVariant; safecall;
    function GetAttachmentFilename(index: Integer): WideString; safecall;
    function GetAttachmentHeader(attachIndex: Integer; const fieldName: WideString): WideString; safecall;
    function GetAttachmentSize(index: Integer): Integer; safecall;
    function GetAttachmentString(index: Integer; const charset: WideString): WideString; safecall;
    function GetAttachmentStringCrLf(index: Integer; const charset: WideString): WideString; safecall;
    function GetBcc(index: Integer): WideString; safecall;
    function GetBccAddr(index: Integer): WideString; safecall;
    function GetBccName(index: Integer): WideString; safecall;
    function GetCC(index: Integer): WideString; safecall;
    function GetCcAddr(index: Integer): WideString; safecall;
    function GetCcName(index: Integer): WideString; safecall;
    function GetDeliveryStatusInfo(const fieldName: WideString): WideString; safecall;
    function GetDsnFinalRecipients: ICkStringArray; safecall;
    function GetDt: ICkDateTime; safecall;
    function GetEncryptCert: IChilkatCert; safecall;
    function GetEncryptedByCert: IChilkatCert; safecall;
    function GetFileContent(const path: WideString): OleVariant; safecall;
    function GetHeaderField(const fieldName: WideString): WideString; safecall;
    function GetHeaderFieldName(index: Integer): WideString; safecall;
    function GetHeaderFieldValue(index: Integer): WideString; safecall;
    function GetHtmlBody: WideString; safecall;
    function GetImapUid: Integer; safecall;
    function GetLinkedDomains: ICkStringArray; safecall;
    function GetMbHeaderField(const fieldName: WideString; const charset: WideString): OleVariant; safecall;
    function GetMbHtmlBody(const charset: WideString): OleVariant; safecall;
    function GetMbPlainTextBody(const charset: WideString): OleVariant; safecall;
    function GetMime: WideString; safecall;
    function GetMimeBinary: OleVariant; safecall;
    function GetPlainTextBody: WideString; safecall;
    function GetRelatedContentID(index: Integer): WideString; safecall;
    function GetRelatedContentLocation(index: Integer): WideString; safecall;
    function GetRelatedContentType(index: Integer): WideString; safecall;
    function GetRelatedData(index: Integer): OleVariant; safecall;
    function GetRelatedFilename(index: Integer): WideString; safecall;
    function GetRelatedString(index: Integer; const charset: WideString): WideString; safecall;
    function GetRelatedStringCrLf(index: Integer; const charset: WideString): WideString; safecall;
    function GetReplacePattern(index: Integer): WideString; safecall;
    function GetReplaceString(index: Integer): WideString; safecall;
    function GetReplaceString2(const pattern: WideString): WideString; safecall;
    function GetReport(index: Integer): WideString; safecall;
    function GetSignedByCert: IChilkatCert; safecall;
    function GetSigningCert: IChilkatCert; safecall;
    function GetTo(index: Integer): WideString; safecall;
    function GetToAddr(index: Integer): WideString; safecall;
    function GetToName(index: Integer): WideString; safecall;
    function GetXml: WideString; safecall;
    function HasHeaderMatching(const fieldName: WideString; const valuePattern: WideString; 
                               caseInsensitive: Integer): Integer; safecall;
    function HasHtmlBody: Integer; safecall;
    function HasPlainTextBody: Integer; safecall;
    function IsMultipartReport: Integer; safecall;
    function LoadEml(const mimePath: WideString): Integer; safecall;
    function LoadXml(const xmlPath: WideString): Integer; safecall;
    function LoadXmlString(const xmlStr: WideString): Integer; safecall;
    function QEncodeBytes(inData: OleVariant; const charset: WideString): WideString; safecall;
    function QEncodeString(const str: WideString; const charset: WideString): WideString; safecall;
    procedure RemoveAttachedMessage(idx: Integer); safecall;
    procedure RemoveAttachedMessages; safecall;
    procedure RemoveAttachmentPaths; safecall;
    procedure RemoveHeaderField(const fieldName: WideString); safecall;
    procedure RemoveHtmlAlternative; safecall;
    procedure RemovePlainTextAlternative; safecall;
    function SaveAllAttachments(const directory: WideString): Integer; safecall;
    function SaveAttachedFile(index: Integer; const directory: WideString): Integer; safecall;
    function SaveEml(const path: WideString): Integer; safecall;
    function SaveRelatedItem(index: Integer; const directory: WideString): Integer; safecall;
    function SaveXml(const path: WideString): Integer; safecall;
    function SetAttachmentCharset(index: Integer; const charset: WideString): Integer; safecall;
    function SetAttachmentDisposition(index: Integer; const Disposition: WideString): Integer; safecall;
    function SetAttachmentFilename(index: Integer; const path: WideString): Integer; safecall;
    function SetCSP(const csp: IChilkatCsp): Integer; safecall;
    function SetDt(const dt: ICkDateTime): Integer; safecall;
    function SetEncryptCert(const cert: IChilkatCert): Integer; safecall;
    function SetFromMimeBytes(mimeBytes: OleVariant): Integer; safecall;
    function SetFromMimeBytes2(mimeBytes: OleVariant; const charset: WideString): Integer; safecall;
    function SetFromMimeText(const mimeText: WideString): Integer; safecall;
    function SetFromXmlText(const xmlStr: WideString): Integer; safecall;
    procedure SetHtmlBody(const html: WideString); safecall;
    function SetMbHtmlBody(const charset: WideString; inData: OleVariant): Integer; safecall;
    function SetMbPlainTextBody(const charset: WideString; inData: OleVariant): Integer; safecall;
    function SetRelatedFilename(index: Integer; const path: WideString): Integer; safecall;
    function SetReplacePattern(const pattern: WideString; const ReplaceString: WideString): Integer; safecall;
    function SetSigningCert(const cert: IChilkatCert): Integer; safecall;
    function SetSigningCert2(const cert: IChilkatCert; const key: IPrivateKey): Integer; safecall;
    procedure SetTextBody(const bodyText: WideString; const ContentType: WideString); safecall;
    procedure UnSpamify; safecall;
    function UnpackHtml(const unpackDir: WideString; const htmlFilename: WideString; 
                        const partsSubDir: WideString): Integer; safecall;
    function UnzipAttachments: Integer; safecall;
    function ZipAttachments(const zipFilename: WideString): Integer; safecall;
    function LoadBodyFromFile(const textFilename: WideString; bIsHtml: Integer; 
                              const charset: WideString): Integer; safecall;
    procedure SetEdifactBody(const message: WideString; const name: WideString; 
                             const filename: WideString; const charset: WideString); safecall;
    function UseCertVault(const vault: IChilkatXmlCertVault): Integer; safecall;
    function GetSignedByCertChain: IChilkatCertChain; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property Body: WideString read Get_Body write Set_Body;
    property BounceAddress: WideString read Get_BounceAddress write Set_BounceAddress;
    property charset: WideString read Get_charset write Set_charset;
    property Decrypted: Integer read Get_Decrypted;
    property EmailDate: TDateTime read Get_EmailDate write Set_EmailDate;
    property EmailDateStr: WideString read Get_EmailDateStr write Set_EmailDateStr;
    property EncryptedBy: WideString read Get_EncryptedBy;
    property FileDistList: WideString read Get_FileDistList write Set_FileDistList;
    property From: WideString read Get_From write Set_From;
    property FromAddress: WideString read Get_FromAddress write Set_FromAddress;
    property fromName: WideString read Get_fromName write Set_fromName;
    property Header: WideString read Get_Header;
    property Language: WideString read Get_Language;
    property LocalDate: TDateTime read Get_LocalDate write Set_LocalDate;
    property LocalDateStr: WideString read Get_LocalDateStr write Set_LocalDateStr;
    property Mailer: WideString read Get_Mailer write Set_Mailer;
    property NumAlternatives: Integer read Get_NumAlternatives;
    property NumAttachedMessages: Integer read Get_NumAttachedMessages;
    property NumAttachments: Integer read Get_NumAttachments;
    property NumBcc: Integer read Get_NumBcc;
    property NumCC: Integer read Get_NumCC;
    property NumDaysOld: Integer read Get_NumDaysOld;
    property NumHeaderFields: Integer read Get_NumHeaderFields;
    property NumRelatedItems: Integer read Get_NumRelatedItems;
    property NumReplacePatterns: Integer read Get_NumReplacePatterns;
    property NumReports: Integer read Get_NumReports;
    property NumTo: Integer read Get_NumTo;
    property OverwriteExisting: Integer read Get_OverwriteExisting write Set_OverwriteExisting;
    property Pkcs7CryptAlg: WideString read Get_Pkcs7CryptAlg write Set_Pkcs7CryptAlg;
    property Pkcs7KeyLength: Integer read Get_Pkcs7KeyLength write Set_Pkcs7KeyLength;
    property PreferredCharset: WideString read Get_PreferredCharset write Set_PreferredCharset;
    property PrependHeaders: Integer read Get_PrependHeaders write Set_PrependHeaders;
    property ReceivedEncrypted: Integer read Get_ReceivedEncrypted;
    property ReceivedSigned: Integer read Get_ReceivedSigned;
    property ReplyTo: WideString read Get_ReplyTo write Set_ReplyTo;
    property ReturnReceipt: Integer read Get_ReturnReceipt write Set_ReturnReceipt;
    property SendEncrypted: Integer read Get_SendEncrypted write Set_SendEncrypted;
    property SendSigned: Integer read Get_SendSigned write Set_SendSigned;
    property SignaturesValid: Integer read Get_SignaturesValid;
    property SignedBy: WideString read Get_SignedBy;
    property SigningHashAlg: WideString read Get_SigningHashAlg write Set_SigningHashAlg;
    property Size: Integer read Get_Size;
    property subject: WideString read Get_subject write Set_subject;
    property uidl: WideString read Get_uidl;
    property UnpackUseRelPaths: Integer read Get_UnpackUseRelPaths write Set_UnpackUseRelPaths;
  end;

// *********************************************************************//
// DispIntf:  IChilkatEmailDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3EC2BC0F-8ECB-4008-AEB7-758972455492}
// *********************************************************************//
  IChilkatEmailDisp = dispinterface
    ['{3EC2BC0F-8ECB-4008-AEB7-758972455492}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property Body: WideString dispid 100;
    property BounceAddress: WideString dispid 101;
    property charset: WideString dispid 102;
    property Decrypted: Integer readonly dispid 103;
    property EmailDate: TDateTime dispid 104;
    property EmailDateStr: WideString dispid 105;
    property EncryptedBy: WideString readonly dispid 106;
    property FileDistList: WideString dispid 107;
    property From: WideString dispid 108;
    property FromAddress: WideString dispid 109;
    property fromName: WideString dispid 110;
    property Header: WideString readonly dispid 111;
    property Language: WideString readonly dispid 112;
    property LocalDate: TDateTime dispid 113;
    property LocalDateStr: WideString dispid 114;
    property Mailer: WideString dispid 115;
    property NumAlternatives: Integer readonly dispid 116;
    property NumAttachedMessages: Integer readonly dispid 117;
    property NumAttachments: Integer readonly dispid 118;
    property NumBcc: Integer readonly dispid 119;
    property NumCC: Integer readonly dispid 120;
    property NumDaysOld: Integer readonly dispid 121;
    property NumHeaderFields: Integer readonly dispid 122;
    property NumRelatedItems: Integer readonly dispid 123;
    property NumReplacePatterns: Integer readonly dispid 124;
    property NumReports: Integer readonly dispid 125;
    property NumTo: Integer readonly dispid 126;
    property OverwriteExisting: Integer dispid 127;
    property Pkcs7CryptAlg: WideString dispid 128;
    property Pkcs7KeyLength: Integer dispid 129;
    property PreferredCharset: WideString dispid 130;
    property PrependHeaders: Integer dispid 131;
    property ReceivedEncrypted: Integer readonly dispid 132;
    property ReceivedSigned: Integer readonly dispid 133;
    property ReplyTo: WideString dispid 134;
    property ReturnReceipt: Integer dispid 135;
    property SendEncrypted: Integer dispid 136;
    property SendSigned: Integer dispid 137;
    property SignaturesValid: Integer readonly dispid 138;
    property SignedBy: WideString readonly dispid 139;
    property SigningHashAlg: WideString dispid 140;
    property Size: Integer readonly dispid 141;
    property subject: WideString dispid 142;
    property uidl: WideString readonly dispid 143;
    property UnpackUseRelPaths: Integer dispid 144;
    procedure AddAttachmentHeader(index: Integer; const fieldName: WideString; 
                                  const fieldValue: WideString); dispid 145;
    function AddBcc(const friendlyName: WideString; const emailAddress: WideString): Integer; dispid 146;
    function AddCC(const friendlyName: WideString; const emailAddress: WideString): Integer; dispid 147;
    function AddDataAttachment(const filePath: WideString; Content: OleVariant): Integer; dispid 148;
    function AddDataAttachment2(const path: WideString; Content: OleVariant; 
                                const ContentType: WideString): Integer; dispid 149;
    function AddEncryptCert(const cert: IChilkatCert): Integer; dispid 150;
    function AddFileAttachment(const path: WideString): WideString; dispid 151;
    function AddFileAttachment2(const path: WideString; const ContentType: WideString): Integer; dispid 152;
    procedure AddHeaderField(const fieldName: WideString; const fieldValue: WideString); dispid 153;
    procedure AddHeaderField2(const fieldName: WideString; const fieldValue: WideString); dispid 154;
    function AddHtmlAlternativeBody(const Body: WideString): Integer; dispid 155;
    function AddMultipleBcc(const commaSeparatedAddresses: WideString): Integer; dispid 156;
    function AddMultipleCC(const commaSeparatedAddresses: WideString): Integer; dispid 157;
    function AddMultipleTo(const commaSeparatedAddresses: WideString): Integer; dispid 158;
    function AddPfxSourceData(pfxData: OleVariant; const password: WideString): Integer; dispid 159;
    function AddPfxSourceFile(const pfxFilePath: WideString; const password: WideString): Integer; dispid 160;
    function AddPlainTextAlternativeBody(const Body: WideString): Integer; dispid 161;
    function AddRelatedData(const path: WideString; inData: OleVariant): WideString; dispid 162;
    procedure AddRelatedData2(inData: OleVariant; const fileNameInHtml: WideString); dispid 163;
    function AddRelatedFile(const path: WideString): WideString; dispid 164;
    function AddRelatedFile2(const filenameOnDisk: WideString; const fileNameInHtml: WideString): Integer; dispid 165;
    procedure AddRelatedHeader(index: Integer; const fieldName: WideString; 
                               const fieldValue: WideString); dispid 166;
    function AddRelatedString(const nameInHtml: WideString; const str: WideString; 
                              const charset: WideString): WideString; dispid 167;
    procedure AddRelatedString2(const Content: WideString; const charset: WideString; 
                                const fileNameInHtml: WideString); dispid 168;
    function AddStringAttachment(const path: WideString; const Content: WideString): Integer; dispid 169;
    function AddStringAttachment2(const path: WideString; const Content: WideString; 
                                  const charset: WideString): Integer; dispid 170;
    function AddTo(const friendlyName: WideString; const emailAddress: WideString): Integer; dispid 171;
    function AddiCalendarAlternativeBody(const Body: WideString; const methodName: WideString): Integer; dispid 172;
    function AesDecrypt(const password: WideString): Integer; dispid 173;
    function AesEncrypt(const password: WideString): Integer; dispid 174;
    procedure AppendToBody(const str: WideString); dispid 175;
    function AspUnpack(const prefix: WideString; const saveDir: WideString; 
                       const urlPath: WideString; cleanFiles: Integer): Integer; dispid 176;
    function AspUnpack2(const prefix: WideString; const saveDir: WideString; 
                        const urlPath: WideString; cleanFiles: Integer): OleVariant; dispid 177;
    function AttachMessage(mimeBytes: OleVariant): Integer; dispid 178;
    function BEncodeBytes(inData: OleVariant; const charset: WideString): WideString; dispid 179;
    function BEncodeString(const str: WideString; const charset: WideString): WideString; dispid 180;
    procedure ClearBcc; dispid 181;
    procedure ClearCC; dispid 182;
    procedure ClearEncryptCerts; dispid 183;
    procedure ClearTo; dispid 184;
    function Clone: IChilkatEmail; dispid 185;
    function ComputeGlobalKey(const encoding: WideString; bFold: Integer): WideString; dispid 186;
    function CreateDsn(const explanation: WideString; const xmlDeliveryStatus: WideString; 
                       bHeaderOnly: Integer): IChilkatEmail; dispid 187;
    function CreateForward: IChilkatEmail; dispid 188;
    function CreateMdn(const explanation: WideString; const xmlMdnFields: WideString; 
                       bHeaderOnly: Integer): IChilkatEmail; dispid 189;
    function CreateReply: IChilkatEmail; dispid 190;
    function CreateTempMht(const inFilename: WideString): WideString; dispid 191;
    procedure DropAttachments; dispid 192;
    procedure DropRelatedItem(index: Integer); dispid 193;
    procedure DropRelatedItems; dispid 194;
    function DropSingleAttachment(index: Integer): Integer; dispid 195;
    function FindIssuer(const cert: IChilkatCert): IChilkatCert; dispid 196;
    function GenerateFilename: WideString; dispid 197;
    function GetAltHeaderField(index: Integer; const fieldName: WideString): WideString; dispid 198;
    function GetAlternativeBody(index: Integer): WideString; dispid 199;
    function GetAlternativeBodyByContentType(const ContentType: WideString): WideString; dispid 200;
    function GetAlternativeContentType(index: Integer): WideString; dispid 201;
    function GetAttachedMessage(index: Integer): IChilkatEmail; dispid 202;
    function GetAttachedMessageFilename(index: Integer): WideString; dispid 203;
    function GetAttachmentContentID(index: Integer): WideString; dispid 204;
    function GetAttachmentContentType(index: Integer): WideString; dispid 205;
    function GetAttachmentData(index: Integer): OleVariant; dispid 206;
    function GetAttachmentFilename(index: Integer): WideString; dispid 207;
    function GetAttachmentHeader(attachIndex: Integer; const fieldName: WideString): WideString; dispid 208;
    function GetAttachmentSize(index: Integer): Integer; dispid 209;
    function GetAttachmentString(index: Integer; const charset: WideString): WideString; dispid 210;
    function GetAttachmentStringCrLf(index: Integer; const charset: WideString): WideString; dispid 211;
    function GetBcc(index: Integer): WideString; dispid 212;
    function GetBccAddr(index: Integer): WideString; dispid 213;
    function GetBccName(index: Integer): WideString; dispid 214;
    function GetCC(index: Integer): WideString; dispid 215;
    function GetCcAddr(index: Integer): WideString; dispid 216;
    function GetCcName(index: Integer): WideString; dispid 217;
    function GetDeliveryStatusInfo(const fieldName: WideString): WideString; dispid 218;
    function GetDsnFinalRecipients: ICkStringArray; dispid 219;
    function GetDt: ICkDateTime; dispid 220;
    function GetEncryptCert: IChilkatCert; dispid 221;
    function GetEncryptedByCert: IChilkatCert; dispid 222;
    function GetFileContent(const path: WideString): OleVariant; dispid 223;
    function GetHeaderField(const fieldName: WideString): WideString; dispid 224;
    function GetHeaderFieldName(index: Integer): WideString; dispid 225;
    function GetHeaderFieldValue(index: Integer): WideString; dispid 226;
    function GetHtmlBody: WideString; dispid 227;
    function GetImapUid: Integer; dispid 228;
    function GetLinkedDomains: ICkStringArray; dispid 229;
    function GetMbHeaderField(const fieldName: WideString; const charset: WideString): OleVariant; dispid 230;
    function GetMbHtmlBody(const charset: WideString): OleVariant; dispid 231;
    function GetMbPlainTextBody(const charset: WideString): OleVariant; dispid 232;
    function GetMime: WideString; dispid 233;
    function GetMimeBinary: OleVariant; dispid 234;
    function GetPlainTextBody: WideString; dispid 236;
    function GetRelatedContentID(index: Integer): WideString; dispid 237;
    function GetRelatedContentLocation(index: Integer): WideString; dispid 238;
    function GetRelatedContentType(index: Integer): WideString; dispid 239;
    function GetRelatedData(index: Integer): OleVariant; dispid 240;
    function GetRelatedFilename(index: Integer): WideString; dispid 241;
    function GetRelatedString(index: Integer; const charset: WideString): WideString; dispid 242;
    function GetRelatedStringCrLf(index: Integer; const charset: WideString): WideString; dispid 243;
    function GetReplacePattern(index: Integer): WideString; dispid 244;
    function GetReplaceString(index: Integer): WideString; dispid 245;
    function GetReplaceString2(const pattern: WideString): WideString; dispid 246;
    function GetReport(index: Integer): WideString; dispid 247;
    function GetSignedByCert: IChilkatCert; dispid 248;
    function GetSigningCert: IChilkatCert; dispid 249;
    function GetTo(index: Integer): WideString; dispid 250;
    function GetToAddr(index: Integer): WideString; dispid 251;
    function GetToName(index: Integer): WideString; dispid 252;
    function GetXml: WideString; dispid 253;
    function HasHeaderMatching(const fieldName: WideString; const valuePattern: WideString; 
                               caseInsensitive: Integer): Integer; dispid 254;
    function HasHtmlBody: Integer; dispid 255;
    function HasPlainTextBody: Integer; dispid 256;
    function IsMultipartReport: Integer; dispid 257;
    function LoadEml(const mimePath: WideString): Integer; dispid 258;
    function LoadXml(const xmlPath: WideString): Integer; dispid 259;
    function LoadXmlString(const xmlStr: WideString): Integer; dispid 260;
    function QEncodeBytes(inData: OleVariant; const charset: WideString): WideString; dispid 261;
    function QEncodeString(const str: WideString; const charset: WideString): WideString; dispid 262;
    procedure RemoveAttachedMessage(idx: Integer); dispid 263;
    procedure RemoveAttachedMessages; dispid 264;
    procedure RemoveAttachmentPaths; dispid 265;
    procedure RemoveHeaderField(const fieldName: WideString); dispid 266;
    procedure RemoveHtmlAlternative; dispid 267;
    procedure RemovePlainTextAlternative; dispid 268;
    function SaveAllAttachments(const directory: WideString): Integer; dispid 269;
    function SaveAttachedFile(index: Integer; const directory: WideString): Integer; dispid 270;
    function SaveEml(const path: WideString): Integer; dispid 271;
    function SaveRelatedItem(index: Integer; const directory: WideString): Integer; dispid 272;
    function SaveXml(const path: WideString): Integer; dispid 273;
    function SetAttachmentCharset(index: Integer; const charset: WideString): Integer; dispid 274;
    function SetAttachmentDisposition(index: Integer; const Disposition: WideString): Integer; dispid 275;
    function SetAttachmentFilename(index: Integer; const path: WideString): Integer; dispid 276;
    function SetCSP(const csp: IChilkatCsp): Integer; dispid 277;
    function SetDt(const dt: ICkDateTime): Integer; dispid 278;
    function SetEncryptCert(const cert: IChilkatCert): Integer; dispid 279;
    function SetFromMimeBytes(mimeBytes: OleVariant): Integer; dispid 280;
    function SetFromMimeBytes2(mimeBytes: OleVariant; const charset: WideString): Integer; dispid 281;
    function SetFromMimeText(const mimeText: WideString): Integer; dispid 283;
    function SetFromXmlText(const xmlStr: WideString): Integer; dispid 284;
    procedure SetHtmlBody(const html: WideString); dispid 285;
    function SetMbHtmlBody(const charset: WideString; inData: OleVariant): Integer; dispid 286;
    function SetMbPlainTextBody(const charset: WideString; inData: OleVariant): Integer; dispid 287;
    function SetRelatedFilename(index: Integer; const path: WideString): Integer; dispid 288;
    function SetReplacePattern(const pattern: WideString; const ReplaceString: WideString): Integer; dispid 289;
    function SetSigningCert(const cert: IChilkatCert): Integer; dispid 290;
    function SetSigningCert2(const cert: IChilkatCert; const key: IPrivateKey): Integer; dispid 291;
    procedure SetTextBody(const bodyText: WideString; const ContentType: WideString); dispid 292;
    procedure UnSpamify; dispid 293;
    function UnpackHtml(const unpackDir: WideString; const htmlFilename: WideString; 
                        const partsSubDir: WideString): Integer; dispid 294;
    function UnzipAttachments: Integer; dispid 295;
    function ZipAttachments(const zipFilename: WideString): Integer; dispid 296;
    function LoadBodyFromFile(const textFilename: WideString; bIsHtml: Integer; 
                              const charset: WideString): Integer; dispid 297;
    procedure SetEdifactBody(const message: WideString; const name: WideString; 
                             const filename: WideString; const charset: WideString); dispid 299;
    function UseCertVault(const vault: IChilkatXmlCertVault): Integer; dispid 300;
    function GetSignedByCertChain: IChilkatCertChain; dispid 301;
  end;

// *********************************************************************//
// Interface: IKeyContainer
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C374E6D6-2B8E-4030-89EC-3DE7FC67257F}
// *********************************************************************//
  IKeyContainer = interface(IDispatch)
    ['{C374E6D6-2B8E-4030-89EC-3DE7FC67257F}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_IsMachineKeyset: Integer; safecall;
    function Get_IsOpen: Integer; safecall;
    function Get_ContainerName: WideString; safecall;
    procedure CloseContainer; safecall;
    function CreateContainer(const name: WideString; MachineKeyset: Integer): Integer; safecall;
    function DeleteContainer: Integer; safecall;
    function FetchContainerNames(bMachineKeyset: Integer): Integer; safecall;
    function GenerateKeyPair(bKeyExchangePair: Integer; keyLengthInBits: Integer): Integer; safecall;
    function GenerateUuid: WideString; safecall;
    function GetNthContainerName(bMachineKeyset: Integer; index: Integer): WideString; safecall;
    function GetNumContainers(bMachineKeyset: Integer): Integer; safecall;
    function GetPrivateKey(bKeyExchangePair: Integer): IPrivateKey; safecall;
    function GetPublicKey(bKeyExchangePair: Integer): IPublicKey; safecall;
    function ImportPrivateKey(const key: IPrivateKey; bKeyExchangePair: Integer): Integer; safecall;
    function ImportPublicKey(const key: IPublicKey; bKeyExchangePair: Integer): Integer; safecall;
    function OpenContainer(const name: WideString; needPrivateKeyAccess: Integer; 
                           MachineKeyset: Integer): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property IsMachineKeyset: Integer read Get_IsMachineKeyset;
    property IsOpen: Integer read Get_IsOpen;
    property ContainerName: WideString read Get_ContainerName;
  end;

// *********************************************************************//
// DispIntf:  IKeyContainerDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C374E6D6-2B8E-4030-89EC-3DE7FC67257F}
// *********************************************************************//
  IKeyContainerDisp = dispinterface
    ['{C374E6D6-2B8E-4030-89EC-3DE7FC67257F}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property IsMachineKeyset: Integer readonly dispid 100;
    property IsOpen: Integer readonly dispid 101;
    property ContainerName: WideString readonly dispid 102;
    procedure CloseContainer; dispid 103;
    function CreateContainer(const name: WideString; MachineKeyset: Integer): Integer; dispid 104;
    function DeleteContainer: Integer; dispid 105;
    function FetchContainerNames(bMachineKeyset: Integer): Integer; dispid 106;
    function GenerateKeyPair(bKeyExchangePair: Integer; keyLengthInBits: Integer): Integer; dispid 107;
    function GenerateUuid: WideString; dispid 108;
    function GetNthContainerName(bMachineKeyset: Integer; index: Integer): WideString; dispid 116;
    function GetNumContainers(bMachineKeyset: Integer): Integer; dispid 109;
    function GetPrivateKey(bKeyExchangePair: Integer): IPrivateKey; dispid 110;
    function GetPublicKey(bKeyExchangePair: Integer): IPublicKey; dispid 111;
    function ImportPrivateKey(const key: IPrivateKey; bKeyExchangePair: Integer): Integer; dispid 112;
    function ImportPublicKey(const key: IPublicKey; bKeyExchangePair: Integer): Integer; dispid 113;
    function OpenContainer(const name: WideString; needPrivateKeyAccess: Integer; 
                           MachineKeyset: Integer): Integer; dispid 114;
  end;

// *********************************************************************//
// Interface: IChilkatImap
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2E0EB5F9-CD80-407B-B5F3-60AE67679967}
// *********************************************************************//
  IChilkatImap = interface(IDispatch)
    ['{2E0EB5F9-CD80-407B-B5F3-60AE67679967}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_AppendSeen: Integer; safecall;
    procedure Set_AppendSeen(pVal: Integer); safecall;
    function Get_AppendUid: Integer; safecall;
    function Get_AuthMethod: WideString; safecall;
    procedure Set_AuthMethod(const pVal: WideString); safecall;
    function Get_AuthzId: WideString; safecall;
    procedure Set_AuthzId(const pVal: WideString); safecall;
    function Get_AutoDownloadAttachments: Integer; safecall;
    procedure Set_AutoDownloadAttachments(pVal: Integer); safecall;
    function Get_AutoFix: Integer; safecall;
    procedure Set_AutoFix(pVal: Integer); safecall;
    function Get_ClientIpAddress: WideString; safecall;
    procedure Set_ClientIpAddress(const pVal: WideString); safecall;
    function Get_ConnectTimeout: Integer; safecall;
    procedure Set_ConnectTimeout(pVal: Integer); safecall;
    function Get_ConnectedToHost: WideString; safecall;
    function Get_Domain: WideString; safecall;
    procedure Set_Domain(const pVal: WideString); safecall;
    function Get_HeartbeatMs: Integer; safecall;
    procedure Set_HeartbeatMs(pVal: Integer); safecall;
    function Get_HttpProxyAuthMethod: WideString; safecall;
    procedure Set_HttpProxyAuthMethod(const pVal: WideString); safecall;
    function Get_HttpProxyDomain: WideString; safecall;
    procedure Set_HttpProxyDomain(const pVal: WideString); safecall;
    function Get_HttpProxyHostname: WideString; safecall;
    procedure Set_HttpProxyHostname(const pVal: WideString); safecall;
    function Get_HttpProxyPassword: WideString; safecall;
    procedure Set_HttpProxyPassword(const pVal: WideString); safecall;
    function Get_HttpProxyPort: Integer; safecall;
    procedure Set_HttpProxyPort(pVal: Integer); safecall;
    function Get_HttpProxyUsername: WideString; safecall;
    procedure Set_HttpProxyUsername(const pVal: WideString); safecall;
    function Get_KeepSessionLog: Integer; safecall;
    procedure Set_KeepSessionLog(pVal: Integer); safecall;
    function Get_LastAppendedMime: WideString; safecall;
    function Get_LastCommand: WideString; safecall;
    function Get_LastIntermediateResponse: WideString; safecall;
    function Get_LastResponse: WideString; safecall;
    function Get_LoggedInUser: WideString; safecall;
    function Get_NumMessages: Integer; safecall;
    function Get_PeekMode: Integer; safecall;
    procedure Set_PeekMode(pVal: Integer); safecall;
    function Get_Port: Integer; safecall;
    procedure Set_Port(pVal: Integer); safecall;
    function Get_ReadTimeout: Integer; safecall;
    procedure Set_ReadTimeout(pVal: Integer); safecall;
    function Get_SearchCharset: WideString; safecall;
    procedure Set_SearchCharset(const pVal: WideString); safecall;
    function Get_SelectedMailbox: WideString; safecall;
    function Get_SendBufferSize: Integer; safecall;
    procedure Set_SendBufferSize(pVal: Integer); safecall;
    function Get_SeparatorChar: Shortint; safecall;
    procedure Set_SeparatorChar(pVal: Shortint); safecall;
    function Get_SessionLog: WideString; safecall;
    function Get_SoRcvBuf: Integer; safecall;
    procedure Set_SoRcvBuf(pVal: Integer); safecall;
    function Get_SoSndBuf: Integer; safecall;
    procedure Set_SoSndBuf(pVal: Integer); safecall;
    function Get_SocksHostname: WideString; safecall;
    procedure Set_SocksHostname(const pVal: WideString); safecall;
    function Get_SocksPassword: WideString; safecall;
    procedure Set_SocksPassword(const pVal: WideString); safecall;
    function Get_SocksPort: Integer; safecall;
    procedure Set_SocksPort(pVal: Integer); safecall;
    function Get_SocksUsername: WideString; safecall;
    procedure Set_SocksUsername(const pVal: WideString); safecall;
    function Get_SocksVersion: Integer; safecall;
    procedure Set_SocksVersion(pVal: Integer); safecall;
    function Get_Ssl: Integer; safecall;
    procedure Set_Ssl(pVal: Integer); safecall;
    function Get_SslProtocol: WideString; safecall;
    procedure Set_SslProtocol(const pVal: WideString); safecall;
    function Get_SslServerCertVerified: Integer; safecall;
    function Get_StartTLS: Integer; safecall;
    procedure Set_StartTLS(pVal: Integer); safecall;
    function Get_UidNext: Integer; safecall;
    function Get_UidValidity: Integer; safecall;
    function Get_RequireSslCertVerify: Integer; safecall;
    procedure Set_RequireSslCertVerify(pVal: Integer); safecall;
    function Get_PreferIpv6: Integer; safecall;
    procedure Set_PreferIpv6(pVal: Integer); safecall;
    function AddPfxSourceData(pfxData: OleVariant; const password: WideString): Integer; safecall;
    function AddPfxSourceFile(const pfxFilePath: WideString; const password: WideString): Integer; safecall;
    function AppendMail(const mailbox: WideString; const email: IChilkatEmail): Integer; safecall;
    function AppendMime(const mailbox: WideString; const mimeText: WideString): Integer; safecall;
    function AppendMimeWithDate(const mailbox: WideString; const mimeText: WideString; 
                                internalDate: TDateTime): Integer; safecall;
    function AppendMimeWithDateStr(const mailbox: WideString; const mimeText: WideString; 
                                   const internalDateStr: WideString): Integer; safecall;
    function AppendMimeWithFlags(const mailbox: WideString; const mimeText: WideString; 
                                 seen: Integer; flagged: Integer; answered: Integer; draft: Integer): Integer; safecall;
    function CheckForNewEmail: IMessageSet; safecall;
    procedure ClearSessionLog; safecall;
    function CloseMailbox(const mailbox: WideString): Integer; safecall;
    function Connect(const Hostname: WideString): Integer; safecall;
    function Copy(msgId: Integer; bUid: Integer; const copyToMailbox: WideString): Integer; safecall;
    function CopyMultiple(const MessageSet: IMessageSet; const copyToMailbox: WideString): Integer; safecall;
    function CopySequence(startSeqNum: Integer; Count: Integer; const copyToMailbox: WideString): Integer; safecall;
    function CreateMailbox(const mailbox: WideString): Integer; safecall;
    function DeleteMailbox(const mailbox: WideString): Integer; safecall;
    function Disconnect: Integer; safecall;
    function ExamineMailbox(const mailbox: WideString): Integer; safecall;
    function Expunge: Integer; safecall;
    function ExpungeAndClose: Integer; safecall;
    function FetchAttachment(const email: IChilkatEmail; attachIndex: Integer; 
                             const saveToPath: WideString): Integer; safecall;
    function FetchAttachmentBytes(const email: IChilkatEmail; attachIndex: Integer): OleVariant; safecall;
    function FetchAttachmentString(const email: IChilkatEmail; attachIndex: Integer; 
                                   const charset: WideString): WideString; safecall;
    function FetchBundle(const MessageSet: IMessageSet): IChilkatEmailBundle; safecall;
    function FetchBundleAsMime(const MessageSet: IMessageSet): ICkStringArray; safecall;
    function FetchChunk(startSeqNum: Integer; Count: Integer; const failedSet: IMessageSet; 
                        const fetchedSet: IMessageSet): IChilkatEmailBundle; safecall;
    function FetchFlags(msgId: Integer; bUid: Integer): WideString; safecall;
    function FetchHeaders(const MessageSet: IMessageSet): IChilkatEmailBundle; safecall;
    function FetchSequence(startSeqNum: Integer; NumMessages: Integer): IChilkatEmailBundle; safecall;
    function FetchSequenceAsMime(startSeqNum: Integer; NumMessages: Integer): ICkStringArray; safecall;
    function FetchSequenceHeaders(startSeqNum: Integer; NumMessages: Integer): IChilkatEmailBundle; safecall;
    function FetchSingle(msgId: Integer; bUid: Integer): IChilkatEmail; safecall;
    function FetchSingleAsMime(msgId: Integer; bUid: Integer): WideString; safecall;
    function FetchSingleHeader(msgId: Integer; bUid: Integer): IChilkatEmail; safecall;
    function FetchSingleHeaderAsMime(msgId: Integer; bUid: Integer): WideString; safecall;
    function GetAllUids: IMessageSet; safecall;
    function GetMailAttachFilename(const email: IChilkatEmail; attachIndex: Integer): WideString; safecall;
    function GetMailAttachSize(const email: IChilkatEmail; attachIndex: Integer): Integer; safecall;
    function GetMailFlag(const email: IChilkatEmail; const flagName: WideString): Integer; safecall;
    function GetMailNumAttach(const email: IChilkatEmail): Integer; safecall;
    function GetMailSize(const email: IChilkatEmail): Integer; safecall;
    function GetSslServerCert: IChilkatCert; safecall;
    function IsConnected: Integer; safecall;
    function IsLoggedIn: Integer; safecall;
    function IsUnlocked: Integer; safecall;
    function ListMailboxes(const reference: WideString; const wildcardedMailbox: WideString): IMailboxes; safecall;
    function ListSubscribed(const reference: WideString; const wildcardedMailbox: WideString): IMailboxes; safecall;
    function Login(const Login: WideString; const password: WideString): Integer; safecall;
    function Logout: Integer; safecall;
    function Noop: Integer; safecall;
    function RefetchMailFlags(const email: IChilkatEmail): Integer; safecall;
    function RenameMailbox(const fromMailbox: WideString; const toMailbox: WideString): Integer; safecall;
    function Search(const criteria: WideString; bUid: Integer): IMessageSet; safecall;
    function SelectMailbox(const mailbox: WideString): Integer; safecall;
    function SendRawCommand(const cmd: WideString): WideString; safecall;
    function SendRawCommandB(const cmd: WideString): OleVariant; safecall;
    function SendRawCommandC(cmd: OleVariant): OleVariant; safecall;
    function SetCSP(const csp: IChilkatCsp): Integer; safecall;
    function SetDecryptCert2(const cert: IChilkatCert; const key: IPrivateKey): Integer; safecall;
    function SetFlag(msgId: Integer; bUid: Integer; const flagName: WideString; value: Integer): Integer; safecall;
    function SetFlags(const MessageSet: IMessageSet; const flagName: WideString; value: Integer): Integer; safecall;
    function SetMailFlag(const email: IChilkatEmail; const flagName: WideString; value: Integer): Integer; safecall;
    function SetSslClientCert(const cert: IChilkatCert): Integer; safecall;
    function SetSslClientCertPem(const pemDataOrFilename: WideString; const pemPassword: WideString): Integer; safecall;
    function SetSslClientCertPfx(const pfxFilename: WideString; const pfxPassword: WideString): Integer; safecall;
    function SshAuthenticatePk(const SshLogin: WideString; const PrivateKey: IChilkatSshKey): Integer; safecall;
    function SshAuthenticatePw(const SshLogin: WideString; const SshPassword: WideString): Integer; safecall;
    function SshTunnel(const sshServerHostname: WideString; sshServerPort: Integer): Integer; safecall;
    function StoreFlags(msgId: Integer; bUid: Integer; const flagNames: WideString; value: Integer): Integer; safecall;
    function Subscribe(const mailbox: WideString): Integer; safecall;
    function UnlockComponent(const unlockCode: WideString): Integer; safecall;
    function Unsubscribe(const mailbox: WideString): Integer; safecall;
    function Capability: WideString; safecall;
    function IdleStart: Integer; safecall;
    function IdleDone: Integer; safecall;
    function IdleCheck(timeoutMs: Integer): WideString; safecall;
    function UseCertVault(const vault: IChilkatXmlCertVault): Integer; safecall;
    function SetDecryptCert(const cert: IChilkatCert): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property AppendSeen: Integer read Get_AppendSeen write Set_AppendSeen;
    property AppendUid: Integer read Get_AppendUid;
    property AuthMethod: WideString read Get_AuthMethod write Set_AuthMethod;
    property AuthzId: WideString read Get_AuthzId write Set_AuthzId;
    property AutoDownloadAttachments: Integer read Get_AutoDownloadAttachments write Set_AutoDownloadAttachments;
    property AutoFix: Integer read Get_AutoFix write Set_AutoFix;
    property ClientIpAddress: WideString read Get_ClientIpAddress write Set_ClientIpAddress;
    property ConnectTimeout: Integer read Get_ConnectTimeout write Set_ConnectTimeout;
    property ConnectedToHost: WideString read Get_ConnectedToHost;
    property Domain: WideString read Get_Domain write Set_Domain;
    property HeartbeatMs: Integer read Get_HeartbeatMs write Set_HeartbeatMs;
    property HttpProxyAuthMethod: WideString read Get_HttpProxyAuthMethod write Set_HttpProxyAuthMethod;
    property HttpProxyDomain: WideString read Get_HttpProxyDomain write Set_HttpProxyDomain;
    property HttpProxyHostname: WideString read Get_HttpProxyHostname write Set_HttpProxyHostname;
    property HttpProxyPassword: WideString read Get_HttpProxyPassword write Set_HttpProxyPassword;
    property HttpProxyPort: Integer read Get_HttpProxyPort write Set_HttpProxyPort;
    property HttpProxyUsername: WideString read Get_HttpProxyUsername write Set_HttpProxyUsername;
    property KeepSessionLog: Integer read Get_KeepSessionLog write Set_KeepSessionLog;
    property LastAppendedMime: WideString read Get_LastAppendedMime;
    property LastCommand: WideString read Get_LastCommand;
    property LastIntermediateResponse: WideString read Get_LastIntermediateResponse;
    property LastResponse: WideString read Get_LastResponse;
    property LoggedInUser: WideString read Get_LoggedInUser;
    property NumMessages: Integer read Get_NumMessages;
    property PeekMode: Integer read Get_PeekMode write Set_PeekMode;
    property Port: Integer read Get_Port write Set_Port;
    property ReadTimeout: Integer read Get_ReadTimeout write Set_ReadTimeout;
    property SearchCharset: WideString read Get_SearchCharset write Set_SearchCharset;
    property SelectedMailbox: WideString read Get_SelectedMailbox;
    property SendBufferSize: Integer read Get_SendBufferSize write Set_SendBufferSize;
    property SeparatorChar: Shortint read Get_SeparatorChar write Set_SeparatorChar;
    property SessionLog: WideString read Get_SessionLog;
    property SoRcvBuf: Integer read Get_SoRcvBuf write Set_SoRcvBuf;
    property SoSndBuf: Integer read Get_SoSndBuf write Set_SoSndBuf;
    property SocksHostname: WideString read Get_SocksHostname write Set_SocksHostname;
    property SocksPassword: WideString read Get_SocksPassword write Set_SocksPassword;
    property SocksPort: Integer read Get_SocksPort write Set_SocksPort;
    property SocksUsername: WideString read Get_SocksUsername write Set_SocksUsername;
    property SocksVersion: Integer read Get_SocksVersion write Set_SocksVersion;
    property Ssl: Integer read Get_Ssl write Set_Ssl;
    property SslProtocol: WideString read Get_SslProtocol write Set_SslProtocol;
    property SslServerCertVerified: Integer read Get_SslServerCertVerified;
    property StartTLS: Integer read Get_StartTLS write Set_StartTLS;
    property UidNext: Integer read Get_UidNext;
    property UidValidity: Integer read Get_UidValidity;
    property RequireSslCertVerify: Integer read Get_RequireSslCertVerify write Set_RequireSslCertVerify;
    property PreferIpv6: Integer read Get_PreferIpv6 write Set_PreferIpv6;
  end;

// *********************************************************************//
// DispIntf:  IChilkatImapDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2E0EB5F9-CD80-407B-B5F3-60AE67679967}
// *********************************************************************//
  IChilkatImapDisp = dispinterface
    ['{2E0EB5F9-CD80-407B-B5F3-60AE67679967}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property AppendSeen: Integer dispid 100;
    property AppendUid: Integer readonly dispid 101;
    property AuthMethod: WideString dispid 102;
    property AuthzId: WideString dispid 103;
    property AutoDownloadAttachments: Integer dispid 104;
    property AutoFix: Integer dispid 105;
    property ClientIpAddress: WideString dispid 106;
    property ConnectTimeout: Integer dispid 107;
    property ConnectedToHost: WideString readonly dispid 108;
    property Domain: WideString dispid 109;
    property HeartbeatMs: Integer dispid 110;
    property HttpProxyAuthMethod: WideString dispid 111;
    property HttpProxyDomain: WideString dispid 112;
    property HttpProxyHostname: WideString dispid 113;
    property HttpProxyPassword: WideString dispid 114;
    property HttpProxyPort: Integer dispid 115;
    property HttpProxyUsername: WideString dispid 116;
    property KeepSessionLog: Integer dispid 117;
    property LastAppendedMime: WideString readonly dispid 118;
    property LastCommand: WideString readonly dispid 119;
    property LastIntermediateResponse: WideString readonly dispid 120;
    property LastResponse: WideString readonly dispid 121;
    property LoggedInUser: WideString readonly dispid 122;
    property NumMessages: Integer readonly dispid 123;
    property PeekMode: Integer dispid 124;
    property Port: Integer dispid 125;
    property ReadTimeout: Integer dispid 126;
    property SearchCharset: WideString dispid 127;
    property SelectedMailbox: WideString readonly dispid 128;
    property SendBufferSize: Integer dispid 129;
    property SeparatorChar: Shortint dispid 130;
    property SessionLog: WideString readonly dispid 131;
    property SoRcvBuf: Integer dispid 132;
    property SoSndBuf: Integer dispid 133;
    property SocksHostname: WideString dispid 134;
    property SocksPassword: WideString dispid 135;
    property SocksPort: Integer dispid 136;
    property SocksUsername: WideString dispid 137;
    property SocksVersion: Integer dispid 138;
    property Ssl: Integer dispid 139;
    property SslProtocol: WideString dispid 140;
    property SslServerCertVerified: Integer readonly dispid 141;
    property StartTLS: Integer dispid 142;
    property UidNext: Integer readonly dispid 143;
    property UidValidity: Integer readonly dispid 144;
    property RequireSslCertVerify: Integer dispid 221;
    property PreferIpv6: Integer dispid 222;
    function AddPfxSourceData(pfxData: OleVariant; const password: WideString): Integer; dispid 145;
    function AddPfxSourceFile(const pfxFilePath: WideString; const password: WideString): Integer; dispid 146;
    function AppendMail(const mailbox: WideString; const email: IChilkatEmail): Integer; dispid 147;
    function AppendMime(const mailbox: WideString; const mimeText: WideString): Integer; dispid 148;
    function AppendMimeWithDate(const mailbox: WideString; const mimeText: WideString; 
                                internalDate: TDateTime): Integer; dispid 149;
    function AppendMimeWithDateStr(const mailbox: WideString; const mimeText: WideString; 
                                   const internalDateStr: WideString): Integer; dispid 150;
    function AppendMimeWithFlags(const mailbox: WideString; const mimeText: WideString; 
                                 seen: Integer; flagged: Integer; answered: Integer; draft: Integer): Integer; dispid 151;
    function CheckForNewEmail: IMessageSet; dispid 152;
    procedure ClearSessionLog; dispid 153;
    function CloseMailbox(const mailbox: WideString): Integer; dispid 154;
    function Connect(const Hostname: WideString): Integer; dispid 155;
    function Copy(msgId: Integer; bUid: Integer; const copyToMailbox: WideString): Integer; dispid 156;
    function CopyMultiple(const MessageSet: IMessageSet; const copyToMailbox: WideString): Integer; dispid 157;
    function CopySequence(startSeqNum: Integer; Count: Integer; const copyToMailbox: WideString): Integer; dispid 158;
    function CreateMailbox(const mailbox: WideString): Integer; dispid 159;
    function DeleteMailbox(const mailbox: WideString): Integer; dispid 160;
    function Disconnect: Integer; dispid 161;
    function ExamineMailbox(const mailbox: WideString): Integer; dispid 162;
    function Expunge: Integer; dispid 163;
    function ExpungeAndClose: Integer; dispid 164;
    function FetchAttachment(const email: IChilkatEmail; attachIndex: Integer; 
                             const saveToPath: WideString): Integer; dispid 165;
    function FetchAttachmentBytes(const email: IChilkatEmail; attachIndex: Integer): OleVariant; dispid 166;
    function FetchAttachmentString(const email: IChilkatEmail; attachIndex: Integer; 
                                   const charset: WideString): WideString; dispid 167;
    function FetchBundle(const MessageSet: IMessageSet): IChilkatEmailBundle; dispid 168;
    function FetchBundleAsMime(const MessageSet: IMessageSet): ICkStringArray; dispid 169;
    function FetchChunk(startSeqNum: Integer; Count: Integer; const failedSet: IMessageSet; 
                        const fetchedSet: IMessageSet): IChilkatEmailBundle; dispid 170;
    function FetchFlags(msgId: Integer; bUid: Integer): WideString; dispid 171;
    function FetchHeaders(const MessageSet: IMessageSet): IChilkatEmailBundle; dispid 172;
    function FetchSequence(startSeqNum: Integer; NumMessages: Integer): IChilkatEmailBundle; dispid 173;
    function FetchSequenceAsMime(startSeqNum: Integer; NumMessages: Integer): ICkStringArray; dispid 174;
    function FetchSequenceHeaders(startSeqNum: Integer; NumMessages: Integer): IChilkatEmailBundle; dispid 175;
    function FetchSingle(msgId: Integer; bUid: Integer): IChilkatEmail; dispid 176;
    function FetchSingleAsMime(msgId: Integer; bUid: Integer): WideString; dispid 177;
    function FetchSingleHeader(msgId: Integer; bUid: Integer): IChilkatEmail; dispid 178;
    function FetchSingleHeaderAsMime(msgId: Integer; bUid: Integer): WideString; dispid 179;
    function GetAllUids: IMessageSet; dispid 180;
    function GetMailAttachFilename(const email: IChilkatEmail; attachIndex: Integer): WideString; dispid 181;
    function GetMailAttachSize(const email: IChilkatEmail; attachIndex: Integer): Integer; dispid 182;
    function GetMailFlag(const email: IChilkatEmail; const flagName: WideString): Integer; dispid 183;
    function GetMailNumAttach(const email: IChilkatEmail): Integer; dispid 184;
    function GetMailSize(const email: IChilkatEmail): Integer; dispid 185;
    function GetSslServerCert: IChilkatCert; dispid 186;
    function IsConnected: Integer; dispid 187;
    function IsLoggedIn: Integer; dispid 188;
    function IsUnlocked: Integer; dispid 189;
    function ListMailboxes(const reference: WideString; const wildcardedMailbox: WideString): IMailboxes; dispid 190;
    function ListSubscribed(const reference: WideString; const wildcardedMailbox: WideString): IMailboxes; dispid 191;
    function Login(const Login: WideString; const password: WideString): Integer; dispid 192;
    function Logout: Integer; dispid 193;
    function Noop: Integer; dispid 194;
    function RefetchMailFlags(const email: IChilkatEmail): Integer; dispid 195;
    function RenameMailbox(const fromMailbox: WideString; const toMailbox: WideString): Integer; dispid 196;
    function Search(const criteria: WideString; bUid: Integer): IMessageSet; dispid 197;
    function SelectMailbox(const mailbox: WideString): Integer; dispid 198;
    function SendRawCommand(const cmd: WideString): WideString; dispid 199;
    function SendRawCommandB(const cmd: WideString): OleVariant; dispid 200;
    function SendRawCommandC(cmd: OleVariant): OleVariant; dispid 201;
    function SetCSP(const csp: IChilkatCsp): Integer; dispid 202;
    function SetDecryptCert2(const cert: IChilkatCert; const key: IPrivateKey): Integer; dispid 203;
    function SetFlag(msgId: Integer; bUid: Integer; const flagName: WideString; value: Integer): Integer; dispid 204;
    function SetFlags(const MessageSet: IMessageSet; const flagName: WideString; value: Integer): Integer; dispid 205;
    function SetMailFlag(const email: IChilkatEmail; const flagName: WideString; value: Integer): Integer; dispid 206;
    function SetSslClientCert(const cert: IChilkatCert): Integer; dispid 207;
    function SetSslClientCertPem(const pemDataOrFilename: WideString; const pemPassword: WideString): Integer; dispid 208;
    function SetSslClientCertPfx(const pfxFilename: WideString; const pfxPassword: WideString): Integer; dispid 209;
    function SshAuthenticatePk(const SshLogin: WideString; const PrivateKey: IChilkatSshKey): Integer; dispid 210;
    function SshAuthenticatePw(const SshLogin: WideString; const SshPassword: WideString): Integer; dispid 211;
    function SshTunnel(const sshServerHostname: WideString; sshServerPort: Integer): Integer; dispid 212;
    function StoreFlags(msgId: Integer; bUid: Integer; const flagNames: WideString; value: Integer): Integer; dispid 213;
    function Subscribe(const mailbox: WideString): Integer; dispid 214;
    function UnlockComponent(const unlockCode: WideString): Integer; dispid 215;
    function Unsubscribe(const mailbox: WideString): Integer; dispid 216;
    function Capability: WideString; dispid 217;
    function IdleStart: Integer; dispid 218;
    function IdleDone: Integer; dispid 219;
    function IdleCheck(timeoutMs: Integer): WideString; dispid 220;
    function UseCertVault(const vault: IChilkatXmlCertVault): Integer; dispid 223;
    function SetDecryptCert(const cert: IChilkatCert): Integer; dispid 224;
  end;

// *********************************************************************//
// Interface: IChilkatHttpResponse
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C143C715-0FED-4392-B207-1CA3CDF84C88}
// *********************************************************************//
  IChilkatHttpResponse = interface(IDispatch)
    ['{C143C715-0FED-4392-B207-1CA3CDF84C88}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_Body: OleVariant; safecall;
    function Get_BodyQP: WideString; safecall;
    function Get_BodyStr: WideString; safecall;
    function Get_charset: WideString; safecall;
    function Get_ContentLength: Integer; safecall;
    function Get_Date: TDateTime; safecall;
    function Get_dateStr: WideString; safecall;
    function Get_Domain: WideString; safecall;
    function Get_FullMime: WideString; safecall;
    function Get_Header: WideString; safecall;
    function Get_NumCookies: Integer; safecall;
    function Get_NumHeaderFields: Integer; safecall;
    function Get_StatusCode: Integer; safecall;
    function Get_StatusLine: WideString; safecall;
    function GetCookieDomain(index: Integer): WideString; safecall;
    function GetCookieExpires(index: Integer): TDateTime; safecall;
    function GetCookieExpiresStr(index: Integer): WideString; safecall;
    function GetCookieName(index: Integer): WideString; safecall;
    function GetCookiePath(index: Integer): WideString; safecall;
    function GetCookieValue(index: Integer): WideString; safecall;
    function GetHeaderField(const fieldName: WideString): WideString; safecall;
    function GetHeaderFieldAttr(const fieldName: WideString; const attrName: WideString): WideString; safecall;
    function GetHeaderName(index: Integer): WideString; safecall;
    function GetHeaderValue(index: Integer): WideString; safecall;
    function SaveBodyBinary(const path: WideString): Integer; safecall;
    function SaveBodyText(bCrlf: Integer; const path: WideString): Integer; safecall;
    function UrlEncParamValue(const encodedParams: WideString; const paramName: WideString): WideString; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property Body: OleVariant read Get_Body;
    property BodyQP: WideString read Get_BodyQP;
    property BodyStr: WideString read Get_BodyStr;
    property charset: WideString read Get_charset;
    property ContentLength: Integer read Get_ContentLength;
    property Date: TDateTime read Get_Date;
    property dateStr: WideString read Get_dateStr;
    property Domain: WideString read Get_Domain;
    property FullMime: WideString read Get_FullMime;
    property Header: WideString read Get_Header;
    property NumCookies: Integer read Get_NumCookies;
    property NumHeaderFields: Integer read Get_NumHeaderFields;
    property StatusCode: Integer read Get_StatusCode;
    property StatusLine: WideString read Get_StatusLine;
  end;

// *********************************************************************//
// DispIntf:  IChilkatHttpResponseDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C143C715-0FED-4392-B207-1CA3CDF84C88}
// *********************************************************************//
  IChilkatHttpResponseDisp = dispinterface
    ['{C143C715-0FED-4392-B207-1CA3CDF84C88}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property Body: OleVariant readonly dispid 100;
    property BodyQP: WideString readonly dispid 101;
    property BodyStr: WideString readonly dispid 102;
    property charset: WideString readonly dispid 103;
    property ContentLength: Integer readonly dispid 104;
    property Date: TDateTime readonly dispid 105;
    property dateStr: WideString readonly dispid 106;
    property Domain: WideString readonly dispid 107;
    property FullMime: WideString readonly dispid 108;
    property Header: WideString readonly dispid 109;
    property NumCookies: Integer readonly dispid 110;
    property NumHeaderFields: Integer readonly dispid 111;
    property StatusCode: Integer readonly dispid 112;
    property StatusLine: WideString readonly dispid 113;
    function GetCookieDomain(index: Integer): WideString; dispid 114;
    function GetCookieExpires(index: Integer): TDateTime; dispid 115;
    function GetCookieExpiresStr(index: Integer): WideString; dispid 116;
    function GetCookieName(index: Integer): WideString; dispid 117;
    function GetCookiePath(index: Integer): WideString; dispid 118;
    function GetCookieValue(index: Integer): WideString; dispid 119;
    function GetHeaderField(const fieldName: WideString): WideString; dispid 120;
    function GetHeaderFieldAttr(const fieldName: WideString; const attrName: WideString): WideString; dispid 121;
    function GetHeaderName(index: Integer): WideString; dispid 122;
    function GetHeaderValue(index: Integer): WideString; dispid 123;
    function SaveBodyBinary(const path: WideString): Integer; dispid 124;
    function SaveBodyText(bCrlf: Integer; const path: WideString): Integer; dispid 125;
    function UrlEncParamValue(const encodedParams: WideString; const paramName: WideString): WideString; dispid 126;
  end;

// *********************************************************************//
// Interface: IChilkatHttpRequest
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {495F8CD2-9F03-4A83-A9BC-FEEAE2182D9B}
// *********************************************************************//
  IChilkatHttpRequest = interface(IDispatch)
    ['{495F8CD2-9F03-4A83-A9BC-FEEAE2182D9B}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_charset: WideString; safecall;
    procedure Set_charset(const pVal: WideString); safecall;
    function Get_ContentType: WideString; safecall;
    procedure Set_ContentType(const pVal: WideString); safecall;
    function Get_EntireHeader: WideString; safecall;
    procedure Set_EntireHeader(const pVal: WideString); safecall;
    function Get_HttpVerb: WideString; safecall;
    procedure Set_HttpVerb(const pVal: WideString); safecall;
    function Get_HttpVersion: WideString; safecall;
    procedure Set_HttpVersion(const pVal: WideString); safecall;
    function Get_NumHeaderFields: Integer; safecall;
    function Get_NumParams: Integer; safecall;
    function Get_path: WideString; safecall;
    procedure Set_path(const pVal: WideString); safecall;
    function Get_SendCharset: Integer; safecall;
    procedure Set_SendCharset(pVal: Integer); safecall;
    function AddBytesForUpload(const name: WideString; const filename: WideString; 
                               byteData: OleVariant): Integer; safecall;
    function AddBytesForUpload2(const name: WideString; const filename: WideString; 
                                byteData: OleVariant; const ContentType: WideString): Integer; safecall;
    function AddFileForUpload(const name: WideString; const filename: WideString): Integer; safecall;
    function AddFileForUpload2(const name: WideString; const filename: WideString; 
                               const ContentType: WideString): Integer; safecall;
    procedure AddHeader(const name: WideString; const value: WideString); safecall;
    procedure AddParam(const name: WideString; const value: WideString); safecall;
    function AddStringForUpload(const name: WideString; const filename: WideString; 
                                const strData: WideString; const charset: WideString): Integer; safecall;
    function AddStringForUpload2(const name: WideString; const filename: WideString; 
                                 const strData: WideString; const charset: WideString; 
                                 const ContentType: WideString): Integer; safecall;
    function GenerateRequestText: WideString; safecall;
    function GetHeaderField(const name: WideString): WideString; safecall;
    function GetHeaderName(index: Integer): WideString; safecall;
    function GetHeaderValue(index: Integer): WideString; safecall;
    function GetParam(const name: WideString): WideString; safecall;
    function GetParamName(index: Integer): WideString; safecall;
    function GetParamValue(index: Integer): WideString; safecall;
    function GetUrlEncodedParams: WideString; safecall;
    function LoadBodyFromBytes(binaryData: OleVariant): Integer; safecall;
    function LoadBodyFromFile(const filename: WideString): Integer; safecall;
    function LoadBodyFromString(const BodyStr: WideString; const charset: WideString): Integer; safecall;
    procedure RemoveAllParams; safecall;
    function RemoveHeader(const name: WideString): Integer; safecall;
    procedure RemoveParam(const name: WideString); safecall;
    procedure SetFromUrl(const url: WideString); safecall;
    function StreamBodyFromFile(const filename: WideString): Integer; safecall;
    procedure UseGet; safecall;
    procedure UseHead; safecall;
    procedure UsePost; safecall;
    procedure UsePostMultipartForm; safecall;
    procedure UsePut; safecall;
    procedure UseUpload; safecall;
    procedure UseUploadPut; safecall;
    procedure UseXmlHttp(const xmlBody: WideString); safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property charset: WideString read Get_charset write Set_charset;
    property ContentType: WideString read Get_ContentType write Set_ContentType;
    property EntireHeader: WideString read Get_EntireHeader write Set_EntireHeader;
    property HttpVerb: WideString read Get_HttpVerb write Set_HttpVerb;
    property HttpVersion: WideString read Get_HttpVersion write Set_HttpVersion;
    property NumHeaderFields: Integer read Get_NumHeaderFields;
    property NumParams: Integer read Get_NumParams;
    property path: WideString read Get_path write Set_path;
    property SendCharset: Integer read Get_SendCharset write Set_SendCharset;
  end;

// *********************************************************************//
// DispIntf:  IChilkatHttpRequestDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {495F8CD2-9F03-4A83-A9BC-FEEAE2182D9B}
// *********************************************************************//
  IChilkatHttpRequestDisp = dispinterface
    ['{495F8CD2-9F03-4A83-A9BC-FEEAE2182D9B}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property charset: WideString dispid 100;
    property ContentType: WideString dispid 101;
    property EntireHeader: WideString dispid 102;
    property HttpVerb: WideString dispid 103;
    property HttpVersion: WideString dispid 104;
    property NumHeaderFields: Integer readonly dispid 105;
    property NumParams: Integer readonly dispid 106;
    property path: WideString dispid 107;
    property SendCharset: Integer dispid 108;
    function AddBytesForUpload(const name: WideString; const filename: WideString; 
                               byteData: OleVariant): Integer; dispid 109;
    function AddBytesForUpload2(const name: WideString; const filename: WideString; 
                                byteData: OleVariant; const ContentType: WideString): Integer; dispid 110;
    function AddFileForUpload(const name: WideString; const filename: WideString): Integer; dispid 111;
    function AddFileForUpload2(const name: WideString; const filename: WideString; 
                               const ContentType: WideString): Integer; dispid 112;
    procedure AddHeader(const name: WideString; const value: WideString); dispid 113;
    procedure AddParam(const name: WideString; const value: WideString); dispid 114;
    function AddStringForUpload(const name: WideString; const filename: WideString; 
                                const strData: WideString; const charset: WideString): Integer; dispid 115;
    function AddStringForUpload2(const name: WideString; const filename: WideString; 
                                 const strData: WideString; const charset: WideString; 
                                 const ContentType: WideString): Integer; dispid 116;
    function GenerateRequestText: WideString; dispid 117;
    function GetHeaderField(const name: WideString): WideString; dispid 118;
    function GetHeaderName(index: Integer): WideString; dispid 119;
    function GetHeaderValue(index: Integer): WideString; dispid 120;
    function GetParam(const name: WideString): WideString; dispid 121;
    function GetParamName(index: Integer): WideString; dispid 122;
    function GetParamValue(index: Integer): WideString; dispid 123;
    function GetUrlEncodedParams: WideString; dispid 124;
    function LoadBodyFromBytes(binaryData: OleVariant): Integer; dispid 125;
    function LoadBodyFromFile(const filename: WideString): Integer; dispid 126;
    function LoadBodyFromString(const BodyStr: WideString; const charset: WideString): Integer; dispid 127;
    procedure RemoveAllParams; dispid 128;
    function RemoveHeader(const name: WideString): Integer; dispid 129;
    procedure RemoveParam(const name: WideString); dispid 130;
    procedure SetFromUrl(const url: WideString); dispid 131;
    function StreamBodyFromFile(const filename: WideString): Integer; dispid 132;
    procedure UseGet; dispid 133;
    procedure UseHead; dispid 134;
    procedure UsePost; dispid 135;
    procedure UsePostMultipartForm; dispid 136;
    procedure UsePut; dispid 137;
    procedure UseUpload; dispid 138;
    procedure UseUploadPut; dispid 139;
    procedure UseXmlHttp(const xmlBody: WideString); dispid 140;
  end;

// *********************************************************************//
// Interface: IChilkatHttp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C754C4B4-6B0A-4664-ADDD-45467F0BCB7E}
// *********************************************************************//
  IChilkatHttp = interface(IDispatch)
    ['{C754C4B4-6B0A-4664-ADDD-45467F0BCB7E}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_Accept: WideString; safecall;
    procedure Set_Accept(const pVal: WideString); safecall;
    function Get_AcceptCharset: WideString; safecall;
    procedure Set_AcceptCharset(const pVal: WideString); safecall;
    function Get_AcceptLanguage: WideString; safecall;
    procedure Set_AcceptLanguage(const pVal: WideString); safecall;
    function Get_AllowGzip: Integer; safecall;
    procedure Set_AllowGzip(pVal: Integer); safecall;
    function Get_AutoAddHostHeader: Integer; safecall;
    procedure Set_AutoAddHostHeader(pVal: Integer); safecall;
    function Get_AwsAccessKey: WideString; safecall;
    procedure Set_AwsAccessKey(const pVal: WideString); safecall;
    function Get_AwsEndpoint: WideString; safecall;
    procedure Set_AwsEndpoint(const pVal: WideString); safecall;
    function Get_AwsSecretKey: WideString; safecall;
    procedure Set_AwsSecretKey(const pVal: WideString); safecall;
    function Get_AwsSubResources: WideString; safecall;
    procedure Set_AwsSubResources(const pVal: WideString); safecall;
    function Get_BasicAuth: Integer; safecall;
    procedure Set_BasicAuth(pVal: Integer); safecall;
    function Get_BgLastErrorText: WideString; safecall;
    function Get_BgPercentDone: Integer; safecall;
    function Get_BgResultData: OleVariant; safecall;
    function Get_BgResultInt: Integer; safecall;
    function Get_BgResultString: WideString; safecall;
    function Get_BgTaskFinished: Integer; safecall;
    function Get_BgTaskRunning: Integer; safecall;
    function Get_BgTaskSuccess: Integer; safecall;
    function Get_ClientIpAddress: WideString; safecall;
    procedure Set_ClientIpAddress(const pVal: WideString); safecall;
    function Get_ConnectTimeout: Integer; safecall;
    procedure Set_ConnectTimeout(pVal: Integer); safecall;
    function Get_Connection: WideString; safecall;
    procedure Set_Connection(const pVal: WideString); safecall;
    function Get_CookieDir: WideString; safecall;
    procedure Set_CookieDir(const pVal: WideString); safecall;
    function Get_DefaultFreshPeriod: Integer; safecall;
    procedure Set_DefaultFreshPeriod(pVal: Integer); safecall;
    function Get_DigestAuth: Integer; safecall;
    procedure Set_DigestAuth(pVal: Integer); safecall;
    function Get_EventLogCount: Integer; safecall;
    function Get_FetchFromCache: Integer; safecall;
    procedure Set_FetchFromCache(pVal: Integer); safecall;
    function Get_FinalRedirectUrl: WideString; safecall;
    function Get_FollowRedirects: Integer; safecall;
    procedure Set_FollowRedirects(pVal: Integer); safecall;
    function Get_FreshnessAlgorithm: Integer; safecall;
    procedure Set_FreshnessAlgorithm(pVal: Integer); safecall;
    function Get_HeartbeatMs: Integer; safecall;
    procedure Set_HeartbeatMs(pVal: Integer); safecall;
    function Get_IgnoreMustRevalidate: Integer; safecall;
    procedure Set_IgnoreMustRevalidate(pVal: Integer); safecall;
    function Get_IgnoreNoCache: Integer; safecall;
    procedure Set_IgnoreNoCache(pVal: Integer); safecall;
    function Get_KeepEventLog: Integer; safecall;
    procedure Set_KeepEventLog(pVal: Integer); safecall;
    function Get_LMFactor: Integer; safecall;
    procedure Set_LMFactor(pVal: Integer); safecall;
    function Get_LastContentType: WideString; safecall;
    function Get_LastHeader: WideString; safecall;
    function Get_LastModDate: WideString; safecall;
    function Get_LastResponseHeader: WideString; safecall;
    function Get_LastStatus: Integer; safecall;
    function Get_Login: WideString; safecall;
    procedure Set_Login(const pVal: WideString); safecall;
    function Get_LoginDomain: WideString; safecall;
    procedure Set_LoginDomain(const pVal: WideString); safecall;
    function Get_MaxConnections: Integer; safecall;
    procedure Set_MaxConnections(pVal: Integer); safecall;
    function Get_MaxFreshPeriod: Integer; safecall;
    procedure Set_MaxFreshPeriod(pVal: Integer); safecall;
    function Get_MaxResponseSize: Integer; safecall;
    procedure Set_MaxResponseSize(pVal: Integer); safecall;
    function Get_MaxUrlLen: Integer; safecall;
    procedure Set_MaxUrlLen(pVal: Integer); safecall;
    function Get_MimicFireFox: Integer; safecall;
    procedure Set_MimicFireFox(pVal: Integer); safecall;
    function Get_MimicIE: Integer; safecall;
    procedure Set_MimicIE(pVal: Integer); safecall;
    function Get_MinFreshPeriod: Integer; safecall;
    procedure Set_MinFreshPeriod(pVal: Integer); safecall;
    function Get_NegotiateAuth: Integer; safecall;
    procedure Set_NegotiateAuth(pVal: Integer); safecall;
    function Get_NtlmAuth: Integer; safecall;
    procedure Set_NtlmAuth(pVal: Integer); safecall;
    function Get_NumCacheLevels: Integer; safecall;
    procedure Set_NumCacheLevels(pVal: Integer); safecall;
    function Get_NumCacheRoots: Integer; safecall;
    function Get_OAuth1: Integer; safecall;
    procedure Set_OAuth1(pVal: Integer); safecall;
    function Get_OAuthConsumerKey: WideString; safecall;
    procedure Set_OAuthConsumerKey(const pVal: WideString); safecall;
    function Get_OAuthConsumerSecret: WideString; safecall;
    procedure Set_OAuthConsumerSecret(const pVal: WideString); safecall;
    function Get_OAuthRealm: WideString; safecall;
    procedure Set_OAuthRealm(const pVal: WideString); safecall;
    function Get_OAuthSigMethod: WideString; safecall;
    procedure Set_OAuthSigMethod(const pVal: WideString); safecall;
    function Get_OAuthToken: WideString; safecall;
    procedure Set_OAuthToken(const pVal: WideString); safecall;
    function Get_OAuthTokenSecret: WideString; safecall;
    procedure Set_OAuthTokenSecret(const pVal: WideString); safecall;
    function Get_OAuthVerifier: WideString; safecall;
    procedure Set_OAuthVerifier(const pVal: WideString); safecall;
    function Get_password: WideString; safecall;
    procedure Set_password(const pVal: WideString); safecall;
    function Get_ProxyAuthMethod: WideString; safecall;
    procedure Set_ProxyAuthMethod(const pVal: WideString); safecall;
    function Get_ProxyDomain: WideString; safecall;
    procedure Set_ProxyDomain(const pVal: WideString); safecall;
    function Get_ProxyLogin: WideString; safecall;
    procedure Set_ProxyLogin(const pVal: WideString); safecall;
    function Get_ProxyLoginDomain: WideString; safecall;
    procedure Set_ProxyLoginDomain(const pVal: WideString); safecall;
    function Get_ProxyPassword: WideString; safecall;
    procedure Set_ProxyPassword(const pVal: WideString); safecall;
    function Get_ProxyPort: Integer; safecall;
    procedure Set_ProxyPort(pVal: Integer); safecall;
    function Get_ReadTimeout: Integer; safecall;
    procedure Set_ReadTimeout(pVal: Integer); safecall;
    function Get_RedirectVerb: WideString; safecall;
    procedure Set_RedirectVerb(const pVal: WideString); safecall;
    function Get_Referer: WideString; safecall;
    procedure Set_Referer(const pVal: WideString); safecall;
    function Get_RequiredContentType: WideString; safecall;
    procedure Set_RequiredContentType(const pVal: WideString); safecall;
    function Get_S3Ssl: Integer; safecall;
    procedure Set_S3Ssl(pVal: Integer); safecall;
    function Get_SaveCookies: Integer; safecall;
    procedure Set_SaveCookies(pVal: Integer); safecall;
    function Get_SendBufferSize: Integer; safecall;
    procedure Set_SendBufferSize(pVal: Integer); safecall;
    function Get_SendCookies: Integer; safecall;
    procedure Set_SendCookies(pVal: Integer); safecall;
    function Get_SessionLogFilename: WideString; safecall;
    procedure Set_SessionLogFilename(const pVal: WideString); safecall;
    function Get_SoRcvBuf: Integer; safecall;
    procedure Set_SoRcvBuf(pVal: Integer); safecall;
    function Get_SoSndBuf: Integer; safecall;
    procedure Set_SoSndBuf(pVal: Integer); safecall;
    function Get_SocksHostname: WideString; safecall;
    procedure Set_SocksHostname(const pVal: WideString); safecall;
    function Get_SocksPassword: WideString; safecall;
    procedure Set_SocksPassword(const pVal: WideString); safecall;
    function Get_SocksPort: Integer; safecall;
    procedure Set_SocksPort(pVal: Integer); safecall;
    function Get_SocksUsername: WideString; safecall;
    procedure Set_SocksUsername(const pVal: WideString); safecall;
    function Get_SocksVersion: Integer; safecall;
    procedure Set_SocksVersion(pVal: Integer); safecall;
    function Get_SslProtocol: WideString; safecall;
    procedure Set_SslProtocol(const pVal: WideString); safecall;
    function Get_UpdateCache: Integer; safecall;
    procedure Set_UpdateCache(pVal: Integer); safecall;
    function Get_UseBgThread: Integer; safecall;
    procedure Set_UseBgThread(pVal: Integer); safecall;
    function Get_UseIEProxy: Integer; safecall;
    procedure Set_UseIEProxy(pVal: Integer); safecall;
    function Get_UserAgent: WideString; safecall;
    procedure Set_UserAgent(const pVal: WideString); safecall;
    function Get_WasRedirected: Integer; safecall;
    function Get_RequireSslCertVerify: Integer; safecall;
    procedure Set_RequireSslCertVerify(pVal: Integer); safecall;
    function Get_PreferIpv6: Integer; safecall;
    procedure Set_PreferIpv6(pVal: Integer); safecall;
    procedure AddCacheRoot(const dir: WideString); safecall;
    function AddQuickHeader(const name: WideString; const value: WideString): Integer; safecall;
    function BgResponseObject: IChilkatHttpResponse; safecall;
    procedure BgTaskAbort; safecall;
    procedure ClearBgEventLog; safecall;
    procedure ClearInMemoryCookies; safecall;
    function CloseAllConnections: Integer; safecall;
    function Download(const url: WideString; const filename: WideString): Integer; safecall;
    function DownloadAppend(const url: WideString; const filename: WideString): Integer; safecall;
    function DownloadHash(const url: WideString; const HashAlgorithm: WideString; 
                          const encoding: WideString): WideString; safecall;
    function EventLogName(index: Integer): WideString; safecall;
    function EventLogValue(index: Integer): WideString; safecall;
    function ExtractMetaRefreshUrl(const html: WideString): WideString; safecall;
    function GenTimeStamp: WideString; safecall;
    function GetCacheRoot(index: Integer): WideString; safecall;
    function GetCookieXml(const Domain: WideString): WideString; safecall;
    function GetDomain(const url: WideString): WideString; safecall;
    function GetHead(const url: WideString): IChilkatHttpResponse; safecall;
    function GetRequestHeader(const name: WideString): WideString; safecall;
    function GetServerSslCert(const Domain: WideString; Port: Integer): IChilkatCert; safecall;
    function GetUrlPath(const url: WideString): WideString; safecall;
    function HasRequestHeader(const name: WideString): Integer; safecall;
    function IsUnlocked: Integer; safecall;
    function PostBinary(const url: WideString; byteData: OleVariant; const ContentType: WideString; 
                        md5: Integer; gzip: Integer): WideString; safecall;
    function PostJson(const url: WideString; const jsonText: WideString): IChilkatHttpResponse; safecall;
    function PostJson2(const url: WideString; const ContentType: WideString; 
                       const jsonText: WideString): IChilkatHttpResponse; safecall;
    function PostMime(const url: WideString; const mime: WideString): IChilkatHttpResponse; safecall;
    function PostUrlEncoded(const url: WideString; const req: IChilkatHttpRequest): IChilkatHttpResponse; safecall;
    function PostXml(const url: WideString; const xmlDoc: WideString; const charset: WideString): IChilkatHttpResponse; safecall;
    function PutBinary(const url: WideString; byteData: OleVariant; const ContentType: WideString; 
                       md5: Integer; gzip: Integer): WideString; safecall;
    function PutText(const url: WideString; const textData: WideString; const charset: WideString; 
                     const ContentType: WideString; md5: Integer; gzip: Integer): WideString; safecall;
    function QuickDeleteStr(const url: WideString): WideString; safecall;
    function QuickGet(const url: WideString): OleVariant; safecall;
    function QuickGetObj(const url: WideString): IChilkatHttpResponse; safecall;
    function QuickGetStr(const url: WideString): WideString; safecall;
    function QuickPutStr(const url: WideString): WideString; safecall;
    function RemoveQuickHeader(const name: WideString): Integer; safecall;
    procedure RemoveRequestHeader(const name: WideString); safecall;
    function RenderGet(const url: WideString): WideString; safecall;
    function ResumeDownload(const url: WideString; const filename: WideString): Integer; safecall;
    function S3_CreateBucket(const bucketName: WideString): Integer; safecall;
    function S3_DeleteBucket(const bucketName: WideString): Integer; safecall;
    function S3_DeleteObject(const bucketName: WideString; const objectName: WideString): Integer; safecall;
    function S3_DownloadBytes(const bucketName: WideString; const objectName: WideString): OleVariant; safecall;
    function S3_DownloadFile(const bucketName: WideString; const objectName: WideString; 
                             const localFilePath: WideString): Integer; safecall;
    function S3_DownloadString(const bucketName: WideString; const objectName: WideString; 
                               const charset: WideString): WideString; safecall;
    function S3_FileExists(const bucketName: WideString; const objectName: WideString): Integer; safecall;
    function S3_ListBucketObjects(const bucketName: WideString): WideString; safecall;
    function S3_ListBuckets: WideString; safecall;
    function S3_UploadBytes(objectContent: OleVariant; const ContentType: WideString; 
                            const bucketName: WideString; const objectName: WideString): Integer; safecall;
    function S3_UploadFile(const localFilePath: WideString; const ContentType: WideString; 
                           const bucketName: WideString; const objectName: WideString): Integer; safecall;
    function S3_UploadString(const objectContent: WideString; const charset: WideString; 
                             const ContentType: WideString; const bucketName: WideString; 
                             const objectName: WideString): Integer; safecall;
    function SetCookieXml(const Domain: WideString; const cookieXml: WideString): Integer; safecall;
    procedure SetRequestHeader(const name: WideString; const value: WideString); safecall;
    function SetSslClientCert(const cert: IChilkatCert): Integer; safecall;
    function SetSslClientCertPem(const pemDataOrFilename: WideString; const pemPassword: WideString): Integer; safecall;
    function SetSslClientCertPfx(const pfxFilename: WideString; const pfxPassword: WideString): Integer; safecall;
    procedure SleepMs(millisec: Integer); safecall;
    function SynchronousRequest(const Domain: WideString; Port: Integer; Ssl: Integer; 
                                const req: IChilkatHttpRequest): IChilkatHttpResponse; safecall;
    function UnlockComponent(const unlockCode: WideString): Integer; safecall;
    function UrlDecode(const str: WideString): WideString; safecall;
    function UrlEncode(const str: WideString): WideString; safecall;
    function XmlRpc(const urlEndpoint: WideString; const xmlIn: WideString): WideString; safecall;
    function XmlRpcPut(const urlEndpoint: WideString; const xmlIn: WideString): WideString; safecall;
    procedure DnsCacheClear; safecall;
    function SetOAuthRsaKey(const privKey: IPrivateKey): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property Accept: WideString read Get_Accept write Set_Accept;
    property AcceptCharset: WideString read Get_AcceptCharset write Set_AcceptCharset;
    property AcceptLanguage: WideString read Get_AcceptLanguage write Set_AcceptLanguage;
    property AllowGzip: Integer read Get_AllowGzip write Set_AllowGzip;
    property AutoAddHostHeader: Integer read Get_AutoAddHostHeader write Set_AutoAddHostHeader;
    property AwsAccessKey: WideString read Get_AwsAccessKey write Set_AwsAccessKey;
    property AwsEndpoint: WideString read Get_AwsEndpoint write Set_AwsEndpoint;
    property AwsSecretKey: WideString read Get_AwsSecretKey write Set_AwsSecretKey;
    property AwsSubResources: WideString read Get_AwsSubResources write Set_AwsSubResources;
    property BasicAuth: Integer read Get_BasicAuth write Set_BasicAuth;
    property BgLastErrorText: WideString read Get_BgLastErrorText;
    property BgPercentDone: Integer read Get_BgPercentDone;
    property BgResultData: OleVariant read Get_BgResultData;
    property BgResultInt: Integer read Get_BgResultInt;
    property BgResultString: WideString read Get_BgResultString;
    property BgTaskFinished: Integer read Get_BgTaskFinished;
    property BgTaskRunning: Integer read Get_BgTaskRunning;
    property BgTaskSuccess: Integer read Get_BgTaskSuccess;
    property ClientIpAddress: WideString read Get_ClientIpAddress write Set_ClientIpAddress;
    property ConnectTimeout: Integer read Get_ConnectTimeout write Set_ConnectTimeout;
    property Connection: WideString read Get_Connection write Set_Connection;
    property CookieDir: WideString read Get_CookieDir write Set_CookieDir;
    property DefaultFreshPeriod: Integer read Get_DefaultFreshPeriod write Set_DefaultFreshPeriod;
    property DigestAuth: Integer read Get_DigestAuth write Set_DigestAuth;
    property EventLogCount: Integer read Get_EventLogCount;
    property FetchFromCache: Integer read Get_FetchFromCache write Set_FetchFromCache;
    property FinalRedirectUrl: WideString read Get_FinalRedirectUrl;
    property FollowRedirects: Integer read Get_FollowRedirects write Set_FollowRedirects;
    property FreshnessAlgorithm: Integer read Get_FreshnessAlgorithm write Set_FreshnessAlgorithm;
    property HeartbeatMs: Integer read Get_HeartbeatMs write Set_HeartbeatMs;
    property IgnoreMustRevalidate: Integer read Get_IgnoreMustRevalidate write Set_IgnoreMustRevalidate;
    property IgnoreNoCache: Integer read Get_IgnoreNoCache write Set_IgnoreNoCache;
    property KeepEventLog: Integer read Get_KeepEventLog write Set_KeepEventLog;
    property LMFactor: Integer read Get_LMFactor write Set_LMFactor;
    property LastContentType: WideString read Get_LastContentType;
    property LastHeader: WideString read Get_LastHeader;
    property LastModDate: WideString read Get_LastModDate;
    property LastResponseHeader: WideString read Get_LastResponseHeader;
    property LastStatus: Integer read Get_LastStatus;
    property Login: WideString read Get_Login write Set_Login;
    property LoginDomain: WideString read Get_LoginDomain write Set_LoginDomain;
    property MaxConnections: Integer read Get_MaxConnections write Set_MaxConnections;
    property MaxFreshPeriod: Integer read Get_MaxFreshPeriod write Set_MaxFreshPeriod;
    property MaxResponseSize: Integer read Get_MaxResponseSize write Set_MaxResponseSize;
    property MaxUrlLen: Integer read Get_MaxUrlLen write Set_MaxUrlLen;
    property MimicFireFox: Integer read Get_MimicFireFox write Set_MimicFireFox;
    property MimicIE: Integer read Get_MimicIE write Set_MimicIE;
    property MinFreshPeriod: Integer read Get_MinFreshPeriod write Set_MinFreshPeriod;
    property NegotiateAuth: Integer read Get_NegotiateAuth write Set_NegotiateAuth;
    property NtlmAuth: Integer read Get_NtlmAuth write Set_NtlmAuth;
    property NumCacheLevels: Integer read Get_NumCacheLevels write Set_NumCacheLevels;
    property NumCacheRoots: Integer read Get_NumCacheRoots;
    property OAuth1: Integer read Get_OAuth1 write Set_OAuth1;
    property OAuthConsumerKey: WideString read Get_OAuthConsumerKey write Set_OAuthConsumerKey;
    property OAuthConsumerSecret: WideString read Get_OAuthConsumerSecret write Set_OAuthConsumerSecret;
    property OAuthRealm: WideString read Get_OAuthRealm write Set_OAuthRealm;
    property OAuthSigMethod: WideString read Get_OAuthSigMethod write Set_OAuthSigMethod;
    property OAuthToken: WideString read Get_OAuthToken write Set_OAuthToken;
    property OAuthTokenSecret: WideString read Get_OAuthTokenSecret write Set_OAuthTokenSecret;
    property OAuthVerifier: WideString read Get_OAuthVerifier write Set_OAuthVerifier;
    property password: WideString read Get_password write Set_password;
    property ProxyAuthMethod: WideString read Get_ProxyAuthMethod write Set_ProxyAuthMethod;
    property ProxyDomain: WideString read Get_ProxyDomain write Set_ProxyDomain;
    property ProxyLogin: WideString read Get_ProxyLogin write Set_ProxyLogin;
    property ProxyLoginDomain: WideString read Get_ProxyLoginDomain write Set_ProxyLoginDomain;
    property ProxyPassword: WideString read Get_ProxyPassword write Set_ProxyPassword;
    property ProxyPort: Integer read Get_ProxyPort write Set_ProxyPort;
    property ReadTimeout: Integer read Get_ReadTimeout write Set_ReadTimeout;
    property RedirectVerb: WideString read Get_RedirectVerb write Set_RedirectVerb;
    property Referer: WideString read Get_Referer write Set_Referer;
    property RequiredContentType: WideString read Get_RequiredContentType write Set_RequiredContentType;
    property S3Ssl: Integer read Get_S3Ssl write Set_S3Ssl;
    property SaveCookies: Integer read Get_SaveCookies write Set_SaveCookies;
    property SendBufferSize: Integer read Get_SendBufferSize write Set_SendBufferSize;
    property SendCookies: Integer read Get_SendCookies write Set_SendCookies;
    property SessionLogFilename: WideString read Get_SessionLogFilename write Set_SessionLogFilename;
    property SoRcvBuf: Integer read Get_SoRcvBuf write Set_SoRcvBuf;
    property SoSndBuf: Integer read Get_SoSndBuf write Set_SoSndBuf;
    property SocksHostname: WideString read Get_SocksHostname write Set_SocksHostname;
    property SocksPassword: WideString read Get_SocksPassword write Set_SocksPassword;
    property SocksPort: Integer read Get_SocksPort write Set_SocksPort;
    property SocksUsername: WideString read Get_SocksUsername write Set_SocksUsername;
    property SocksVersion: Integer read Get_SocksVersion write Set_SocksVersion;
    property SslProtocol: WideString read Get_SslProtocol write Set_SslProtocol;
    property UpdateCache: Integer read Get_UpdateCache write Set_UpdateCache;
    property UseBgThread: Integer read Get_UseBgThread write Set_UseBgThread;
    property UseIEProxy: Integer read Get_UseIEProxy write Set_UseIEProxy;
    property UserAgent: WideString read Get_UserAgent write Set_UserAgent;
    property WasRedirected: Integer read Get_WasRedirected;
    property RequireSslCertVerify: Integer read Get_RequireSslCertVerify write Set_RequireSslCertVerify;
    property PreferIpv6: Integer read Get_PreferIpv6 write Set_PreferIpv6;
  end;

// *********************************************************************//
// DispIntf:  IChilkatHttpDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C754C4B4-6B0A-4664-ADDD-45467F0BCB7E}
// *********************************************************************//
  IChilkatHttpDisp = dispinterface
    ['{C754C4B4-6B0A-4664-ADDD-45467F0BCB7E}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property Accept: WideString dispid 100;
    property AcceptCharset: WideString dispid 101;
    property AcceptLanguage: WideString dispid 102;
    property AllowGzip: Integer dispid 103;
    property AutoAddHostHeader: Integer dispid 104;
    property AwsAccessKey: WideString dispid 105;
    property AwsEndpoint: WideString dispid 106;
    property AwsSecretKey: WideString dispid 107;
    property AwsSubResources: WideString dispid 108;
    property BasicAuth: Integer dispid 252;
    property BgLastErrorText: WideString readonly dispid 109;
    property BgPercentDone: Integer readonly dispid 110;
    property BgResultData: OleVariant readonly dispid 111;
    property BgResultInt: Integer readonly dispid 112;
    property BgResultString: WideString readonly dispid 113;
    property BgTaskFinished: Integer readonly dispid 114;
    property BgTaskRunning: Integer readonly dispid 115;
    property BgTaskSuccess: Integer readonly dispid 116;
    property ClientIpAddress: WideString dispid 117;
    property ConnectTimeout: Integer dispid 118;
    property Connection: WideString dispid 119;
    property CookieDir: WideString dispid 120;
    property DefaultFreshPeriod: Integer dispid 121;
    property DigestAuth: Integer dispid 122;
    property EventLogCount: Integer readonly dispid 123;
    property FetchFromCache: Integer dispid 124;
    property FinalRedirectUrl: WideString readonly dispid 125;
    property FollowRedirects: Integer dispid 126;
    property FreshnessAlgorithm: Integer dispid 127;
    property HeartbeatMs: Integer dispid 128;
    property IgnoreMustRevalidate: Integer dispid 129;
    property IgnoreNoCache: Integer dispid 130;
    property KeepEventLog: Integer dispid 131;
    property LMFactor: Integer dispid 132;
    property LastContentType: WideString readonly dispid 133;
    property LastHeader: WideString readonly dispid 134;
    property LastModDate: WideString readonly dispid 135;
    property LastResponseHeader: WideString readonly dispid 136;
    property LastStatus: Integer readonly dispid 137;
    property Login: WideString dispid 138;
    property LoginDomain: WideString dispid 139;
    property MaxConnections: Integer dispid 140;
    property MaxFreshPeriod: Integer dispid 141;
    property MaxResponseSize: Integer dispid 142;
    property MaxUrlLen: Integer dispid 143;
    property MimicFireFox: Integer dispid 144;
    property MimicIE: Integer dispid 145;
    property MinFreshPeriod: Integer dispid 146;
    property NegotiateAuth: Integer dispid 147;
    property NtlmAuth: Integer dispid 148;
    property NumCacheLevels: Integer dispid 149;
    property NumCacheRoots: Integer readonly dispid 150;
    property OAuth1: Integer dispid 151;
    property OAuthConsumerKey: WideString dispid 152;
    property OAuthConsumerSecret: WideString dispid 153;
    property OAuthRealm: WideString dispid 154;
    property OAuthSigMethod: WideString dispid 155;
    property OAuthToken: WideString dispid 156;
    property OAuthTokenSecret: WideString dispid 157;
    property OAuthVerifier: WideString dispid 158;
    property password: WideString dispid 159;
    property ProxyAuthMethod: WideString dispid 160;
    property ProxyDomain: WideString dispid 161;
    property ProxyLogin: WideString dispid 162;
    property ProxyLoginDomain: WideString dispid 163;
    property ProxyPassword: WideString dispid 164;
    property ProxyPort: Integer dispid 165;
    property ReadTimeout: Integer dispid 166;
    property RedirectVerb: WideString dispid 167;
    property Referer: WideString dispid 168;
    property RequiredContentType: WideString dispid 169;
    property S3Ssl: Integer dispid 170;
    property SaveCookies: Integer dispid 171;
    property SendBufferSize: Integer dispid 172;
    property SendCookies: Integer dispid 173;
    property SessionLogFilename: WideString dispid 174;
    property SoRcvBuf: Integer dispid 175;
    property SoSndBuf: Integer dispid 176;
    property SocksHostname: WideString dispid 177;
    property SocksPassword: WideString dispid 178;
    property SocksPort: Integer dispid 179;
    property SocksUsername: WideString dispid 180;
    property SocksVersion: Integer dispid 181;
    property SslProtocol: WideString dispid 182;
    property UpdateCache: Integer dispid 183;
    property UseBgThread: Integer dispid 184;
    property UseIEProxy: Integer dispid 185;
    property UserAgent: WideString dispid 186;
    property WasRedirected: Integer readonly dispid 187;
    property RequireSslCertVerify: Integer dispid 253;
    property PreferIpv6: Integer dispid 256;
    procedure AddCacheRoot(const dir: WideString); dispid 188;
    function AddQuickHeader(const name: WideString; const value: WideString): Integer; dispid 189;
    function BgResponseObject: IChilkatHttpResponse; dispid 190;
    procedure BgTaskAbort; dispid 191;
    procedure ClearBgEventLog; dispid 192;
    procedure ClearInMemoryCookies; dispid 193;
    function CloseAllConnections: Integer; dispid 194;
    function Download(const url: WideString; const filename: WideString): Integer; dispid 195;
    function DownloadAppend(const url: WideString; const filename: WideString): Integer; dispid 196;
    function DownloadHash(const url: WideString; const HashAlgorithm: WideString; 
                          const encoding: WideString): WideString; dispid 197;
    function EventLogName(index: Integer): WideString; dispid 198;
    function EventLogValue(index: Integer): WideString; dispid 199;
    function ExtractMetaRefreshUrl(const html: WideString): WideString; dispid 200;
    function GenTimeStamp: WideString; dispid 201;
    function GetCacheRoot(index: Integer): WideString; dispid 202;
    function GetCookieXml(const Domain: WideString): WideString; dispid 203;
    function GetDomain(const url: WideString): WideString; dispid 204;
    function GetHead(const url: WideString): IChilkatHttpResponse; dispid 205;
    function GetRequestHeader(const name: WideString): WideString; dispid 206;
    function GetServerSslCert(const Domain: WideString; Port: Integer): IChilkatCert; dispid 207;
    function GetUrlPath(const url: WideString): WideString; dispid 208;
    function HasRequestHeader(const name: WideString): Integer; dispid 209;
    function IsUnlocked: Integer; dispid 210;
    function PostBinary(const url: WideString; byteData: OleVariant; const ContentType: WideString; 
                        md5: Integer; gzip: Integer): WideString; dispid 211;
    function PostJson(const url: WideString; const jsonText: WideString): IChilkatHttpResponse; dispid 212;
    function PostJson2(const url: WideString; const ContentType: WideString; 
                       const jsonText: WideString): IChilkatHttpResponse; dispid 213;
    function PostMime(const url: WideString; const mime: WideString): IChilkatHttpResponse; dispid 214;
    function PostUrlEncoded(const url: WideString; const req: IChilkatHttpRequest): IChilkatHttpResponse; dispid 215;
    function PostXml(const url: WideString; const xmlDoc: WideString; const charset: WideString): IChilkatHttpResponse; dispid 216;
    function PutBinary(const url: WideString; byteData: OleVariant; const ContentType: WideString; 
                       md5: Integer; gzip: Integer): WideString; dispid 217;
    function PutText(const url: WideString; const textData: WideString; const charset: WideString; 
                     const ContentType: WideString; md5: Integer; gzip: Integer): WideString; dispid 218;
    function QuickDeleteStr(const url: WideString): WideString; dispid 219;
    function QuickGet(const url: WideString): OleVariant; dispid 220;
    function QuickGetObj(const url: WideString): IChilkatHttpResponse; dispid 221;
    function QuickGetStr(const url: WideString): WideString; dispid 222;
    function QuickPutStr(const url: WideString): WideString; dispid 223;
    function RemoveQuickHeader(const name: WideString): Integer; dispid 224;
    procedure RemoveRequestHeader(const name: WideString); dispid 225;
    function RenderGet(const url: WideString): WideString; dispid 226;
    function ResumeDownload(const url: WideString; const filename: WideString): Integer; dispid 227;
    function S3_CreateBucket(const bucketName: WideString): Integer; dispid 228;
    function S3_DeleteBucket(const bucketName: WideString): Integer; dispid 229;
    function S3_DeleteObject(const bucketName: WideString; const objectName: WideString): Integer; dispid 230;
    function S3_DownloadBytes(const bucketName: WideString; const objectName: WideString): OleVariant; dispid 231;
    function S3_DownloadFile(const bucketName: WideString; const objectName: WideString; 
                             const localFilePath: WideString): Integer; dispid 232;
    function S3_DownloadString(const bucketName: WideString; const objectName: WideString; 
                               const charset: WideString): WideString; dispid 233;
    function S3_FileExists(const bucketName: WideString; const objectName: WideString): Integer; dispid 234;
    function S3_ListBucketObjects(const bucketName: WideString): WideString; dispid 235;
    function S3_ListBuckets: WideString; dispid 236;
    function S3_UploadBytes(objectContent: OleVariant; const ContentType: WideString; 
                            const bucketName: WideString; const objectName: WideString): Integer; dispid 237;
    function S3_UploadFile(const localFilePath: WideString; const ContentType: WideString; 
                           const bucketName: WideString; const objectName: WideString): Integer; dispid 238;
    function S3_UploadString(const objectContent: WideString; const charset: WideString; 
                             const ContentType: WideString; const bucketName: WideString; 
                             const objectName: WideString): Integer; dispid 239;
    function SetCookieXml(const Domain: WideString; const cookieXml: WideString): Integer; dispid 240;
    procedure SetRequestHeader(const name: WideString; const value: WideString); dispid 241;
    function SetSslClientCert(const cert: IChilkatCert): Integer; dispid 242;
    function SetSslClientCertPem(const pemDataOrFilename: WideString; const pemPassword: WideString): Integer; dispid 243;
    function SetSslClientCertPfx(const pfxFilename: WideString; const pfxPassword: WideString): Integer; dispid 244;
    procedure SleepMs(millisec: Integer); dispid 245;
    function SynchronousRequest(const Domain: WideString; Port: Integer; Ssl: Integer; 
                                const req: IChilkatHttpRequest): IChilkatHttpResponse; dispid 246;
    function UnlockComponent(const unlockCode: WideString): Integer; dispid 247;
    function UrlDecode(const str: WideString): WideString; dispid 248;
    function UrlEncode(const str: WideString): WideString; dispid 249;
    function XmlRpc(const urlEndpoint: WideString; const xmlIn: WideString): WideString; dispid 250;
    function XmlRpcPut(const urlEndpoint: WideString; const xmlIn: WideString): WideString; dispid 251;
    procedure DnsCacheClear; dispid 254;
    function SetOAuthRsaKey(const privKey: IPrivateKey): Integer; dispid 255;
  end;

// *********************************************************************//
// Interface: IHtmlToXml
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {FE82184C-B69F-4B58-9DBC-463FB2F6A422}
// *********************************************************************//
  IHtmlToXml = interface(IDispatch)
    ['{FE82184C-B69F-4B58-9DBC-463FB2F6A422}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_html: WideString; safecall;
    procedure Set_html(const pVal: WideString); safecall;
    function Get_Nbsp: Integer; safecall;
    procedure Set_Nbsp(pVal: Integer); safecall;
    function Get_XmlCharset: WideString; safecall;
    procedure Set_XmlCharset(const pVal: WideString); safecall;
    function Get_DropCustomTags: Integer; safecall;
    procedure Set_DropCustomTags(pVal: Integer); safecall;
    function ConvertFile(const inHtmlPath: WideString; const destXmlPath: WideString): Integer; safecall;
    procedure DropTagType(const tagName: WideString); safecall;
    procedure DropTextFormattingTags; safecall;
    function IsUnlocked: Integer; safecall;
    function ReadFileToString(const filename: WideString; const srcCharset: WideString): WideString; safecall;
    procedure SetHtmlBytes(inData: OleVariant); safecall;
    function SetHtmlFromFile(const filename: WideString): Integer; safecall;
    function ToXml: WideString; safecall;
    procedure UndropTagType(const tagName: WideString); safecall;
    procedure UndropTextFormattingTags; safecall;
    function UnlockComponent(const unlockCode: WideString): Integer; safecall;
    function WriteStringToFile(const str: WideString; const filename: WideString; 
                               const charset: WideString): Integer; safecall;
    function ReadFile(const path: WideString): OleVariant; safecall;
    function WriteFile(const path: WideString; fileData: OleVariant): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property html: WideString read Get_html write Set_html;
    property Nbsp: Integer read Get_Nbsp write Set_Nbsp;
    property XmlCharset: WideString read Get_XmlCharset write Set_XmlCharset;
    property DropCustomTags: Integer read Get_DropCustomTags write Set_DropCustomTags;
  end;

// *********************************************************************//
// DispIntf:  IHtmlToXmlDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {FE82184C-B69F-4B58-9DBC-463FB2F6A422}
// *********************************************************************//
  IHtmlToXmlDisp = dispinterface
    ['{FE82184C-B69F-4B58-9DBC-463FB2F6A422}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property html: WideString dispid 100;
    property Nbsp: Integer dispid 101;
    property XmlCharset: WideString dispid 102;
    property DropCustomTags: Integer dispid 103;
    function ConvertFile(const inHtmlPath: WideString; const destXmlPath: WideString): Integer; dispid 104;
    procedure DropTagType(const tagName: WideString); dispid 105;
    procedure DropTextFormattingTags; dispid 106;
    function IsUnlocked: Integer; dispid 107;
    function ReadFileToString(const filename: WideString; const srcCharset: WideString): WideString; dispid 108;
    procedure SetHtmlBytes(inData: OleVariant); dispid 109;
    function SetHtmlFromFile(const filename: WideString): Integer; dispid 110;
    function ToXml: WideString; dispid 111;
    procedure UndropTagType(const tagName: WideString); dispid 112;
    procedure UndropTextFormattingTags; dispid 113;
    function UnlockComponent(const unlockCode: WideString): Integer; dispid 114;
    function WriteStringToFile(const str: WideString; const filename: WideString; 
                               const charset: WideString): Integer; dispid 115;
    function ReadFile(const path: WideString): OleVariant; dispid 116;
    function WriteFile(const path: WideString; fileData: OleVariant): Integer; dispid 117;
  end;

// *********************************************************************//
// Interface: IHtmlToText
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {7919C172-F7FD-40BB-9A28-ACC2EA4ED66F}
// *********************************************************************//
  IHtmlToText = interface(IDispatch)
    ['{7919C172-F7FD-40BB-9A28-ACC2EA4ED66F}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_RightMargin: Integer; safecall;
    procedure Set_RightMargin(pVal: Integer); safecall;
    function Get_SuppressLinks: Integer; safecall;
    procedure Set_SuppressLinks(pVal: Integer); safecall;
    function Get_DecodeHtmlEntities: Integer; safecall;
    procedure Set_DecodeHtmlEntities(pVal: Integer); safecall;
    function ReadFileToString(const filename: WideString; const srcCharset: WideString): WideString; safecall;
    function ToText(const html: WideString): WideString; safecall;
    function UnlockComponent(const code: WideString): Integer; safecall;
    function WriteStringToFile(const str: WideString; const filename: WideString; 
                               const charset: WideString): Integer; safecall;
    function IsUnlocked: Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property RightMargin: Integer read Get_RightMargin write Set_RightMargin;
    property SuppressLinks: Integer read Get_SuppressLinks write Set_SuppressLinks;
    property DecodeHtmlEntities: Integer read Get_DecodeHtmlEntities write Set_DecodeHtmlEntities;
  end;

// *********************************************************************//
// DispIntf:  IHtmlToTextDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {7919C172-F7FD-40BB-9A28-ACC2EA4ED66F}
// *********************************************************************//
  IHtmlToTextDisp = dispinterface
    ['{7919C172-F7FD-40BB-9A28-ACC2EA4ED66F}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property RightMargin: Integer dispid 100;
    property SuppressLinks: Integer dispid 101;
    property DecodeHtmlEntities: Integer dispid 102;
    function ReadFileToString(const filename: WideString; const srcCharset: WideString): WideString; dispid 103;
    function ToText(const html: WideString): WideString; dispid 104;
    function UnlockComponent(const code: WideString): Integer; dispid 105;
    function WriteStringToFile(const str: WideString; const filename: WideString; 
                               const charset: WideString): Integer; dispid 106;
    function IsUnlocked: Integer; dispid 107;
  end;

// *********************************************************************//
// Interface: IChilkatGzip
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {409F23C5-B973-4611-93DD-8FE839BC5860}
// *********************************************************************//
  IChilkatGzip = interface(IDispatch)
    ['{409F23C5-B973-4611-93DD-8FE839BC5860}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_Comment: WideString; safecall;
    procedure Set_Comment(const pVal: WideString); safecall;
    function Get_ExtraData: OleVariant; safecall;
    procedure Set_ExtraData(pVal: OleVariant); safecall;
    function Get_filename: WideString; safecall;
    procedure Set_filename(const pVal: WideString); safecall;
    function Get_HeartbeatMs: Integer; safecall;
    procedure Set_HeartbeatMs(pVal: Integer); safecall;
    function Get_LastMod: TDateTime; safecall;
    procedure Set_LastMod(pVal: TDateTime); safecall;
    function Get_LastModStr: WideString; safecall;
    procedure Set_LastModStr(const pVal: WideString); safecall;
    function Get_UseCurrentDate: Integer; safecall;
    procedure Set_UseCurrentDate(pVal: Integer); safecall;
    function CompressFile(const srcPath: WideString; const destPath: WideString): Integer; safecall;
    function CompressFile2(const srcPath: WideString; const embeddedFilename: WideString; 
                           const destPath: WideString): Integer; safecall;
    function CompressFileToMem(const inFilename: WideString): OleVariant; safecall;
    function CompressMemToFile(inData: OleVariant; const destPath: WideString): Integer; safecall;
    function CompressMemory(inData: OleVariant): OleVariant; safecall;
    function CompressString(const inStr: WideString; const destCharset: WideString): OleVariant; safecall;
    function CompressStringENC(const strIn: WideString; const charset: WideString; 
                               const encoding: WideString): WideString; safecall;
    function CompressStringToFile(const inStr: WideString; const destCharset: WideString; 
                                  const destPath: WideString): Integer; safecall;
    function Decode(const str: WideString; const encoding: WideString): OleVariant; safecall;
    function DeflateStringENC(const strIn: WideString; const charset: WideString; 
                              const encoding: WideString): WideString; safecall;
    function Encode(byteData: OleVariant; const encoding: WideString): WideString; safecall;
    function ExamineFile(const inGzPath: WideString): Integer; safecall;
    function ExamineMemory(inGzData: OleVariant): Integer; safecall;
    function GetDt: ICkDateTime; safecall;
    function InflateStringENC(const strIn: WideString; const charset: WideString; 
                              const encoding: WideString): WideString; safecall;
    function IsUnlocked: Integer; safecall;
    function ReadFile(const path: WideString): OleVariant; safecall;
    function SetDt(const dt: ICkDateTime): Integer; safecall;
    function UntarGz(const gzFilename: WideString; const destDir: WideString; bNoAbsolute: Integer): Integer; safecall;
    function UncompressFile(const srcPath: WideString; const destPath: WideString): Integer; safecall;
    function UncompressFileToMem(const inFilename: WideString): OleVariant; safecall;
    function UncompressFileToString(const inFilename: WideString; const inCharset: WideString): WideString; safecall;
    function UncompressMemToFile(inData: OleVariant; const destPath: WideString): Integer; safecall;
    function UncompressMemory(inData: OleVariant): OleVariant; safecall;
    function UncompressString(inData: OleVariant; const inCharset: WideString): WideString; safecall;
    function UncompressStringENC(const strIn: WideString; const charset: WideString; 
                                 const encoding: WideString): WideString; safecall;
    function UnlockComponent(const unlockCode: WideString): Integer; safecall;
    function WriteFile(const path: WideString; binaryData: OleVariant): Integer; safecall;
    function XfdlToXml(const xfdl: WideString): WideString; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property Comment: WideString read Get_Comment write Set_Comment;
    property ExtraData: OleVariant read Get_ExtraData write Set_ExtraData;
    property filename: WideString read Get_filename write Set_filename;
    property HeartbeatMs: Integer read Get_HeartbeatMs write Set_HeartbeatMs;
    property LastMod: TDateTime read Get_LastMod write Set_LastMod;
    property LastModStr: WideString read Get_LastModStr write Set_LastModStr;
    property UseCurrentDate: Integer read Get_UseCurrentDate write Set_UseCurrentDate;
  end;

// *********************************************************************//
// DispIntf:  IChilkatGzipDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {409F23C5-B973-4611-93DD-8FE839BC5860}
// *********************************************************************//
  IChilkatGzipDisp = dispinterface
    ['{409F23C5-B973-4611-93DD-8FE839BC5860}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property Comment: WideString dispid 100;
    property ExtraData: OleVariant dispid 101;
    property filename: WideString dispid 102;
    property HeartbeatMs: Integer dispid 103;
    property LastMod: TDateTime dispid 104;
    property LastModStr: WideString dispid 105;
    property UseCurrentDate: Integer dispid 106;
    function CompressFile(const srcPath: WideString; const destPath: WideString): Integer; dispid 107;
    function CompressFile2(const srcPath: WideString; const embeddedFilename: WideString; 
                           const destPath: WideString): Integer; dispid 108;
    function CompressFileToMem(const inFilename: WideString): OleVariant; dispid 109;
    function CompressMemToFile(inData: OleVariant; const destPath: WideString): Integer; dispid 110;
    function CompressMemory(inData: OleVariant): OleVariant; dispid 111;
    function CompressString(const inStr: WideString; const destCharset: WideString): OleVariant; dispid 112;
    function CompressStringENC(const strIn: WideString; const charset: WideString; 
                               const encoding: WideString): WideString; dispid 113;
    function CompressStringToFile(const inStr: WideString; const destCharset: WideString; 
                                  const destPath: WideString): Integer; dispid 114;
    function Decode(const str: WideString; const encoding: WideString): OleVariant; dispid 115;
    function DeflateStringENC(const strIn: WideString; const charset: WideString; 
                              const encoding: WideString): WideString; dispid 116;
    function Encode(byteData: OleVariant; const encoding: WideString): WideString; dispid 117;
    function ExamineFile(const inGzPath: WideString): Integer; dispid 118;
    function ExamineMemory(inGzData: OleVariant): Integer; dispid 119;
    function GetDt: ICkDateTime; dispid 120;
    function InflateStringENC(const strIn: WideString; const charset: WideString; 
                              const encoding: WideString): WideString; dispid 121;
    function IsUnlocked: Integer; dispid 122;
    function ReadFile(const path: WideString): OleVariant; dispid 123;
    function SetDt(const dt: ICkDateTime): Integer; dispid 124;
    function UntarGz(const gzFilename: WideString; const destDir: WideString; bNoAbsolute: Integer): Integer; dispid 125;
    function UncompressFile(const srcPath: WideString; const destPath: WideString): Integer; dispid 126;
    function UncompressFileToMem(const inFilename: WideString): OleVariant; dispid 127;
    function UncompressFileToString(const inFilename: WideString; const inCharset: WideString): WideString; dispid 128;
    function UncompressMemToFile(inData: OleVariant; const destPath: WideString): Integer; dispid 129;
    function UncompressMemory(inData: OleVariant): OleVariant; dispid 130;
    function UncompressString(inData: OleVariant; const inCharset: WideString): WideString; dispid 131;
    function UncompressStringENC(const strIn: WideString; const charset: WideString; 
                                 const encoding: WideString): WideString; dispid 132;
    function UnlockComponent(const unlockCode: WideString): Integer; dispid 133;
    function WriteFile(const path: WideString; binaryData: OleVariant): Integer; dispid 134;
    function XfdlToXml(const xfdl: WideString): WideString; dispid 135;
  end;

// *********************************************************************//
// Interface: IChilkatFtp2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3A2BC588-F8E2-4BE3-A154-A3A99CF51E9F}
// *********************************************************************//
  IChilkatFtp2 = interface(IDispatch)
    ['{3A2BC588-F8E2-4BE3-A154-A3A99CF51E9F}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_Account: WideString; safecall;
    procedure Set_Account(const pVal: WideString); safecall;
    function Get_ActivePortRangeEnd: Integer; safecall;
    procedure Set_ActivePortRangeEnd(pVal: Integer); safecall;
    function Get_ActivePortRangeStart: Integer; safecall;
    procedure Set_ActivePortRangeStart(pVal: Integer); safecall;
    function Get_AllocateSize: Integer; safecall;
    procedure Set_AllocateSize(pVal: Integer); safecall;
    function Get_AsyncBytesReceived: Integer; safecall;
    function Get_AsyncBytesReceivedStr: WideString; safecall;
    function Get_AsyncBytesSent: Integer; safecall;
    function Get_AsyncBytesSentStr: WideString; safecall;
    function Get_AsyncFinished: Integer; safecall;
    function Get_AsyncLog: WideString; safecall;
    function Get_AsyncSuccess: Integer; safecall;
    function Get_AuthSsl: Integer; safecall;
    procedure Set_AuthSsl(pVal: Integer); safecall;
    function Get_AuthTls: Integer; safecall;
    procedure Set_AuthTls(pVal: Integer); safecall;
    function Get_AutoFeat: Integer; safecall;
    procedure Set_AutoFeat(pVal: Integer); safecall;
    function Get_AutoFix: Integer; safecall;
    procedure Set_AutoFix(pVal: Integer); safecall;
    function Get_AutoGetSizeForProgress: Integer; safecall;
    procedure Set_AutoGetSizeForProgress(pVal: Integer); safecall;
    function Get_AutoSyst: Integer; safecall;
    procedure Set_AutoSyst(pVal: Integer); safecall;
    function Get_AutoXcrc: Integer; safecall;
    procedure Set_AutoXcrc(pVal: Integer); safecall;
    function Get_BandwidthThrottleDown: Integer; safecall;
    procedure Set_BandwidthThrottleDown(pVal: Integer); safecall;
    function Get_BandwidthThrottleUp: Integer; safecall;
    procedure Set_BandwidthThrottleUp(pVal: Integer); safecall;
    function Get_ClientIpAddress: WideString; safecall;
    procedure Set_ClientIpAddress(const pVal: WideString); safecall;
    function Get_CommandCharset: WideString; safecall;
    procedure Set_CommandCharset(const pVal: WideString); safecall;
    function Get_ConnectFailReason: Integer; safecall;
    function Get_ConnectTimeout: Integer; safecall;
    procedure Set_ConnectTimeout(pVal: Integer); safecall;
    function Get_ConnectVerified: Integer; safecall;
    function Get_CrlfMode: Integer; safecall;
    procedure Set_CrlfMode(pVal: Integer); safecall;
    function Get_DirListingCharset: WideString; safecall;
    procedure Set_DirListingCharset(const pVal: WideString); safecall;
    function Get_DownloadTransferRate: Integer; safecall;
    function Get_ForcePortIpAddress: WideString; safecall;
    procedure Set_ForcePortIpAddress(const pVal: WideString); safecall;
    function Get_Greeting: WideString; safecall;
    function Get_HasModeZ: Integer; safecall;
    function Get_HeartbeatMs: Integer; safecall;
    procedure Set_HeartbeatMs(pVal: Integer); safecall;
    function Get_Hostname: WideString; safecall;
    procedure Set_Hostname(const pVal: WideString); safecall;
    function Get_HttpProxyAuthMethod: WideString; safecall;
    procedure Set_HttpProxyAuthMethod(const pVal: WideString); safecall;
    function Get_HttpProxyDomain: WideString; safecall;
    procedure Set_HttpProxyDomain(const pVal: WideString); safecall;
    function Get_HttpProxyHostname: WideString; safecall;
    procedure Set_HttpProxyHostname(const pVal: WideString); safecall;
    function Get_HttpProxyPassword: WideString; safecall;
    procedure Set_HttpProxyPassword(const pVal: WideString); safecall;
    function Get_HttpProxyPort: Integer; safecall;
    procedure Set_HttpProxyPort(pVal: Integer); safecall;
    function Get_HttpProxyUsername: WideString; safecall;
    procedure Set_HttpProxyUsername(const pVal: WideString); safecall;
    function Get_IdleTimeoutMs: Integer; safecall;
    procedure Set_IdleTimeoutMs(pVal: Integer); safecall;
    function Get_IsConnected: Integer; safecall;
    function Get_KeepSessionLog: Integer; safecall;
    procedure Set_KeepSessionLog(pVal: Integer); safecall;
    function Get_LastReply: WideString; safecall;
    function Get_ListPattern: WideString; safecall;
    procedure Set_ListPattern(const pVal: WideString); safecall;
    function Get_LoginVerified: Integer; safecall;
    function Get_NumFilesAndDirs: Integer; safecall;
    function Get_PartialTransfer: Integer; safecall;
    function Get_Passive: Integer; safecall;
    procedure Set_Passive(pVal: Integer); safecall;
    function Get_PassiveUseHostAddr: Integer; safecall;
    procedure Set_PassiveUseHostAddr(pVal: Integer); safecall;
    function Get_password: WideString; safecall;
    procedure Set_password(const pVal: WideString); safecall;
    function Get_Port: Integer; safecall;
    procedure Set_Port(pVal: Integer); safecall;
    function Get_PreferNlst: Integer; safecall;
    procedure Set_PreferNlst(pVal: Integer); safecall;
    function Get_ProgressMonSize: Integer; safecall;
    procedure Set_ProgressMonSize(pVal: Integer); safecall;
    function Get_ProxyHostname: WideString; safecall;
    procedure Set_ProxyHostname(const pVal: WideString); safecall;
    function Get_ProxyMethod: Integer; safecall;
    procedure Set_ProxyMethod(pVal: Integer); safecall;
    function Get_ProxyPassword: WideString; safecall;
    procedure Set_ProxyPassword(const pVal: WideString); safecall;
    function Get_ProxyPort: Integer; safecall;
    procedure Set_ProxyPort(pVal: Integer); safecall;
    function Get_ProxyUsername: WideString; safecall;
    procedure Set_ProxyUsername(const pVal: WideString); safecall;
    function Get_ReadTimeout: Integer; safecall;
    procedure Set_ReadTimeout(pVal: Integer); safecall;
    function Get_RequireSslCertVerify: Integer; safecall;
    procedure Set_RequireSslCertVerify(pVal: Integer); safecall;
    function Get_RestartNext: Integer; safecall;
    procedure Set_RestartNext(pVal: Integer); safecall;
    function Get_SendBufferSize: Integer; safecall;
    procedure Set_SendBufferSize(pVal: Integer); safecall;
    function Get_SessionLog: WideString; safecall;
    function Get_SkipFinalReply: Integer; safecall;
    procedure Set_SkipFinalReply(pVal: Integer); safecall;
    function Get_SoRcvBuf: Integer; safecall;
    procedure Set_SoRcvBuf(pVal: Integer); safecall;
    function Get_SoSndBuf: Integer; safecall;
    procedure Set_SoSndBuf(pVal: Integer); safecall;
    function Get_SocksHostname: WideString; safecall;
    procedure Set_SocksHostname(const pVal: WideString); safecall;
    function Get_SocksPassword: WideString; safecall;
    procedure Set_SocksPassword(const pVal: WideString); safecall;
    function Get_SocksPort: Integer; safecall;
    procedure Set_SocksPort(pVal: Integer); safecall;
    function Get_SocksUsername: WideString; safecall;
    procedure Set_SocksUsername(const pVal: WideString); safecall;
    function Get_SocksVersion: Integer; safecall;
    procedure Set_SocksVersion(pVal: Integer); safecall;
    function Get_Ssl: Integer; safecall;
    procedure Set_Ssl(pVal: Integer); safecall;
    function Get_SslProtocol: WideString; safecall;
    procedure Set_SslProtocol(const pVal: WideString); safecall;
    function Get_SslServerCertVerified: Integer; safecall;
    function Get_SyncPreview: WideString; safecall;
    function Get_UploadTransferRate: Integer; safecall;
    function Get_UseEpsv: Integer; safecall;
    procedure Set_UseEpsv(pVal: Integer); safecall;
    function Get_UserName: WideString; safecall;
    procedure Set_UserName(const pVal: WideString); safecall;
    function Get_SyncMustMatch: WideString; safecall;
    procedure Set_SyncMustMatch(const pVal: WideString); safecall;
    function Get_SyncMustNotMatch: WideString; safecall;
    procedure Set_SyncMustNotMatch(const pVal: WideString); safecall;
    function Get_PreferIpv6: Integer; safecall;
    procedure Set_PreferIpv6(pVal: Integer); safecall;
    function Get_AsyncPercentDone: Integer; safecall;
    function AppendFile(const localFilename: WideString; const remoteFilename: WideString): Integer; safecall;
    function AppendFileFromBinaryData(const remoteFilename: WideString; Content: OleVariant): Integer; safecall;
    function AppendFileFromTextData(const remoteFilename: WideString; const textData: WideString; 
                                    const charset: WideString): Integer; safecall;
    procedure AsyncAbort; safecall;
    function AsyncAppendFileStart(const localFilename: WideString; const remoteFilename: WideString): Integer; safecall;
    function AsyncGetFileStart(const remoteFilename: WideString; const localFilename: WideString): Integer; safecall;
    function AsyncPutFileStart(const localFilename: WideString; const remoteFilename: WideString): Integer; safecall;
    function ChangeRemoteDir(const relativeDirPath: WideString): Integer; safecall;
    function ClearControlChannel: Integer; safecall;
    procedure ClearDirCache; safecall;
    procedure ClearSessionLog; safecall;
    function Connect: Integer; safecall;
    function ConnectOnly: Integer; safecall;
    function ConvertToTls: Integer; safecall;
    function CreatePlan(const localDir: WideString): WideString; safecall;
    function CreateRemoteDir(const dir: WideString): Integer; safecall;
    function DeleteMatching(const remotePattern: WideString): Integer; safecall;
    function DeleteRemoteFile(const filename: WideString): Integer; safecall;
    function DeleteTree: Integer; safecall;
    function DetermineProxyMethod: Integer; safecall;
    function DetermineSettings: WideString; safecall;
    function DirTreeXml: WideString; safecall;
    function Disconnect: Integer; safecall;
    function DownloadTree(const localRoot: WideString): Integer; safecall;
    function Feat: WideString; safecall;
    function GetCreateDt(index: Integer): ICkDateTime; safecall;
    function GetCreateDtByName(const filename: WideString): ICkDateTime; safecall;
    function GetCreateTime(index: Integer): TDateTime; safecall;
    function GetCreateTimeByName(const filename: WideString): TDateTime; safecall;
    function GetCreateTimeByNameStr(const filename: WideString): WideString; safecall;
    function GetCreateTimeStr(index: Integer): WideString; safecall;
    function GetCurrentRemoteDir: WideString; safecall;
    function GetFile(const remoteFilename: WideString; const localFilename: WideString): Integer; safecall;
    function GetFilename(index: Integer): WideString; safecall;
    function GetIsDirectory(index: Integer): Integer; safecall;
    function GetIsSymbolicLink(index: Integer): Integer; safecall;
    function GetLastAccessDt(index: Integer): ICkDateTime; safecall;
    function GetLastAccessDtByName(const filename: WideString): ICkDateTime; safecall;
    function GetLastAccessTime(index: Integer): TDateTime; safecall;
    function GetLastAccessTimeByName(const filename: WideString): TDateTime; safecall;
    function GetLastAccessTimeByNameStr(const filename: WideString): WideString; safecall;
    function GetLastAccessTimeStr(index: Integer): WideString; safecall;
    function GetLastModDt(index: Integer): ICkDateTime; safecall;
    function GetLastModDtByName(const filename: WideString): ICkDateTime; safecall;
    function GetLastModifiedTime(index: Integer): TDateTime; safecall;
    function GetLastModifiedTimeByName(const filename: WideString): TDateTime; safecall;
    function GetLastModifiedTimeByNameStr(const filename: WideString): WideString; safecall;
    function GetLastModifiedTimeStr(index: Integer): WideString; safecall;
    function GetRemoteFileBinaryData(const remoteFilename: WideString): OleVariant; safecall;
    function GetRemoteFileTextC(const remoteFilename: WideString; const charset: WideString): WideString; safecall;
    function GetRemoteFileTextData(const remoteFilename: WideString): WideString; safecall;
    function GetSize(index: Integer): Integer; safecall;
    function GetSizeByName(const filename: WideString): Integer; safecall;
    function GetSizeStr(index: Integer): WideString; safecall;
    function GetSizeStrByName(const filename: WideString): WideString; safecall;
    function GetSslServerCert: IChilkatCert; safecall;
    function GetTextDirListing(const pattern: WideString): WideString; safecall;
    function GetXmlDirListing(const pattern: WideString): WideString; safecall;
    function IsUnlocked: Integer; safecall;
    function LoginAfterConnectOnly: Integer; safecall;
    function MGetFiles(const remotePattern: WideString; const localDir: WideString): Integer; safecall;
    function MPutFiles(const pattern: WideString): Integer; safecall;
    function NlstXml(const pattern: WideString): WideString; safecall;
    function Noop: Integer; safecall;
    function PutFile(const localFilename: WideString; const remoteFilename: WideString): Integer; safecall;
    function PutFileFromBinaryData(const remoteFilename: WideString; Content: OleVariant): Integer; safecall;
    function PutFileFromTextData(const remoteFilename: WideString; const textData: WideString; 
                                 const charset: WideString): Integer; safecall;
    function PutPlan(const plan: WideString; const alreadyDoneFilename: WideString): Integer; safecall;
    function PutTree(const localDir: WideString): Integer; safecall;
    function Quote(const cmd: WideString): Integer; safecall;
    function RemoveRemoteDir(const dir: WideString): Integer; safecall;
    function RenameRemoteFile(const existingFilename: WideString; const newFilename: WideString): Integer; safecall;
    function SendCommand(const cmd: WideString): WideString; safecall;
    function SetModeZ: Integer; safecall;
    procedure SetOldestDate(oldestDateTime: TDateTime); safecall;
    procedure SetOldestDateStr(const oldestDateTimeStr: WideString); safecall;
    function SetRemoteFileDateTime(dt: TDateTime; const remoteFilename: WideString): Integer; safecall;
    function SetRemoteFileDateTimeStr(const dateTimeStr: WideString; 
                                      const remoteFilename: WideString): Integer; safecall;
    function SetRemoteFileDt(const dt: ICkDateTime; const remoteFilename: WideString): Integer; safecall;
    procedure SetSslCertRequirement(const name: WideString; const value: WideString); safecall;
    function SetSslClientCert(const cert: IChilkatCert): Integer; safecall;
    function SetSslClientCertPem(const pemDataOrFilename: WideString; const pemPassword: WideString): Integer; safecall;
    function SetSslClientCertPfx(const pfxFilename: WideString; const pfxPassword: WideString): Integer; safecall;
    function SetTypeAscii: Integer; safecall;
    function SetTypeBinary: Integer; safecall;
    function Site(const siteCommand: WideString): Integer; safecall;
    procedure SleepMs(millisec: Integer); safecall;
    function Stat: WideString; safecall;
    function SyncDeleteRemote(const localRoot: WideString): Integer; safecall;
    function SyncLocalDir(const localRoot: WideString; mode: Integer): Integer; safecall;
    function SyncLocalTree(const localRoot: WideString; mode: Integer): Integer; safecall;
    function SyncRemoteTree(const localRoot: WideString; mode: Integer): Integer; safecall;
    function SyncRemoteTree2(const localRoot: WideString; mode: Integer; bDescend: Integer; 
                             bPreviewOnly: Integer): Integer; safecall;
    function Syst: WideString; safecall;
    function UnlockComponent(const unlockCode: WideString): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property Account: WideString read Get_Account write Set_Account;
    property ActivePortRangeEnd: Integer read Get_ActivePortRangeEnd write Set_ActivePortRangeEnd;
    property ActivePortRangeStart: Integer read Get_ActivePortRangeStart write Set_ActivePortRangeStart;
    property AllocateSize: Integer read Get_AllocateSize write Set_AllocateSize;
    property AsyncBytesReceived: Integer read Get_AsyncBytesReceived;
    property AsyncBytesReceivedStr: WideString read Get_AsyncBytesReceivedStr;
    property AsyncBytesSent: Integer read Get_AsyncBytesSent;
    property AsyncBytesSentStr: WideString read Get_AsyncBytesSentStr;
    property AsyncFinished: Integer read Get_AsyncFinished;
    property AsyncLog: WideString read Get_AsyncLog;
    property AsyncSuccess: Integer read Get_AsyncSuccess;
    property AuthSsl: Integer read Get_AuthSsl write Set_AuthSsl;
    property AuthTls: Integer read Get_AuthTls write Set_AuthTls;
    property AutoFeat: Integer read Get_AutoFeat write Set_AutoFeat;
    property AutoFix: Integer read Get_AutoFix write Set_AutoFix;
    property AutoGetSizeForProgress: Integer read Get_AutoGetSizeForProgress write Set_AutoGetSizeForProgress;
    property AutoSyst: Integer read Get_AutoSyst write Set_AutoSyst;
    property AutoXcrc: Integer read Get_AutoXcrc write Set_AutoXcrc;
    property BandwidthThrottleDown: Integer read Get_BandwidthThrottleDown write Set_BandwidthThrottleDown;
    property BandwidthThrottleUp: Integer read Get_BandwidthThrottleUp write Set_BandwidthThrottleUp;
    property ClientIpAddress: WideString read Get_ClientIpAddress write Set_ClientIpAddress;
    property CommandCharset: WideString read Get_CommandCharset write Set_CommandCharset;
    property ConnectFailReason: Integer read Get_ConnectFailReason;
    property ConnectTimeout: Integer read Get_ConnectTimeout write Set_ConnectTimeout;
    property ConnectVerified: Integer read Get_ConnectVerified;
    property CrlfMode: Integer read Get_CrlfMode write Set_CrlfMode;
    property DirListingCharset: WideString read Get_DirListingCharset write Set_DirListingCharset;
    property DownloadTransferRate: Integer read Get_DownloadTransferRate;
    property ForcePortIpAddress: WideString read Get_ForcePortIpAddress write Set_ForcePortIpAddress;
    property Greeting: WideString read Get_Greeting;
    property HasModeZ: Integer read Get_HasModeZ;
    property HeartbeatMs: Integer read Get_HeartbeatMs write Set_HeartbeatMs;
    property Hostname: WideString read Get_Hostname write Set_Hostname;
    property HttpProxyAuthMethod: WideString read Get_HttpProxyAuthMethod write Set_HttpProxyAuthMethod;
    property HttpProxyDomain: WideString read Get_HttpProxyDomain write Set_HttpProxyDomain;
    property HttpProxyHostname: WideString read Get_HttpProxyHostname write Set_HttpProxyHostname;
    property HttpProxyPassword: WideString read Get_HttpProxyPassword write Set_HttpProxyPassword;
    property HttpProxyPort: Integer read Get_HttpProxyPort write Set_HttpProxyPort;
    property HttpProxyUsername: WideString read Get_HttpProxyUsername write Set_HttpProxyUsername;
    property IdleTimeoutMs: Integer read Get_IdleTimeoutMs write Set_IdleTimeoutMs;
    property IsConnected: Integer read Get_IsConnected;
    property KeepSessionLog: Integer read Get_KeepSessionLog write Set_KeepSessionLog;
    property LastReply: WideString read Get_LastReply;
    property ListPattern: WideString read Get_ListPattern write Set_ListPattern;
    property LoginVerified: Integer read Get_LoginVerified;
    property NumFilesAndDirs: Integer read Get_NumFilesAndDirs;
    property PartialTransfer: Integer read Get_PartialTransfer;
    property Passive: Integer read Get_Passive write Set_Passive;
    property PassiveUseHostAddr: Integer read Get_PassiveUseHostAddr write Set_PassiveUseHostAddr;
    property password: WideString read Get_password write Set_password;
    property Port: Integer read Get_Port write Set_Port;
    property PreferNlst: Integer read Get_PreferNlst write Set_PreferNlst;
    property ProgressMonSize: Integer read Get_ProgressMonSize write Set_ProgressMonSize;
    property ProxyHostname: WideString read Get_ProxyHostname write Set_ProxyHostname;
    property ProxyMethod: Integer read Get_ProxyMethod write Set_ProxyMethod;
    property ProxyPassword: WideString read Get_ProxyPassword write Set_ProxyPassword;
    property ProxyPort: Integer read Get_ProxyPort write Set_ProxyPort;
    property ProxyUsername: WideString read Get_ProxyUsername write Set_ProxyUsername;
    property ReadTimeout: Integer read Get_ReadTimeout write Set_ReadTimeout;
    property RequireSslCertVerify: Integer read Get_RequireSslCertVerify write Set_RequireSslCertVerify;
    property RestartNext: Integer read Get_RestartNext write Set_RestartNext;
    property SendBufferSize: Integer read Get_SendBufferSize write Set_SendBufferSize;
    property SessionLog: WideString read Get_SessionLog;
    property SkipFinalReply: Integer read Get_SkipFinalReply write Set_SkipFinalReply;
    property SoRcvBuf: Integer read Get_SoRcvBuf write Set_SoRcvBuf;
    property SoSndBuf: Integer read Get_SoSndBuf write Set_SoSndBuf;
    property SocksHostname: WideString read Get_SocksHostname write Set_SocksHostname;
    property SocksPassword: WideString read Get_SocksPassword write Set_SocksPassword;
    property SocksPort: Integer read Get_SocksPort write Set_SocksPort;
    property SocksUsername: WideString read Get_SocksUsername write Set_SocksUsername;
    property SocksVersion: Integer read Get_SocksVersion write Set_SocksVersion;
    property Ssl: Integer read Get_Ssl write Set_Ssl;
    property SslProtocol: WideString read Get_SslProtocol write Set_SslProtocol;
    property SslServerCertVerified: Integer read Get_SslServerCertVerified;
    property SyncPreview: WideString read Get_SyncPreview;
    property UploadTransferRate: Integer read Get_UploadTransferRate;
    property UseEpsv: Integer read Get_UseEpsv write Set_UseEpsv;
    property UserName: WideString read Get_UserName write Set_UserName;
    property SyncMustMatch: WideString read Get_SyncMustMatch write Set_SyncMustMatch;
    property SyncMustNotMatch: WideString read Get_SyncMustNotMatch write Set_SyncMustNotMatch;
    property PreferIpv6: Integer read Get_PreferIpv6 write Set_PreferIpv6;
    property AsyncPercentDone: Integer read Get_AsyncPercentDone;
  end;

// *********************************************************************//
// DispIntf:  IChilkatFtp2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3A2BC588-F8E2-4BE3-A154-A3A99CF51E9F}
// *********************************************************************//
  IChilkatFtp2Disp = dispinterface
    ['{3A2BC588-F8E2-4BE3-A154-A3A99CF51E9F}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property Account: WideString dispid 100;
    property ActivePortRangeEnd: Integer dispid 101;
    property ActivePortRangeStart: Integer dispid 102;
    property AllocateSize: Integer dispid 103;
    property AsyncBytesReceived: Integer readonly dispid 104;
    property AsyncBytesReceivedStr: WideString readonly dispid 105;
    property AsyncBytesSent: Integer readonly dispid 106;
    property AsyncBytesSentStr: WideString readonly dispid 107;
    property AsyncFinished: Integer readonly dispid 108;
    property AsyncLog: WideString readonly dispid 109;
    property AsyncSuccess: Integer readonly dispid 110;
    property AuthSsl: Integer dispid 111;
    property AuthTls: Integer dispid 112;
    property AutoFeat: Integer dispid 113;
    property AutoFix: Integer dispid 114;
    property AutoGetSizeForProgress: Integer dispid 115;
    property AutoSyst: Integer dispid 116;
    property AutoXcrc: Integer dispid 117;
    property BandwidthThrottleDown: Integer dispid 118;
    property BandwidthThrottleUp: Integer dispid 119;
    property ClientIpAddress: WideString dispid 120;
    property CommandCharset: WideString dispid 121;
    property ConnectFailReason: Integer readonly dispid 122;
    property ConnectTimeout: Integer dispid 123;
    property ConnectVerified: Integer readonly dispid 124;
    property CrlfMode: Integer dispid 125;
    property DirListingCharset: WideString dispid 126;
    property DownloadTransferRate: Integer readonly dispid 127;
    property ForcePortIpAddress: WideString dispid 128;
    property Greeting: WideString readonly dispid 129;
    property HasModeZ: Integer readonly dispid 130;
    property HeartbeatMs: Integer dispid 131;
    property Hostname: WideString dispid 132;
    property HttpProxyAuthMethod: WideString dispid 133;
    property HttpProxyDomain: WideString dispid 134;
    property HttpProxyHostname: WideString dispid 135;
    property HttpProxyPassword: WideString dispid 136;
    property HttpProxyPort: Integer dispid 137;
    property HttpProxyUsername: WideString dispid 138;
    property IdleTimeoutMs: Integer dispid 139;
    property IsConnected: Integer readonly dispid 140;
    property KeepSessionLog: Integer dispid 141;
    property LastReply: WideString readonly dispid 142;
    property ListPattern: WideString dispid 143;
    property LoginVerified: Integer readonly dispid 144;
    property NumFilesAndDirs: Integer readonly dispid 145;
    property PartialTransfer: Integer readonly dispid 146;
    property Passive: Integer dispid 147;
    property PassiveUseHostAddr: Integer dispid 148;
    property password: WideString dispid 149;
    property Port: Integer dispid 150;
    property PreferNlst: Integer dispid 151;
    property ProgressMonSize: Integer dispid 152;
    property ProxyHostname: WideString dispid 153;
    property ProxyMethod: Integer dispid 154;
    property ProxyPassword: WideString dispid 155;
    property ProxyPort: Integer dispid 156;
    property ProxyUsername: WideString dispid 157;
    property ReadTimeout: Integer dispid 158;
    property RequireSslCertVerify: Integer dispid 159;
    property RestartNext: Integer dispid 160;
    property SendBufferSize: Integer dispid 161;
    property SessionLog: WideString readonly dispid 162;
    property SkipFinalReply: Integer dispid 163;
    property SoRcvBuf: Integer dispid 164;
    property SoSndBuf: Integer dispid 165;
    property SocksHostname: WideString dispid 166;
    property SocksPassword: WideString dispid 167;
    property SocksPort: Integer dispid 168;
    property SocksUsername: WideString dispid 169;
    property SocksVersion: Integer dispid 170;
    property Ssl: Integer dispid 171;
    property SslProtocol: WideString dispid 172;
    property SslServerCertVerified: Integer readonly dispid 173;
    property SyncPreview: WideString readonly dispid 174;
    property UploadTransferRate: Integer readonly dispid 175;
    property UseEpsv: Integer dispid 176;
    property UserName: WideString dispid 177;
    property SyncMustMatch: WideString dispid 275;
    property SyncMustNotMatch: WideString dispid 276;
    property PreferIpv6: Integer dispid 277;
    property AsyncPercentDone: Integer readonly dispid 278;
    function AppendFile(const localFilename: WideString; const remoteFilename: WideString): Integer; dispid 180;
    function AppendFileFromBinaryData(const remoteFilename: WideString; Content: OleVariant): Integer; dispid 181;
    function AppendFileFromTextData(const remoteFilename: WideString; const textData: WideString; 
                                    const charset: WideString): Integer; dispid 182;
    procedure AsyncAbort; dispid 183;
    function AsyncAppendFileStart(const localFilename: WideString; const remoteFilename: WideString): Integer; dispid 184;
    function AsyncGetFileStart(const remoteFilename: WideString; const localFilename: WideString): Integer; dispid 185;
    function AsyncPutFileStart(const localFilename: WideString; const remoteFilename: WideString): Integer; dispid 186;
    function ChangeRemoteDir(const relativeDirPath: WideString): Integer; dispid 187;
    function ClearControlChannel: Integer; dispid 188;
    procedure ClearDirCache; dispid 189;
    procedure ClearSessionLog; dispid 190;
    function Connect: Integer; dispid 191;
    function ConnectOnly: Integer; dispid 192;
    function ConvertToTls: Integer; dispid 193;
    function CreatePlan(const localDir: WideString): WideString; dispid 194;
    function CreateRemoteDir(const dir: WideString): Integer; dispid 195;
    function DeleteMatching(const remotePattern: WideString): Integer; dispid 196;
    function DeleteRemoteFile(const filename: WideString): Integer; dispid 197;
    function DeleteTree: Integer; dispid 198;
    function DetermineProxyMethod: Integer; dispid 199;
    function DetermineSettings: WideString; dispid 200;
    function DirTreeXml: WideString; dispid 201;
    function Disconnect: Integer; dispid 202;
    function DownloadTree(const localRoot: WideString): Integer; dispid 203;
    function Feat: WideString; dispid 204;
    function GetCreateDt(index: Integer): ICkDateTime; dispid 205;
    function GetCreateDtByName(const filename: WideString): ICkDateTime; dispid 206;
    function GetCreateTime(index: Integer): TDateTime; dispid 207;
    function GetCreateTimeByName(const filename: WideString): TDateTime; dispid 208;
    function GetCreateTimeByNameStr(const filename: WideString): WideString; dispid 209;
    function GetCreateTimeStr(index: Integer): WideString; dispid 210;
    function GetCurrentRemoteDir: WideString; dispid 211;
    function GetFile(const remoteFilename: WideString; const localFilename: WideString): Integer; dispid 212;
    function GetFilename(index: Integer): WideString; dispid 213;
    function GetIsDirectory(index: Integer): Integer; dispid 214;
    function GetIsSymbolicLink(index: Integer): Integer; dispid 215;
    function GetLastAccessDt(index: Integer): ICkDateTime; dispid 216;
    function GetLastAccessDtByName(const filename: WideString): ICkDateTime; dispid 217;
    function GetLastAccessTime(index: Integer): TDateTime; dispid 218;
    function GetLastAccessTimeByName(const filename: WideString): TDateTime; dispid 219;
    function GetLastAccessTimeByNameStr(const filename: WideString): WideString; dispid 220;
    function GetLastAccessTimeStr(index: Integer): WideString; dispid 221;
    function GetLastModDt(index: Integer): ICkDateTime; dispid 222;
    function GetLastModDtByName(const filename: WideString): ICkDateTime; dispid 223;
    function GetLastModifiedTime(index: Integer): TDateTime; dispid 224;
    function GetLastModifiedTimeByName(const filename: WideString): TDateTime; dispid 225;
    function GetLastModifiedTimeByNameStr(const filename: WideString): WideString; dispid 226;
    function GetLastModifiedTimeStr(index: Integer): WideString; dispid 227;
    function GetRemoteFileBinaryData(const remoteFilename: WideString): OleVariant; dispid 228;
    function GetRemoteFileTextC(const remoteFilename: WideString; const charset: WideString): WideString; dispid 229;
    function GetRemoteFileTextData(const remoteFilename: WideString): WideString; dispid 230;
    function GetSize(index: Integer): Integer; dispid 231;
    function GetSizeByName(const filename: WideString): Integer; dispid 232;
    function GetSizeStr(index: Integer): WideString; dispid 233;
    function GetSizeStrByName(const filename: WideString): WideString; dispid 234;
    function GetSslServerCert: IChilkatCert; dispid 235;
    function GetTextDirListing(const pattern: WideString): WideString; dispid 236;
    function GetXmlDirListing(const pattern: WideString): WideString; dispid 237;
    function IsUnlocked: Integer; dispid 238;
    function LoginAfterConnectOnly: Integer; dispid 239;
    function MGetFiles(const remotePattern: WideString; const localDir: WideString): Integer; dispid 240;
    function MPutFiles(const pattern: WideString): Integer; dispid 241;
    function NlstXml(const pattern: WideString): WideString; dispid 242;
    function Noop: Integer; dispid 243;
    function PutFile(const localFilename: WideString; const remoteFilename: WideString): Integer; dispid 244;
    function PutFileFromBinaryData(const remoteFilename: WideString; Content: OleVariant): Integer; dispid 245;
    function PutFileFromTextData(const remoteFilename: WideString; const textData: WideString; 
                                 const charset: WideString): Integer; dispid 246;
    function PutPlan(const plan: WideString; const alreadyDoneFilename: WideString): Integer; dispid 247;
    function PutTree(const localDir: WideString): Integer; dispid 248;
    function Quote(const cmd: WideString): Integer; dispid 249;
    function RemoveRemoteDir(const dir: WideString): Integer; dispid 250;
    function RenameRemoteFile(const existingFilename: WideString; const newFilename: WideString): Integer; dispid 251;
    function SendCommand(const cmd: WideString): WideString; dispid 252;
    function SetModeZ: Integer; dispid 253;
    procedure SetOldestDate(oldestDateTime: TDateTime); dispid 254;
    procedure SetOldestDateStr(const oldestDateTimeStr: WideString); dispid 255;
    function SetRemoteFileDateTime(dt: TDateTime; const remoteFilename: WideString): Integer; dispid 256;
    function SetRemoteFileDateTimeStr(const dateTimeStr: WideString; 
                                      const remoteFilename: WideString): Integer; dispid 257;
    function SetRemoteFileDt(const dt: ICkDateTime; const remoteFilename: WideString): Integer; dispid 258;
    procedure SetSslCertRequirement(const name: WideString; const value: WideString); dispid 259;
    function SetSslClientCert(const cert: IChilkatCert): Integer; dispid 260;
    function SetSslClientCertPem(const pemDataOrFilename: WideString; const pemPassword: WideString): Integer; dispid 261;
    function SetSslClientCertPfx(const pfxFilename: WideString; const pfxPassword: WideString): Integer; dispid 262;
    function SetTypeAscii: Integer; dispid 263;
    function SetTypeBinary: Integer; dispid 264;
    function Site(const siteCommand: WideString): Integer; dispid 265;
    procedure SleepMs(millisec: Integer); dispid 266;
    function Stat: WideString; dispid 267;
    function SyncDeleteRemote(const localRoot: WideString): Integer; dispid 268;
    function SyncLocalDir(const localRoot: WideString; mode: Integer): Integer; dispid 269;
    function SyncLocalTree(const localRoot: WideString; mode: Integer): Integer; dispid 270;
    function SyncRemoteTree(const localRoot: WideString; mode: Integer): Integer; dispid 271;
    function SyncRemoteTree2(const localRoot: WideString; mode: Integer; bDescend: Integer; 
                             bPreviewOnly: Integer): Integer; dispid 272;
    function Syst: WideString; dispid 273;
    function UnlockComponent(const unlockCode: WideString): Integer; dispid 274;
  end;

// *********************************************************************//
// Interface: ICkFileAccess
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {CDA20F7F-7E23-471E-82E6-7609EE84CD54}
// *********************************************************************//
  ICkFileAccess = interface(IDispatch)
    ['{CDA20F7F-7E23-471E-82E6-7609EE84CD54}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_EndOfFile: Integer; safecall;
    function Get_FileOpenError: Integer; safecall;
    function Get_FileOpenErrorMsg: WideString; safecall;
    function Get_CurrentDir: WideString; safecall;
    function AppendAnsi(const text: WideString): Integer; safecall;
    function AppendText(const text: WideString; const charset: WideString): Integer; safecall;
    function AppendUnicodeBOM: Integer; safecall;
    function AppendUtf8BOM: Integer; safecall;
    function DirAutoCreate(const path: WideString): Integer; safecall;
    function DirCreate(const path: WideString): Integer; safecall;
    function DirDelete(const path: WideString): Integer; safecall;
    function DirEnsureExists(const filePath: WideString): Integer; safecall;
    procedure FileClose; safecall;
    function FileContentsEqual(const path1: WideString; const path2: WideString): Integer; safecall;
    function FileCopy(const existing: WideString; const newFilename: WideString; 
                      failIfExists: Integer): Integer; safecall;
    function FileDelete(const filename: WideString): Integer; safecall;
    function FileExists(const filename: WideString): Integer; safecall;
    function FileOpen(const filename: WideString; accessMode: Integer; shareMode: Integer; 
                      createDisp: Integer; attr: Integer): Integer; safecall;
    function FileRead(numBytes: Integer): OleVariant; safecall;
    function FileRename(const existing: WideString; const newFilename: WideString): Integer; safecall;
    function FileSeek(offset: Integer; origin: Integer): Integer; safecall;
    function fileSize(const filename: WideString): Integer; safecall;
    function FileWrite(data: OleVariant): Integer; safecall;
    function GetTempFilename(const dirName: WideString; const prefix: WideString): WideString; safecall;
    function OpenForAppend(const filePath: WideString): Integer; safecall;
    function OpenForRead(const filePath: WideString): Integer; safecall;
    function OpenForReadWrite(const filePath: WideString): Integer; safecall;
    function OpenForWrite(const filePath: WideString): Integer; safecall;
    function ReadBinaryToEncoded(const filename: WideString; const encoding: WideString): WideString; safecall;
    function ReadEntireFile(const filename: WideString): OleVariant; safecall;
    function ReadEntireTextFile(const filename: WideString; const charset: WideString): WideString; safecall;
    function ReassembleFile(const partsDirPath: WideString; const partPrefix: WideString; 
                            const partExtension: WideString; const reassembledFilename: WideString): Integer; safecall;
    function ReplaceStrings(const path: WideString; const charset: WideString; 
                            const existingString: WideString; const replacementString: WideString): Integer; safecall;
    function SetCurrentDir(const path: WideString): Integer; safecall;
    function SetFileTimes(const path: WideString; const create: ICkDateTime; 
                          const lastAccess: ICkDateTime; const lastModified: ICkDateTime): Integer; safecall;
    function SetLastModified(const path: WideString; const lastModified: ICkDateTime): Integer; safecall;
    function SplitFile(const fileToSplit: WideString; const partPrefix: WideString; 
                       const partExtension: WideString; partSize: Integer; const destDir: WideString): Integer; safecall;
    function TreeDelete(const path: WideString): Integer; safecall;
    function WriteEntireFile(const filename: WideString; fileData: OleVariant): Integer; safecall;
    function WriteEntireTextFile(const filename: WideString; const fileData: WideString; 
                                 const charset: WideString; includePreamble: Integer): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property EndOfFile: Integer read Get_EndOfFile;
    property FileOpenError: Integer read Get_FileOpenError;
    property FileOpenErrorMsg: WideString read Get_FileOpenErrorMsg;
    property CurrentDir: WideString read Get_CurrentDir;
  end;

// *********************************************************************//
// DispIntf:  ICkFileAccessDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {CDA20F7F-7E23-471E-82E6-7609EE84CD54}
// *********************************************************************//
  ICkFileAccessDisp = dispinterface
    ['{CDA20F7F-7E23-471E-82E6-7609EE84CD54}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property EndOfFile: Integer readonly dispid 100;
    property FileOpenError: Integer readonly dispid 101;
    property FileOpenErrorMsg: WideString readonly dispid 102;
    property CurrentDir: WideString readonly dispid 103;
    function AppendAnsi(const text: WideString): Integer; dispid 104;
    function AppendText(const text: WideString; const charset: WideString): Integer; dispid 105;
    function AppendUnicodeBOM: Integer; dispid 106;
    function AppendUtf8BOM: Integer; dispid 107;
    function DirAutoCreate(const path: WideString): Integer; dispid 108;
    function DirCreate(const path: WideString): Integer; dispid 109;
    function DirDelete(const path: WideString): Integer; dispid 110;
    function DirEnsureExists(const filePath: WideString): Integer; dispid 111;
    procedure FileClose; dispid 112;
    function FileContentsEqual(const path1: WideString; const path2: WideString): Integer; dispid 113;
    function FileCopy(const existing: WideString; const newFilename: WideString; 
                      failIfExists: Integer): Integer; dispid 114;
    function FileDelete(const filename: WideString): Integer; dispid 115;
    function FileExists(const filename: WideString): Integer; dispid 116;
    function FileOpen(const filename: WideString; accessMode: Integer; shareMode: Integer; 
                      createDisp: Integer; attr: Integer): Integer; dispid 117;
    function FileRead(numBytes: Integer): OleVariant; dispid 118;
    function FileRename(const existing: WideString; const newFilename: WideString): Integer; dispid 119;
    function FileSeek(offset: Integer; origin: Integer): Integer; dispid 120;
    function fileSize(const filename: WideString): Integer; dispid 121;
    function FileWrite(data: OleVariant): Integer; dispid 122;
    function GetTempFilename(const dirName: WideString; const prefix: WideString): WideString; dispid 123;
    function OpenForAppend(const filePath: WideString): Integer; dispid 124;
    function OpenForRead(const filePath: WideString): Integer; dispid 125;
    function OpenForReadWrite(const filePath: WideString): Integer; dispid 126;
    function OpenForWrite(const filePath: WideString): Integer; dispid 127;
    function ReadBinaryToEncoded(const filename: WideString; const encoding: WideString): WideString; dispid 128;
    function ReadEntireFile(const filename: WideString): OleVariant; dispid 129;
    function ReadEntireTextFile(const filename: WideString; const charset: WideString): WideString; dispid 130;
    function ReassembleFile(const partsDirPath: WideString; const partPrefix: WideString; 
                            const partExtension: WideString; const reassembledFilename: WideString): Integer; dispid 131;
    function ReplaceStrings(const path: WideString; const charset: WideString; 
                            const existingString: WideString; const replacementString: WideString): Integer; dispid 132;
    function SetCurrentDir(const path: WideString): Integer; dispid 133;
    function SetFileTimes(const path: WideString; const create: ICkDateTime; 
                          const lastAccess: ICkDateTime; const lastModified: ICkDateTime): Integer; dispid 134;
    function SetLastModified(const path: WideString; const lastModified: ICkDateTime): Integer; dispid 135;
    function SplitFile(const fileToSplit: WideString; const partPrefix: WideString; 
                       const partExtension: WideString; partSize: Integer; const destDir: WideString): Integer; dispid 136;
    function TreeDelete(const path: WideString): Integer; dispid 137;
    function WriteEntireFile(const filename: WideString; fileData: OleVariant): Integer; dispid 138;
    function WriteEntireTextFile(const filename: WideString; const fileData: WideString; 
                                 const charset: WideString; includePreamble: Integer): Integer; dispid 139;
  end;

// *********************************************************************//
// Interface: IDtObj
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1ACAAAB7-E818-41AE-AF3F-8F6911A91467}
// *********************************************************************//
  IDtObj = interface(IDispatch)
    ['{1ACAAAB7-E818-41AE-AF3F-8F6911A91467}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_Day: Integer; safecall;
    procedure Set_Day(pVal: Integer); safecall;
    function Get_Hour: Integer; safecall;
    procedure Set_Hour(pVal: Integer); safecall;
    function Get_Minute: Integer; safecall;
    procedure Set_Minute(pVal: Integer); safecall;
    function Get_Month: Integer; safecall;
    procedure Set_Month(pVal: Integer); safecall;
    function Get_Second: Integer; safecall;
    procedure Set_Second(pVal: Integer); safecall;
    function Get_StructTmMonth: Integer; safecall;
    procedure Set_StructTmMonth(pVal: Integer); safecall;
    function Get_StructTmYear: Integer; safecall;
    procedure Set_StructTmYear(pVal: Integer); safecall;
    function Get_Utc: Integer; safecall;
    procedure Set_Utc(pVal: Integer); safecall;
    function Get_Year: Integer; safecall;
    procedure Set_Year(pVal: Integer); safecall;
    function Serialize: WideString; safecall;
    procedure DeSerialize(const serializedDtObj: WideString); safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property Day: Integer read Get_Day write Set_Day;
    property Hour: Integer read Get_Hour write Set_Hour;
    property Minute: Integer read Get_Minute write Set_Minute;
    property Month: Integer read Get_Month write Set_Month;
    property Second: Integer read Get_Second write Set_Second;
    property StructTmMonth: Integer read Get_StructTmMonth write Set_StructTmMonth;
    property StructTmYear: Integer read Get_StructTmYear write Set_StructTmYear;
    property Utc: Integer read Get_Utc write Set_Utc;
    property Year: Integer read Get_Year write Set_Year;
  end;

// *********************************************************************//
// DispIntf:  IDtObjDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1ACAAAB7-E818-41AE-AF3F-8F6911A91467}
// *********************************************************************//
  IDtObjDisp = dispinterface
    ['{1ACAAAB7-E818-41AE-AF3F-8F6911A91467}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property Day: Integer dispid 100;
    property Hour: Integer dispid 101;
    property Minute: Integer dispid 102;
    property Month: Integer dispid 103;
    property Second: Integer dispid 104;
    property StructTmMonth: Integer dispid 105;
    property StructTmYear: Integer dispid 106;
    property Utc: Integer dispid 107;
    property Year: Integer dispid 108;
    function Serialize: WideString; dispid 109;
    procedure DeSerialize(const serializedDtObj: WideString); dispid 110;
  end;

// *********************************************************************//
// Interface: IChilkatDsa
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D39623DD-417F-4651-8E8B-3BAE5A8F4D4D}
// *********************************************************************//
  IChilkatDsa = interface(IDispatch)
    ['{D39623DD-417F-4651-8E8B-3BAE5A8F4D4D}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_GroupSize: Integer; safecall;
    procedure Set_GroupSize(pVal: Integer); safecall;
    function Get_Hash: OleVariant; safecall;
    procedure Set_Hash(pVal: OleVariant); safecall;
    function Get_HexG: WideString; safecall;
    function Get_HexP: WideString; safecall;
    function Get_HexQ: WideString; safecall;
    function Get_HexX: WideString; safecall;
    function Get_HexY: WideString; safecall;
    function Get_signature: OleVariant; safecall;
    procedure Set_signature(pVal: OleVariant); safecall;
    function FromDer(derData: OleVariant): Integer; safecall;
    function FromDerFile(const path: WideString): Integer; safecall;
    function FromEncryptedPem(const password: WideString; const pemData: WideString): Integer; safecall;
    function FromPem(const pemData: WideString): Integer; safecall;
    function FromPublicDer(derData: OleVariant): Integer; safecall;
    function FromPublicDerFile(const path: WideString): Integer; safecall;
    function FromPublicPem(const pemData: WideString): Integer; safecall;
    function FromXml(const xmlKey: WideString): Integer; safecall;
    function GenKey(numBits: Integer): Integer; safecall;
    function GenKeyFromParamsDer(derBytes: OleVariant): Integer; safecall;
    function GenKeyFromParamsDerFile(const path: WideString): Integer; safecall;
    function GenKeyFromParamsPem(const pem: WideString): Integer; safecall;
    function GenKeyFromParamsPemFile(const path: WideString): Integer; safecall;
    function GetEncodedHash(const encoding: WideString): WideString; safecall;
    function GetEncodedSignature(const encoding: WideString): WideString; safecall;
    function LoadText(const path: WideString): WideString; safecall;
    function SaveText(const strToSave: WideString; const path: WideString): Integer; safecall;
    function SetEncodedHash(const encoding: WideString; const encodedHash: WideString): Integer; safecall;
    function SetEncodedSignature(const encoding: WideString; const encodedSig: WideString): Integer; safecall;
    function SetEncodedSignatureRS(const encoding: WideString; const encodedR: WideString; 
                                   const encodedS: WideString): Integer; safecall;
    function SetKeyExplicit(groupSizeInBytes: Integer; const pHex: WideString; 
                            const qHex: WideString; const gHex: WideString; const xHex: WideString): Integer; safecall;
    function SetPubKeyExplicit(groupSizeInBytes: Integer; const pHex: WideString; 
                               const qHex: WideString; const gHex: WideString; 
                               const yHex: WideString): Integer; safecall;
    function SignHash: Integer; safecall;
    function ToDer: OleVariant; safecall;
    function ToDerFile(const path: WideString): Integer; safecall;
    function ToEncryptedPem(const password: WideString): WideString; safecall;
    function ToPem: WideString; safecall;
    function ToPublicDer: OleVariant; safecall;
    function ToPublicDerFile(const path: WideString): Integer; safecall;
    function ToPublicPem: WideString; safecall;
    function ToXml(bPublicOnly: Integer): WideString; safecall;
    function UnlockComponent(const unlockCode: WideString): Integer; safecall;
    function Verify: Integer; safecall;
    function VerifyKey: Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property GroupSize: Integer read Get_GroupSize write Set_GroupSize;
    property Hash: OleVariant read Get_Hash write Set_Hash;
    property HexG: WideString read Get_HexG;
    property HexP: WideString read Get_HexP;
    property HexQ: WideString read Get_HexQ;
    property HexX: WideString read Get_HexX;
    property HexY: WideString read Get_HexY;
    property signature: OleVariant read Get_signature write Set_signature;
  end;

// *********************************************************************//
// DispIntf:  IChilkatDsaDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D39623DD-417F-4651-8E8B-3BAE5A8F4D4D}
// *********************************************************************//
  IChilkatDsaDisp = dispinterface
    ['{D39623DD-417F-4651-8E8B-3BAE5A8F4D4D}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property GroupSize: Integer dispid 100;
    property Hash: OleVariant dispid 101;
    property HexG: WideString readonly dispid 102;
    property HexP: WideString readonly dispid 103;
    property HexQ: WideString readonly dispid 104;
    property HexX: WideString readonly dispid 105;
    property HexY: WideString readonly dispid 106;
    property signature: OleVariant dispid 107;
    function FromDer(derData: OleVariant): Integer; dispid 108;
    function FromDerFile(const path: WideString): Integer; dispid 109;
    function FromEncryptedPem(const password: WideString; const pemData: WideString): Integer; dispid 110;
    function FromPem(const pemData: WideString): Integer; dispid 111;
    function FromPublicDer(derData: OleVariant): Integer; dispid 112;
    function FromPublicDerFile(const path: WideString): Integer; dispid 113;
    function FromPublicPem(const pemData: WideString): Integer; dispid 114;
    function FromXml(const xmlKey: WideString): Integer; dispid 115;
    function GenKey(numBits: Integer): Integer; dispid 116;
    function GenKeyFromParamsDer(derBytes: OleVariant): Integer; dispid 117;
    function GenKeyFromParamsDerFile(const path: WideString): Integer; dispid 118;
    function GenKeyFromParamsPem(const pem: WideString): Integer; dispid 119;
    function GenKeyFromParamsPemFile(const path: WideString): Integer; dispid 120;
    function GetEncodedHash(const encoding: WideString): WideString; dispid 121;
    function GetEncodedSignature(const encoding: WideString): WideString; dispid 122;
    function LoadText(const path: WideString): WideString; dispid 123;
    function SaveText(const strToSave: WideString; const path: WideString): Integer; dispid 124;
    function SetEncodedHash(const encoding: WideString; const encodedHash: WideString): Integer; dispid 125;
    function SetEncodedSignature(const encoding: WideString; const encodedSig: WideString): Integer; dispid 126;
    function SetEncodedSignatureRS(const encoding: WideString; const encodedR: WideString; 
                                   const encodedS: WideString): Integer; dispid 127;
    function SetKeyExplicit(groupSizeInBytes: Integer; const pHex: WideString; 
                            const qHex: WideString; const gHex: WideString; const xHex: WideString): Integer; dispid 128;
    function SetPubKeyExplicit(groupSizeInBytes: Integer; const pHex: WideString; 
                               const qHex: WideString; const gHex: WideString; 
                               const yHex: WideString): Integer; dispid 129;
    function SignHash: Integer; dispid 130;
    function ToDer: OleVariant; dispid 131;
    function ToDerFile(const path: WideString): Integer; dispid 132;
    function ToEncryptedPem(const password: WideString): WideString; dispid 133;
    function ToPem: WideString; dispid 134;
    function ToPublicDer: OleVariant; dispid 135;
    function ToPublicDerFile(const path: WideString): Integer; dispid 136;
    function ToPublicPem: WideString; dispid 137;
    function ToXml(bPublicOnly: Integer): WideString; dispid 138;
    function UnlockComponent(const unlockCode: WideString): Integer; dispid 139;
    function Verify: Integer; dispid 140;
    function VerifyKey: Integer; dispid 141;
  end;

// *********************************************************************//
// Interface: IChilkatDkim
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2D924A0F-A828-4482-A1DB-DD80E2FF35EF}
// *********************************************************************//
  IChilkatDkim = interface(IDispatch)
    ['{2D924A0F-A828-4482-A1DB-DD80E2FF35EF}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_DkimAlg: WideString; safecall;
    procedure Set_DkimAlg(const pVal: WideString); safecall;
    function Get_DkimBodyLengthCount: Integer; safecall;
    procedure Set_DkimBodyLengthCount(pVal: Integer); safecall;
    function Get_DkimCanon: WideString; safecall;
    procedure Set_DkimCanon(const pVal: WideString); safecall;
    function Get_DkimDomain: WideString; safecall;
    procedure Set_DkimDomain(const pVal: WideString); safecall;
    function Get_DkimHeaders: WideString; safecall;
    procedure Set_DkimHeaders(const pVal: WideString); safecall;
    function Get_DkimSelector: WideString; safecall;
    procedure Set_DkimSelector(const pVal: WideString); safecall;
    function Get_DomainKeyAlg: WideString; safecall;
    procedure Set_DomainKeyAlg(const pVal: WideString); safecall;
    function Get_DomainKeyCanon: WideString; safecall;
    procedure Set_DomainKeyCanon(const pVal: WideString); safecall;
    function Get_DomainKeyDomain: WideString; safecall;
    procedure Set_DomainKeyDomain(const pVal: WideString); safecall;
    function Get_DomainKeyHeaders: WideString; safecall;
    procedure Set_DomainKeyHeaders(const pVal: WideString); safecall;
    function Get_DomainKeySelector: WideString; safecall;
    procedure Set_DomainKeySelector(const pVal: WideString); safecall;
    function Get_HeartbeatMs: Integer; safecall;
    procedure Set_HeartbeatMs(pVal: Integer); safecall;
    function AddDkimSignature(mimeIn: OleVariant): OleVariant; safecall;
    function AddDomainKeySignature(mimeIn: OleVariant): OleVariant; safecall;
    function LoadDkimPk(const PrivateKey: WideString; const optionalPassword: WideString): Integer; safecall;
    function LoadDkimPkBytes(privateKeyDer: OleVariant; const optionalPassword: WideString): Integer; safecall;
    function LoadDkimPkFile(const privateKeyFilepath: WideString; const optionalPassword: WideString): Integer; safecall;
    function LoadDomainKeyPk(const PrivateKey: WideString; const optionalPassword: WideString): Integer; safecall;
    function LoadDomainKeyPkBytes(privateKeyDer: OleVariant; const optionalPassword: WideString): Integer; safecall;
    function LoadDomainKeyPkFile(const privateKeyFilepath: WideString; 
                                 const optionalPassword: WideString): Integer; safecall;
    function LoadPublicKey(const selector: WideString; const Domain: WideString; 
                           const PublicKey: WideString): Integer; safecall;
    function LoadPublicKeyFile(const selector: WideString; const Domain: WideString; 
                               const publicKeyFilepath: WideString): Integer; safecall;
    function NumDkimSignatures(mimeData: OleVariant): Integer; safecall;
    function NumDomainKeySignatures(mimeData: OleVariant): Integer; safecall;
    function PrefetchPublicKey(const selector: WideString; const Domain: WideString): Integer; safecall;
    function UnlockComponent(const unlockCode: WideString): Integer; safecall;
    function VerifyDkimSignature(sigIdx: Integer; mimeData: OleVariant): Integer; safecall;
    function VerifyDomainKeySignature(sigIdx: Integer; mimeData: OleVariant): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property DkimAlg: WideString read Get_DkimAlg write Set_DkimAlg;
    property DkimBodyLengthCount: Integer read Get_DkimBodyLengthCount write Set_DkimBodyLengthCount;
    property DkimCanon: WideString read Get_DkimCanon write Set_DkimCanon;
    property DkimDomain: WideString read Get_DkimDomain write Set_DkimDomain;
    property DkimHeaders: WideString read Get_DkimHeaders write Set_DkimHeaders;
    property DkimSelector: WideString read Get_DkimSelector write Set_DkimSelector;
    property DomainKeyAlg: WideString read Get_DomainKeyAlg write Set_DomainKeyAlg;
    property DomainKeyCanon: WideString read Get_DomainKeyCanon write Set_DomainKeyCanon;
    property DomainKeyDomain: WideString read Get_DomainKeyDomain write Set_DomainKeyDomain;
    property DomainKeyHeaders: WideString read Get_DomainKeyHeaders write Set_DomainKeyHeaders;
    property DomainKeySelector: WideString read Get_DomainKeySelector write Set_DomainKeySelector;
    property HeartbeatMs: Integer read Get_HeartbeatMs write Set_HeartbeatMs;
  end;

// *********************************************************************//
// DispIntf:  IChilkatDkimDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2D924A0F-A828-4482-A1DB-DD80E2FF35EF}
// *********************************************************************//
  IChilkatDkimDisp = dispinterface
    ['{2D924A0F-A828-4482-A1DB-DD80E2FF35EF}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property DkimAlg: WideString dispid 100;
    property DkimBodyLengthCount: Integer dispid 101;
    property DkimCanon: WideString dispid 102;
    property DkimDomain: WideString dispid 103;
    property DkimHeaders: WideString dispid 104;
    property DkimSelector: WideString dispid 105;
    property DomainKeyAlg: WideString dispid 106;
    property DomainKeyCanon: WideString dispid 107;
    property DomainKeyDomain: WideString dispid 108;
    property DomainKeyHeaders: WideString dispid 109;
    property DomainKeySelector: WideString dispid 110;
    property HeartbeatMs: Integer dispid 111;
    function AddDkimSignature(mimeIn: OleVariant): OleVariant; dispid 112;
    function AddDomainKeySignature(mimeIn: OleVariant): OleVariant; dispid 113;
    function LoadDkimPk(const PrivateKey: WideString; const optionalPassword: WideString): Integer; dispid 114;
    function LoadDkimPkBytes(privateKeyDer: OleVariant; const optionalPassword: WideString): Integer; dispid 115;
    function LoadDkimPkFile(const privateKeyFilepath: WideString; const optionalPassword: WideString): Integer; dispid 116;
    function LoadDomainKeyPk(const PrivateKey: WideString; const optionalPassword: WideString): Integer; dispid 117;
    function LoadDomainKeyPkBytes(privateKeyDer: OleVariant; const optionalPassword: WideString): Integer; dispid 118;
    function LoadDomainKeyPkFile(const privateKeyFilepath: WideString; 
                                 const optionalPassword: WideString): Integer; dispid 119;
    function LoadPublicKey(const selector: WideString; const Domain: WideString; 
                           const PublicKey: WideString): Integer; dispid 120;
    function LoadPublicKeyFile(const selector: WideString; const Domain: WideString; 
                               const publicKeyFilepath: WideString): Integer; dispid 121;
    function NumDkimSignatures(mimeData: OleVariant): Integer; dispid 122;
    function NumDomainKeySignatures(mimeData: OleVariant): Integer; dispid 123;
    function PrefetchPublicKey(const selector: WideString; const Domain: WideString): Integer; dispid 124;
    function UnlockComponent(const unlockCode: WideString): Integer; dispid 125;
    function VerifyDkimSignature(sigIdx: Integer; mimeData: OleVariant): Integer; dispid 126;
    function VerifyDomainKeySignature(sigIdx: Integer; mimeData: OleVariant): Integer; dispid 127;
  end;

// *********************************************************************//
// Interface: ICkDirTree
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C8B4F6DF-1E35-43B9-913C-B235F91B6D4D}
// *********************************************************************//
  ICkDirTree = interface(IDispatch)
    ['{C8B4F6DF-1E35-43B9-913C-B235F91B6D4D}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_BaseDir: WideString; safecall;
    procedure Set_BaseDir(const pVal: WideString); safecall;
    function Get_DoneIterating: Integer; safecall;
    function Get_FileSize32: Integer; safecall;
    function Get_FullPath: WideString; safecall;
    function Get_FullUncPath: WideString; safecall;
    function Get_isDirectory: Integer; safecall;
    function Get_recurse: Integer; safecall;
    procedure Set_recurse(pVal: Integer); safecall;
    function Get_RelativePath: WideString; safecall;
    function BeginIterate: Integer; safecall;
    function AdvancePosition: Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property BaseDir: WideString read Get_BaseDir write Set_BaseDir;
    property DoneIterating: Integer read Get_DoneIterating;
    property FileSize32: Integer read Get_FileSize32;
    property FullPath: WideString read Get_FullPath;
    property FullUncPath: WideString read Get_FullUncPath;
    property isDirectory: Integer read Get_isDirectory;
    property recurse: Integer read Get_recurse write Set_recurse;
    property RelativePath: WideString read Get_RelativePath;
  end;

// *********************************************************************//
// DispIntf:  ICkDirTreeDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C8B4F6DF-1E35-43B9-913C-B235F91B6D4D}
// *********************************************************************//
  ICkDirTreeDisp = dispinterface
    ['{C8B4F6DF-1E35-43B9-913C-B235F91B6D4D}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property BaseDir: WideString dispid 100;
    property DoneIterating: Integer readonly dispid 101;
    property FileSize32: Integer readonly dispid 102;
    property FullPath: WideString readonly dispid 103;
    property FullUncPath: WideString readonly dispid 104;
    property isDirectory: Integer readonly dispid 105;
    property recurse: Integer dispid 106;
    property RelativePath: WideString readonly dispid 107;
    function BeginIterate: Integer; dispid 108;
    function AdvancePosition: Integer; dispid 109;
  end;

// *********************************************************************//
// Interface: IChilkatDh
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9EDDA6C9-A95E-4CE6-B4A3-6C4FE24B08C9}
// *********************************************************************//
  IChilkatDh = interface(IDispatch)
    ['{9EDDA6C9-A95E-4CE6-B4A3-6C4FE24B08C9}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_P: WideString; safecall;
    function Get_G: Integer; safecall;
    function FindK(const e: WideString): WideString; safecall;
    function GenPG(numBits: Integer; G: Integer): Integer; safecall;
    function SetPG(const P: WideString; G: Integer): Integer; safecall;
    function UnlockComponent(const unlockCode: WideString): Integer; safecall;
    procedure UseKnownPrime(index: Integer); safecall;
    function CreateE(numBits: Integer): WideString; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property P: WideString read Get_P;
    property G: Integer read Get_G;
  end;

// *********************************************************************//
// DispIntf:  IChilkatDhDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9EDDA6C9-A95E-4CE6-B4A3-6C4FE24B08C9}
// *********************************************************************//
  IChilkatDhDisp = dispinterface
    ['{9EDDA6C9-A95E-4CE6-B4A3-6C4FE24B08C9}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property P: WideString readonly dispid 100;
    property G: Integer readonly dispid 101;
    function FindK(const e: WideString): WideString; dispid 102;
    function GenPG(numBits: Integer; G: Integer): Integer; dispid 103;
    function SetPG(const P: WideString; G: Integer): Integer; dispid 104;
    function UnlockComponent(const unlockCode: WideString): Integer; dispid 105;
    procedure UseKnownPrime(index: Integer); dispid 106;
    function CreateE(numBits: Integer): WideString; dispid 107;
  end;

// *********************************************************************//
// Interface: IChilkatCsv
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B8C1209-EEFB-408B-8FA3-A59EE8034072}
// *********************************************************************//
  IChilkatCsv = interface(IDispatch)
    ['{3B8C1209-EEFB-408B-8FA3-A59EE8034072}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_Crlf: Integer; safecall;
    procedure Set_Crlf(pVal: Integer); safecall;
    function Get_Delimiter: WideString; safecall;
    procedure Set_Delimiter(const pVal: WideString); safecall;
    function Get_HasColumnNames: Integer; safecall;
    procedure Set_HasColumnNames(pVal: Integer); safecall;
    function Get_NumColumns: Integer; safecall;
    function Get_NumRows: Integer; safecall;
    function Get_autoTrim: Integer; safecall;
    procedure Set_autoTrim(pVal: Integer); safecall;
    function DeleteColumn(index: Integer): Integer; safecall;
    function DeleteColumnByName(const columnName: WideString): Integer; safecall;
    function DeleteRow(index: Integer): Integer; safecall;
    function GetCell(row: Integer; col: Integer): WideString; safecall;
    function GetCellByName(row: Integer; const columnName: WideString): WideString; safecall;
    function GetColumnName(index: Integer): WideString; safecall;
    function GetIndex(const columnName: WideString): Integer; safecall;
    function GetNumCols(row: Integer): Integer; safecall;
    function LoadFile(const path: WideString): Integer; safecall;
    function LoadFile2(const path: WideString; const charset: WideString): Integer; safecall;
    function LoadFromString(const csvData: WideString): Integer; safecall;
    function RowMatches(row: Integer; const matchPattern: WideString; bCaseSensitive: Integer): Integer; safecall;
    function SaveFile(const path: WideString): Integer; safecall;
    function SaveFile2(const path: WideString; const charset: WideString): Integer; safecall;
    function SaveToString: WideString; safecall;
    function SetCell(row: Integer; col: Integer; const Content: WideString): Integer; safecall;
    function SetCellByName(row: Integer; const columnName: WideString; const Content: WideString): Integer; safecall;
    function SetColumnName(index: Integer; const columnName: WideString): Integer; safecall;
    function SortByColumn(const columnName: WideString; bAscending: Integer; bCaseSensitive: Integer): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property Crlf: Integer read Get_Crlf write Set_Crlf;
    property Delimiter: WideString read Get_Delimiter write Set_Delimiter;
    property HasColumnNames: Integer read Get_HasColumnNames write Set_HasColumnNames;
    property NumColumns: Integer read Get_NumColumns;
    property NumRows: Integer read Get_NumRows;
    property autoTrim: Integer read Get_autoTrim write Set_autoTrim;
  end;

// *********************************************************************//
// DispIntf:  IChilkatCsvDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B8C1209-EEFB-408B-8FA3-A59EE8034072}
// *********************************************************************//
  IChilkatCsvDisp = dispinterface
    ['{3B8C1209-EEFB-408B-8FA3-A59EE8034072}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property Crlf: Integer dispid 100;
    property Delimiter: WideString dispid 101;
    property HasColumnNames: Integer dispid 102;
    property NumColumns: Integer readonly dispid 103;
    property NumRows: Integer readonly dispid 104;
    property autoTrim: Integer dispid 105;
    function DeleteColumn(index: Integer): Integer; dispid 106;
    function DeleteColumnByName(const columnName: WideString): Integer; dispid 107;
    function DeleteRow(index: Integer): Integer; dispid 108;
    function GetCell(row: Integer; col: Integer): WideString; dispid 109;
    function GetCellByName(row: Integer; const columnName: WideString): WideString; dispid 110;
    function GetColumnName(index: Integer): WideString; dispid 111;
    function GetIndex(const columnName: WideString): Integer; dispid 112;
    function GetNumCols(row: Integer): Integer; dispid 113;
    function LoadFile(const path: WideString): Integer; dispid 114;
    function LoadFile2(const path: WideString; const charset: WideString): Integer; dispid 115;
    function LoadFromString(const csvData: WideString): Integer; dispid 116;
    function RowMatches(row: Integer; const matchPattern: WideString; bCaseSensitive: Integer): Integer; dispid 117;
    function SaveFile(const path: WideString): Integer; dispid 118;
    function SaveFile2(const path: WideString; const charset: WideString): Integer; dispid 119;
    function SaveToString: WideString; dispid 120;
    function SetCell(row: Integer; col: Integer; const Content: WideString): Integer; dispid 121;
    function SetCellByName(row: Integer; const columnName: WideString; const Content: WideString): Integer; dispid 122;
    function SetColumnName(index: Integer; const columnName: WideString): Integer; dispid 123;
    function SortByColumn(const columnName: WideString; bAscending: Integer; bCaseSensitive: Integer): Integer; dispid 124;
  end;

// *********************************************************************//
// Interface: IChilkatCreateCS
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {08114E7A-8556-40E9-8CE1-0BE2E7A041A8}
// *********************************************************************//
  IChilkatCreateCS = interface(IDispatch)
    ['{08114E7A-8556-40E9-8CE1-0BE2E7A041A8}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_readOnly: Integer; safecall;
    procedure Set_readOnly(pVal: Integer); safecall;
    function CreateFileStore(const path: WideString): IChilkatCertStore; safecall;
    function CreateMemoryStore: IChilkatCertStore; safecall;
    function CreateRegistryStore(const regRoot: WideString; const regPath: WideString): IChilkatCertStore; safecall;
    function OpenChilkatStore: IChilkatCertStore; safecall;
    function OpenCurrentUserStore: IChilkatCertStore; safecall;
    function OpenFileStore(const path: WideString): IChilkatCertStore; safecall;
    function OpenLocalSystemStore: IChilkatCertStore; safecall;
    function OpenOutlookStore: IChilkatCertStore; safecall;
    function OpenRegistryStore(const regRoot: WideString; const regPath: WideString): IChilkatCertStore; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property readOnly: Integer read Get_readOnly write Set_readOnly;
  end;

// *********************************************************************//
// DispIntf:  IChilkatCreateCSDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {08114E7A-8556-40E9-8CE1-0BE2E7A041A8}
// *********************************************************************//
  IChilkatCreateCSDisp = dispinterface
    ['{08114E7A-8556-40E9-8CE1-0BE2E7A041A8}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property readOnly: Integer dispid 100;
    function CreateFileStore(const path: WideString): IChilkatCertStore; dispid 101;
    function CreateMemoryStore: IChilkatCertStore; dispid 102;
    function CreateRegistryStore(const regRoot: WideString; const regPath: WideString): IChilkatCertStore; dispid 103;
    function OpenChilkatStore: IChilkatCertStore; dispid 104;
    function OpenCurrentUserStore: IChilkatCertStore; dispid 105;
    function OpenFileStore(const path: WideString): IChilkatCertStore; dispid 106;
    function OpenLocalSystemStore: IChilkatCertStore; dispid 107;
    function OpenOutlookStore: IChilkatCertStore; dispid 108;
    function OpenRegistryStore(const regRoot: WideString; const regPath: WideString): IChilkatCertStore; dispid 109;
  end;

// *********************************************************************//
// Interface: IChilkatCompression
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {73B5832B-AACE-4975-9238-09579CB89232}
// *********************************************************************//
  IChilkatCompression = interface(IDispatch)
    ['{73B5832B-AACE-4975-9238-09579CB89232}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_charset: WideString; safecall;
    procedure Set_charset(const pVal: WideString); safecall;
    function Get_EncodingMode: WideString; safecall;
    procedure Set_EncodingMode(const pVal: WideString); safecall;
    function Get_HeartbeatMs: Integer; safecall;
    procedure Set_HeartbeatMs(pVal: Integer); safecall;
    function Get_Algorithm: WideString; safecall;
    procedure Set_Algorithm(const pVal: WideString); safecall;
    function BeginCompressBytes(data: OleVariant): OleVariant; safecall;
    function BeginCompressBytesENC(data: OleVariant): WideString; safecall;
    function BeginCompressString(const str: WideString): OleVariant; safecall;
    function BeginCompressStringENC(const str: WideString): WideString; safecall;
    function BeginDecompressBytes(data: OleVariant): OleVariant; safecall;
    function BeginDecompressBytesENC(const str: WideString): OleVariant; safecall;
    function BeginDecompressString(data: OleVariant): WideString; safecall;
    function BeginDecompressStringENC(const str: WideString): WideString; safecall;
    function CompressBytes(data: OleVariant): OleVariant; safecall;
    function CompressBytesENC(data: OleVariant): WideString; safecall;
    function CompressFile(const srcPath: WideString; const destPath: WideString): Integer; safecall;
    function CompressString(const str: WideString): OleVariant; safecall;
    function CompressStringENC(const str: WideString): WideString; safecall;
    function DecompressBytes(data: OleVariant): OleVariant; safecall;
    function DecompressBytesENC(const str: WideString): OleVariant; safecall;
    function DecompressFile(const srcPath: WideString; const destPath: WideString): Integer; safecall;
    function DecompressString(data: OleVariant): WideString; safecall;
    function DecompressStringENC(const str: WideString): WideString; safecall;
    function EndCompressBytes: OleVariant; safecall;
    function EndCompressBytesENC: WideString; safecall;
    function EndCompressString: OleVariant; safecall;
    function EndCompressStringENC: WideString; safecall;
    function EndDecompressBytes: OleVariant; safecall;
    function EndDecompressBytesENC: OleVariant; safecall;
    function EndDecompressString: WideString; safecall;
    function EndDecompressStringENC: WideString; safecall;
    function MoreCompressBytes(data: OleVariant): OleVariant; safecall;
    function MoreCompressBytesENC(data: OleVariant): WideString; safecall;
    function MoreCompressString(const str: WideString): OleVariant; safecall;
    function MoreCompressStringENC(const str: WideString): WideString; safecall;
    function MoreDecompressBytes(data: OleVariant): OleVariant; safecall;
    function MoreDecompressBytesENC(const str: WideString): OleVariant; safecall;
    function MoreDecompressString(data: OleVariant): WideString; safecall;
    function MoreDecompressStringENC(const str: WideString): WideString; safecall;
    function UnlockComponent(const unlockCode: WideString): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property charset: WideString read Get_charset write Set_charset;
    property EncodingMode: WideString read Get_EncodingMode write Set_EncodingMode;
    property HeartbeatMs: Integer read Get_HeartbeatMs write Set_HeartbeatMs;
    property Algorithm: WideString read Get_Algorithm write Set_Algorithm;
  end;

// *********************************************************************//
// DispIntf:  IChilkatCompressionDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {73B5832B-AACE-4975-9238-09579CB89232}
// *********************************************************************//
  IChilkatCompressionDisp = dispinterface
    ['{73B5832B-AACE-4975-9238-09579CB89232}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property charset: WideString dispid 100;
    property EncodingMode: WideString dispid 101;
    property HeartbeatMs: Integer dispid 102;
    property Algorithm: WideString dispid 103;
    function BeginCompressBytes(data: OleVariant): OleVariant; dispid 104;
    function BeginCompressBytesENC(data: OleVariant): WideString; dispid 105;
    function BeginCompressString(const str: WideString): OleVariant; dispid 106;
    function BeginCompressStringENC(const str: WideString): WideString; dispid 107;
    function BeginDecompressBytes(data: OleVariant): OleVariant; dispid 108;
    function BeginDecompressBytesENC(const str: WideString): OleVariant; dispid 109;
    function BeginDecompressString(data: OleVariant): WideString; dispid 110;
    function BeginDecompressStringENC(const str: WideString): WideString; dispid 111;
    function CompressBytes(data: OleVariant): OleVariant; dispid 112;
    function CompressBytesENC(data: OleVariant): WideString; dispid 113;
    function CompressFile(const srcPath: WideString; const destPath: WideString): Integer; dispid 114;
    function CompressString(const str: WideString): OleVariant; dispid 115;
    function CompressStringENC(const str: WideString): WideString; dispid 116;
    function DecompressBytes(data: OleVariant): OleVariant; dispid 117;
    function DecompressBytesENC(const str: WideString): OleVariant; dispid 118;
    function DecompressFile(const srcPath: WideString; const destPath: WideString): Integer; dispid 119;
    function DecompressString(data: OleVariant): WideString; dispid 120;
    function DecompressStringENC(const str: WideString): WideString; dispid 121;
    function EndCompressBytes: OleVariant; dispid 122;
    function EndCompressBytesENC: WideString; dispid 123;
    function EndCompressString: OleVariant; dispid 124;
    function EndCompressStringENC: WideString; dispid 125;
    function EndDecompressBytes: OleVariant; dispid 126;
    function EndDecompressBytesENC: OleVariant; dispid 127;
    function EndDecompressString: WideString; dispid 128;
    function EndDecompressStringENC: WideString; dispid 129;
    function MoreCompressBytes(data: OleVariant): OleVariant; dispid 130;
    function MoreCompressBytesENC(data: OleVariant): WideString; dispid 131;
    function MoreCompressString(const str: WideString): OleVariant; dispid 132;
    function MoreCompressStringENC(const str: WideString): WideString; dispid 133;
    function MoreDecompressBytes(data: OleVariant): OleVariant; dispid 134;
    function MoreDecompressBytesENC(const str: WideString): OleVariant; dispid 135;
    function MoreDecompressString(data: OleVariant): WideString; dispid 136;
    function MoreDecompressStringENC(const str: WideString): WideString; dispid 137;
    function UnlockComponent(const unlockCode: WideString): Integer; dispid 138;
  end;

// *********************************************************************//
// Interface: IChilkatCharset
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {54E9A3A9-44F6-4E38-AA16-F27FB906EE7A}
// *********************************************************************//
  IChilkatCharset = interface(IDispatch)
    ['{54E9A3A9-44F6-4E38-AA16-F27FB906EE7A}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_AltToCharset: WideString; safecall;
    procedure Set_AltToCharset(const pVal: WideString); safecall;
    function Get_ErrorAction: Integer; safecall;
    procedure Set_ErrorAction(pVal: Integer); safecall;
    function Get_FromCharset: WideString; safecall;
    procedure Set_FromCharset(const pVal: WideString); safecall;
    function Get_LastInputAsHex: WideString; safecall;
    function Get_LastInputAsQP: WideString; safecall;
    function Get_LastOutputAsHex: WideString; safecall;
    function Get_LastOutputAsQP: WideString; safecall;
    function Get_SaveLast: Integer; safecall;
    procedure Set_SaveLast(pVal: Integer); safecall;
    function Get_ToCharset: WideString; safecall;
    procedure Set_ToCharset(const pVal: WideString); safecall;
    function CharsetToCodePage(const charsetName: WideString): Integer; safecall;
    function CodePageToCharset(codePage: Integer): WideString; safecall;
    function ConvertData(inData: OleVariant): OleVariant; safecall;
    function ConvertFile(const srcPath: WideString; const destPath: WideString): Integer; safecall;
    function ConvertFileNoPreamble(const srcPath: WideString; const destPath: WideString): Integer; safecall;
    function ConvertFromUtf16(uniData: OleVariant): OleVariant; safecall;
    function ConvertHtml(inData: OleVariant): OleVariant; safecall;
    function ConvertHtmlFile(const srcPath: WideString; const destPath: WideString): Integer; safecall;
    function ConvertToUtf16(mbData: OleVariant): OleVariant; safecall;
    function EntityEncodeDec(const str: WideString): WideString; safecall;
    function EntityEncodeHex(const str: WideString): WideString; safecall;
    function GetHtmlCharset(inData: OleVariant): WideString; safecall;
    function GetHtmlFileCharset(const htmlFilename: WideString): WideString; safecall;
    function HtmlDecodeToStr(const inStr: WideString): WideString; safecall;
    function HtmlEntityDecode(inHtml: OleVariant): OleVariant; safecall;
    function HtmlEntityDecodeFile(const inFilename: WideString; const destPath: WideString): Integer; safecall;
    function IsUnlocked: Integer; safecall;
    function LowerCase(const inStr: WideString): WideString; safecall;
    function ReadFile(const filename: WideString): OleVariant; safecall;
    function ReadFileToString(const filename: WideString; const srcCharset: WideString): WideString; safecall;
    procedure SetErrorBytes(data: OleVariant); safecall;
    procedure SetErrorString(const str: WideString; const charset: WideString); safecall;
    function UnlockComponent(const unlockCode: WideString): Integer; safecall;
    function UpperCase(const inStr: WideString): WideString; safecall;
    function UrlDecodeStr(const inStr: WideString): WideString; safecall;
    function VerifyData(const charset: WideString; inData: OleVariant): Integer; safecall;
    function VerifyFile(const charset: WideString; const filename: WideString): Integer; safecall;
    function WriteFile(const filename: WideString; fileData: OleVariant): Integer; safecall;
    function WriteStringToFile(const str: WideString; const filename: WideString; 
                               const charset: WideString): Integer; safecall;
    function ConvertFromUnicode(const inData: WideString): OleVariant; safecall;
    function ConvertToUnicode(inData: OleVariant): WideString; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property AltToCharset: WideString read Get_AltToCharset write Set_AltToCharset;
    property ErrorAction: Integer read Get_ErrorAction write Set_ErrorAction;
    property FromCharset: WideString read Get_FromCharset write Set_FromCharset;
    property LastInputAsHex: WideString read Get_LastInputAsHex;
    property LastInputAsQP: WideString read Get_LastInputAsQP;
    property LastOutputAsHex: WideString read Get_LastOutputAsHex;
    property LastOutputAsQP: WideString read Get_LastOutputAsQP;
    property SaveLast: Integer read Get_SaveLast write Set_SaveLast;
    property ToCharset: WideString read Get_ToCharset write Set_ToCharset;
  end;

// *********************************************************************//
// DispIntf:  IChilkatCharsetDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {54E9A3A9-44F6-4E38-AA16-F27FB906EE7A}
// *********************************************************************//
  IChilkatCharsetDisp = dispinterface
    ['{54E9A3A9-44F6-4E38-AA16-F27FB906EE7A}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property AltToCharset: WideString dispid 100;
    property ErrorAction: Integer dispid 101;
    property FromCharset: WideString dispid 102;
    property LastInputAsHex: WideString readonly dispid 103;
    property LastInputAsQP: WideString readonly dispid 104;
    property LastOutputAsHex: WideString readonly dispid 105;
    property LastOutputAsQP: WideString readonly dispid 106;
    property SaveLast: Integer dispid 107;
    property ToCharset: WideString dispid 108;
    function CharsetToCodePage(const charsetName: WideString): Integer; dispid 109;
    function CodePageToCharset(codePage: Integer): WideString; dispid 110;
    function ConvertData(inData: OleVariant): OleVariant; dispid 111;
    function ConvertFile(const srcPath: WideString; const destPath: WideString): Integer; dispid 112;
    function ConvertFileNoPreamble(const srcPath: WideString; const destPath: WideString): Integer; dispid 113;
    function ConvertFromUtf16(uniData: OleVariant): OleVariant; dispid 139;
    function ConvertHtml(inData: OleVariant): OleVariant; dispid 114;
    function ConvertHtmlFile(const srcPath: WideString; const destPath: WideString): Integer; dispid 115;
    function ConvertToUtf16(mbData: OleVariant): OleVariant; dispid 140;
    function EntityEncodeDec(const str: WideString): WideString; dispid 116;
    function EntityEncodeHex(const str: WideString): WideString; dispid 117;
    function GetHtmlCharset(inData: OleVariant): WideString; dispid 118;
    function GetHtmlFileCharset(const htmlFilename: WideString): WideString; dispid 119;
    function HtmlDecodeToStr(const inStr: WideString): WideString; dispid 120;
    function HtmlEntityDecode(inHtml: OleVariant): OleVariant; dispid 121;
    function HtmlEntityDecodeFile(const inFilename: WideString; const destPath: WideString): Integer; dispid 122;
    function IsUnlocked: Integer; dispid 123;
    function LowerCase(const inStr: WideString): WideString; dispid 124;
    function ReadFile(const filename: WideString): OleVariant; dispid 125;
    function ReadFileToString(const filename: WideString; const srcCharset: WideString): WideString; dispid 126;
    procedure SetErrorBytes(data: OleVariant); dispid 127;
    procedure SetErrorString(const str: WideString; const charset: WideString); dispid 128;
    function UnlockComponent(const unlockCode: WideString): Integer; dispid 129;
    function UpperCase(const inStr: WideString): WideString; dispid 130;
    function UrlDecodeStr(const inStr: WideString): WideString; dispid 131;
    function VerifyData(const charset: WideString; inData: OleVariant): Integer; dispid 132;
    function VerifyFile(const charset: WideString; const filename: WideString): Integer; dispid 133;
    function WriteFile(const filename: WideString; fileData: OleVariant): Integer; dispid 134;
    function WriteStringToFile(const str: WideString; const filename: WideString; 
                               const charset: WideString): Integer; dispid 135;
    function ConvertFromUnicode(const inData: WideString): OleVariant; dispid 136;
    function ConvertToUnicode(inData: OleVariant): WideString; dispid 137;
  end;

// *********************************************************************//
// Interface: IChilkatCgi
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C71DB905-E991-4089-9FFB-BB692A8A8D1D}
// *********************************************************************//
  IChilkatCgi = interface(IDispatch)
    ['{C71DB905-E991-4089-9FFB-BB692A8A8D1D}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
  end;

// *********************************************************************//
// DispIntf:  IChilkatCgiDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C71DB905-E991-4089-9FFB-BB692A8A8D1D}
// *********************************************************************//
  IChilkatCgiDisp = dispinterface
    ['{C71DB905-E991-4089-9FFB-BB692A8A8D1D}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
  end;

// *********************************************************************//
// Interface: IChilkatCache
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {064748FA-01E3-4ACD-8DAD-859556B263BD}
// *********************************************************************//
  IChilkatCache = interface(IDispatch)
    ['{064748FA-01E3-4ACD-8DAD-859556B263BD}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastEtagFetched: WideString; safecall;
    function Get_LastExpirationFetched: TDateTime; safecall;
    function Get_LastExpirationFetchedStr: WideString; safecall;
    function Get_LastHitExpired: Integer; safecall;
    function Get_LastKeyFetched: WideString; safecall;
    function Get_level: Integer; safecall;
    procedure Set_level(pVal: Integer); safecall;
    function Get_NumRoots: Integer; safecall;
    procedure AddRoot(const path: WideString); safecall;
    function DeleteAll: Integer; safecall;
    function DeleteAllExpired: Integer; safecall;
    function DeleteFromCache(const url: WideString): Integer; safecall;
    function DeleteOlder(dt: TDateTime): Integer; safecall;
    function DeleteOlderDt(const dt: ICkDateTime): Integer; safecall;
    function DeleteOlderStr(const dateTimeStr: WideString): Integer; safecall;
    function FetchFromCache(const url: WideString): OleVariant; safecall;
    function FetchText(const key: WideString): WideString; safecall;
    function GetEtag(const url: WideString): WideString; safecall;
    function GetExpiration(const url: WideString): TDateTime; safecall;
    function GetExpirationDt(const key: WideString): ICkDateTime; safecall;
    function GetExpirationStr(const url: WideString): WideString; safecall;
    function GetFilename(const url: WideString): WideString; safecall;
    function GetRoot(index: Integer): WideString; safecall;
    function IsCached(const url: WideString): Integer; safecall;
    function SaveText(const key: WideString; expire: TDateTime; const eTag: WideString; 
                      const strData: WideString): Integer; safecall;
    function SaveTextDt(const key: WideString; const expire: ICkDateTime; const eTag: WideString; 
                        const strData: WideString): Integer; safecall;
    function SaveTextNoExpire(const key: WideString; const eTag: WideString; 
                              const strData: WideString): Integer; safecall;
    function SaveTextStr(const key: WideString; const expireDateTimeStr: WideString; 
                         const eTag: WideString; const strData: WideString): Integer; safecall;
    function SaveToCache(const url: WideString; expire: TDateTime; const eTag: WideString; 
                         data: OleVariant): Integer; safecall;
    function SaveToCacheDt(const url: WideString; const expire: ICkDateTime; 
                           const eTag: WideString; data: OleVariant): Integer; safecall;
    function SaveToCacheNoExpire(const url: WideString; const eTag: WideString; data: OleVariant): Integer; safecall;
    function SaveToCacheStr(const url: WideString; const expireDateTimeStr: WideString; 
                            const eTag: WideString; data: OleVariant): Integer; safecall;
    function UpdateExpiration(const url: WideString; dt: TDateTime): Integer; safecall;
    function UpdateExpirationDt(const url: WideString; const dt: ICkDateTime): Integer; safecall;
    function UpdateExpirationStr(const url: WideString; const dateTimeStr: WideString): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastEtagFetched: WideString read Get_LastEtagFetched;
    property LastExpirationFetched: TDateTime read Get_LastExpirationFetched;
    property LastExpirationFetchedStr: WideString read Get_LastExpirationFetchedStr;
    property LastHitExpired: Integer read Get_LastHitExpired;
    property LastKeyFetched: WideString read Get_LastKeyFetched;
    property level: Integer read Get_level write Set_level;
    property NumRoots: Integer read Get_NumRoots;
  end;

// *********************************************************************//
// DispIntf:  IChilkatCacheDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {064748FA-01E3-4ACD-8DAD-859556B263BD}
// *********************************************************************//
  IChilkatCacheDisp = dispinterface
    ['{064748FA-01E3-4ACD-8DAD-859556B263BD}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastEtagFetched: WideString readonly dispid 100;
    property LastExpirationFetched: TDateTime readonly dispid 101;
    property LastExpirationFetchedStr: WideString readonly dispid 102;
    property LastHitExpired: Integer readonly dispid 103;
    property LastKeyFetched: WideString readonly dispid 104;
    property level: Integer dispid 105;
    property NumRoots: Integer readonly dispid 106;
    procedure AddRoot(const path: WideString); dispid 107;
    function DeleteAll: Integer; dispid 108;
    function DeleteAllExpired: Integer; dispid 109;
    function DeleteFromCache(const url: WideString): Integer; dispid 110;
    function DeleteOlder(dt: TDateTime): Integer; dispid 111;
    function DeleteOlderDt(const dt: ICkDateTime): Integer; dispid 112;
    function DeleteOlderStr(const dateTimeStr: WideString): Integer; dispid 113;
    function FetchFromCache(const url: WideString): OleVariant; dispid 114;
    function FetchText(const key: WideString): WideString; dispid 115;
    function GetEtag(const url: WideString): WideString; dispid 116;
    function GetExpiration(const url: WideString): TDateTime; dispid 117;
    function GetExpirationDt(const key: WideString): ICkDateTime; dispid 118;
    function GetExpirationStr(const url: WideString): WideString; dispid 119;
    function GetFilename(const url: WideString): WideString; dispid 120;
    function GetRoot(index: Integer): WideString; dispid 121;
    function IsCached(const url: WideString): Integer; dispid 122;
    function SaveText(const key: WideString; expire: TDateTime; const eTag: WideString; 
                      const strData: WideString): Integer; dispid 123;
    function SaveTextDt(const key: WideString; const expire: ICkDateTime; const eTag: WideString; 
                        const strData: WideString): Integer; dispid 124;
    function SaveTextNoExpire(const key: WideString; const eTag: WideString; 
                              const strData: WideString): Integer; dispid 125;
    function SaveTextStr(const key: WideString; const expireDateTimeStr: WideString; 
                         const eTag: WideString; const strData: WideString): Integer; dispid 126;
    function SaveToCache(const url: WideString; expire: TDateTime; const eTag: WideString; 
                         data: OleVariant): Integer; dispid 127;
    function SaveToCacheDt(const url: WideString; const expire: ICkDateTime; 
                           const eTag: WideString; data: OleVariant): Integer; dispid 128;
    function SaveToCacheNoExpire(const url: WideString; const eTag: WideString; data: OleVariant): Integer; dispid 129;
    function SaveToCacheStr(const url: WideString; const expireDateTimeStr: WideString; 
                            const eTag: WideString; data: OleVariant): Integer; dispid 130;
    function UpdateExpiration(const url: WideString; dt: TDateTime): Integer; dispid 131;
    function UpdateExpirationDt(const url: WideString; const dt: ICkDateTime): Integer; dispid 132;
    function UpdateExpirationStr(const url: WideString; const dateTimeStr: WideString): Integer; dispid 133;
  end;

// *********************************************************************//
// Interface: IChilkatBz2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E597F80D-BF1A-44AD-A038-D6AC9881B335}
// *********************************************************************//
  IChilkatBz2 = interface(IDispatch)
    ['{E597F80D-BF1A-44AD-A038-D6AC9881B335}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_HeartbeatMs: Integer; safecall;
    procedure Set_HeartbeatMs(pVal: Integer); safecall;
    function CompressFile(const inFilename: WideString; const toPath: WideString): Integer; safecall;
    function CompressFileToMem(const inFilename: WideString): OleVariant; safecall;
    function CompressMemToFile(inData: OleVariant; const toPath: WideString): Integer; safecall;
    function CompressMemory(inData: OleVariant): OleVariant; safecall;
    function UncompressFile(const inFilename: WideString; const toPath: WideString): Integer; safecall;
    function UncompressFileToMem(const inFilename: WideString): OleVariant; safecall;
    function UncompressMemToFile(inData: OleVariant; const toPath: WideString): Integer; safecall;
    function UncompressMemory(inData: OleVariant): OleVariant; safecall;
    function UnlockComponent(const regCode: WideString): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property HeartbeatMs: Integer read Get_HeartbeatMs write Set_HeartbeatMs;
  end;

// *********************************************************************//
// DispIntf:  IChilkatBz2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E597F80D-BF1A-44AD-A038-D6AC9881B335}
// *********************************************************************//
  IChilkatBz2Disp = dispinterface
    ['{E597F80D-BF1A-44AD-A038-D6AC9881B335}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property HeartbeatMs: Integer dispid 100;
    function CompressFile(const inFilename: WideString; const toPath: WideString): Integer; dispid 101;
    function CompressFileToMem(const inFilename: WideString): OleVariant; dispid 102;
    function CompressMemToFile(inData: OleVariant; const toPath: WideString): Integer; dispid 103;
    function CompressMemory(inData: OleVariant): OleVariant; dispid 104;
    function UncompressFile(const inFilename: WideString; const toPath: WideString): Integer; dispid 105;
    function UncompressFileToMem(const inFilename: WideString): OleVariant; dispid 106;
    function UncompressMemToFile(inData: OleVariant; const toPath: WideString): Integer; dispid 107;
    function UncompressMemory(inData: OleVariant): OleVariant; dispid 108;
    function UnlockComponent(const regCode: WideString): Integer; dispid 109;
  end;

// *********************************************************************//
// Interface: IChilkatBounce
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {32C35CC7-1CA6-4897-B21A-116D6DD42381}
// *********************************************************************//
  IChilkatBounce = interface(IDispatch)
    ['{32C35CC7-1CA6-4897-B21A-116D6DD42381}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_BounceData: WideString; safecall;
    function Get_BounceType: Integer; safecall;
    function Get_BounceAddress: WideString; safecall;
    function ExamineEml(const emlFilename: WideString): Integer; safecall;
    function ExamineMime(const mimeText: WideString): Integer; safecall;
    function UnlockComponent(const unlockCode: WideString): Integer; safecall;
    function ExamineEmail(const email: IChilkatEmail): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property BounceData: WideString read Get_BounceData;
    property BounceType: Integer read Get_BounceType;
    property BounceAddress: WideString read Get_BounceAddress;
  end;

// *********************************************************************//
// DispIntf:  IChilkatBounceDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {32C35CC7-1CA6-4897-B21A-116D6DD42381}
// *********************************************************************//
  IChilkatBounceDisp = dispinterface
    ['{32C35CC7-1CA6-4897-B21A-116D6DD42381}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property BounceData: WideString readonly dispid 100;
    property BounceType: Integer readonly dispid 101;
    property BounceAddress: WideString readonly dispid 102;
    function ExamineEml(const emlFilename: WideString): Integer; dispid 103;
    function ExamineMime(const mimeText: WideString): Integer; dispid 104;
    function UnlockComponent(const unlockCode: WideString): Integer; dispid 105;
    function ExamineEmail(const email: IChilkatEmail): Integer; dispid 107;
  end;

// *********************************************************************//
// Interface: IChilkatAtom
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {784E1D7C-F1E5-472F-AA06-AA6F1563ED94}
// *********************************************************************//
  IChilkatAtom = interface(IDispatch)
    ['{784E1D7C-F1E5-472F-AA06-AA6F1563ED94}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_NumEntries: Integer; safecall;
    function AddElement(const Tag: WideString; const value: WideString): Integer; safecall;
    function AddElementDate(const Tag: WideString; dateTime: TDateTime): Integer; safecall;
    function AddElementDateStr(const Tag: WideString; const dateTimeStr: WideString): Integer; safecall;
    function AddElementDt(const Tag: WideString; const dateTime: ICkDateTime): Integer; safecall;
    function AddElementHtml(const Tag: WideString; const htmlStr: WideString): Integer; safecall;
    function AddElementXHtml(const Tag: WideString; const xmlStr: WideString): Integer; safecall;
    function AddElementXml(const Tag: WideString; const xmlStr: WideString): Integer; safecall;
    procedure AddEntry(const xmlStr: WideString); safecall;
    procedure AddLink(const rel: WideString; const href: WideString; const title: WideString; 
                      const typ: WideString); safecall;
    procedure AddPerson(const Tag: WideString; const name: WideString; const uri: WideString; 
                        const email: WideString); safecall;
    procedure DeleteElement(const Tag: WideString; index: Integer); safecall;
    procedure DeleteElementAttr(const Tag: WideString; index: Integer; const attrName: WideString); safecall;
    procedure DeletePerson(const Tag: WideString; index: Integer); safecall;
    function DownloadAtom(const url: WideString): Integer; safecall;
    function GetElement(const Tag: WideString; index: Integer): WideString; safecall;
    function GetElementAttr(const Tag: WideString; index: Integer; const attrName: WideString): WideString; safecall;
    function GetElementCount(const Tag: WideString): Integer; safecall;
    function GetElementDate(const Tag: WideString; index: Integer): TDateTime; safecall;
    function GetElementDateStr(const Tag: WideString; index: Integer): WideString; safecall;
    function GetElementDt(const Tag: WideString; index: Integer): ICkDateTime; safecall;
    function GetEntry(index: Integer): IChilkatAtom; safecall;
    function GetLinkHref(const relName: WideString): WideString; safecall;
    function GetPersonInfo(const Tag: WideString; index: Integer; const tag2: WideString): WideString; safecall;
    function GetTopAttr(const attrName: WideString): WideString; safecall;
    function HasElement(const Tag: WideString): Integer; safecall;
    function LoadXml(const xmlStr: WideString): Integer; safecall;
    procedure NewEntry; safecall;
    procedure NewFeed; safecall;
    procedure SetElementAttr(const Tag: WideString; index: Integer; const attrName: WideString; 
                             const attrValue: WideString); safecall;
    procedure SetTopAttr(const attrName: WideString; const value: WideString); safecall;
    function ToXmlString: WideString; safecall;
    procedure UpdateElement(const Tag: WideString; index: Integer; const value: WideString); safecall;
    procedure UpdateElementDate(const Tag: WideString; index: Integer; dateTime: TDateTime); safecall;
    procedure UpdateElementDateStr(const Tag: WideString; index: Integer; 
                                   const dateTimeStr: WideString); safecall;
    procedure UpdateElementDt(const Tag: WideString; index: Integer; const dateTime: ICkDateTime); safecall;
    procedure UpdateElementHtml(const Tag: WideString; index: Integer; const htmlStr: WideString); safecall;
    procedure UpdateElementXHtml(const Tag: WideString; index: Integer; const xmlStr: WideString); safecall;
    procedure UpdateElementXml(const Tag: WideString; index: Integer; const xmlStr: WideString); safecall;
    procedure UpdatePerson(const Tag: WideString; index: Integer; const name: WideString; 
                           const uri: WideString; const email: WideString); safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property NumEntries: Integer read Get_NumEntries;
  end;

// *********************************************************************//
// DispIntf:  IChilkatAtomDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {784E1D7C-F1E5-472F-AA06-AA6F1563ED94}
// *********************************************************************//
  IChilkatAtomDisp = dispinterface
    ['{784E1D7C-F1E5-472F-AA06-AA6F1563ED94}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property NumEntries: Integer readonly dispid 100;
    function AddElement(const Tag: WideString; const value: WideString): Integer; dispid 101;
    function AddElementDate(const Tag: WideString; dateTime: TDateTime): Integer; dispid 102;
    function AddElementDateStr(const Tag: WideString; const dateTimeStr: WideString): Integer; dispid 103;
    function AddElementDt(const Tag: WideString; const dateTime: ICkDateTime): Integer; dispid 104;
    function AddElementHtml(const Tag: WideString; const htmlStr: WideString): Integer; dispid 105;
    function AddElementXHtml(const Tag: WideString; const xmlStr: WideString): Integer; dispid 106;
    function AddElementXml(const Tag: WideString; const xmlStr: WideString): Integer; dispid 107;
    procedure AddEntry(const xmlStr: WideString); dispid 108;
    procedure AddLink(const rel: WideString; const href: WideString; const title: WideString; 
                      const typ: WideString); dispid 109;
    procedure AddPerson(const Tag: WideString; const name: WideString; const uri: WideString; 
                        const email: WideString); dispid 110;
    procedure DeleteElement(const Tag: WideString; index: Integer); dispid 111;
    procedure DeleteElementAttr(const Tag: WideString; index: Integer; const attrName: WideString); dispid 112;
    procedure DeletePerson(const Tag: WideString; index: Integer); dispid 113;
    function DownloadAtom(const url: WideString): Integer; dispid 114;
    function GetElement(const Tag: WideString; index: Integer): WideString; dispid 115;
    function GetElementAttr(const Tag: WideString; index: Integer; const attrName: WideString): WideString; dispid 116;
    function GetElementCount(const Tag: WideString): Integer; dispid 117;
    function GetElementDate(const Tag: WideString; index: Integer): TDateTime; dispid 118;
    function GetElementDateStr(const Tag: WideString; index: Integer): WideString; dispid 119;
    function GetElementDt(const Tag: WideString; index: Integer): ICkDateTime; dispid 120;
    function GetEntry(index: Integer): IChilkatAtom; dispid 121;
    function GetLinkHref(const relName: WideString): WideString; dispid 122;
    function GetPersonInfo(const Tag: WideString; index: Integer; const tag2: WideString): WideString; dispid 123;
    function GetTopAttr(const attrName: WideString): WideString; dispid 124;
    function HasElement(const Tag: WideString): Integer; dispid 125;
    function LoadXml(const xmlStr: WideString): Integer; dispid 126;
    procedure NewEntry; dispid 127;
    procedure NewFeed; dispid 128;
    procedure SetElementAttr(const Tag: WideString; index: Integer; const attrName: WideString; 
                             const attrValue: WideString); dispid 129;
    procedure SetTopAttr(const attrName: WideString; const value: WideString); dispid 130;
    function ToXmlString: WideString; dispid 131;
    procedure UpdateElement(const Tag: WideString; index: Integer; const value: WideString); dispid 132;
    procedure UpdateElementDate(const Tag: WideString; index: Integer; dateTime: TDateTime); dispid 133;
    procedure UpdateElementDateStr(const Tag: WideString; index: Integer; 
                                   const dateTimeStr: WideString); dispid 134;
    procedure UpdateElementDt(const Tag: WideString; index: Integer; const dateTime: ICkDateTime); dispid 135;
    procedure UpdateElementHtml(const Tag: WideString; index: Integer; const htmlStr: WideString); dispid 136;
    procedure UpdateElementXHtml(const Tag: WideString; index: Integer; const xmlStr: WideString); dispid 137;
    procedure UpdateElementXml(const Tag: WideString; index: Integer; const xmlStr: WideString); dispid 138;
    procedure UpdatePerson(const Tag: WideString; index: Integer; const name: WideString; 
                           const uri: WideString; const email: WideString); dispid 139;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TCkDateTime
// Help String      : CkDateTime Class 9.5.0
// Default Interface: ICkDateTime
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TCkDateTime = class(TOleControl)
  private
    FIntf: ICkDateTime;
    function  GetControlInterface: ICkDateTime;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    function AddDays(numDays: Integer): Integer;
    procedure DeSerialize(const serializedDateTime: WideString);
    function GetAsDosDate(bLocal: Integer): Integer;
    function GetAsOleDate(bLocal: Integer): Double;
    function GetAsRfc822(bLocal: Integer): WideString;
    function GetAsUnixTime(bLocal: Integer): Integer;
    function Serialize: WideString;
    procedure SetFromCurrentSystemTime;
    procedure SetFromDosDate(bLocal: Integer; t: Integer);
    procedure SetFromOleDate(bLocal: Integer; dt: Double);
    function SetFromRfc822(const rfc822Str: WideString): Integer;
    procedure SetFromUnixTime(bLocal: Integer; t: Integer);
    property  ControlInterface: ICkDateTime read GetControlInterface;
    property  DefaultInterface: ICkDateTime read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property UtcOffset: Integer index 100 read GetIntegerProp;
    property IsDst: Integer index 101 read GetIntegerProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TCkStringArray
// Help String      : CkStringArray Class 9.5.0
// Default Interface: ICkStringArray
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TCkStringArray = class(TOleControl)
  private
    FIntf: ICkStringArray;
    function  GetControlInterface: ICkStringArray;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    function Append(const str: WideString): Integer;
    function AppendSerialized(const encodedStr: WideString): Integer;
    procedure Clear;
    function Contains(const str: WideString): Integer;
    function Find(const str: WideString; firstIndex: Integer): Integer;
    function FindFirstMatch(const str: WideString; firstIndex: Integer): Integer;
    function GetString(index: Integer): WideString;
    procedure InsertAt(index: Integer; const str: WideString);
    function LastString: WideString;
    function LoadFromFile(const filename: WideString): Integer;
    function LoadFromFile2(const filename: WideString; const charset: WideString): Integer;
    procedure LoadFromText(const str: WideString);
    function Pop: WideString;
    procedure Prepend(const str: WideString);
    procedure Remove(const str: WideString);
    function RemoveAt(index: Integer): Integer;
    function SaveNthToFile(index: Integer; const filename: WideString): Integer;
    function SaveToFile(const filename: WideString): Integer;
    function SaveToFile2(const filename: WideString; const charset: WideString): Integer;
    function SaveToText: WideString;
    function Serialize: WideString;
    procedure Sort(ascending: Integer);
    procedure SplitAndAppend(const str: WideString; const boundary: WideString);
    procedure Subtract(const sa: ICkStringArray);
    procedure Union(const sa: ICkStringArray);
    property  ControlInterface: ICkStringArray read GetControlInterface;
    property  DefaultInterface: ICkStringArray read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property Length: Integer index 130 read GetIntegerProp;
    property Count: Integer index 103 read GetIntegerProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property Crlf: Integer index 100 read GetIntegerProp write SetIntegerProp stored False;
    property Trim: Integer index 101 read GetIntegerProp write SetIntegerProp stored False;
    property Unique: Integer index 102 read GetIntegerProp write SetIntegerProp stored False;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatCsp
// Help String      : ChilkatCsp Class 9.5.0
// Default Interface: IChilkatCsp
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatCsp = class(TOleControl)
  private
    FIntf: IChilkatCsp;
    function  GetControlInterface: IChilkatCsp;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    function GetKeyContainerNames: ICkStringArray;
    function HasEncryptAlgorithm(const name: WideString; numBits: Integer): Integer;
    function HasHashAlgorithm(const name: WideString; numBits: Integer): Integer;
    function Initialize: Integer;
    function NthEncryptionAlgorithm(index: Integer): WideString;
    function NthEncryptionNumBits(index: Integer): Integer;
    function NthHashAlgorithmName(index: Integer): WideString;
    function NthHashNumBits(index: Integer): Integer;
    function NthKeyContainerName(index: Integer): WideString;
    function NthKeyExchangeAlgorithm(index: Integer): WideString;
    function NthKeyExchangeNumBits(index: Integer): Integer;
    function NthSignatureAlgorithm(index: Integer): WideString;
    function NthSignatureNumBits(index: Integer): Integer;
    function SetEncryptAlgorithm(const name: WideString): Integer;
    function SetHashAlgorithm(const name: WideString): Integer;
    function SetProviderMicrosoftBase: Integer;
    function SetProviderMicrosoftEnhanced: Integer;
    function SetProviderMicrosoftRsaAes: Integer;
    function SetProviderMicrosoftStrong: Integer;
    property  ControlInterface: IChilkatCsp read GetControlInterface;
    property  DefaultInterface: IChilkatCsp read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property EncryptAlgorithm: WideString index 100 read GetWideStringProp;
    property EncryptAlgorithmID: Integer index 101 read GetIntegerProp;
    property EncryptNumBits: Integer index 102 read GetIntegerProp;
    property HashAlgorithm: WideString index 103 read GetWideStringProp;
    property HashAlgorithmID: Integer index 104 read GetIntegerProp;
    property HashNumBits: Integer index 105 read GetIntegerProp;
    property NumEncryptAlgorithms: Integer index 108 read GetIntegerProp;
    property NumHashAlgorithms: Integer index 109 read GetIntegerProp;
    property NumKeyContainers: Integer index 110 read GetIntegerProp;
    property NumKeyExchangeAlgorithms: Integer index 111 read GetIntegerProp;
    property NumSignatureAlgorithms: Integer index 112 read GetIntegerProp;
    property ProviderType: Integer index 114 read GetIntegerProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property KeyContainerName: WideString index 106 read GetWideStringProp write SetWideStringProp stored False;
    property MachineKeyset: Integer index 107 read GetIntegerProp write SetIntegerProp stored False;
    property ProviderName: WideString index 113 read GetWideStringProp write SetWideStringProp stored False;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TPublicKey
// Help String      : PublicKey Class 9.5.0
// Default Interface: IPublicKey
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TPublicKey = class(TOleControl)
  private
    FIntf: IPublicKey;
    function  GetControlInterface: IPublicKey;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    function GetOpenSslDer: OleVariant;
    function GetOpenSslPem: WideString;
    function GetRsaDer: OleVariant;
    function GetXml: WideString;
    function LoadOpenSslDer(data: OleVariant): Integer;
    function LoadOpenSslDerFile(const path: WideString): Integer;
    function LoadOpenSslPem(const str: WideString): Integer;
    function LoadOpenSslPemFile(const path: WideString): Integer;
    function LoadPkcs1Pem(const str: WideString): Integer;
    function LoadRsaDer(data: OleVariant): Integer;
    function LoadRsaDerFile(const path: WideString): Integer;
    function LoadXml(const xml: WideString): Integer;
    function LoadXmlFile(const path: WideString): Integer;
    function SaveOpenSslDerFile(const path: WideString): Integer;
    function SaveOpenSslPemFile(const path: WideString): Integer;
    function SaveRsaDerFile(const path: WideString): Integer;
    function SaveXmlFile(const path: WideString): Integer;
    property  ControlInterface: IPublicKey read GetControlInterface;
    property  DefaultInterface: IPublicKey read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TPrivateKey
// Help String      : PrivateKey Class 9.5.0
// Default Interface: IPrivateKey
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TPrivateKey = class(TOleControl)
  private
    FIntf: IPrivateKey;
    function  GetControlInterface: IPrivateKey;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    function GetPkcs8: OleVariant;
    function GetPkcs8Encrypted(const password: WideString): OleVariant;
    function GetPkcs8EncryptedPem(const password: WideString): WideString;
    function GetPkcs8Pem: WideString;
    function GetRsaDer: OleVariant;
    function GetRsaPem: WideString;
    function GetXml: WideString;
    function LoadEncryptedPem(const pemStr: WideString; const password: WideString): Integer;
    function LoadEncryptedPemFile(const path: WideString; const password: WideString): Integer;
    function LoadPem(const str: WideString): Integer;
    function LoadPemFile(const path: WideString): Integer;
    function LoadPkcs8(data: OleVariant): Integer;
    function LoadPkcs8Encrypted(data: OleVariant; const password: WideString): Integer;
    function LoadPkcs8EncryptedFile(const path: WideString; const password: WideString): Integer;
    function LoadPkcs8File(const path: WideString): Integer;
    function LoadPvk(data: OleVariant; const password: WideString): Integer;
    function LoadPvkFile(const path: WideString; const password: WideString): Integer;
    function LoadRsaDer(data: OleVariant): Integer;
    function LoadRsaDerFile(const path: WideString): Integer;
    function LoadXml(const xml: WideString): Integer;
    function LoadXmlFile(const path: WideString): Integer;
    function SavePkcs8EncryptedFile(const password: WideString; const path: WideString): Integer;
    function SavePkcs8EncryptedPemFile(const password: WideString; const path: WideString): Integer;
    function SavePkcs8File(const path: WideString): Integer;
    function SavePkcs8PemFile(const path: WideString): Integer;
    function SaveRsaDerFile(const path: WideString): Integer;
    function SaveRsaPemFile(const path: WideString): Integer;
    function SaveXmlFile(const path: WideString): Integer;
    property  ControlInterface: IPrivateKey read GetControlInterface;
    property  DefaultInterface: IPrivateKey read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatCert
// Help String      : ChilkatCert Class 9.5.0
// Default Interface: IChilkatCert
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatCert = class(TOleControl)
  private
    FIntf: IChilkatCert;
    function  GetControlInterface: IChilkatCert;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    function CheckRevoked: Integer;
    function ExportCertDer: OleVariant;
    function ExportCertDerFile(const path: WideString): Integer;
    function ExportCertPem: WideString;
    function ExportCertPemFile(const path: WideString): Integer;
    function ExportCertXml: WideString;
    function ExportPrivateKey: IPrivateKey;
    function ExportPublicKey: IPublicKey;
    function ExportToPfxFile(const pfxFilename: WideString; const password: WideString; 
                             bIncludeChain: Integer): Integer;
    function FindIssuer: IChilkatCert;
    function GetEncoded: WideString;
    function GetPrivateKeyPem: WideString;
    function GetValidFromDt: ICkDateTime;
    function GetValidToDt: ICkDateTime;
    function HasPrivateKey: Integer;
    function LinkPrivateKey(const KeyContainerName: WideString; bMachineKeyset: Integer; 
                            bForSigning: Integer): Integer;
    function LoadByCommonName(const cn: WideString): Integer;
    function LoadByEmailAddress(const emailAddress: WideString): Integer;
    function LoadByIssuerAndSerialNumber(const IssuerCN: WideString; const serialNum: WideString): Integer;
    function LoadFromBase64(const encodedCert: WideString): Integer;
    function LoadFromBinary(data: OleVariant): Integer;
    function LoadFromFile(const path: WideString): Integer;
    function LoadPfxData(pfxData: OleVariant; const password: WideString): Integer;
    function LoadPfxFile(const pfxPath: WideString; const password: WideString): Integer;
    function PemFileToDerFile(const fromPath: WideString; const toPath: WideString): Integer;
    function SaveToFile(const path: WideString): Integer;
    function SetFromEncoded(const encodedCert: WideString): Integer;
    function SetPrivateKey(const privKey: IPrivateKey): Integer;
    function SetPrivateKeyPem(const privKeyPem: WideString): Integer;
    function ExportToPfxData(const password: WideString; includeCertChain: Integer): OleVariant;
    function UseCertVault(const vault: IChilkatXmlCertVault): Integer;
    function GetCertChain: IChilkatCertChain;
    function VerifySignature: Integer;
    property  ControlInterface: IChilkatCert read GetControlInterface;
    property  DefaultInterface: IChilkatCert read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property CertVersion: Integer index 101 read GetIntegerProp;
    property CspName: WideString index 102 read GetWideStringProp;
    property Expired: Integer index 103 read GetIntegerProp;
    property ForClientAuthentication: Integer index 104 read GetIntegerProp;
    property ForCodeSigning: Integer index 105 read GetIntegerProp;
    property ForSecureEmail: Integer index 106 read GetIntegerProp;
    property ForServerAuthentication: Integer index 107 read GetIntegerProp;
    property ForTimeStamping: Integer index 108 read GetIntegerProp;
    property HasKeyContainer: Integer index 109 read GetIntegerProp;
    property IntendedKeyUsage: Integer index 110 read GetIntegerProp;
    property IsRoot: Integer index 111 read GetIntegerProp;
    property IssuerC: WideString index 112 read GetWideStringProp;
    property IssuerCN: WideString index 113 read GetWideStringProp;
    property IssuerDN: WideString index 114 read GetWideStringProp;
    property IssuerE: WideString index 115 read GetWideStringProp;
    property IssuerL: WideString index 116 read GetWideStringProp;
    property IssuerO: WideString index 117 read GetWideStringProp;
    property IssuerOU: WideString index 118 read GetWideStringProp;
    property IssuerS: WideString index 119 read GetWideStringProp;
    property KeyContainerName: WideString index 120 read GetWideStringProp;
    property MachineKeyset: Integer index 121 read GetIntegerProp;
    property OcspUrl: WideString index 122 read GetWideStringProp;
    property PrivateKeyExportable: Integer index 123 read GetIntegerProp;
    property Revoked: Integer index 124 read GetIntegerProp;
    property Rfc822Name: WideString index 125 read GetWideStringProp;
    property SelfSigned: Integer index 126 read GetIntegerProp;
    property SerialNumber: WideString index 127 read GetWideStringProp;
    property Sha1Thumbprint: WideString index 128 read GetWideStringProp;
    property SignatureVerified: Integer index 129 read GetIntegerProp;
    property Silent: Integer index 130 read GetIntegerProp;
    property SubjectC: WideString index 131 read GetWideStringProp;
    property SubjectCN: WideString index 132 read GetWideStringProp;
    property SubjectDN: WideString index 133 read GetWideStringProp;
    property SubjectE: WideString index 134 read GetWideStringProp;
    property SubjectL: WideString index 135 read GetWideStringProp;
    property SubjectO: WideString index 136 read GetWideStringProp;
    property SubjectOU: WideString index 137 read GetWideStringProp;
    property SubjectS: WideString index 138 read GetWideStringProp;
    property TrustedRoot: Integer index 139 read GetIntegerProp;
    property ValidFrom: TDateTime index 140 read GetTDateTimeProp;
    property ValidFromStr: WideString index 141 read GetWideStringProp;
    property ValidTo: TDateTime index 142 read GetTDateTimeProp;
    property ValidToStr: WideString index 143 read GetWideStringProp;
    property SubjectKeyId: WideString index 175 read GetWideStringProp;
    property AuthorityKeyId: WideString index 176 read GetWideStringProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property AvoidWindowsPkAccess: Integer index 100 read GetIntegerProp write SetIntegerProp stored False;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatCertStore
// Help String      : ChilkatCertStore Class 9.5.0
// Default Interface: IChilkatCertStore
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatCertStore = class(TOleControl)
  private
    FIntf: IChilkatCertStore;
    function  GetControlInterface: IChilkatCertStore;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    function AddCertificate(const cert: IChilkatCert): Integer;
    function CreateFileStore(const filename: WideString): Integer;
    function CreateMemoryStore: Integer;
    function CreateRegistryStore(const regRoot: WideString; const regPath: WideString): Integer;
    function FindCertByRfc822Name(const name: WideString): IChilkatCert;
    function FindCertBySerial(const str: WideString): IChilkatCert;
    function FindCertBySha1Thumbprint(const str: WideString): IChilkatCert;
    function FindCertBySubject(const str: WideString): IChilkatCert;
    function FindCertBySubjectCN(const str: WideString): IChilkatCert;
    function FindCertBySubjectE(const str: WideString): IChilkatCert;
    function FindCertBySubjectO(const str: WideString): IChilkatCert;
    function FindCertForEmail(const emailAddress: WideString): IChilkatCert;
    function GetCertificate(index: Integer): IChilkatCert;
    function GetEmailCert(index: Integer): IChilkatCert;
    function LoadPemFile(const pemPath: WideString): Integer;
    function LoadPemStr(const pemString: WideString): Integer;
    function LoadPfxData(pfxData: OleVariant; const password: WideString): Integer;
    function LoadPfxFile(const pfxFilename: WideString; const password: WideString): Integer;
    function OpenCurrentUserStore(readOnly: Integer): Integer;
    function OpenFileStore(const filename: WideString; readOnly: Integer): Integer;
    function OpenLocalSystemStore(readOnly: Integer): Integer;
    function OpenRegistryStore(const regRoot: WideString; const regPath: WideString; 
                               readOnly: Integer): Integer;
    function RemoveCertificate(const cert: IChilkatCert): Integer;
    function OpenChilkatStore(readOnly: Integer): Integer;
    function OpenOutlookStore(readOnly: Integer): Integer;
    property  ControlInterface: IChilkatCertStore read GetControlInterface;
    property  DefaultInterface: IChilkatCertStore read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property NumCertificates: Integer index 100 read GetIntegerProp;
    property NumEmailCerts: Integer index 101 read GetIntegerProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property AvoidWindowsPkAccess: Integer index 103 read GetIntegerProp write SetIntegerProp stored False;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatCrypt2
// Help String      : ChilkatCrypt2 Class 9.5.0
// Default Interface: IChilkatCrypt2
// Def. Intf. DISP? : No
// Event   Interface: _IChilkatEvents
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatCrypt2AbortCheck = procedure(ASender: TObject; out abort: Integer) of object;
  TChilkatCrypt2PercentDone = procedure(ASender: TObject; percent: Integer; out abort: Integer) of object;
  TChilkatCrypt2ProgressInfo = procedure(ASender: TObject; const name: WideString; 
                                                           const value: WideString) of object;

  TChilkatCrypt2 = class(TOleControl)
  private
    FOnAbortCheck: TChilkatCrypt2AbortCheck;
    FOnPercentDone: TChilkatCrypt2PercentDone;
    FOnProgressInfo: TChilkatCrypt2ProgressInfo;
    FIntf: IChilkatCrypt2;
    function  GetControlInterface: IChilkatCrypt2;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
    function Get_IV: OleVariant;
    procedure Set_IV(pVal: OleVariant);
    function Get_Salt: OleVariant;
    procedure Set_Salt(pVal: OleVariant);
    function Get_SecretKey: OleVariant;
    procedure Set_SecretKey(pVal: OleVariant);
  public
    function GetImplAddrStr: WideString;
    procedure AddEncryptCert(const cert: IChilkatCert);
    function AddPfxSourceData(pfxData: OleVariant; const password: WideString): Integer;
    function AddPfxSourceFile(const pfxFilePath: WideString; const password: WideString): Integer;
    function ByteSwap4321(data: OleVariant): OleVariant;
    function BytesToString(inData: OleVariant; const charset: WideString): WideString;
    function CkDecryptFile(const srcFile: WideString; const destFile: WideString): Integer;
    function CkEncryptFile(const srcFile: WideString; const destFile: WideString): Integer;
    procedure ClearEncryptCerts;
    function CompressBytes(data: OleVariant): OleVariant;
    function CompressBytesENC(data: OleVariant): WideString;
    function CompressString(const str: WideString): OleVariant;
    function CompressStringENC(const str: WideString): WideString;
    function CreateDetachedSignature(const filename: WideString; const sigFile: WideString): Integer;
    function CreateP7M(const inFilename: WideString; const p7mFilename: WideString): Integer;
    function CreateP7S(const inFilename: WideString; const p7sFilename: WideString): Integer;
    function Decode(const str: WideString; const encoding: WideString): OleVariant;
    function DecodeString(const inStr: WideString; const charset: WideString; 
                          const encoding: WideString): WideString;
    function DecryptBytes(data: OleVariant): OleVariant;
    function DecryptBytesENC(const str: WideString): OleVariant;
    function DecryptEncoded(const str: WideString): WideString;
    function DecryptString(data: OleVariant): WideString;
    function DecryptStringENC(const str: WideString): WideString;
    function Encode(data: OleVariant; const encoding: WideString): WideString;
    function EncodeString(const inStr: WideString; const charset: WideString; 
                          const encoding: WideString): WideString;
    function EncryptBytes(data: OleVariant): OleVariant;
    function EncryptBytesENC(data: OleVariant): WideString;
    function EncryptEncoded(const str: WideString): WideString;
    function EncryptString(const str: WideString): OleVariant;
    function EncryptStringENC(const str: WideString): WideString;
    function GenEncodedSecretKey(const password: WideString; const encoding: WideString): WideString;
    function GenRandomBytesENC(numBytes: Integer): WideString;
    function GenerateSecretKey(const password: WideString): OleVariant;
    function GetEncodedIV(const encoding: WideString): WideString;
    function GetEncodedKey(const encoding: WideString): WideString;
    function GetEncodedSalt(const encoding: WideString): WideString;
    function GetLastCert: IChilkatCert;
    function GetSignatureSigningTime(index: Integer): TDateTime;
    function GetSignatureSigningTimeStr(index: Integer): WideString;
    function GetSignerCert(index: Integer): IChilkatCert;
    function HasSignatureSigningTime(index: Integer): Integer;
    function HashBeginBytes(data: OleVariant): Integer;
    function HashBeginString(const strData: WideString): Integer;
    function HashBytes(data: OleVariant): OleVariant;
    function HashBytesENC(data: OleVariant): WideString;
    function HashFile(const filename: WideString): OleVariant;
    function HashFileENC(const filename: WideString): WideString;
    function HashFinal: OleVariant;
    function HashFinalENC: WideString;
    function HashMoreBytes(data: OleVariant): Integer;
    function HashMoreString(const strData: WideString): Integer;
    function HashString(const str: WideString): OleVariant;
    function HashStringENC(const str: WideString): WideString;
    function HmacBytes(inBytes: OleVariant): OleVariant;
    function HmacBytesENC(inBytes: OleVariant): WideString;
    function HmacString(const inText: WideString): OleVariant;
    function HmacStringENC(const inText: WideString): WideString;
    function InflateBytes(data: OleVariant): OleVariant;
    function InflateBytesENC(const str: WideString): OleVariant;
    function InflateString(data: OleVariant): WideString;
    function InflateStringENC(const str: WideString): WideString;
    function IsUnlocked: Integer;
    function MySqlAesDecrypt(const strEncrypted: WideString; const strKey: WideString): WideString;
    function MySqlAesEncrypt(const strData: WideString; const strKey: WideString): WideString;
    function OpaqueSignBytes(data: OleVariant): OleVariant;
    function OpaqueSignBytesENC(data: OleVariant): WideString;
    function OpaqueSignString(const str: WideString): OleVariant;
    function OpaqueSignStringENC(const str: WideString): WideString;
    function OpaqueVerifyBytes(p7s: OleVariant): OleVariant;
    function OpaqueVerifyBytesENC(const p7s: WideString): OleVariant;
    function OpaqueVerifyString(p7s: OleVariant): WideString;
    function OpaqueVerifyStringENC(const p7s: WideString): WideString;
    function Pbkdf1(const password: WideString; const charset: WideString; 
                    const hashAlg: WideString; const Salt: WideString; IterationCount: Integer; 
                    outputKeyBitLen: Integer; const encoding: WideString): WideString;
    function Pbkdf2(const password: WideString; const charset: WideString; 
                    const hashAlg: WideString; const Salt: WideString; IterationCount: Integer; 
                    outputKeyBitLen: Integer; const encoding: WideString): WideString;
    procedure RandomizeIV;
    procedure RandomizeKey;
    function ReEncode(const data: WideString; const fromEncoding: WideString; 
                      const toEncoding: WideString): WideString;
    function ReadFile(const filename: WideString): OleVariant;
    function SetCSP(const csp: IChilkatCsp): Integer;
    function SetDecryptCert(const cert: IChilkatCert): Integer;
    function SetDecryptCert2(const cert: IChilkatCert; const key: IPrivateKey): Integer;
    procedure SetEncodedIV(const ivStr: WideString; const encoding: WideString);
    procedure SetEncodedKey(const keyStr: WideString; const encoding: WideString);
    procedure SetEncodedSalt(const saltStr: WideString; const encoding: WideString);
    function SetEncryptCert(const cert: IChilkatCert): Integer;
    procedure SetHmacKeyBytes(keyBytes: OleVariant);
    procedure SetHmacKeyEncoded(const key: WideString; const encoding: WideString);
    procedure SetHmacKeyString(const key: WideString);
    procedure SetSecretKeyViaPassword(const password: WideString);
    function SetSigningCert(const cert: IChilkatCert): Integer;
    function SetSigningCert2(const cert: IChilkatCert; const key: IPrivateKey): Integer;
    function SetVerifyCert(const cert: IChilkatCert): Integer;
    function SignBytes(data: OleVariant): OleVariant;
    function SignBytesENC(data: OleVariant): WideString;
    function SignString(const str: WideString): OleVariant;
    function SignStringENC(const str: WideString): WideString;
    function StringToBytes(const inStr: WideString; const charset: WideString): OleVariant;
    function TrimEndingWith(const inStr: WideString; const ending: WideString): WideString;
    function UnlockComponent(const b1: WideString): Integer;
    function VerifyBytes(data: OleVariant; sig: OleVariant): Integer;
    function VerifyBytesENC(data: OleVariant; const encodedSig: WideString): Integer;
    function VerifyDetachedSignature(const filename: WideString; const sigFile: WideString): Integer;
    function VerifyP7M(const p7mPath: WideString; const destPath: WideString): Integer;
    function VerifyP7S(const inFilename: WideString; const p7sFilename: WideString): Integer;
    function VerifyString(const str: WideString; sig: OleVariant): Integer;
    function VerifyStringENC(const str: WideString; const encodedSig: WideString): Integer;
    function WriteFile(const filename: WideString; fileData: OleVariant): Integer;
    function Shorten(inData: OleVariant; numBytes: Integer): OleVariant;
    function CrcFile(const crcAlg: WideString; const path: WideString): Integer;
    function CrcBytes(const crcAlg: WideString; byteData: OleVariant): Integer;
    function UseCertVault(const vault: IChilkatXmlCertVault): Integer;
    function GetSignerCertChain(index: Integer): IChilkatCertChain;
    property  ControlInterface: IChilkatCrypt2 read GetControlInterface;
    property  DefaultInterface: IChilkatCrypt2 read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property BlockSize: Integer index 100 read GetIntegerProp;
    property IV: OleVariant index 114 read GetOleVariantProp write SetOleVariantProp;
    property NumSignerCerts: Integer index 119 read GetIntegerProp;
    property Salt: OleVariant index 125 read GetOleVariantProp write SetOleVariantProp;
    property SecretKey: OleVariant index 126 read GetOleVariantProp write SetOleVariantProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property CadesEnabled: Integer index 101 read GetIntegerProp write SetIntegerProp stored False;
    property CadesSigPolicyHash: WideString index 102 read GetWideStringProp write SetWideStringProp stored False;
    property CadesSigPolicyId: WideString index 103 read GetWideStringProp write SetWideStringProp stored False;
    property CadesSigPolicyUri: WideString index 104 read GetWideStringProp write SetWideStringProp stored False;
    property charset: WideString index 105 read GetWideStringProp write SetWideStringProp stored False;
    property CipherMode: WideString index 106 read GetWideStringProp write SetWideStringProp stored False;
    property CompressionAlgorithm: WideString index 107 read GetWideStringProp write SetWideStringProp stored False;
    property CryptAlgorithm: WideString index 108 read GetWideStringProp write SetWideStringProp stored False;
    property EncodingMode: WideString index 109 read GetWideStringProp write SetWideStringProp stored False;
    property FirstChunk: Integer index 110 read GetIntegerProp write SetIntegerProp stored False;
    property HashAlgorithm: WideString index 111 read GetWideStringProp write SetWideStringProp stored False;
    property HavalRounds: Integer index 112 read GetIntegerProp write SetIntegerProp stored False;
    property HeartbeatMs: Integer index 113 read GetIntegerProp write SetIntegerProp stored False;
    property includeCertChain: Integer index 115 read GetIntegerProp write SetIntegerProp stored False;
    property IterationCount: Integer index 116 read GetIntegerProp write SetIntegerProp stored False;
    property KeyLength: Integer index 117 read GetIntegerProp write SetIntegerProp stored False;
    property LastChunk: Integer index 118 read GetIntegerProp write SetIntegerProp stored False;
    property PaddingScheme: Integer index 120 read GetIntegerProp write SetIntegerProp stored False;
    property PbesAlgorithm: WideString index 121 read GetWideStringProp write SetWideStringProp stored False;
    property PbesPassword: WideString index 122 read GetWideStringProp write SetWideStringProp stored False;
    property Pkcs7CryptAlg: WideString index 123 read GetWideStringProp write SetWideStringProp stored False;
    property Rc2EffectiveKeyLength: Integer index 124 read GetIntegerProp write SetIntegerProp stored False;
    property UuFilename: WideString index 127 read GetWideStringProp write SetWideStringProp stored False;
    property UuMode: WideString index 128 read GetWideStringProp write SetWideStringProp stored False;
    property ByteSwapOnDecrypt: Integer index 129 read GetIntegerProp write SetIntegerProp stored False;
    property OnAbortCheck: TChilkatCrypt2AbortCheck read FOnAbortCheck write FOnAbortCheck;
    property OnPercentDone: TChilkatCrypt2PercentDone read FOnPercentDone write FOnPercentDone;
    property OnProgressInfo: TChilkatCrypt2ProgressInfo read FOnProgressInfo write FOnProgressInfo;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatXmlCertVault
// Help String      : ChilkatXmlCertVault Class 9.5.0
// Default Interface: IChilkatXmlCertVault
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatXmlCertVault = class(TOleControl)
  private
    FIntf: IChilkatXmlCertVault;
    function  GetControlInterface: IChilkatXmlCertVault;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    function AddPfxFile(const path: WideString; const password: WideString): Integer;
    function AddCertFile(const path: WideString): Integer;
    function AddPemFile(const path: WideString; const password: WideString): Integer;
    function SaveXml(const path: WideString): Integer;
    function LoadXml(const xml: WideString): Integer;
    function LoadXmlFile(const path: WideString): Integer;
    function GetXml: WideString;
    function AddCertBinary(certBytes: OleVariant): Integer;
    function AddPfxBinary(pfxBytes: OleVariant; const password: WideString): Integer;
    function AddCertString(const certData: WideString): Integer;
    function AddPfxEncoded(const encodedBytes: WideString; const encoding: WideString; 
                           const password: WideString): Integer;
    function AddCertEncoded(const encodedBytes: WideString; const encoding: WideString): Integer;
    function AddCert(const cert: IChilkatCert): Integer;
    function AddPfx(const pfx: IChilkatPfx): Integer;
    function AddCertChain(const certChain: IChilkatCertChain): Integer;
    property  ControlInterface: IChilkatXmlCertVault read GetControlInterface;
    property  DefaultInterface: IChilkatXmlCertVault read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property MasterPassword: WideString index 100 read GetWideStringProp write SetWideStringProp stored False;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatPfx
// Help String      : ChilkatPfx Class 9.5.0
// Default Interface: IChilkatPfx
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatPfx = class(TOleControl)
  private
    FIntf: IChilkatPfx;
    function  GetControlInterface: IChilkatPfx;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    function GetCert(index: Integer): IChilkatCert;
    function GetPrivateKey(index: Integer): IPrivateKey;
    function LoadPfxBytes(pfxData: OleVariant; const password: WideString): Integer;
    function LoadPfxEncoded(const encodedData: WideString; const encoding: WideString; 
                            const password: WideString): Integer;
    function LoadPfxFile(const path: WideString; const password: WideString): Integer;
    property  ControlInterface: IChilkatPfx read GetControlInterface;
    property  DefaultInterface: IChilkatPfx read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property NumCerts: Integer index 100 read GetIntegerProp;
    property NumPrivateKeys: Integer index 101 read GetIntegerProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatCertChain
// Help String      : ChilkatCertChain Class 9.5.0
// Default Interface: IChilkatCertChain
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatCertChain = class(TOleControl)
  private
    FIntf: IChilkatCertChain;
    function  GetControlInterface: IChilkatCertChain;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    function GetCert(index: Integer): IChilkatCert;
    function VerifyCertSignatures: Integer;
    function IsRootTrusted(const trustedRoots: IChilkatTrustedRoots): Integer;
    property  ControlInterface: IChilkatCertChain read GetControlInterface;
    property  DefaultInterface: IChilkatCertChain read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property NumCerts: Integer index 100 read GetIntegerProp;
    property NumExpiredCerts: Integer index 101 read GetIntegerProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatTrustedRoots
// Help String      : ChilkatTrustedRoots Class 9.5.0
// Default Interface: IChilkatTrustedRoots
// Def. Intf. DISP? : No
// Event   Interface: _IChilkatEvents
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatTrustedRootsAbortCheck = procedure(ASender: TObject; out abort: Integer) of object;
  TChilkatTrustedRootsPercentDone = procedure(ASender: TObject; percent: Integer; out abort: Integer) of object;
  TChilkatTrustedRootsProgressInfo = procedure(ASender: TObject; const name: WideString; 
                                                                 const value: WideString) of object;

  TChilkatTrustedRoots = class(TOleControl)
  private
    FOnAbortCheck: TChilkatTrustedRootsAbortCheck;
    FOnPercentDone: TChilkatTrustedRootsPercentDone;
    FOnProgressInfo: TChilkatTrustedRootsProgressInfo;
    FIntf: IChilkatTrustedRoots;
    function  GetControlInterface: IChilkatTrustedRoots;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    function LoadCaCertsPem(const path: WideString): Integer;
    function GetCert(index: Integer): IChilkatCert;
    function Activate: Integer;
    function Deactivate: Integer;
    property  ControlInterface: IChilkatTrustedRoots read GetControlInterface;
    property  DefaultInterface: IChilkatTrustedRoots read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property NumCerts: Integer index 100 read GetIntegerProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property OnAbortCheck: TChilkatTrustedRootsAbortCheck read FOnAbortCheck write FOnAbortCheck;
    property OnPercentDone: TChilkatTrustedRootsPercentDone read FOnPercentDone write FOnPercentDone;
    property OnProgressInfo: TChilkatTrustedRootsProgressInfo read FOnProgressInfo write FOnProgressInfo;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TCkString
// Help String      : CkString Class 9.5.0
// Default Interface: ICkString
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TCkString = class(TOleControl)
  private
    FIntf: ICkString;
    function  GetControlInterface: ICkString;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    function AnsiCharAt(index: Integer): Integer;
    procedure Append(const inStr: WideString);
    procedure AppendDateRfc3339(dt: TDateTime);
    procedure AppendDateRfc822(dt: TDateTime);
    procedure AppendEncoded(const str: WideString; const encoding: WideString; 
                            const charset: WideString);
    procedure AppendMultibyte(mbtext: OleVariant; const charset: WideString);
    function AppendToFile(const filename: WideString; const charset: WideString): Integer;
    function BeginsWith(const substr: WideString): Integer;
    procedure ChopAfter(const findStr: WideString);
    procedure ChopBefore(const findStr: WideString);
    procedure Clear;
    function Contains(const substr: WideString): Integer;
    function EmitMultibyte(const charset: WideString): OleVariant;
    function EndsWith(const substr: WideString): Integer;
    function GetEncoded(const encoding: WideString; const charset: WideString): WideString;
    procedure HtmlEntityDecode;
    procedure HtmlEntityEncode;
    function LastAnsiChar: Integer;
    function Left(NumChars: Integer): WideString;
    function Length: Integer;
    function LoadFile(const filename: WideString; const charset: WideString): Integer;
    procedure LoadXmlDoc(xmlDoc: OleVariant);
    function Matches(const pattern: WideString; caseSensitive: Integer): Integer;
    function Mid(idx: Integer; NumChars: Integer): WideString;
    function ParseDateRfc3339: TDateTime;
    function ParseDateRfc822: TDateTime;
    procedure Pluralize;
    procedure Prepend(const inStr: WideString);
    procedure RemoveAnsiChar(ch: Integer);
    procedure ReplaceAll(const substr: WideString; const replacement: WideString);
    procedure ReplaceAnsiChar(c1: Integer; c2: Integer);
    procedure ReplaceFirst(const substr: WideString; const replacement: WideString);
    function Right(NumChars: Integer): WideString;
    function SaveToFile(const filename: WideString; const charset: WideString): Integer;
    procedure Shorten(NumChars: Integer);
    function StrComp(const inStr: WideString; caseSensitive: Integer): Integer;
    procedure StripHtml;
    procedure ToCRLF;
    procedure ToLF;
    procedure Trim;
    procedure Trim2;
    procedure TrimInside;
    procedure Unpluralize;
    property  ControlInterface: ICkString read GetControlInterface;
    property  DefaultInterface: ICkString read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property NumArabic: Integer index 100 read GetIntegerProp;
    property NumAscii: Integer index 101 read GetIntegerProp;
    property NumCentralEuro: Integer index 102 read GetIntegerProp;
    property NumChars: Integer index 103 read GetIntegerProp;
    property NumChinese: Integer index 104 read GetIntegerProp;
    property NumCyrillic: Integer index 105 read GetIntegerProp;
    property NumGreek: Integer index 106 read GetIntegerProp;
    property NumHebrew: Integer index 107 read GetIntegerProp;
    property NumJapanese: Integer index 108 read GetIntegerProp;
    property NumKorean: Integer index 109 read GetIntegerProp;
    property NumLatin: Integer index 110 read GetIntegerProp;
    property NumThai: Integer index 111 read GetIntegerProp;
    property SizeAnsi: Integer index 112 read GetIntegerProp;
    property SizeUtf8: Integer index 113 read GetIntegerProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property str: WideString index 114 read GetWideStringProp write SetWideStringProp stored False;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatZipEntry
// Help String      : ChilkatZipEntry Class 9.5.0
// Default Interface: IChilkatZipEntry
// Def. Intf. DISP? : No
// Event   Interface: _IChilkatEvents
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatZipEntryAbortCheck = procedure(ASender: TObject; out abort: Integer) of object;
  TChilkatZipEntryPercentDone = procedure(ASender: TObject; percent: Integer; out abort: Integer) of object;
  TChilkatZipEntryProgressInfo = procedure(ASender: TObject; const name: WideString; 
                                                             const value: WideString) of object;

  TChilkatZipEntry = class(TOleControl)
  private
    FOnAbortCheck: TChilkatZipEntryAbortCheck;
    FOnPercentDone: TChilkatZipEntryPercentDone;
    FOnProgressInfo: TChilkatZipEntryProgressInfo;
    FIntf: IChilkatZipEntry;
    function  GetControlInterface: IChilkatZipEntry;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    function AppendData(inData: OleVariant): Integer;
    function AppendString(const inStr: WideString; const charset: WideString): Integer;
    function Copy: OleVariant;
    function CopyToBase64: WideString;
    function CopyToHex: WideString;
    function Extract(const dirPath: WideString): Integer;
    function ExtractInto(const dirPath: WideString): Integer;
    function GetDt: ICkDateTime;
    function Inflate: OleVariant;
    function NextEntry: IChilkatZipEntry;
    function ReplaceData(inData: OleVariant): Integer;
    function ReplaceString(const inStr: WideString; const charset: WideString): Integer;
    procedure SetDt(const dt: ICkDateTime);
    function UnzipToString(lineEndingBehavior: Integer; const srcCharset: WideString): WideString;
    property  ControlInterface: IChilkatZipEntry read GetControlInterface;
    property  DefaultInterface: IChilkatZipEntry read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property CompressedLength: Integer index 101 read GetIntegerProp;
    property CompressedLengthStr: WideString index 102 read GetWideStringProp;
    property Crc: Integer index 105 read GetIntegerProp;
    property EntryID: Integer index 106 read GetIntegerProp;
    property EntryType: Integer index 107 read GetIntegerProp;
    property isDirectory: Integer index 112 read GetIntegerProp;
    property UncompressedLength: Integer index 114 read GetIntegerProp;
    property UncompressedLengthStr: WideString index 115 read GetWideStringProp;
    property FileNameHex: WideString index 133 read GetWideStringProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property Comment: WideString index 100 read GetWideStringProp write SetWideStringProp stored False;
    property CompressionLevel: Integer index 103 read GetIntegerProp write SetIntegerProp stored False;
    property CompressionMethod: Integer index 104 read GetIntegerProp write SetIntegerProp stored False;
    property FileDateTime: TDateTime index 108 read GetTDateTimeProp write SetTDateTimeProp stored False;
    property FileDateTimeStr: WideString index 109 read GetWideStringProp write SetWideStringProp stored False;
    property filename: WideString index 110 read GetWideStringProp write SetWideStringProp stored False;
    property HeartbeatMs: Integer index 111 read GetIntegerProp write SetIntegerProp stored False;
    property TextFlag: Integer index 113 read GetIntegerProp write SetIntegerProp stored False;
    property OnAbortCheck: TChilkatZipEntryAbortCheck read FOnAbortCheck write FOnAbortCheck;
    property OnPercentDone: TChilkatZipEntryPercentDone read FOnPercentDone write FOnPercentDone;
    property OnProgressInfo: TChilkatZipEntryProgressInfo read FOnProgressInfo write FOnProgressInfo;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatZip
// Help String      : ChilkatZip Class 9.5.0
// Default Interface: IChilkatZip
// Def. Intf. DISP? : No
// Event   Interface: _IChilkatZipEvents
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatZipAbortCheck = procedure(ASender: TObject; out abort: Integer) of object;
  TChilkatZipPercentDone = procedure(ASender: TObject; percent: Integer; out abort: Integer) of object;
  TChilkatZipProgressInfo = procedure(ASender: TObject; const name: WideString; 
                                                        const value: WideString) of object;
  TChilkatZipFileUnzipped = procedure(ASender: TObject; const filename: WideString; 
                                                        compressedSize: Integer; 
                                                        uncompressedSize: Integer; 
                                                        out abort: Integer) of object;
  TChilkatZipToBeAdded = procedure(ASender: TObject; const filename: WideString; fileSize: Integer; 
                                                     out exclude: Integer) of object;
  TChilkatZipFileAdded = procedure(ASender: TObject; const filename: WideString; fileSize: Integer; 
                                                     out abort: Integer) of object;
  TChilkatZipToBeZipped = procedure(ASender: TObject; const filename: WideString; 
                                                      fileSize: Integer; out exclude: Integer) of object;
  TChilkatZipFileZipped = procedure(ASender: TObject; const filename: WideString; 
                                                      fileSize: Integer; compressedSize: Integer; 
                                                      out abort: Integer) of object;
  TChilkatZipToBeUnzipped = procedure(ASender: TObject; const filename: WideString; 
                                                        compressedSize: Integer; 
                                                        uncompressedSize: Integer; 
                                                        out exclude: Integer) of object;
  TChilkatZipSkippedForUnzip = procedure(ASender: TObject; const filename: WideString; 
                                                           compressedSize: Integer; 
                                                           uncompressedSize: Integer) of object;
  TChilkatZipDirToBeAdded = procedure(ASender: TObject; const filename: WideString; 
                                                        out exclude: Integer) of object;

  TChilkatZip = class(TOleControl)
  private
    FOnAbortCheck: TChilkatZipAbortCheck;
    FOnPercentDone: TChilkatZipPercentDone;
    FOnProgressInfo: TChilkatZipProgressInfo;
    FOnFileUnzipped: TChilkatZipFileUnzipped;
    FOnToBeAdded: TChilkatZipToBeAdded;
    FOnFileAdded: TChilkatZipFileAdded;
    FOnUnzipBegin: TNotifyEvent;
    FOnUnzipEnd: TNotifyEvent;
    FOnWriteZipBegin: TNotifyEvent;
    FOnWriteZipEnd: TNotifyEvent;
    FOnToBeZipped: TChilkatZipToBeZipped;
    FOnFileZipped: TChilkatZipFileZipped;
    FOnToBeUnzipped: TChilkatZipToBeUnzipped;
    FOnAddFilesBegin: TNotifyEvent;
    FOnSkippedForUnzip: TChilkatZipSkippedForUnzip;
    FOnAddFilesEnd: TNotifyEvent;
    FOnDirToBeAdded: TChilkatZipDirToBeAdded;
    FIntf: IChilkatZip;
    function  GetControlInterface: IChilkatZip;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    function AddEmbedded(const exeFilename: WideString; const resourceName: WideString; 
                         const zipFilename: WideString): Integer;
    procedure AddNoCompressExtension(const fileExtension: WideString);
    function AppendBase64(const filename: WideString; const encodedCompressedData: WideString): IChilkatZipEntry;
    function AppendCompressed(const filename: WideString; inData: OleVariant): IChilkatZipEntry;
    function AppendData(const filename: WideString; inData: OleVariant): IChilkatZipEntry;
    function AppendFiles(const filePattern: WideString; recurse: Integer): Integer;
    function AppendFilesEx(const filePattern: WideString; recurse: Integer; saveExtraPath: Integer; 
                           archiveOnly: Integer; includeHidden: Integer; includeSystem: Integer): Integer;
    function AppendHex(const filename: WideString; const encodedCompressedData: WideString): IChilkatZipEntry;
    function AppendMultiple(const fileSpecs: ICkStringArray; recurse: Integer): Integer;
    function AppendNew(const filename: WideString): IChilkatZipEntry;
    function AppendNewDir(const dirName: WideString): IChilkatZipEntry;
    function AppendOneFileOrDir(const fileOrDirName: WideString; saveExtraPath: Integer): Integer;
    function AppendString(const filename: WideString; const str: WideString): IChilkatZipEntry;
    function AppendString2(const filename: WideString; const str: WideString; 
                           const charset: WideString): IChilkatZipEntry;
    function AppendZip(const zipFilename: WideString): Integer;
    procedure CloseZip;
    function DeleteEntry(const entry: IChilkatZipEntry): Integer;
    procedure ExcludeDir(const dirName: WideString);
    function Extract(const dirPath: WideString): Integer;
    function FirstEntry: IChilkatZipEntry;
    function FirstMatchingEntry(const pattern: WideString): IChilkatZipEntry;
    function GetDirectoryAsXML: WideString;
    function GetEntryByID(EntryID: Integer): IChilkatZipEntry;
    function GetEntryByIndex(index: Integer): IChilkatZipEntry;
    function GetEntryByName(const entryName: WideString): IChilkatZipEntry;
    function GetExclusions: ICkStringArray;
    function GetExeConfigParam(const name: WideString): WideString;
    function InsertNew(const filename: WideString; beforeIndex: Integer): IChilkatZipEntry;
    function IsNoCompressExtension(const fileExtension: WideString): Integer;
    function IsPasswordProtected(const zipFilename: WideString): Integer;
    function IsUnlocked: Integer;
    function NewZip(const zipFilename: WideString): Integer;
    function OpenEmbedded(const exeFilename: WideString; const resourceName: WideString): Integer;
    function OpenFromByteData(byteData: OleVariant): Integer;
    function OpenFromMemory(inData: OleVariant): Integer;
    function OpenMyEmbedded(const resourceName: WideString): Integer;
    function OpenZip(const zipFilename: WideString): Integer;
    function QuickAppend(const zipFilename: WideString): Integer;
    function RemoveEmbedded(const exeFilename: WideString; const resourceName: WideString): Integer;
    procedure RemoveNoCompressExtension(const fileExtension: WideString);
    function ReplaceEmbedded(const exeFilename: WideString; const resourceName: WideString; 
                             const zipFilename: WideString): Integer;
    procedure SetCompressionLevel(level: Integer);
    procedure SetExclusions(const excludePatterns: ICkStringArray);
    procedure SetExeConfigParam(const name: WideString; const value: WideString);
    procedure SetPassword(const password: WideString);
    function UnlockComponent(const regCode: WideString): Integer;
    function Unzip(const dirPath: WideString): Integer;
    function UnzipInto(const dirPath: WideString): Integer;
    function UnzipMatching(const dirPath: WideString; const pattern: WideString; verbose: Integer): Integer;
    function UnzipMatchingInto(const dirPath: WideString; const pattern: WideString; 
                               verbose: Integer): Integer;
    function UnzipNewer(const dirPath: WideString): Integer;
    function VerifyPassword: Integer;
    function WriteExe(const exeFilename: WideString): Integer;
    function WriteExe2(const exePath: WideString; const destExePath: WideString; 
                       bAesEncrypt: Integer; KeyLength: Integer; const password: WideString): Integer;
    function WriteExeToMemory: OleVariant;
    function WriteToMemory: OleVariant;
    function WriteZip: Integer;
    function WriteZipAndClose: Integer;
    property  ControlInterface: IChilkatZip read GetControlInterface;
    property  DefaultInterface: IChilkatZip read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property FileCount: Integer index 123 read GetIntegerProp;
    property HasZipFormatErrors: Integer index 125 read GetIntegerProp;
    property NumEntries: Integer index 128 read GetIntegerProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property AppendFromDir: WideString index 100 read GetWideStringProp write SetWideStringProp stored False;
    property AutoRun: WideString index 101 read GetWideStringProp write SetWideStringProp stored False;
    property AutoRunParams: WideString index 102 read GetWideStringProp write SetWideStringProp stored False;
    property AutoTemp: Integer index 103 read GetIntegerProp write SetIntegerProp stored False;
    property caseSensitive: Integer index 104 read GetIntegerProp write SetIntegerProp stored False;
    property ClearArchiveAttribute: Integer index 105 read GetIntegerProp write SetIntegerProp stored False;
    property ClearReadOnlyAttr: Integer index 106 read GetIntegerProp write SetIntegerProp stored False;
    property Comment: WideString index 107 read GetWideStringProp write SetWideStringProp stored False;
    property DecryptPassword: WideString index 108 read GetWideStringProp write SetWideStringProp stored False;
    property DiscardPaths: Integer index 109 read GetIntegerProp write SetIntegerProp stored False;
    property EncryptKeyLength: Integer index 110 read GetIntegerProp write SetIntegerProp stored False;
    property EncryptPassword: WideString index 111 read GetWideStringProp write SetWideStringProp stored False;
    property Encryption: Integer index 112 read GetIntegerProp write SetIntegerProp stored False;
    property ExeDefaultDir: WideString index 113 read GetWideStringProp write SetWideStringProp stored False;
    property ExeFinishNotifier: Integer index 114 read GetIntegerProp write SetIntegerProp stored False;
    property ExeIconFile: WideString index 115 read GetWideStringProp write SetWideStringProp stored False;
    property ExeNoInterface: Integer index 116 read GetIntegerProp write SetIntegerProp stored False;
    property ExeSilentProgress: Integer index 117 read GetIntegerProp write SetIntegerProp stored False;
    property ExeTitle: WideString index 118 read GetWideStringProp write SetWideStringProp stored False;
    property ExeUnzipCaption: WideString index 119 read GetWideStringProp write SetWideStringProp stored False;
    property ExeUnzipDir: WideString index 120 read GetWideStringProp write SetWideStringProp stored False;
    property ExeWaitForSetup: Integer index 121 read GetIntegerProp write SetIntegerProp stored False;
    property ExeXmlConfig: WideString index 122 read GetWideStringProp write SetWideStringProp stored False;
    property filename: WideString index 124 read GetWideStringProp write SetWideStringProp stored False;
    property HeartbeatMs: Integer index 126 read GetIntegerProp write SetIntegerProp stored False;
    property IgnoreAccessDenied: Integer index 127 read GetIntegerProp write SetIntegerProp stored False;
    property OemCodePage: Integer index 129 read GetIntegerProp write SetIntegerProp stored False;
    property OverwriteExisting: Integer index 130 read GetIntegerProp write SetIntegerProp stored False;
    property PasswordProtect: Integer index 131 read GetIntegerProp write SetIntegerProp stored False;
    property PathPrefix: WideString index 132 read GetWideStringProp write SetWideStringProp stored False;
    property TempDir: WideString index 134 read GetWideStringProp write SetWideStringProp stored False;
    property TextFlag: Integer index 135 read GetIntegerProp write SetIntegerProp stored False;
    property Zipx: Integer index 136 read GetIntegerProp write SetIntegerProp stored False;
    property ZipxDefaultAlg: WideString index 137 read GetWideStringProp write SetWideStringProp stored False;
    property OnAbortCheck: TChilkatZipAbortCheck read FOnAbortCheck write FOnAbortCheck;
    property OnPercentDone: TChilkatZipPercentDone read FOnPercentDone write FOnPercentDone;
    property OnProgressInfo: TChilkatZipProgressInfo read FOnProgressInfo write FOnProgressInfo;
    property OnFileUnzipped: TChilkatZipFileUnzipped read FOnFileUnzipped write FOnFileUnzipped;
    property OnToBeAdded: TChilkatZipToBeAdded read FOnToBeAdded write FOnToBeAdded;
    property OnFileAdded: TChilkatZipFileAdded read FOnFileAdded write FOnFileAdded;
    property OnUnzipBegin: TNotifyEvent read FOnUnzipBegin write FOnUnzipBegin;
    property OnUnzipEnd: TNotifyEvent read FOnUnzipEnd write FOnUnzipEnd;
    property OnWriteZipBegin: TNotifyEvent read FOnWriteZipBegin write FOnWriteZipBegin;
    property OnWriteZipEnd: TNotifyEvent read FOnWriteZipEnd write FOnWriteZipEnd;
    property OnToBeZipped: TChilkatZipToBeZipped read FOnToBeZipped write FOnToBeZipped;
    property OnFileZipped: TChilkatZipFileZipped read FOnFileZipped write FOnFileZipped;
    property OnToBeUnzipped: TChilkatZipToBeUnzipped read FOnToBeUnzipped write FOnToBeUnzipped;
    property OnAddFilesBegin: TNotifyEvent read FOnAddFilesBegin write FOnAddFilesBegin;
    property OnSkippedForUnzip: TChilkatZipSkippedForUnzip read FOnSkippedForUnzip write FOnSkippedForUnzip;
    property OnAddFilesEnd: TNotifyEvent read FOnAddFilesEnd write FOnAddFilesEnd;
    property OnDirToBeAdded: TChilkatZipDirToBeAdded read FOnDirToBeAdded write FOnDirToBeAdded;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatXmp
// Help String      : ChilkatXmp Class 9.5.0
// Default Interface: IChilkatXmp
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatXmp = class(TOleControl)
  private
    FIntf: IChilkatXmp;
    function  GetControlInterface: IChilkatXmp;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    function AddArray(const xml: IChilkatXml; const arrType: WideString; 
                      const propName: WideString; const values: ICkStringArray): Integer;
    procedure AddNsMapping(const ns: WideString; const uri: WideString);
    function AddSimpleDate(const iXml: IChilkatXml; const propName: WideString; propVal: TDateTime): Integer;
    function AddSimpleInt(const iXml: IChilkatXml; const propName: WideString; propVal: Integer): Integer;
    function AddSimpleStr(const iXml: IChilkatXml; const propName: WideString; 
                          const propVal: WideString): Integer;
    function AddStructProp(const IChilkatXml: IChilkatXml; const structName: WideString; 
                           const propName: WideString; const propValue: WideString): Integer;
    function Append(const iXml: IChilkatXml): Integer;
    function DateToString(d: TDateTime): WideString;
    function GetArray(const iXml: IChilkatXml; const propName: WideString): ICkStringArray;
    function GetEmbedded(index: Integer): IChilkatXml;
    function GetProperty(const iXml: IChilkatXml; const propName: WideString): IChilkatXml;
    function GetSimpleDate(const iXml: IChilkatXml; const propName: WideString): TDateTime;
    function GetSimpleInt(const iXml: IChilkatXml; const propName: WideString): Integer;
    function GetSimpleStr(const iXml: IChilkatXml; const propName: WideString): WideString;
    function GetStructPropNames(const iXml: IChilkatXml; const structName: WideString): ICkStringArray;
    function GetStructValue(const iXml: IChilkatXml; const structName: WideString; 
                            const propName: WideString): WideString;
    function LoadAppFile(const filename: WideString): Integer;
    function LoadFromBuffer(fileData: OleVariant; const ext: WideString): Integer;
    function NewXmp: IChilkatXml;
    function RemoveAllEmbedded: Integer;
    function RemoveArray(const iXml: IChilkatXml; const propName: WideString): Integer;
    function RemoveEmbedded(index: Integer): Integer;
    procedure RemoveNsMapping(const ns: WideString);
    function RemoveSimple(const iXml: IChilkatXml; const propName: WideString): Integer;
    function RemoveStruct(const iXml: IChilkatXml; const structName: WideString): Integer;
    function RemoveStructProp(const iXml: IChilkatXml; const structName: WideString; 
                              const propName: WideString): Integer;
    function SaveAppFile(const filename: WideString): Integer;
    function SaveToBuffer: OleVariant;
    function StringToDate(const str: WideString): TDateTime;
    function UnlockComponent(const unlockCode: WideString): Integer;
    property  ControlInterface: IChilkatXmp read GetControlInterface;
    property  DefaultInterface: IChilkatXmp read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property NumEmbedded: Integer index 101 read GetIntegerProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property StructInnerDescrip: Integer index 100 read GetIntegerProp write SetIntegerProp stored False;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatXml
// Help String      : ChilkatXml Class 9.5.0
// Default Interface: IChilkatXml
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatXml = class(TOleControl)
  private
    FIntf: IChilkatXml;
    function  GetControlInterface: IChilkatXml;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    function AccumulateTagContent(const Tag: WideString; const skipTags: WideString): WideString;
    function AddAttribute(const name: WideString; const value: WideString): Integer;
    function AddAttributeInt(const name: WideString; value: Integer): Integer;
    function AddChildTree(const tree: IChilkatXml): Integer;
    procedure AddOrUpdateAttribute(const name: WideString; const value: WideString);
    procedure AddOrUpdateAttributeI(const name: WideString; value: Integer);
    procedure AddStyleSheet(const styleSheet: WideString);
    procedure AddToAttribute(const name: WideString; amount: Integer);
    procedure AddToChildContent(const Tag: WideString; amount: Integer);
    procedure AddToContent(amount: Integer);
    function AppendToContent(const str: WideString): Integer;
    function BEncodeContent(const charset: WideString; inData: OleVariant): Integer;
    function ChildContentMatches(const Tag: WideString; const pattern: WideString; 
                                 caseSensitive: Integer): Integer;
    function ChilkatPath(const pathCmd: WideString): WideString;
    procedure Clear;
    function ContentMatches(const pattern: WideString; caseSensitive: Integer): Integer;
    procedure Copy(const node: IChilkatXml);
    procedure CopyRef(const node: IChilkatXml);
    function DecodeContent: OleVariant;
    function DecodeEntities(const str: WideString): WideString;
    function DecryptContent(const password: WideString): Integer;
    function EncryptContent(const password: WideString): Integer;
    function ExtractChildByIndex(index: Integer): IChilkatXml;
    function ExtractChildByName(const Tag: WideString; const attrName: WideString; 
                                const attrValue: WideString): IChilkatXml;
    function FindChild(const Tag: WideString): IChilkatXml;
    function FindChild2(const Tag: WideString): Integer;
    function FindNextRecord(const Tag: WideString; const contentPattern: WideString): IChilkatXml;
    function FindOrAddNewChild(const Tag: WideString): IChilkatXml;
    function FirstChild: IChilkatXml;
    function FirstChild2: Integer;
    function GetAttrValue(const name: WideString): WideString;
    function GetAttrValueInt(const name: WideString): Integer;
    function GetAttributeName(index: Integer): WideString;
    function GetAttributeValue(index: Integer): WideString;
    function GetAttributeValueInt(index: Integer): Integer;
    function GetBinaryContent(unzipFlag: Integer; decryptFlag: Integer; const password: WideString): OleVariant;
    function GetChild(index: Integer): IChilkatXml;
    function GetChild2(index: Integer): Integer;
    function GetChildBoolValue(const Tag: WideString): Integer;
    function GetChildContent(const Tag: WideString): WideString;
    function GetChildContentByIndex(index: Integer): WideString;
    function GetChildExact(const Tag: WideString; const Content: WideString): IChilkatXml;
    function GetChildIntValue(const Tag: WideString): Integer;
    function GetChildTag(index: Integer): WideString;
    function GetChildTagByIndex(index: Integer): WideString;
    function GetChildWithAttr(const Tag: WideString; const attrName: WideString; 
                              const attrValue: WideString): IChilkatXml;
    function GetChildWithContent(const Content: WideString): IChilkatXml;
    function GetChildWithTag(const Tag: WideString): IChilkatXml;
    function GetNthChildWithTag(const Tag: WideString; n: Integer): IChilkatXml;
    function GetNthChildWithTag2(const Tag: WideString; n: Integer): Integer;
    function GetParent: IChilkatXml;
    function GetParent2: Integer;
    function GetRoot: IChilkatXml;
    procedure GetRoot2;
    function GetSelf: IChilkatXml;
    function GetXml: WideString;
    function HasAttrWithValue(const name: WideString; const value: WideString): Integer;
    function HasAttribute(const name: WideString): Integer;
    function HasChildWithContent(const Content: WideString): Integer;
    function HasChildWithTag(const Tag: WideString): Integer;
    function HasChildWithTagAndContent(const Tag: WideString; const Content: WideString): Integer;
    procedure InsertChildTreeAfter(index: Integer; const tree: IChilkatXml);
    procedure InsertChildTreeBefore(index: Integer; const tree: IChilkatXml);
    function LastChild: IChilkatXml;
    function LastChild2: Integer;
    function LoadXml(const xmlData: WideString): Integer;
    function LoadXml2(const xmlData: WideString; autoTrim: Integer): Integer;
    function LoadXmlFile(const filename: WideString): Integer;
    function LoadXmlFile2(const filename: WideString; autoTrim: Integer): Integer;
    function NewChild(const Tag: WideString; const Content: WideString): IChilkatXml;
    procedure NewChild2(const Tag: WideString; const Content: WideString);
    function NewChildAfter(index: Integer; const Tag: WideString; const Content: WideString): IChilkatXml;
    function NewChildBefore(index: Integer; const Tag: WideString; const Content: WideString): IChilkatXml;
    procedure NewChildInt2(const Tag: WideString; value: Integer);
    function NextSibling: IChilkatXml;
    function NextSibling2: Integer;
    function NumChildrenHavingTag(const Tag: WideString): Integer;
    function PreviousSibling: IChilkatXml;
    function PreviousSibling2: Integer;
    function QEncodeContent(const charset: WideString; inData: OleVariant): Integer;
    function RemoveAllAttributes: Integer;
    procedure RemoveAllChildren;
    function RemoveAttribute(const name: WideString): Integer;
    procedure RemoveChild(const Tag: WideString);
    procedure RemoveChildByIndex(index: Integer);
    procedure RemoveChildWithContent(const Content: WideString);
    procedure RemoveFromTree;
    function SaveBinaryContent(const filename: WideString; unzipFlag: Integer; 
                               decryptFlag: Integer; const password: WideString): Integer;
    function SaveXml(const filename: WideString): Integer;
    function SearchAllForContent(const afterPtr: IChilkatXml; const contentPattern: WideString): IChilkatXml;
    function SearchAllForContent2(const afterPtr: IChilkatXml; const contentPattern: WideString): Integer;
    function SearchForAttribute(const afterPtr: IChilkatXml; const Tag: WideString; 
                                const attr: WideString; const valuePattern: WideString): IChilkatXml;
    function SearchForAttribute2(const afterPtr: IChilkatXml; const Tag: WideString; 
                                 const attr: WideString; const valuePattern: WideString): Integer;
    function SearchForContent(const afterPtr: IChilkatXml; const Tag: WideString; 
                              const contentPattern: WideString): IChilkatXml;
    function SearchForContent2(const afterPtr: IChilkatXml; const Tag: WideString; 
                               const contentPattern: WideString): Integer;
    function SearchForTag(const afterPtr: IChilkatXml; const Tag: WideString): IChilkatXml;
    function SearchForTag2(const afterPtr: IChilkatXml; const Tag: WideString): Integer;
    function SetBinaryContent(inData: OleVariant; zipFlag: Integer; encryptFlag: Integer; 
                              const password: WideString): Integer;
    function SetBinaryContentFromFile(const filename: WideString; zipFlag: Integer; 
                                      encryptFlag: Integer; const password: WideString): Integer;
    procedure SortByAttribute(const attrName: WideString; ascending: Integer);
    procedure SortByAttributeInt(const attrName: WideString; ascending: Integer);
    procedure SortByContent(ascending: Integer);
    procedure SortByTag(ascending: Integer);
    procedure SortRecordsByAttribute(const sortTag: WideString; const attrName: WideString; 
                                     ascending: Integer);
    procedure SortRecordsByContent(const sortTag: WideString; ascending: Integer);
    procedure SortRecordsByContentInt(const sortTag: WideString; ascending: Integer);
    function SwapNode(const node: IChilkatXml): Integer;
    function SwapTree(const tree: IChilkatXml): Integer;
    function TagContent(const Tag: WideString): WideString;
    function TagEquals(const Tag: WideString): Integer;
    function UnzipContent: Integer;
    function UnzipTree: Integer;
    function UpdateAttribute(const attrName: WideString; const attrValue: WideString): Integer;
    function UpdateAttributeInt(const attrName: WideString; value: Integer): Integer;
    procedure UpdateChildContent(const Tag: WideString; const value: WideString);
    procedure UpdateChildContentInt(const Tag: WideString; value: Integer);
    function ZipContent: Integer;
    function ZipTree: Integer;
    property  ControlInterface: IChilkatXml read GetControlInterface;
    property  DefaultInterface: IChilkatXml read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property NumAttributes: Integer index 106 read GetIntegerProp;
    property NumChildren: Integer index 107 read GetIntegerProp;
    property TreeId: Integer index 111 read GetIntegerProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property Cdata: Integer index 100 read GetIntegerProp write SetIntegerProp stored False;
    property Content: WideString index 101 read GetWideStringProp write SetWideStringProp stored False;
    property ContentInt: Integer index 102 read GetIntegerProp write SetIntegerProp stored False;
    property DocType: WideString index 103 read GetWideStringProp write SetWideStringProp stored False;
    property EmitXmlDecl: Integer index 104 read GetIntegerProp write SetIntegerProp stored False;
    property encoding: WideString index 105 read GetWideStringProp write SetWideStringProp stored False;
    property SortCaseInsensitive: Integer index 108 read GetIntegerProp write SetIntegerProp stored False;
    property Standalone: Integer index 109 read GetIntegerProp write SetIntegerProp stored False;
    property Tag: WideString index 110 read GetWideStringProp write SetWideStringProp stored False;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatUpload
// Help String      : ChilkatUpload Class 9.5.0
// Default Interface: IChilkatUpload
// Def. Intf. DISP? : No
// Event   Interface: _IChilkatEvents
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatUploadAbortCheck = procedure(ASender: TObject; out abort: Integer) of object;
  TChilkatUploadPercentDone = procedure(ASender: TObject; percent: Integer; out abort: Integer) of object;
  TChilkatUploadProgressInfo = procedure(ASender: TObject; const name: WideString; 
                                                           const value: WideString) of object;

  TChilkatUpload = class(TOleControl)
  private
    FOnAbortCheck: TChilkatUploadAbortCheck;
    FOnPercentDone: TChilkatUploadPercentDone;
    FOnProgressInfo: TChilkatUploadProgressInfo;
    FIntf: IChilkatUpload;
    function  GetControlInterface: IChilkatUpload;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
    function Get_ResponseBody: OleVariant;
  public
    function GetImplAddrStr: WideString;
    procedure AbortUpload;
    procedure AddCustomHeader(const name: WideString; const value: WideString);
    procedure AddFileReference(const name: WideString; const filename: WideString);
    procedure AddParam(const name: WideString; const value: WideString);
    function BeginUpload: Integer;
    function BlockingUpload: Integer;
    procedure ClearFileReferences;
    procedure ClearParams;
    procedure SleepMs(millisec: Integer);
    function UploadToMemory: OleVariant;
    property  ControlInterface: IChilkatUpload read GetControlInterface;
    property  DefaultInterface: IChilkatUpload read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property NumBytesSent: Integer index 106 read GetIntegerProp;
    property PercentUploaded: Integer index 109 read GetIntegerProp;
    property ResponseBody: OleVariant index 115 read GetOleVariantProp;
    property ResponseHeader: WideString index 116 read GetWideStringProp;
    property ResponseStatus: Integer index 117 read GetIntegerProp;
    property TotalUploadSize: Integer index 119 read GetIntegerProp;
    property UploadInProgress: Integer index 120 read GetIntegerProp;
    property UploadSuccess: Integer index 121 read GetIntegerProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property ChunkSize: Integer index 100 read GetIntegerProp write SetIntegerProp stored False;
    property Expect100Continue: Integer index 101 read GetIntegerProp write SetIntegerProp stored False;
    property HeartbeatMs: Integer index 102 read GetIntegerProp write SetIntegerProp stored False;
    property Hostname: WideString index 103 read GetWideStringProp write SetWideStringProp stored False;
    property IdleTimeoutMs: Integer index 104 read GetIntegerProp write SetIntegerProp stored False;
    property Login: WideString index 105 read GetWideStringProp write SetWideStringProp stored False;
    property password: WideString index 107 read GetWideStringProp write SetWideStringProp stored False;
    property path: WideString index 108 read GetWideStringProp write SetWideStringProp stored False;
    property Port: Integer index 110 read GetIntegerProp write SetIntegerProp stored False;
    property ProxyDomain: WideString index 111 read GetWideStringProp write SetWideStringProp stored False;
    property ProxyLogin: WideString index 112 read GetWideStringProp write SetWideStringProp stored False;
    property ProxyPassword: WideString index 113 read GetWideStringProp write SetWideStringProp stored False;
    property ProxyPort: Integer index 114 read GetIntegerProp write SetIntegerProp stored False;
    property Ssl: Integer index 118 read GetIntegerProp write SetIntegerProp stored False;
    property PreferIpv6: Integer index 133 read GetIntegerProp write SetIntegerProp stored False;
    property OnAbortCheck: TChilkatUploadAbortCheck read FOnAbortCheck write FOnAbortCheck;
    property OnPercentDone: TChilkatUploadPercentDone read FOnPercentDone write FOnPercentDone;
    property OnProgressInfo: TChilkatUploadProgressInfo read FOnProgressInfo write FOnProgressInfo;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TUnixCompress
// Help String      : UnixCompress Class 9.5.0
// Default Interface: IUnixCompress
// Def. Intf. DISP? : No
// Event   Interface: _IChilkatEvents
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TUnixCompressAbortCheck = procedure(ASender: TObject; out abort: Integer) of object;
  TUnixCompressPercentDone = procedure(ASender: TObject; percent: Integer; out abort: Integer) of object;
  TUnixCompressProgressInfo = procedure(ASender: TObject; const name: WideString; 
                                                          const value: WideString) of object;

  TUnixCompress = class(TOleControl)
  private
    FOnAbortCheck: TUnixCompressAbortCheck;
    FOnPercentDone: TUnixCompressPercentDone;
    FOnProgressInfo: TUnixCompressProgressInfo;
    FIntf: IUnixCompress;
    function  GetControlInterface: IUnixCompress;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    function CompressFile(const inFilename: WideString; const destPath: WideString): Integer;
    function CompressFileToMem(const inFilename: WideString): OleVariant;
    function CompressMemToFile(inData: OleVariant; const destPath: WideString): Integer;
    function CompressMemory(inData: OleVariant): OleVariant;
    function CompressString(const inStr: WideString; const charset: WideString): OleVariant;
    function CompressStringToFile(const inStr: WideString; const charset: WideString; 
                                  const destPath: WideString): Integer;
    function IsUnlocked: Integer;
    function UnTarZ(const zFilename: WideString; const destDir: WideString; bNoAbsolute: Integer): Integer;
    function UncompressFile(const inFilename: WideString; const destPath: WideString): Integer;
    function UncompressFileToMem(const inFilename: WideString): OleVariant;
    function UncompressFileToString(const inFilename: WideString; const inCharset: WideString): WideString;
    function UncompressMemToFile(inData: OleVariant; const destPath: WideString): Integer;
    function UncompressMemory(inData: OleVariant): OleVariant;
    function UncompressString(inData: OleVariant; const inCharset: WideString): WideString;
    function UnlockComponent(const unlockCode: WideString): Integer;
    function ReadFile(const filename: WideString): OleVariant;
    function WriteFile(const filename: WideString; binaryData: OleVariant): Integer;
    property  ControlInterface: IUnixCompress read GetControlInterface;
    property  DefaultInterface: IUnixCompress read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property HeartbeatMs: Integer index 100 read GetIntegerProp write SetIntegerProp stored False;
    property OnAbortCheck: TUnixCompressAbortCheck read FOnAbortCheck write FOnAbortCheck;
    property OnPercentDone: TUnixCompressPercentDone read FOnPercentDone write FOnPercentDone;
    property OnProgressInfo: TUnixCompressProgressInfo read FOnProgressInfo write FOnProgressInfo;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatTar
// Help String      : ChilkatTar Class 9.5.0
// Default Interface: IChilkatTar
// Def. Intf. DISP? : No
// Event   Interface: _IChilkatTarEvents
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatTarAbortCheck = procedure(ASender: TObject; out abort: Integer) of object;
  TChilkatTarPercentDone = procedure(ASender: TObject; percent: Integer; out abort: Integer) of object;
  TChilkatTarProgressInfo = procedure(ASender: TObject; const name: WideString; 
                                                        const value: WideString) of object;
  TChilkatTarNextTarFile = procedure(ASender: TObject; const path: WideString; fileSize: Int64; 
                                                       isDirectory: Integer; out skip: Integer) of object;

  TChilkatTar = class(TOleControl)
  private
    FOnAbortCheck: TChilkatTarAbortCheck;
    FOnPercentDone: TChilkatTarPercentDone;
    FOnProgressInfo: TChilkatTarProgressInfo;
    FOnNextTarFile: TChilkatTarNextTarFile;
    FIntf: IChilkatTar;
    function  GetControlInterface: IChilkatTar;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    function AddDirRoot(const dirPath: WideString): Integer;
    function GetDirRoot(index: Integer): WideString;
    function ListXml(const tarPath: WideString): WideString;
    function UnlockComponent(const unlockCode: WideString): Integer;
    function Untar(const tarPath: WideString): Integer;
    function UntarBz2(const tarPath: WideString): Integer;
    function UntarFirstMatchingToMemory(tarFileBytes: OleVariant; const matchPattern: WideString): OleVariant;
    function UntarFromMemory(tarFileBytes: OleVariant): Integer;
    function UntarGz(const tarPath: WideString): Integer;
    function UnTarZ(const tarPath: WideString): Integer;
    function VerifyTar(const tarPath: WideString): Integer;
    function WriteTar(const tarPath: WideString): Integer;
    function WriteTarBz2(const bz2Path: WideString): Integer;
    function WriteTarGz(const gzPath: WideString): Integer;
    property  ControlInterface: IChilkatTar read GetControlInterface;
    property  DefaultInterface: IChilkatTar read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property NumDirRoots: Integer index 108 read GetIntegerProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property charset: WideString index 100 read GetWideStringProp write SetWideStringProp stored False;
    property DirMode: Integer index 101 read GetIntegerProp write SetIntegerProp stored False;
    property DirPrefix: WideString index 102 read GetWideStringProp write SetWideStringProp stored False;
    property FileMode: Integer index 103 read GetIntegerProp write SetIntegerProp stored False;
    property GroupId: Integer index 104 read GetIntegerProp write SetIntegerProp stored False;
    property GroupName: WideString index 105 read GetWideStringProp write SetWideStringProp stored False;
    property HeartbeatMs: Integer index 106 read GetIntegerProp write SetIntegerProp stored False;
    property NoAbsolutePaths: Integer index 107 read GetIntegerProp write SetIntegerProp stored False;
    property ScriptFileMode: Integer index 109 read GetIntegerProp write SetIntegerProp stored False;
    property UntarCaseSensitive: Integer index 110 read GetIntegerProp write SetIntegerProp stored False;
    property UntarDebugLog: Integer index 111 read GetIntegerProp write SetIntegerProp stored False;
    property UntarDiscardPaths: Integer index 112 read GetIntegerProp write SetIntegerProp stored False;
    property UntarFromDir: WideString index 113 read GetWideStringProp write SetWideStringProp stored False;
    property UntarMatchPattern: WideString index 114 read GetWideStringProp write SetWideStringProp stored False;
    property UntarMaxCount: Integer index 115 read GetIntegerProp write SetIntegerProp stored False;
    property UserId: Integer index 116 read GetIntegerProp write SetIntegerProp stored False;
    property UserName: WideString index 117 read GetWideStringProp write SetWideStringProp stored False;
    property WriteFormat: WideString index 118 read GetWideStringProp write SetWideStringProp stored False;
    property OnAbortCheck: TChilkatTarAbortCheck read FOnAbortCheck write FOnAbortCheck;
    property OnPercentDone: TChilkatTarPercentDone read FOnPercentDone write FOnPercentDone;
    property OnProgressInfo: TChilkatTarProgressInfo read FOnProgressInfo write FOnProgressInfo;
    property OnNextTarFile: TChilkatTarNextTarFile read FOnNextTarFile write FOnNextTarFile;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatSshTunnel
// Help String      : ChilkatSshTunnel Class 9.5.0
// Default Interface: IChilkatSshTunnel
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatSshTunnel = class(TOleControl)
  private
    FIntf: IChilkatSshTunnel;
    function  GetControlInterface: IChilkatSshTunnel;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    procedure ClearTunnelErrors;
    function GetTunnelsXml: WideString;
    function SetSshAuthenticationKey(const key: IChilkatSshKey): Integer;
    function StopAccepting: Integer;
    function StopAllTunnels(maxWaitMs: Integer): Integer;
    function UnlockComponent(const unlockCode: WideString): Integer;
    function BeginAccepting(ListenPort: Integer): Integer;
    property  ControlInterface: IChilkatSshTunnel read GetControlInterface;
    property  DefaultInterface: IChilkatSshTunnel read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property IsAccepting: Integer index 112 read GetIntegerProp;
    property ListenPort: Integer index 115 read GetIntegerProp;
    property TunnelErrors: WideString index 131 read GetWideStringProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property AcceptThreadSessionLogPath: WideString index 100 read GetWideStringProp write SetWideStringProp stored False;
    property ConnectLog: WideString index 101 read GetWideStringProp write SetWideStringProp stored False;
    property ConnectTimeoutMs: Integer index 102 read GetIntegerProp write SetIntegerProp stored False;
    property DestHostname: WideString index 103 read GetWideStringProp write SetWideStringProp stored False;
    property DestPort: Integer index 104 read GetIntegerProp write SetIntegerProp stored False;
    property HttpProxyAuthMethod: WideString index 105 read GetWideStringProp write SetWideStringProp stored False;
    property HttpProxyDomain: WideString index 106 read GetWideStringProp write SetWideStringProp stored False;
    property HttpProxyHostname: WideString index 107 read GetWideStringProp write SetWideStringProp stored False;
    property HttpProxyPassword: WideString index 108 read GetWideStringProp write SetWideStringProp stored False;
    property HttpProxyPort: Integer index 109 read GetIntegerProp write SetIntegerProp stored False;
    property HttpProxyUsername: WideString index 110 read GetWideStringProp write SetWideStringProp stored False;
    property IdleTimeoutMs: Integer index 111 read GetIntegerProp write SetIntegerProp stored False;
    property KeepConnectLog: Integer index 113 read GetIntegerProp write SetIntegerProp stored False;
    property ListenBindIpAddress: WideString index 114 read GetWideStringProp write SetWideStringProp stored False;
    property MaxPacketSize: Integer index 116 read GetIntegerProp write SetIntegerProp stored False;
    property OutboundBindIpAddress: WideString index 117 read GetWideStringProp write SetWideStringProp stored False;
    property OutboundBindPort: Integer index 118 read GetIntegerProp write SetIntegerProp stored False;
    property SoRcvBuf: Integer index 119 read GetIntegerProp write SetIntegerProp stored False;
    property SoSndBuf: Integer index 120 read GetIntegerProp write SetIntegerProp stored False;
    property SocksHostname: WideString index 121 read GetWideStringProp write SetWideStringProp stored False;
    property SocksPassword: WideString index 122 read GetWideStringProp write SetWideStringProp stored False;
    property SocksPort: Integer index 123 read GetIntegerProp write SetIntegerProp stored False;
    property SocksUsername: WideString index 124 read GetWideStringProp write SetWideStringProp stored False;
    property SocksVersion: Integer index 125 read GetIntegerProp write SetIntegerProp stored False;
    property SshHostname: WideString index 126 read GetWideStringProp write SetWideStringProp stored False;
    property SshLogin: WideString index 127 read GetWideStringProp write SetWideStringProp stored False;
    property SshPassword: WideString index 128 read GetWideStringProp write SetWideStringProp stored False;
    property SshPort: Integer index 129 read GetIntegerProp write SetIntegerProp stored False;
    property TcpNoDelay: Integer index 130 read GetIntegerProp write SetIntegerProp stored False;
    property TunnelThreadSessionLogPath: WideString index 132 read GetWideStringProp write SetWideStringProp stored False;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatSshKey
// Help String      : ChilkatSshKey Class 9.5.0
// Default Interface: IChilkatSshKey
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatSshKey = class(TOleControl)
  private
    FIntf: IChilkatSshKey;
    function  GetControlInterface: IChilkatSshKey;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    function FromOpenSshPrivateKey(const keyStr: WideString): Integer;
    function FromOpenSshPublicKey(const keyStr: WideString): Integer;
    function FromPuttyPrivateKey(const keyStr: WideString): Integer;
    function FromRfc4716PublicKey(const keyStr: WideString): Integer;
    function FromXml(const xmlKey: WideString): Integer;
    function GenFingerprint: WideString;
    function GenerateDsaKey(numBits: Integer): Integer;
    function GenerateRsaKey(numBits: Integer; exponent: Integer): Integer;
    function LoadText(const filename: WideString): WideString;
    function SaveText(const strToSave: WideString; const filename: WideString): Integer;
    function ToOpenSshPrivateKey(bEncrypt: Integer): WideString;
    function ToOpenSshPublicKey: WideString;
    function ToPuttyPrivateKey(bEncrypt: Integer): WideString;
    function ToRfc4716PublicKey: WideString;
    function ToXml: WideString;
    property  ControlInterface: IChilkatSshKey read GetControlInterface;
    property  DefaultInterface: IChilkatSshKey read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property IsDsaKey: Integer index 100 read GetIntegerProp;
    property IsPrivateKey: Integer index 101 read GetIntegerProp;
    property IsRsaKey: Integer index 102 read GetIntegerProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property password: WideString index 103 read GetWideStringProp write SetWideStringProp stored False;
    property Comment: WideString index 104 read GetWideStringProp write SetWideStringProp stored False;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatSsh
// Help String      : ChilkatSsh Class 9.5.0
// Default Interface: IChilkatSsh
// Def. Intf. DISP? : No
// Event   Interface: _IChilkatEvents
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatSshAbortCheck = procedure(ASender: TObject; out abort: Integer) of object;
  TChilkatSshPercentDone = procedure(ASender: TObject; percent: Integer; out abort: Integer) of object;
  TChilkatSshProgressInfo = procedure(ASender: TObject; const name: WideString; 
                                                        const value: WideString) of object;

  TChilkatSsh = class(TOleControl)
  private
    FOnAbortCheck: TChilkatSshAbortCheck;
    FOnPercentDone: TChilkatSshPercentDone;
    FOnProgressInfo: TChilkatSshProgressInfo;
    FIntf: IChilkatSsh;
    function  GetControlInterface: IChilkatSsh;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    function AuthenticatePk(const UserName: WideString; const PrivateKey: IChilkatSshKey): Integer;
    function AuthenticatePw(const Login: WideString; const password: WideString): Integer;
    function AuthenticatePwPk(const UserName: WideString; const password: WideString; 
                              const PrivateKey: IChilkatSshKey): Integer;
    function ChannelIsOpen(channelNum: Integer): Integer;
    function ChannelPoll(channelNum: Integer; pollTimeoutMs: Integer): Integer;
    function ChannelRead(channelNum: Integer): Integer;
    function ChannelReadAndPoll(channelNum: Integer; pollTimeoutMs: Integer): Integer;
    function ChannelReadAndPoll2(channelNum: Integer; pollTimeoutMs: Integer; maxNumBytes: Integer): Integer;
    function ChannelReceiveToClose(channelNum: Integer): Integer;
    function ChannelReceiveUntilMatch(channelNum: Integer; const matchPattern: WideString; 
                                      const charset: WideString; caseSensitive: Integer): Integer;
    function ChannelReceiveUntilMatchN(channelNum: Integer; const matchPatterns: ICkStringArray; 
                                       const charset: WideString; caseSensitive: Integer): Integer;
    function ChannelReceivedClose(channelNum: Integer): Integer;
    function ChannelReceivedEof(channelNum: Integer): Integer;
    function ChannelReceivedExitStatus(channelNum: Integer): Integer;
    function ChannelSendClose(channelNum: Integer): Integer;
    function ChannelSendData(channelNum: Integer; data: OleVariant): Integer;
    function ChannelSendEof(channelNum: Integer): Integer;
    function ChannelSendString(channelNum: Integer; const strData: WideString; 
                               const charset: WideString): Integer;
    procedure ClearTtyModes;
    function Connect(const Hostname: WideString; Port: Integer): Integer;
    procedure Disconnect;
    function GetChannelExitStatus(channelNum: Integer): Integer;
    function GetChannelNumber(index: Integer): Integer;
    function GetChannelType(index: Integer): WideString;
    function GetReceivedData(channelNum: Integer): OleVariant;
    function GetReceivedDataN(channelNum: Integer; numBytes: Integer): OleVariant;
    function GetReceivedNumBytes(channelNum: Integer): Integer;
    function GetReceivedStderr(channelNum: Integer): OleVariant;
    function GetReceivedText(channelNum: Integer; const charset: WideString): WideString;
    function GetReceivedTextS(channelNum: Integer; const substr: WideString; 
                              const charset: WideString): WideString;
    function OpenCustomChannel(const channelType: WideString): Integer;
    function OpenDirectTcpIpChannel(const Hostname: WideString; Port: Integer): Integer;
    function OpenSessionChannel: Integer;
    function PeekReceivedText(channelNum: Integer; const charset: WideString): WideString;
    function ReKey: Integer;
    function SendIgnore: Integer;
    function SendReqExec(channelNum: Integer; const command: WideString): Integer;
    function SendReqPty(channelNum: Integer; const xTermEnvVar: WideString; widthInChars: Integer; 
                        heightInRows: Integer; pixWidth: Integer; pixHeight: Integer): Integer;
    function SendReqSetEnv(channelNum: Integer; const name: WideString; const value: WideString): Integer;
    function SendReqShell(channelNum: Integer): Integer;
    function SendReqSignal(channelNum: Integer; const signalName: WideString): Integer;
    function SendReqSubsystem(channelNum: Integer; const subsystemName: WideString): Integer;
    function SendReqWindowChange(channelNum: Integer; widthInChars: Integer; heightInRows: Integer; 
                                 pixWidth: Integer; pixHeight: Integer): Integer;
    function SendReqX11Forwarding(channelNum: Integer; singleConnection: Integer; 
                                  const authProt: WideString; const authCookie: WideString; 
                                  screenNum: Integer): Integer;
    function SendReqXonXoff(channelNum: Integer; clientCanDo: Integer): Integer;
    function SetTtyMode(const name: WideString; value: Integer): Integer;
    function UnlockComponent(const unlockCode: WideString): Integer;
    property  ControlInterface: IChilkatSsh read GetControlInterface;
    property  DefaultInterface: IChilkatSsh read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property ChannelOpenFailCode: Integer index 100 read GetIntegerProp;
    property ChannelOpenFailReason: WideString index 101 read GetWideStringProp;
    property DisconnectCode: Integer index 105 read GetIntegerProp;
    property DisconnectReason: WideString index 106 read GetWideStringProp;
    property HostKeyFingerprint: WideString index 110 read GetWideStringProp;
    property IsConnected: Integer index 118 read GetIntegerProp;
    property NumOpenChannels: Integer index 121 read GetIntegerProp;
    property PasswordChangeRequested: Integer index 122 read GetIntegerProp;
    property SessionLog: WideString index 124 read GetWideStringProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property ClientIdentifier: WideString index 102 read GetWideStringProp write SetWideStringProp stored False;
    property ClientIpAddress: WideString index 103 read GetWideStringProp write SetWideStringProp stored False;
    property ConnectTimeoutMs: Integer index 104 read GetIntegerProp write SetIntegerProp stored False;
    property ForceCipher: WideString index 107 read GetWideStringProp write SetWideStringProp stored False;
    property HeartbeatMs: Integer index 108 read GetIntegerProp write SetIntegerProp stored False;
    property HostKeyAlg: WideString index 109 read GetWideStringProp write SetWideStringProp stored False;
    property HttpProxyAuthMethod: WideString index 111 read GetWideStringProp write SetWideStringProp stored False;
    property HttpProxyDomain: WideString index 112 read GetWideStringProp write SetWideStringProp stored False;
    property HttpProxyHostname: WideString index 113 read GetWideStringProp write SetWideStringProp stored False;
    property HttpProxyPassword: WideString index 114 read GetWideStringProp write SetWideStringProp stored False;
    property HttpProxyPort: Integer index 115 read GetIntegerProp write SetIntegerProp stored False;
    property HttpProxyUsername: WideString index 116 read GetWideStringProp write SetWideStringProp stored False;
    property IdleTimeoutMs: Integer index 117 read GetIntegerProp write SetIntegerProp stored False;
    property KeepSessionLog: Integer index 119 read GetIntegerProp write SetIntegerProp stored False;
    property MaxPacketSize: Integer index 120 read GetIntegerProp write SetIntegerProp stored False;
    property ReadTimeoutMs: Integer index 123 read GetIntegerProp write SetIntegerProp stored False;
    property SoRcvBuf: Integer index 125 read GetIntegerProp write SetIntegerProp stored False;
    property SoSndBuf: Integer index 126 read GetIntegerProp write SetIntegerProp stored False;
    property SocksHostname: WideString index 127 read GetWideStringProp write SetWideStringProp stored False;
    property SocksPassword: WideString index 128 read GetWideStringProp write SetWideStringProp stored False;
    property SocksPort: Integer index 129 read GetIntegerProp write SetIntegerProp stored False;
    property SocksUsername: WideString index 130 read GetWideStringProp write SetWideStringProp stored False;
    property SocksVersion: Integer index 131 read GetIntegerProp write SetIntegerProp stored False;
    property StderrToStdout: Integer index 132 read GetIntegerProp write SetIntegerProp stored False;
    property TcpNoDelay: Integer index 133 read GetIntegerProp write SetIntegerProp stored False;
    property PreferIpv6: Integer index 181 read GetIntegerProp write SetIntegerProp stored False;
    property OnAbortCheck: TChilkatSshAbortCheck read FOnAbortCheck write FOnAbortCheck;
    property OnPercentDone: TChilkatSshPercentDone read FOnPercentDone write FOnPercentDone;
    property OnProgressInfo: TChilkatSshProgressInfo read FOnProgressInfo write FOnProgressInfo;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatSpider
// Help String      : ChilkatSpider Class 9.5.0
// Default Interface: IChilkatSpider
// Def. Intf. DISP? : No
// Event   Interface: _IChilkatEvents
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatSpiderAbortCheck = procedure(ASender: TObject; out abort: Integer) of object;
  TChilkatSpiderPercentDone = procedure(ASender: TObject; percent: Integer; out abort: Integer) of object;
  TChilkatSpiderProgressInfo = procedure(ASender: TObject; const name: WideString; 
                                                           const value: WideString) of object;

  TChilkatSpider = class(TOleControl)
  private
    FOnAbortCheck: TChilkatSpiderAbortCheck;
    FOnPercentDone: TChilkatSpiderPercentDone;
    FOnProgressInfo: TChilkatSpiderProgressInfo;
    FIntf: IChilkatSpider;
    function  GetControlInterface: IChilkatSpider;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    procedure AddAvoidOutboundLinkPattern(const pattern: WideString);
    procedure AddAvoidPattern(const pattern: WideString);
    procedure AddMustMatchPattern(const pattern: WideString);
    procedure AddUnspidered(const url: WideString);
    function CanonicalizeUrl(const url: WideString): WideString;
    procedure ClearFailedUrls;
    procedure ClearOutboundLinks;
    procedure ClearSpideredUrls;
    function CrawlNext: Integer;
    function FetchRobotsText: WideString;
    function GetAvoidPattern(index: Integer): WideString;
    function GetBaseDomain(const Domain: WideString): WideString;
    function GetFailedUrl(index: Integer): WideString;
    function GetOutboundLink(index: Integer): WideString;
    function GetSpideredUrl(index: Integer): WideString;
    function GetUnspideredUrl(index: Integer): WideString;
    function GetUrlDomain(const url: WideString): WideString;
    procedure Initialize(const Domain: WideString);
    function RecrawlLast: Integer;
    procedure SkipUnspidered(index: Integer);
    procedure SleepMs(millisec: Integer);
    property  ControlInterface: IChilkatSpider read GetControlInterface;
    property  DefaultInterface: IChilkatSpider read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property Domain: WideString index 104 read GetWideStringProp;
    property LastFromCache: Integer index 107 read GetIntegerProp;
    property LastHtml: WideString index 108 read GetWideStringProp;
    property LastHtmlDescription: WideString index 109 read GetWideStringProp;
    property LastHtmlKeywords: WideString index 110 read GetWideStringProp;
    property LastHtmlTitle: WideString index 111 read GetWideStringProp;
    property LastModDate: TDateTime index 112 read GetTDateTimeProp;
    property LastUrl: WideString index 113 read GetWideStringProp;
    property NumAvoidPatterns: Integer index 116 read GetIntegerProp;
    property NumFailed: Integer index 117 read GetIntegerProp;
    property NumOutboundLinks: Integer index 118 read GetIntegerProp;
    property NumSpidered: Integer index 119 read GetIntegerProp;
    property NumUnspidered: Integer index 120 read GetIntegerProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property AvoidHttps: Integer index 100 read GetIntegerProp write SetIntegerProp stored False;
    property CacheDir: WideString index 101 read GetWideStringProp write SetWideStringProp stored False;
    property ChopAtQuery: Integer index 102 read GetIntegerProp write SetIntegerProp stored False;
    property ConnectTimeout: Integer index 103 read GetIntegerProp write SetIntegerProp stored False;
    property FetchFromCache: Integer index 105 read GetIntegerProp write SetIntegerProp stored False;
    property HeartbeatMs: Integer index 106 read GetIntegerProp write SetIntegerProp stored False;
    property MaxResponseSize: Integer index 114 read GetIntegerProp write SetIntegerProp stored False;
    property MaxUrlLen: Integer index 115 read GetIntegerProp write SetIntegerProp stored False;
    property ProxyDomain: WideString index 121 read GetWideStringProp write SetWideStringProp stored False;
    property ProxyLogin: WideString index 122 read GetWideStringProp write SetWideStringProp stored False;
    property ProxyPassword: WideString index 123 read GetWideStringProp write SetWideStringProp stored False;
    property ProxyPort: Integer index 124 read GetIntegerProp write SetIntegerProp stored False;
    property ReadTimeout: Integer index 125 read GetIntegerProp write SetIntegerProp stored False;
    property UpdateCache: Integer index 126 read GetIntegerProp write SetIntegerProp stored False;
    property UserAgent: WideString index 127 read GetWideStringProp write SetWideStringProp stored False;
    property WindDownCount: Integer index 128 read GetIntegerProp write SetIntegerProp stored False;
    property PreferIpv6: Integer index 152 read GetIntegerProp write SetIntegerProp stored False;
    property OnAbortCheck: TChilkatSpiderAbortCheck read FOnAbortCheck write FOnAbortCheck;
    property OnPercentDone: TChilkatSpiderPercentDone read FOnPercentDone write FOnPercentDone;
    property OnProgressInfo: TChilkatSpiderProgressInfo read FOnProgressInfo write FOnProgressInfo;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatSocksProxy
// Help String      : ChilkatSocksProxy Class 9.5.0
// Default Interface: IChilkatSocksProxy
// Def. Intf. DISP? : No
// Event   Interface: _IChilkatEvents
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatSocksProxyAbortCheck = procedure(ASender: TObject; out abort: Integer) of object;
  TChilkatSocksProxyPercentDone = procedure(ASender: TObject; percent: Integer; out abort: Integer) of object;
  TChilkatSocksProxyProgressInfo = procedure(ASender: TObject; const name: WideString; 
                                                               const value: WideString) of object;

  TChilkatSocksProxy = class(TOleControl)
  private
    FOnAbortCheck: TChilkatSocksProxyAbortCheck;
    FOnPercentDone: TChilkatSocksProxyPercentDone;
    FOnProgressInfo: TChilkatSocksProxyProgressInfo;
    FIntf: IChilkatSocksProxy;
    function  GetControlInterface: IChilkatSocksProxy;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    function AllowConnection: Integer;
    function GetTunnelsXml: WideString;
    function Initialize(Port: Integer): Integer;
    function ProceedSocks5: Integer;
    function RejectConnection: Integer;
    function StopAllTunnels(maxWaitMs: Integer): Integer;
    function UnlockComponent(const unlockCode: WideString): Integer;
    function WaitForConnection(maxWaitMs: Integer): Integer;
    property  ControlInterface: IChilkatSocksProxy read GetControlInterface;
    property  DefaultInterface: IChilkatSocksProxy read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property AuthenticatedSocks5: Integer index 101 read GetIntegerProp;
    property ClientIp: WideString index 102 read GetWideStringProp;
    property ClientPort: Integer index 103 read GetIntegerProp;
    property ConnectionPending: Integer index 104 read GetIntegerProp;
    property Login: WideString index 106 read GetWideStringProp;
    property password: WideString index 109 read GetWideStringProp;
    property ServerIp: WideString index 110 read GetWideStringProp;
    property ServerPort: Integer index 111 read GetIntegerProp;
    property SocksVersion: Integer index 112 read GetIntegerProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property AllowUnauthenticatedSocks5: Integer index 100 read GetIntegerProp write SetIntegerProp stored False;
    property ListenBindIpAddress: WideString index 105 read GetWideStringProp write SetWideStringProp stored False;
    property OutboundBindIpAddress: WideString index 107 read GetWideStringProp write SetWideStringProp stored False;
    property OutboundBindPort: Integer index 108 read GetIntegerProp write SetIntegerProp stored False;
    property OnAbortCheck: TChilkatSocksProxyAbortCheck read FOnAbortCheck write FOnAbortCheck;
    property OnPercentDone: TChilkatSocksProxyPercentDone read FOnPercentDone write FOnPercentDone;
    property OnProgressInfo: TChilkatSocksProxyProgressInfo read FOnProgressInfo write FOnProgressInfo;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatSocket
// Help String      : ChilkatSocket Class 9.5.0
// Default Interface: IChilkatSocket
// Def. Intf. DISP? : No
// Event   Interface: _IChilkatEvents
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatSocketAbortCheck = procedure(ASender: TObject; out abort: Integer) of object;
  TChilkatSocketPercentDone = procedure(ASender: TObject; percent: Integer; out abort: Integer) of object;
  TChilkatSocketProgressInfo = procedure(ASender: TObject; const name: WideString; 
                                                           const value: WideString) of object;

  TChilkatSocket = class(TOleControl)
  private
    FOnAbortCheck: TChilkatSocketAbortCheck;
    FOnPercentDone: TChilkatSocketPercentDone;
    FOnProgressInfo: TChilkatSocketProgressInfo;
    FIntf: IChilkatSocket;
    function  GetControlInterface: IChilkatSocket;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
    function Get_AsyncReceivedBytes: OleVariant;
  public
    function GetImplAddrStr: WideString;
    function AcceptNextConnection(maxWaitMs: Integer): IChilkatSocket;
    function AddSslAcceptableClientCaDn(const certAuthDN: WideString): Integer;
    procedure AsyncAcceptAbort;
    function AsyncAcceptSocket: IChilkatSocket;
    function AsyncAcceptStart(maxWaitMs: Integer): Integer;
    procedure AsyncConnectAbort;
    function AsyncConnectStart(const Hostname: WideString; Port: Integer; Ssl: Integer; 
                               maxWaitMs: Integer): Integer;
    procedure AsyncDnsAbort;
    function AsyncDnsStart(const Hostname: WideString; maxWaitMs: Integer): Integer;
    procedure AsyncReceiveAbort;
    function AsyncReceiveBytes: Integer;
    function AsyncReceiveBytesN(numBytes: Integer): Integer;
    function AsyncReceiveString: Integer;
    function AsyncReceiveToCRLF: Integer;
    function AsyncReceiveUntilMatch(const matchStr: WideString): Integer;
    procedure AsyncSendAbort;
    function AsyncSendByteData(data: OleVariant): Integer;
    function AsyncSendBytes(data: OleVariant): Integer;
    function AsyncSendString(const str: WideString): Integer;
    function BindAndListen(Port: Integer; backlog: Integer): Integer;
    function CheckWriteable(maxWaitMs: Integer): Integer;
    procedure ClearSessionLog;
    procedure Close(maxWaitMs: Integer);
    function Connect(const Hostname: WideString; Port: Integer; Ssl: Integer; maxWaitMs: Integer): Integer;
    function ConvertFromSsl: Integer;
    function ConvertToSsl: Integer;
    function DnsLookup(const Hostname: WideString; maxWaitMs: Integer): WideString;
    function GetMyCert: IChilkatCert;
    function GetReceivedClientCert(index: Integer): IChilkatCert;
    function GetSslAcceptableClientCaDn(index: Integer): WideString;
    function GetSslServerCert: IChilkatCert;
    function InitSslServer(const cert: IChilkatCert): Integer;
    function IsUnlocked: Integer;
    function PollDataAvailable: Integer;
    function ReceiveBytes: OleVariant;
    function ReceiveBytesENC(const encodingAlg: WideString): WideString;
    function ReceiveBytesN(numBytes: Integer): OleVariant;
    function ReceiveBytesToFile(const appendFilename: WideString): Integer;
    function ReceiveCount: Integer;
    function ReceiveNBytesENC(numBytes: Integer; const encodingAlg: WideString): WideString;
    function ReceiveString: WideString;
    function ReceiveStringMaxN(maxBytes: Integer): WideString;
    function ReceiveStringUntilByte(byteValue: Integer): WideString;
    function ReceiveToCRLF: WideString;
    function ReceiveUntilByte(byteValue: Integer): OleVariant;
    function ReceiveUntilMatch(const matchStr: WideString): WideString;
    function SelectForReading(timeoutMs: Integer): Integer;
    function SelectForWriting(timeoutMs: Integer): Integer;
    function SendBytes(data: OleVariant): Integer;
    function SendBytesENC(const encodedBytes: WideString; const encodingAlg: WideString): Integer;
    function SendCount(byteCount: Integer): Integer;
    function SendString(const str: WideString): Integer;
    function SetSslClientCert(const cert: IChilkatCert): Integer;
    function SetSslClientCertPem(const pemDataOrFilename: WideString; const pemPassword: WideString): Integer;
    function SetSslClientCertPfx(const pfxFilename: WideString; const pfxPassword: WideString): Integer;
    procedure SleepMs(millisec: Integer);
    procedure StartTiming;
    function TakeSocket(const sock: IChilkatSocket): Integer;
    function UnlockComponent(const unlockCode: WideString): Integer;
    procedure Dispose;
    function BuildHttpGetRequest(const url: WideString): WideString;
    procedure DnsCacheClear;
    property  ControlInterface: IChilkatSocket read GetControlInterface;
    property  DefaultInterface: IChilkatSocket read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property AsyncAcceptFinished: Integer index 100 read GetIntegerProp;
    property AsyncAcceptLog: WideString index 101 read GetWideStringProp;
    property AsyncAcceptSuccess: Integer index 102 read GetIntegerProp;
    property AsyncConnectFinished: Integer index 103 read GetIntegerProp;
    property AsyncConnectLog: WideString index 104 read GetWideStringProp;
    property AsyncConnectSuccess: Integer index 105 read GetIntegerProp;
    property AsyncDnsFinished: Integer index 106 read GetIntegerProp;
    property AsyncDnsLog: WideString index 107 read GetWideStringProp;
    property AsyncDnsResult: WideString index 108 read GetWideStringProp;
    property AsyncDnsSuccess: Integer index 109 read GetIntegerProp;
    property AsyncReceiveFinished: Integer index 110 read GetIntegerProp;
    property AsyncReceiveLog: WideString index 111 read GetWideStringProp;
    property AsyncReceiveSuccess: Integer index 112 read GetIntegerProp;
    property AsyncReceivedBytes: OleVariant index 113 read GetOleVariantProp;
    property AsyncReceivedString: WideString index 114 read GetWideStringProp;
    property AsyncSendFinished: Integer index 115 read GetIntegerProp;
    property AsyncSendLog: WideString index 116 read GetWideStringProp;
    property AsyncSendSuccess: Integer index 117 read GetIntegerProp;
    property ConnectFailReason: Integer index 121 read GetIntegerProp;
    property ElapsedSeconds: Integer index 124 read GetIntegerProp;
    property IsConnected: Integer index 132 read GetIntegerProp;
    property LastMethodFailed: Integer index 134 read GetIntegerProp;
    property LocalIpAddress: WideString index 136 read GetWideStringProp;
    property LocalPort: Integer index 137 read GetIntegerProp;
    property MyIpAddress: WideString index 140 read GetWideStringProp;
    property NumReceivedClientCerts: Integer index 141 read GetIntegerProp;
    property NumSocketsInSet: Integer index 142 read GetIntegerProp;
    property NumSslAcceptableClientCAs: Integer index 143 read GetIntegerProp;
    property ObjectId: Integer index 144 read GetIntegerProp;
    property RemoteIpAddress: WideString index 147 read GetWideStringProp;
    property RemotePort: Integer index 148 read GetIntegerProp;
    property SessionLog: WideString index 153 read GetWideStringProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property BigEndian: Integer index 118 read GetIntegerProp write SetIntegerProp stored False;
    property ClientIpAddress: WideString index 119 read GetWideStringProp write SetWideStringProp stored False;
    property ClientPort: Integer index 120 read GetIntegerProp write SetIntegerProp stored False;
    property DebugConnectDelayMs: Integer index 122 read GetIntegerProp write SetIntegerProp stored False;
    property DebugDnsDelayMs: Integer index 123 read GetIntegerProp write SetIntegerProp stored False;
    property HeartbeatMs: Integer index 125 read GetIntegerProp write SetIntegerProp stored False;
    property HttpProxyAuthMethod: WideString index 126 read GetWideStringProp write SetWideStringProp stored False;
    property HttpProxyDomain: WideString index 127 read GetWideStringProp write SetWideStringProp stored False;
    property HttpProxyHostname: WideString index 128 read GetWideStringProp write SetWideStringProp stored False;
    property HttpProxyPassword: WideString index 129 read GetWideStringProp write SetWideStringProp stored False;
    property HttpProxyPort: Integer index 130 read GetIntegerProp write SetIntegerProp stored False;
    property HttpProxyUsername: WideString index 131 read GetWideStringProp write SetWideStringProp stored False;
    property KeepSessionLog: Integer index 133 read GetIntegerProp write SetIntegerProp stored False;
    property ListenIpv6: Integer index 135 read GetIntegerProp write SetIntegerProp stored False;
    property MaxReadIdleMs: Integer index 138 read GetIntegerProp write SetIntegerProp stored False;
    property MaxSendIdleMs: Integer index 139 read GetIntegerProp write SetIntegerProp stored False;
    property ReceivePacketSize: Integer index 145 read GetIntegerProp write SetIntegerProp stored False;
    property ReceivedCount: Integer index 146 read GetIntegerProp write SetIntegerProp stored False;
    property SelectorIndex: Integer index 149 read GetIntegerProp write SetIntegerProp stored False;
    property SelectorReadIndex: Integer index 150 read GetIntegerProp write SetIntegerProp stored False;
    property SelectorWriteIndex: Integer index 151 read GetIntegerProp write SetIntegerProp stored False;
    property SendPacketSize: Integer index 152 read GetIntegerProp write SetIntegerProp stored False;
    property SessionLogEncoding: WideString index 154 read GetWideStringProp write SetWideStringProp stored False;
    property SoRcvBuf: Integer index 155 read GetIntegerProp write SetIntegerProp stored False;
    property SoReuseAddr: Integer index 156 read GetIntegerProp write SetIntegerProp stored False;
    property SoSndBuf: Integer index 157 read GetIntegerProp write SetIntegerProp stored False;
    property SocksHostname: WideString index 158 read GetWideStringProp write SetWideStringProp stored False;
    property SocksPassword: WideString index 159 read GetWideStringProp write SetWideStringProp stored False;
    property SocksPort: Integer index 160 read GetIntegerProp write SetIntegerProp stored False;
    property SocksUsername: WideString index 161 read GetWideStringProp write SetWideStringProp stored False;
    property SocksVersion: Integer index 162 read GetIntegerProp write SetIntegerProp stored False;
    property Ssl: Integer index 163 read GetIntegerProp write SetIntegerProp stored False;
    property SslProtocol: WideString index 164 read GetWideStringProp write SetWideStringProp stored False;
    property StringCharset: WideString index 165 read GetWideStringProp write SetWideStringProp stored False;
    property TcpNoDelay: Integer index 166 read GetIntegerProp write SetIntegerProp stored False;
    property UserData: WideString index 167 read GetWideStringProp write SetWideStringProp stored False;
    property RequireSslCertVerify: Integer index 229 read GetIntegerProp write SetIntegerProp stored False;
    property PreferIpv6: Integer index 232 read GetIntegerProp write SetIntegerProp stored False;
    property OnAbortCheck: TChilkatSocketAbortCheck read FOnAbortCheck write FOnAbortCheck;
    property OnPercentDone: TChilkatSocketPercentDone read FOnPercentDone write FOnPercentDone;
    property OnProgressInfo: TChilkatSocketProgressInfo read FOnProgressInfo write FOnProgressInfo;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatSFtpFile
// Help String      : ChilkatSFtpFile Class 9.5.0
// Default Interface: IChilkatSFtpFile
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatSFtpFile = class(TOleControl)
  private
    FIntf: IChilkatSFtpFile;
    function  GetControlInterface: IChilkatSFtpFile;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    function GetLastAccessDt: ICkDateTime;
    function GetLastModifiedDt: ICkDateTime;
    function GetCreateDt: ICkDateTime;
    property  ControlInterface: IChilkatSFtpFile read GetControlInterface;
    property  DefaultInterface: IChilkatSFtpFile read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property CreateTime: TDateTime index 100 read GetTDateTimeProp;
    property CreateTimeStr: WideString index 101 read GetWideStringProp;
    property FileType: WideString index 102 read GetWideStringProp;
    property filename: WideString index 103 read GetWideStringProp;
    property Gid: Integer index 104 read GetIntegerProp;
    property Group: WideString index 105 read GetWideStringProp;
    property IsAppendOnly: Integer index 106 read GetIntegerProp;
    property IsArchive: Integer index 107 read GetIntegerProp;
    property IsCaseInsensitive: Integer index 108 read GetIntegerProp;
    property IsCompressed: Integer index 109 read GetIntegerProp;
    property isDirectory: Integer index 110 read GetIntegerProp;
    property IsEncrypted: Integer index 111 read GetIntegerProp;
    property IsHidden: Integer index 112 read GetIntegerProp;
    property IsImmutable: Integer index 113 read GetIntegerProp;
    property IsReadOnly: Integer index 114 read GetIntegerProp;
    property IsRegular: Integer index 115 read GetIntegerProp;
    property IsSparse: Integer index 116 read GetIntegerProp;
    property IsSymLink: Integer index 117 read GetIntegerProp;
    property IsSync: Integer index 118 read GetIntegerProp;
    property IsSystem: Integer index 119 read GetIntegerProp;
    property LastAccessTime: TDateTime index 120 read GetTDateTimeProp;
    property LastAccessTimeStr: WideString index 121 read GetWideStringProp;
    property LastModifiedTime: TDateTime index 122 read GetTDateTimeProp;
    property LastModifiedTimeStr: WideString index 123 read GetWideStringProp;
    property Owner: WideString index 124 read GetWideStringProp;
    property Permissions: Integer index 125 read GetIntegerProp;
    property Size32: Integer index 126 read GetIntegerProp;
    property SizeStr: WideString index 127 read GetWideStringProp;
    property Uid: Integer index 128 read GetIntegerProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatSFtpDir
// Help String      : ChilkatSFtpDir Class 9.5.0
// Default Interface: IChilkatSFtpDir
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatSFtpDir = class(TOleControl)
  private
    FIntf: IChilkatSFtpDir;
    function  GetControlInterface: IChilkatSFtpDir;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    function GetFilename(index: Integer): WideString;
    function GetFileObject(index: Integer): IChilkatSFtpFile;
    property  ControlInterface: IChilkatSFtpDir read GetControlInterface;
    property  DefaultInterface: IChilkatSFtpDir read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property OriginalPath: WideString index 100 read GetWideStringProp;
    property NumFilesAndDirs: Integer index 101 read GetIntegerProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatSFtp
// Help String      : ChilkatSFtp Class 9.5.0
// Default Interface: IChilkatSFtp
// Def. Intf. DISP? : No
// Event   Interface: _IChilkatSFtpEvents
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatSFtpAbortCheck = procedure(ASender: TObject; out abort: Integer) of object;
  TChilkatSFtpPercentDone = procedure(ASender: TObject; percent: Integer; out abort: Integer) of object;
  TChilkatSFtpProgressInfo = procedure(ASender: TObject; const name: WideString; 
                                                         const value: WideString) of object;
  TChilkatSFtpUploadRate = procedure(ASender: TObject; byteCount: Integer; bytesPerSec: Integer) of object;
  TChilkatSFtpDownloadRate = procedure(ASender: TObject; byteCount: Integer; bytesPerSec: Integer) of object;

  TChilkatSFtp = class(TOleControl)
  private
    FOnAbortCheck: TChilkatSFtpAbortCheck;
    FOnPercentDone: TChilkatSFtpPercentDone;
    FOnProgressInfo: TChilkatSFtpProgressInfo;
    FOnUploadRate: TChilkatSFtpUploadRate;
    FOnDownloadRate: TChilkatSFtpDownloadRate;
    FIntf: IChilkatSFtp;
    function  GetControlInterface: IChilkatSFtp;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
    function Get_AccumulateBuffer: OleVariant;
  public
    function GetImplAddrStr: WideString;
    function AccumulateBytes(const handle: WideString; maxBytes: Integer): Integer;
    function Add64(const n1: WideString; const n2: WideString): WideString;
    function AuthenticatePk(const UserName: WideString; const PrivateKey: IChilkatSshKey): Integer;
    function AuthenticatePw(const Login: WideString; const password: WideString): Integer;
    function AuthenticatePwPk(const UserName: WideString; const password: WideString; 
                              const PrivateKey: IChilkatSshKey): Integer;
    procedure ClearAccumulateBuffer;
    procedure ClearCache;
    procedure ClearSessionLog;
    function CloseHandle(const handle: WideString): Integer;
    function Connect(const Hostname: WideString; Port: Integer): Integer;
    function CopyFileAttr(const localFilename: WideString; const remoteFilename: WideString; 
                          bIsHandle: Integer): Integer;
    function CreateDir(const path: WideString): Integer;
    procedure Disconnect;
    function DownloadFile(const handle: WideString; const toFilename: WideString): Integer;
    function DownloadFileByName(const remoteFilePath: WideString; const localFilePath: WideString): Integer;
    function Eof(const handle: WideString): Integer;
    function GetFileCreateDt(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                             bIsHandle: Integer): ICkDateTime;
    function GetFileCreateTime(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                               bIsHandle: Integer): TDateTime;
    function GetFileCreateTimeStr(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                                  bIsHandle: Integer): WideString;
    function GetFileGroup(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                          bIsHandle: Integer): WideString;
    function GetFileLastAccess(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                               bIsHandle: Integer): TDateTime;
    function GetFileLastAccessDt(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                                 bIsHandle: Integer): ICkDateTime;
    function GetFileLastAccessStr(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                                  bIsHandle: Integer): WideString;
    function GetFileLastModified(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                                 bIsHandle: Integer): TDateTime;
    function GetFileLastModifiedDt(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                                   bIsHandle: Integer): ICkDateTime;
    function GetFileLastModifiedStr(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                                    bIsHandle: Integer): WideString;
    function GetFileOwner(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                          bIsHandle: Integer): WideString;
    function GetFilePermissions(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                                bIsHandle: Integer): Integer;
    function GetFileSize32(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                           bIsHandle: Integer): Integer;
    function GetFileSizeStr(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                            bIsHandle: Integer): WideString;
    function InitializeSftp: Integer;
    function LastReadFailed(const handle: WideString): Integer;
    function LastReadNumBytes(const handle: WideString): Integer;
    function OpenDir(const path: WideString): WideString;
    function OpenFile(const filename: WideString; const access: WideString; 
                      const createDisp: WideString): WideString;
    function ReadDir(const handle: WideString): IChilkatSFtpDir;
    function ReadFileBytes(const handle: WideString; numBytes: Integer): OleVariant;
    function ReadFileBytes32(const handle: WideString; offset: Integer; numBytes: Integer): OleVariant;
    function ReadFileBytes64s(const handle: WideString; const offset64: WideString; 
                              numBytes: Integer): OleVariant;
    function ReadFileText(const handle: WideString; numBytes: Integer; const charset: WideString): WideString;
    function ReadFileText32(const handle: WideString; offset32: Integer; numBytes: Integer; 
                            const charset: WideString): WideString;
    function ReadFileText64s(const handle: WideString; const offset64: WideString; 
                             numBytes: Integer; const charset: WideString): WideString;
    function RealPath(const OriginalPath: WideString; const composePath: WideString): WideString;
    function RemoveDir(const path: WideString): Integer;
    function RemoveFile(const filename: WideString): Integer;
    function RenameFileOrDir(const oldPath: WideString; const newPath: WideString): Integer;
    function ResumeDownloadFileByName(const remoteFilePath: WideString; 
                                      const localFilePath: WideString): Integer;
    function ResumeUploadFileByName(const remoteFilePath: WideString; 
                                    const localFilePath: WideString): Integer;
    function SetCreateDt(const pathOrHandle: WideString; bIsHandle: Integer; 
                         const CreateTime: ICkDateTime): Integer;
    function SetCreateTime(const pathOrHandle: WideString; bIsHandle: Integer; CreateTime: TDateTime): Integer;
    function SetCreateTimeStr(const pathOrHandle: WideString; bIsHandle: Integer; 
                              const dateTimeStr: WideString): Integer;
    function SetLastAccessDt(const pathOrHandle: WideString; bIsHandle: Integer; 
                             const CreateTime: ICkDateTime): Integer;
    function SetLastAccessTime(const pathOrHandle: WideString; bIsHandle: Integer; 
                               CreateTime: TDateTime): Integer;
    function SetLastAccessTimeStr(const pathOrHandle: WideString; bIsHandle: Integer; 
                                  const dateTimeStr: WideString): Integer;
    function SetLastModifiedDt(const pathOrHandle: WideString; bIsHandle: Integer; 
                               const CreateTime: ICkDateTime): Integer;
    function SetLastModifiedTime(const pathOrHandle: WideString; bIsHandle: Integer; 
                                 CreateTime: TDateTime): Integer;
    function SetLastModifiedTimeStr(const pathOrHandle: WideString; bIsHandle: Integer; 
                                    const dateTimeStr: WideString): Integer;
    function SetOwnerAndGroup(const pathOrHandle: WideString; bIsHandle: Integer; 
                              const Owner: WideString; const Group: WideString): Integer;
    function SetPermissions(const pathOrHandle: WideString; bIsHandle: Integer; perm: Integer): Integer;
    function SyncTreeUpload(const localBaseDir: WideString; const remoteBaseDir: WideString; 
                            mode: Integer; bRecurse: Integer): Integer;
    function UnlockComponent(const unlockCode: WideString): Integer;
    function UploadFile(const handle: WideString; const fromFilename: WideString): Integer;
    function UploadFileByName(const remoteFilePath: WideString; const localFilePath: WideString): Integer;
    function WriteFileBytes(const handle: WideString; data: OleVariant): Integer;
    function WriteFileBytes32(const handle: WideString; offset: Integer; data: OleVariant): Integer;
    function WriteFileBytes64s(const handle: WideString; const offset64: WideString; 
                               data: OleVariant): Integer;
    function WriteFileText(const handle: WideString; const charset: WideString; 
                           const textData: WideString): Integer;
    function WriteFileText32(const handle: WideString; offset32: Integer; 
                             const charset: WideString; const textData: WideString): Integer;
    function WriteFileText64s(const handle: WideString; const offset64: WideString; 
                              const charset: WideString; const textData: WideString): Integer;
    function SyncTreeDownload(const remoteRoot: WideString; const localRoot: WideString; 
                              mode: Integer; recurse: Integer): Integer;
    property  ControlInterface: IChilkatSFtp read GetControlInterface;
    property  DefaultInterface: IChilkatSFtp read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property AccumulateBuffer: OleVariant index 100 read GetOleVariantProp;
    property DisconnectCode: Integer index 104 read GetIntegerProp;
    property DisconnectReason: WideString index 105 read GetWideStringProp;
    property HostKeyFingerprint: WideString index 112 read GetWideStringProp;
    property InitializeFailCode: Integer index 121 read GetIntegerProp;
    property InitializeFailReason: WideString index 122 read GetWideStringProp;
    property IsConnected: Integer index 123 read GetIntegerProp;
    property PasswordChangeRequested: Integer index 126 read GetIntegerProp;
    property ProtocolVersion: Integer index 128 read GetIntegerProp;
    property SessionLog: WideString index 129 read GetWideStringProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property ClientIdentifier: WideString index 101 read GetWideStringProp write SetWideStringProp stored False;
    property ClientIpAddress: WideString index 102 read GetWideStringProp write SetWideStringProp stored False;
    property ConnectTimeoutMs: Integer index 103 read GetIntegerProp write SetIntegerProp stored False;
    property EnableCache: Integer index 106 read GetIntegerProp write SetIntegerProp stored False;
    property FilenameCharset: WideString index 107 read GetWideStringProp write SetWideStringProp stored False;
    property ForceCipher: WideString index 108 read GetWideStringProp write SetWideStringProp stored False;
    property ForceV3: Integer index 109 read GetIntegerProp write SetIntegerProp stored False;
    property HeartbeatMs: Integer index 110 read GetIntegerProp write SetIntegerProp stored False;
    property HostKeyAlg: WideString index 111 read GetWideStringProp write SetWideStringProp stored False;
    property HttpProxyAuthMethod: WideString index 113 read GetWideStringProp write SetWideStringProp stored False;
    property HttpProxyDomain: WideString index 114 read GetWideStringProp write SetWideStringProp stored False;
    property HttpProxyHostname: WideString index 115 read GetWideStringProp write SetWideStringProp stored False;
    property HttpProxyPassword: WideString index 116 read GetWideStringProp write SetWideStringProp stored False;
    property HttpProxyPort: Integer index 117 read GetIntegerProp write SetIntegerProp stored False;
    property HttpProxyUsername: WideString index 118 read GetWideStringProp write SetWideStringProp stored False;
    property IdleTimeoutMs: Integer index 119 read GetIntegerProp write SetIntegerProp stored False;
    property IncludeDotDirs: Integer index 120 read GetIntegerProp write SetIntegerProp stored False;
    property KeepSessionLog: Integer index 124 read GetIntegerProp write SetIntegerProp stored False;
    property MaxPacketSize: Integer index 125 read GetIntegerProp write SetIntegerProp stored False;
    property PreserveDate: Integer index 127 read GetIntegerProp write SetIntegerProp stored False;
    property SoRcvBuf: Integer index 130 read GetIntegerProp write SetIntegerProp stored False;
    property SoSndBuf: Integer index 131 read GetIntegerProp write SetIntegerProp stored False;
    property SocksHostname: WideString index 132 read GetWideStringProp write SetWideStringProp stored False;
    property SocksPassword: WideString index 133 read GetWideStringProp write SetWideStringProp stored False;
    property SocksPort: Integer index 134 read GetIntegerProp write SetIntegerProp stored False;
    property SocksUsername: WideString index 135 read GetWideStringProp write SetWideStringProp stored False;
    property SocksVersion: Integer index 136 read GetIntegerProp write SetIntegerProp stored False;
    property SyncMustMatch: WideString index 137 read GetWideStringProp write SetWideStringProp stored False;
    property TcpNoDelay: Integer index 138 read GetIntegerProp write SetIntegerProp stored False;
    property UploadChunkSize: Integer index 139 read GetIntegerProp write SetIntegerProp stored False;
    property UtcMode: Integer index 140 read GetIntegerProp write SetIntegerProp stored False;
    property SyncMustNotMatch: WideString index 141 read GetWideStringProp write SetWideStringProp stored False;
    property PreferIpv6: Integer index 212 read GetIntegerProp write SetIntegerProp stored False;
    property OnAbortCheck: TChilkatSFtpAbortCheck read FOnAbortCheck write FOnAbortCheck;
    property OnPercentDone: TChilkatSFtpPercentDone read FOnPercentDone write FOnPercentDone;
    property OnProgressInfo: TChilkatSFtpProgressInfo read FOnProgressInfo write FOnProgressInfo;
    property OnUploadRate: TChilkatSFtpUploadRate read FOnUploadRate write FOnUploadRate;
    property OnDownloadRate: TChilkatSFtpDownloadRate read FOnDownloadRate write FOnDownloadRate;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatRss
// Help String      : ChilkatRss Class 9.5.0
// Default Interface: IChilkatRss
// Def. Intf. DISP? : No
// Event   Interface: _IChilkatEvents
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatRssAbortCheck = procedure(ASender: TObject; out abort: Integer) of object;
  TChilkatRssPercentDone = procedure(ASender: TObject; percent: Integer; out abort: Integer) of object;
  TChilkatRssProgressInfo = procedure(ASender: TObject; const name: WideString; 
                                                        const value: WideString) of object;

  TChilkatRss = class(TOleControl)
  private
    FOnAbortCheck: TChilkatRssAbortCheck;
    FOnPercentDone: TChilkatRssPercentDone;
    FOnProgressInfo: TChilkatRssProgressInfo;
    FIntf: IChilkatRss;
    function  GetControlInterface: IChilkatRss;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    function AddNewChannel: IChilkatRss;
    function AddNewImage: IChilkatRss;
    function AddNewItem: IChilkatRss;
    function DownloadRss(const url: WideString): Integer;
    function GetAttr(const Tag: WideString; const attrName: WideString): WideString;
    function GetChannel(index: Integer): IChilkatRss;
    function GetCount(const Tag: WideString): Integer;
    function GetDate(const Tag: WideString): TDateTime;
    function GetDateStr(const Tag: WideString): WideString;
    function GetImage: IChilkatRss;
    function GetInt(const Tag: WideString): Integer;
    function GetItem(index: Integer): IChilkatRss;
    function GetString(const Tag: WideString): WideString;
    function LoadRssFile(const filename: WideString): Integer;
    function LoadRssString(const rssString: WideString): Integer;
    function MGetAttr(const Tag: WideString; index: Integer; const attrName: WideString): WideString;
    function MGetString(const Tag: WideString; index: Integer): WideString;
    function MSetAttr(const Tag: WideString; idx: Integer; const attrName: WideString; 
                      const value: WideString): Integer;
    function MSetString(const Tag: WideString; idx: Integer; const value: WideString): Integer;
    procedure NewRss;
    procedure Remove(const Tag: WideString);
    procedure SetAttr(const Tag: WideString; const attrName: WideString; const value: WideString);
    procedure SetDate(const Tag: WideString; dateTime: TDateTime);
    procedure SetDateNow(const Tag: WideString);
    procedure SetDateStr(const Tag: WideString; const dateTimeStr: WideString);
    procedure SetInt(const Tag: WideString; value: Integer);
    procedure SetString(const Tag: WideString; const value: WideString);
    function ToXmlString: WideString;
    property  ControlInterface: IChilkatRss read GetControlInterface;
    property  DefaultInterface: IChilkatRss read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property NumItems: Integer index 100 read GetIntegerProp;
    property NumChannels: Integer index 101 read GetIntegerProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property OnAbortCheck: TChilkatRssAbortCheck read FOnAbortCheck write FOnAbortCheck;
    property OnPercentDone: TChilkatRssPercentDone read FOnPercentDone write FOnPercentDone;
    property OnProgressInfo: TChilkatRssProgressInfo read FOnProgressInfo write FOnProgressInfo;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatRsa
// Help String      : ChilkatRsa Class 9.5.0
// Default Interface: IChilkatRsa
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatRsa = class(TOleControl)
  private
    FIntf: IChilkatRsa;
    function  GetControlInterface: IChilkatRsa;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    function DecryptBytes(data: OleVariant; bUsePrivateKey: Integer): OleVariant;
    function DecryptBytesENC(const str: WideString; bUsePrivateKey: Integer): OleVariant;
    function DecryptString(data: OleVariant; bUsePrivateKey: Integer): WideString;
    function DecryptStringENC(const str: WideString; bUsePrivateKey: Integer): WideString;
    function EncryptBytes(data: OleVariant; bUsePrivateKey: Integer): OleVariant;
    function EncryptBytesENC(data: OleVariant; bUsePrivateKey: Integer): WideString;
    function EncryptString(const str: WideString; bUsePrivateKey: Integer): OleVariant;
    function EncryptStringENC(const str: WideString; bUsePrivateKey: Integer): WideString;
    function ExportPrivateKey: WideString;
    function ExportPublicKey: WideString;
    function GenerateKey(numBits: Integer): Integer;
    function ImportPrivateKey(const xml: WideString): Integer;
    function ImportPublicKey(const xml: WideString): Integer;
    function OpenSslSignBytes(data: OleVariant): OleVariant;
    function OpenSslSignBytesENC(data: OleVariant): WideString;
    function OpenSslSignString(const str: WideString): OleVariant;
    function OpenSslSignStringENC(const str: WideString): WideString;
    function OpenSslVerifyBytes(signature: OleVariant): OleVariant;
    function OpenSslVerifyBytesENC(const str: WideString): OleVariant;
    function OpenSslVerifyString(data: OleVariant): WideString;
    function OpenSslVerifyStringENC(const str: WideString): WideString;
    function SignBytes(data: OleVariant; const hashAlg: WideString): OleVariant;
    function SignBytesENC(data: OleVariant; const hashAlg: WideString): WideString;
    function SignHash(HashBytes: OleVariant; const hashAlg: WideString): OleVariant;
    function SignHashENC(const encodedHash: WideString; const hashAlg: WideString): WideString;
    function SignString(const str: WideString; const hashAlg: WideString): OleVariant;
    function SignStringENC(const str: WideString; const hashAlg: WideString): WideString;
    function SnkToXml(const filename: WideString): WideString;
    function UnlockComponent(const unlockCode: WideString): Integer;
    function VerifyBytes(data: OleVariant; const hashAlg: WideString; sig: OleVariant): Integer;
    function VerifyBytesENC(data: OleVariant; const hashAlg: WideString; 
                            const encodedSig: WideString): Integer;
    function VerifyHash(HashBytes: OleVariant; const hashAlg: WideString; sigBytes: OleVariant): Integer;
    function VerifyHashENC(const encodedHash: WideString; const hashAlg: WideString; 
                           const encodedSig: WideString): Integer;
    function VerifyPrivateKey(const xml: WideString): Integer;
    function VerifyString(const str: WideString; const hashAlg: WideString; sig: OleVariant): Integer;
    function VerifyStringENC(const str: WideString; const hashAlg: WideString; const sig: WideString): Integer;
    function ImportPrivateKeyObj(const key: IPrivateKey): Integer;
    function ImportPublicKeyObj(const key: IPublicKey): Integer;
    function ExportPrivateKeyObj: IPrivateKey;
    function ExportPublicKeyObj: IPublicKey;
    property  ControlInterface: IChilkatRsa read GetControlInterface;
    property  DefaultInterface: IChilkatRsa read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property numBits: Integer index 103 read GetIntegerProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property EncodingMode: WideString index 100 read GetWideStringProp write SetWideStringProp stored False;
    property LittleEndian: Integer index 101 read GetIntegerProp write SetIntegerProp stored False;
    property NoUnpad: Integer index 102 read GetIntegerProp write SetIntegerProp stored False;
    property OaepPadding: Integer index 104 read GetIntegerProp write SetIntegerProp stored False;
    property charset: WideString index 105 read GetWideStringProp write SetWideStringProp stored False;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatOmaDrm
// Help String      : ChilkatOmaDrm Class 9.5.0
// Default Interface: IChilkatOmaDrm
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatOmaDrm = class(TOleControl)
  private
    FIntf: IChilkatOmaDrm;
    function  GetControlInterface: IChilkatOmaDrm;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
    function Get_DecryptedData: OleVariant;
    function Get_EncryptedData: OleVariant;
    function Get_IV: OleVariant;
    procedure Set_IV(pVal: OleVariant);
  public
    function GetImplAddrStr: WideString;
    function CreateDcfFile(const filename: WideString): Integer;
    function GetHeaderField(const fieldName: WideString): WideString;
    function LoadDcfData(data: OleVariant): Integer;
    function LoadDcfFile(const filename: WideString): Integer;
    procedure LoadUnencryptedData(data: OleVariant);
    function LoadUnencryptedFile(const filename: WideString): Integer;
    function SaveDecrypted(const filename: WideString): Integer;
    procedure SetEncodedIV(const encodedIv: WideString; const encoding: WideString);
    function UnlockComponent(const b1: WideString): Integer;
    property  ControlInterface: IChilkatOmaDrm read GetControlInterface;
    property  DefaultInterface: IChilkatOmaDrm read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property DecryptedData: OleVariant index 103 read GetOleVariantProp;
    property DrmContentVersion: Integer index 104 read GetIntegerProp;
    property EncryptedData: OleVariant index 105 read GetOleVariantProp;
    property IV: OleVariant index 107 read GetOleVariantProp write SetOleVariantProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property Base64Key: WideString index 100 read GetWideStringProp write SetWideStringProp stored False;
    property ContentType: WideString index 101 read GetWideStringProp write SetWideStringProp stored False;
    property ContentUri: WideString index 102 read GetWideStringProp write SetWideStringProp stored False;
    property Headers: WideString index 106 read GetWideStringProp write SetWideStringProp stored False;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatNtlm
// Help String      : ChilkatNtlm Class 9.5.0
// Default Interface: IChilkatNtlm
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatNtlm = class(TOleControl)
  private
    FIntf: IChilkatNtlm;
    function  GetControlInterface: IChilkatNtlm;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    function CompareType3(const msg1: WideString; const msg2: WideString): Integer;
    function GenType1: WideString;
    function GenType2(const type1Msg: WideString): WideString;
    function GenType3(const type2Msg: WideString): WideString;
    function LoadType3(const type3Msg: WideString): Integer;
    function ParseType1(const type1Msg: WideString): WideString;
    function ParseType2(const type2Msg: WideString): WideString;
    function ParseType3(const type3Msg: WideString): WideString;
    function SetFlag(const flagLetter: WideString; onOrOff: Integer): Integer;
    function UnlockComponent(const unlockCode: WideString): Integer;
    property  ControlInterface: IChilkatNtlm read GetControlInterface;
    property  DefaultInterface: IChilkatNtlm read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property ClientChallenge: WideString index 100 read GetWideStringProp write SetWideStringProp stored False;
    property DnsComputerName: WideString index 101 read GetWideStringProp write SetWideStringProp stored False;
    property DnsDomainName: WideString index 102 read GetWideStringProp write SetWideStringProp stored False;
    property Domain: WideString index 103 read GetWideStringProp write SetWideStringProp stored False;
    property EncodingMode: WideString index 104 read GetWideStringProp write SetWideStringProp stored False;
    property Flags: WideString index 105 read GetWideStringProp write SetWideStringProp stored False;
    property NetBiosComputerName: WideString index 106 read GetWideStringProp write SetWideStringProp stored False;
    property NetBiosDomainName: WideString index 107 read GetWideStringProp write SetWideStringProp stored False;
    property NtlmVersion: Integer index 108 read GetIntegerProp write SetIntegerProp stored False;
    property OemCodePage: Integer index 109 read GetIntegerProp write SetIntegerProp stored False;
    property password: WideString index 110 read GetWideStringProp write SetWideStringProp stored False;
    property ServerChallenge: WideString index 111 read GetWideStringProp write SetWideStringProp stored False;
    property TargetName: WideString index 112 read GetWideStringProp write SetWideStringProp stored False;
    property UserName: WideString index 113 read GetWideStringProp write SetWideStringProp stored False;
    property Workstation: WideString index 114 read GetWideStringProp write SetWideStringProp stored False;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatMime
// Help String      : ChilkatMime Class 9.5.0
// Default Interface: IChilkatMime
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatMime = class(TOleControl)
  private
    FIntf: IChilkatMime;
    function  GetControlInterface: IChilkatMime;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    procedure AddContentLength;
    function AddDetachedSignature(const cert: IChilkatCert): Integer;
    function AddDetachedSignature2(const cert: IChilkatCert; transferHeaderFields: Integer): Integer;
    function AddDetachedSignaturePk(const cert: IChilkatCert; const PrivateKey: IPrivateKey): Integer;
    function AddDetachedSignaturePk2(const cert: IChilkatCert; const PrivateKey: IPrivateKey; 
                                     transferHeaderFields: Integer): Integer;
    function AddEncryptCert(const cert: IChilkatCert): Integer;
    function AddHeaderField(const name: WideString; const value: WideString): Integer;
    function AddPfxSourceData(pfxData: OleVariant; const password: WideString): Integer;
    function AddPfxSourceFile(const pfxFilePath: WideString; const password: WideString): Integer;
    function AppendPart(const mime: IChilkatMime): Integer;
    function AppendPartFromFile(const filename: WideString): Integer;
    function AsnBodyToXml: WideString;
    procedure ClearEncryptCerts;
    function ContainsEncryptedParts: Integer;
    function ContainsSignedParts: Integer;
    procedure Convert8Bit;
    function ConvertToMultipartAlt: Integer;
    function ConvertToMultipartMixed: Integer;
    function ConvertToSigned(const cert: IChilkatCert): Integer;
    function ConvertToSignedPk(const cert: IChilkatCert; const PrivateKey: IPrivateKey): Integer;
    function Decrypt: Integer;
    function Decrypt2(const cert: IChilkatCert; const PrivateKey: IPrivateKey): Integer;
    function DecryptUsingPfxData(pfxData: OleVariant; const password: WideString): Integer;
    function DecryptUsingPfxFile(const pfxFilePath: WideString; const password: WideString): Integer;
    function Encrypt(const cert: IChilkatCert): Integer;
    function EncryptN: Integer;
    function ExtractPartsToFiles(const dirPath: WideString): ICkStringArray;
    function FindIssuer(const cert: IChilkatCert): IChilkatCert;
    function GetBodyBinary: OleVariant;
    function GetBodyDecoded: WideString;
    function GetBodyEncoded: WideString;
    function GetEncryptCert(index: Integer): IChilkatCert;
    function GetEntireBody: WideString;
    function GetEntireHead: WideString;
    function GetHeaderField(const name: WideString): WideString;
    function GetHeaderFieldAttribute(const name: WideString; const attrName: WideString): WideString;
    function GetHeaderFieldName(index: Integer): WideString;
    function GetHeaderFieldValue(index: Integer): WideString;
    function GetMime: WideString;
    function GetMimeBytes: OleVariant;
    function GetPart(index: Integer): IChilkatMime;
    function GetSignatureSigningTime(index: Integer): TDateTime;
    function GetSignatureSigningTimeStr(index: Integer): WideString;
    function GetSignerCert(index: Integer): IChilkatCert;
    function GetXml: WideString;
    function HasSignatureSigningTime(index: Integer): Integer;
    function IsApplicationData: Integer;
    function IsAttachment: Integer;
    function IsAudio: Integer;
    function IsEncrypted: Integer;
    function IsHtml: Integer;
    function IsImage: Integer;
    function IsMultipart: Integer;
    function IsMultipartAlternative: Integer;
    function IsMultipartMixed: Integer;
    function IsMultipartRelated: Integer;
    function IsPlainText: Integer;
    function IsSigned: Integer;
    function IsText: Integer;
    function IsUnlocked: Integer;
    function IsVideo: Integer;
    function IsXml: Integer;
    function LoadMime(const mimeMsg: WideString): Integer;
    function LoadMimeBytes(binData: OleVariant): Integer;
    function LoadMimeFile(const filename: WideString): Integer;
    function LoadXml(const xml: WideString): Integer;
    function LoadXmlFile(const filename: WideString): Integer;
    function NewMessageRfc822(const mimeObject: IChilkatMime): Integer;
    function NewMultipartAlternative: Integer;
    function NewMultipartMixed: Integer;
    function NewMultipartRelated: Integer;
    procedure RemoveHeaderField(const name: WideString; bAllOccurances: Integer);
    function RemovePart(index: Integer): Integer;
    function SaveBody(const filename: WideString): Integer;
    function SaveMime(const filename: WideString): Integer;
    function SaveXml(const filename: WideString): Integer;
    procedure SetBody(const str: WideString);
    function SetBodyFromBinary(binData: OleVariant): Integer;
    function SetBodyFromEncoded(const encoding: WideString; const str: WideString): Integer;
    function SetBodyFromFile(const filename: WideString): Integer;
    function SetBodyFromHtml(const str: WideString): Integer;
    function SetBodyFromPlainText(const str: WideString): Integer;
    function SetBodyFromXml(const str: WideString): Integer;
    function SetCSP(const csp: IChilkatCsp): Integer;
    function SetHeaderField(const name: WideString; const value: WideString): Integer;
    function SetVerifyCert(const cert: IChilkatCert): Integer;
    function UnlockComponent(const unlockCode: WideString): Integer;
    function UnwrapSecurity: Integer;
    procedure UrlEncodeBody(const charset: WideString);
    function Verify: Integer;
    function GetSignerCertChain(index: Integer): IChilkatCertChain;
    function UseCertVault(const vault: IChilkatXmlCertVault): Integer;
    function DecryptUsingCert(const cert: IChilkatCert): Integer;
    function AddDecryptCert(const cert: IChilkatCert): Integer;
    property  ControlInterface: IChilkatMime read GetControlInterface;
    property  DefaultInterface: IChilkatMime read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property CurrentDateTime: WideString index 103 read GetWideStringProp;
    property NumEncryptCerts: Integer index 109 read GetIntegerProp;
    property NumHeaderFields: Integer index 110 read GetIntegerProp;
    property NumParts: Integer index 111 read GetIntegerProp;
    property NumSignerCerts: Integer index 112 read GetIntegerProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property boundary: WideString index 100 read GetWideStringProp write SetWideStringProp stored False;
    property charset: WideString index 101 read GetWideStringProp write SetWideStringProp stored False;
    property ContentType: WideString index 102 read GetWideStringProp write SetWideStringProp stored False;
    property Disposition: WideString index 104 read GetWideStringProp write SetWideStringProp stored False;
    property encoding: WideString index 105 read GetWideStringProp write SetWideStringProp stored False;
    property filename: WideString index 106 read GetWideStringProp write SetWideStringProp stored False;
    property Micalg: WideString index 107 read GetWideStringProp write SetWideStringProp stored False;
    property name: WideString index 108 read GetWideStringProp write SetWideStringProp stored False;
    property Pkcs7CryptAlg: WideString index 113 read GetWideStringProp write SetWideStringProp stored False;
    property Pkcs7KeyLength: Integer index 114 read GetIntegerProp write SetIntegerProp stored False;
    property Protocol: WideString index 115 read GetWideStringProp write SetWideStringProp stored False;
    property SigningHashAlg: WideString index 116 read GetWideStringProp write SetWideStringProp stored False;
    property UnwrapExtras: Integer index 117 read GetIntegerProp write SetIntegerProp stored False;
    property UseMmDescription: Integer index 118 read GetIntegerProp write SetIntegerProp stored False;
    property UseXPkcs7: Integer index 119 read GetIntegerProp write SetIntegerProp stored False;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatMht
// Help String      : ChilkatMht Class 9.5.0
// Default Interface: IChilkatMht
// Def. Intf. DISP? : No
// Event   Interface: _IChilkatEvents
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatMhtAbortCheck = procedure(ASender: TObject; out abort: Integer) of object;
  TChilkatMhtPercentDone = procedure(ASender: TObject; percent: Integer; out abort: Integer) of object;
  TChilkatMhtProgressInfo = procedure(ASender: TObject; const name: WideString; 
                                                        const value: WideString) of object;

  TChilkatMht = class(TOleControl)
  private
    FOnAbortCheck: TChilkatMhtAbortCheck;
    FOnPercentDone: TChilkatMhtPercentDone;
    FOnProgressInfo: TChilkatMhtProgressInfo;
    FIntf: IChilkatMht;
    function  GetControlInterface: IChilkatMht;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    procedure AddCacheRoot(const dir: WideString);
    procedure AddCustomHeader(const name: WideString; const value: WideString);
    procedure AddExternalStyleSheet(const url: WideString);
    procedure ClearCustomHeaders;
    procedure ExcludeImagesMatching(const pattern: WideString);
    function GetAndSaveEML(const url: WideString; const emlFilename: WideString): Integer;
    function GetAndSaveMHT(const url: WideString; const mhtFilename: WideString): Integer;
    function GetAndZipEML(const url: WideString; const zipEntryFilename: WideString; 
                          const zipFilename: WideString): Integer;
    function GetAndZipMHT(const url: WideString; const zipEntryFilename: WideString; 
                          const zipFilename: WideString): Integer;
    function GetCacheRoot(index: Integer): WideString;
    function GetEML(const url: WideString): WideString;
    function GetMHT(const url: WideString): WideString;
    function HtmlToEML(const htmlText: WideString): WideString;
    function HtmlToEMLFile(const html: WideString; const emlFilename: WideString): Integer;
    function HtmlToMHT(const htmlText: WideString): WideString;
    function HtmlToMHTFile(const html: WideString; const mhtFilename: WideString): Integer;
    function IsUnlocked: Integer;
    procedure RemoveCustomHeader(const name: WideString);
    procedure RestoreDefaults;
    function UnlockComponent(const unlockCode: WideString): Integer;
    function UnpackMHT(const mhtFilename: WideString; const unpackDir: WideString; 
                       const htmlFilename: WideString; const partsSubDir: WideString): Integer;
    function UnpackMHTString(const mhtString: WideString; const unpackDir: WideString; 
                             const htmlFilename: WideString; const partsSubDir: WideString): Integer;
    property  ControlInterface: IChilkatMht read GetControlInterface;
    property  DefaultInterface: IChilkatMht read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property NumCacheRoots: Integer index 114 read GetIntegerProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property BaseUrl: WideString index 100 read GetWideStringProp write SetWideStringProp stored False;
    property ConnectTimeout: Integer index 101 read GetIntegerProp write SetIntegerProp stored False;
    property DebugHtmlAfter: WideString index 102 read GetWideStringProp write SetWideStringProp stored False;
    property DebugHtmlBefore: WideString index 103 read GetWideStringProp write SetWideStringProp stored False;
    property DebugTagCleaning: Integer index 104 read GetIntegerProp write SetIntegerProp stored False;
    property EmbedImages: Integer index 105 read GetIntegerProp write SetIntegerProp stored False;
    property EmbedLocalOnly: Integer index 106 read GetIntegerProp write SetIntegerProp stored False;
    property FetchFromCache: Integer index 107 read GetIntegerProp write SetIntegerProp stored False;
    property HeartbeatMs: Integer index 108 read GetIntegerProp write SetIntegerProp stored False;
    property IgnoreMustRevalidate: Integer index 109 read GetIntegerProp write SetIntegerProp stored False;
    property IgnoreNoCache: Integer index 110 read GetIntegerProp write SetIntegerProp stored False;
    property NoScripts: Integer index 111 read GetIntegerProp write SetIntegerProp stored False;
    property NtlmAuth: Integer index 112 read GetIntegerProp write SetIntegerProp stored False;
    property NumCacheLevels: Integer index 113 read GetIntegerProp write SetIntegerProp stored False;
    property PreferMHTScripts: Integer index 115 read GetIntegerProp write SetIntegerProp stored False;
    property Proxy: WideString index 116 read GetWideStringProp write SetWideStringProp stored False;
    property ProxyLogin: WideString index 117 read GetWideStringProp write SetWideStringProp stored False;
    property ProxyPassword: WideString index 118 read GetWideStringProp write SetWideStringProp stored False;
    property ReadTimeout: Integer index 119 read GetIntegerProp write SetIntegerProp stored False;
    property SocksHostname: WideString index 120 read GetWideStringProp write SetWideStringProp stored False;
    property SocksPassword: WideString index 121 read GetWideStringProp write SetWideStringProp stored False;
    property SocksPort: Integer index 122 read GetIntegerProp write SetIntegerProp stored False;
    property SocksUsername: WideString index 123 read GetWideStringProp write SetWideStringProp stored False;
    property SocksVersion: Integer index 124 read GetIntegerProp write SetIntegerProp stored False;
    property UnpackUseRelPaths: Integer index 125 read GetIntegerProp write SetIntegerProp stored False;
    property UpdateCache: Integer index 126 read GetIntegerProp write SetIntegerProp stored False;
    property UseCids: Integer index 127 read GetIntegerProp write SetIntegerProp stored False;
    property UseFilename: Integer index 128 read GetIntegerProp write SetIntegerProp stored False;
    property UseIEProxy: Integer index 129 read GetIntegerProp write SetIntegerProp stored False;
    property UseInline: Integer index 130 read GetIntegerProp write SetIntegerProp stored False;
    property WebSiteLogin: WideString index 131 read GetWideStringProp write SetWideStringProp stored False;
    property WebSiteLoginDomain: WideString index 132 read GetWideStringProp write SetWideStringProp stored False;
    property WebSitePassword: WideString index 133 read GetWideStringProp write SetWideStringProp stored False;
    property RequireSslCertVerify: Integer index 159 read GetIntegerProp write SetIntegerProp stored False;
    property PreferIpv6: Integer index 160 read GetIntegerProp write SetIntegerProp stored False;
    property OnAbortCheck: TChilkatMhtAbortCheck read FOnAbortCheck write FOnAbortCheck;
    property OnPercentDone: TChilkatMhtPercentDone read FOnPercentDone write FOnPercentDone;
    property OnProgressInfo: TChilkatMhtProgressInfo read FOnProgressInfo write FOnProgressInfo;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TMessageSet
// Help String      : MessageSet Class 9.5.0
// Default Interface: IMessageSet
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TMessageSet = class(TOleControl)
  private
    FIntf: IMessageSet;
    function  GetControlInterface: IMessageSet;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    function ContainsId(id: Integer): Integer;
    function FromCompactString(const str: WideString): Integer;
    function GetId(index: Integer): Integer;
    procedure InsertId(id: Integer);
    procedure RemoveId(id: Integer);
    function ToCompactString: WideString;
    function ToCommaSeparatedStr: WideString;
    property  ControlInterface: IMessageSet read GetControlInterface;
    property  DefaultInterface: IMessageSet read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property Count: Integer index 101 read GetIntegerProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property HasUids: Integer index 100 read GetIntegerProp write SetIntegerProp stored False;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TMailboxes
// Help String      : Mailboxes Class 9.5.0
// Default Interface: IMailboxes
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TMailboxes = class(TOleControl)
  private
    FIntf: IMailboxes;
    function  GetControlInterface: IMailboxes;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    function HasInferiors(index: Integer): Integer;
    function IsMarked(index: Integer): Integer;
    function IsSelectable(index: Integer): Integer;
    function GetName(index: Integer): WideString;
    function GetFlags(index: Integer): WideString;
    function HasFlag(index: Integer; const flagName: WideString): Integer;
    function GetNumFlags(index: Integer): Integer;
    function GetNthFlag(index: Integer; flagIndex: Integer): WideString;
    function GetMailboxIndex(const mbxName: WideString): Integer;
    property  ControlInterface: IMailboxes read GetControlInterface;
    property  DefaultInterface: IMailboxes read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property Count: Integer index 100 read GetIntegerProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatMailMan
// Help String      : ChilkatMailMan Class 9.5.0
// Default Interface: IChilkatMailMan
// Def. Intf. DISP? : No
// Event   Interface: _IChilkatMailManEvents
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatMailManAbortCheck = procedure(ASender: TObject; out abort: Integer) of object;
  TChilkatMailManPercentDone = procedure(ASender: TObject; percent: Integer; out abort: Integer) of object;
  TChilkatMailManProgressInfo = procedure(ASender: TObject; const name: WideString; 
                                                            const value: WideString) of object;
  TChilkatMailManEmailReceived = procedure(ASender: TObject; const subject: WideString; 
                                                             const fromAddr: WideString; 
                                                             const fromName: WideString; 
                                                             const returnPath: WideString; 
                                                             const dateStr: WideString; 
                                                             const uidl: WideString; 
                                                             sizeInBytes: Integer) of object;

  TChilkatMailMan = class(TOleControl)
  private
    FOnAbortCheck: TChilkatMailManAbortCheck;
    FOnPercentDone: TChilkatMailManPercentDone;
    FOnProgressInfo: TChilkatMailManProgressInfo;
    FOnEmailReceived: TChilkatMailManEmailReceived;
    FIntf: IChilkatMailMan;
    function  GetControlInterface: IChilkatMailMan;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    function AddPfxSourceData(pfxData: OleVariant; const password: WideString): Integer;
    function AddPfxSourceFile(const pfxFilePath: WideString; const password: WideString): Integer;
    function CheckMail: Integer;
    procedure ClearBadEmailAddresses;
    procedure ClearPop3SessionLog;
    procedure ClearSmtpSessionLog;
    function CloseSmtpConnection: Integer;
    function CopyMail: IChilkatEmailBundle;
    function DeleteBundle(const bundle: IChilkatEmailBundle): Integer;
    function DeleteByMsgnum(msgnum: Integer): Integer;
    function DeleteByUidl(const uidl: WideString): Integer;
    function DeleteEmail(const email: IChilkatEmail): Integer;
    function DeleteMultiple(const uidlArray: ICkStringArray): Integer;
    function FetchByMsgnum(msgnum: Integer): IChilkatEmail;
    function FetchEmail(const uidl: WideString): IChilkatEmail;
    function FetchMime(const uidl: WideString): OleVariant;
    function FetchMimeByMsgnum(msgnum: Integer): OleVariant;
    function FetchMultiple(const uidlArray: ICkStringArray): IChilkatEmailBundle;
    function FetchMultipleHeaders(const uidlArray: ICkStringArray; numBodyLines: Integer): IChilkatEmailBundle;
    function FetchMultipleMime(const uidlArray: ICkStringArray): ICkStringArray;
    function FetchSingleHeader(numBodyLines: Integer; index: Integer): IChilkatEmail;
    function FetchSingleHeaderByUidl(numBodyLines: Integer; const uidl: WideString): IChilkatEmail;
    function GetAllHeaders(numBodyLines: Integer): IChilkatEmailBundle;
    function GetFullEmail(const email: IChilkatEmail): IChilkatEmail;
    function GetHeaders(numBodyLines: Integer; fromIndex: Integer; toIndex: Integer): IChilkatEmailBundle;
    function GetMailboxCount: Integer;
    function GetMailboxInfoXml: WideString;
    function GetMailboxSize: Integer;
    function GetPop3SslServerCert: IChilkatCert;
    function GetSentToEmailAddrs: ICkStringArray;
    function GetSizeByUidl(const uidl: WideString): Integer;
    function GetSmtpSslServerCert: IChilkatCert;
    function GetUidls: ICkStringArray;
    function IsSmtpDsnCapable: Integer;
    function IsUnlocked: Integer;
    function LoadEml(const emlFilename: WideString): IChilkatEmail;
    function LoadMbx(const mbxFileName: WideString): IChilkatEmailBundle;
    function LoadMime(const mimeText: WideString): IChilkatEmail;
    function LoadXmlEmail(const filename: WideString): IChilkatEmail;
    function LoadXmlEmailString(const xmlString: WideString): IChilkatEmail;
    function LoadXmlFile(const filename: WideString): IChilkatEmailBundle;
    function LoadXmlString(const xmlString: WideString): IChilkatEmailBundle;
    function MxLookup(const emailAddress: WideString): WideString;
    function MxLookupAll(const emailAddress: WideString): ICkStringArray;
    function OpenSmtpConnection: Integer;
    function Pop3BeginSession: Integer;
    function Pop3EndSession: Integer;
    function Pop3EndSessionNoQuit: Integer;
    function Pop3Noop: Integer;
    function Pop3Reset: Integer;
    function Pop3SendRawCommand(const command: WideString; const charset: WideString): WideString;
    function QuickSend(const fromAddr: WideString; const toAddr: WideString; 
                       const subject: WideString; const Body: WideString; 
                       const smtpServer: WideString): Integer;
    function RenderToMime(const email: IChilkatEmail): WideString;
    function RenderToMimeBytes(const email: IChilkatEmail): OleVariant;
    function SendBundle(const bundle: IChilkatEmailBundle): Integer;
    function SendEmail(const email: IChilkatEmail): Integer;
    function SendMime(const From: WideString; const recipients: WideString; 
                      const mimeText: WideString): Integer;
    function SendMimeBytes(const From: WideString; const recipients: WideString; 
                           mimeData: OleVariant): Integer;
    function SendMimeBytesQ(const From: WideString; const recipients: WideString; 
                            mimeData: OleVariant): Integer;
    function SendMimeQ(const From: WideString; const recipients: WideString; 
                       const mimeText: WideString): Integer;
    function SendMimeToList(const From: WideString; const distListFile: WideString; 
                            const mimeText: WideString): Integer;
    function SendQ(const email: IChilkatEmail): Integer;
    function SendQ2(const email: IChilkatEmail; const queueDir: WideString): Integer;
    function SendToDistributionList(const email: IChilkatEmail; const sa: ICkStringArray): Integer;
    function SetCSP(const csp: IChilkatCsp): Integer;
    function SetDecryptCert2(const cert: IChilkatCert; const key: IPrivateKey): Integer;
    function SetSslClientCert(const cert: IChilkatCert): Integer;
    function SetSslClientCertPem(const pemDataOrFilename: WideString; const pemPassword: WideString): Integer;
    function SetSslClientCertPfx(const pfxFilename: WideString; const pfxPassword: WideString): Integer;
    function SmtpNoop: Integer;
    function SmtpReset: Integer;
    function SmtpSendRawCommand(const command: WideString; const charset: WideString; 
                                bEncodeBase64: Integer): WideString;
    function SshAuthenticatePk(bSmtp: Integer; const SshLogin: WideString; 
                               const PrivateKey: IChilkatSshKey): Integer;
    function SshAuthenticatePw(bSmtp: Integer; const SshLogin: WideString; 
                               const SshPassword: WideString): Integer;
    function SshCloseTunnel(bSmtp: Integer): Integer;
    function SshTunnel(bSmtp: Integer; const sshServerHostname: WideString; sshServerPort: Integer): Integer;
    function TransferMail: IChilkatEmailBundle;
    function TransferMultipleMime(const uidlArray: ICkStringArray): ICkStringArray;
    function UnlockComponent(const code: WideString): Integer;
    function VerifyPopConnection: Integer;
    function VerifyPopLogin: Integer;
    function VerifySmtpConnection: Integer;
    function VerifySmtpLogin: Integer;
    procedure GetBadEmailAddresses(const strArray: ICkStringArray);
    function UseCertVault(const vault: IChilkatXmlCertVault): Integer;
    function SetDecryptCert(const cert: IChilkatCert): Integer;
    property  ControlInterface: IChilkatMailMan read GetControlInterface;
    property  DefaultInterface: IChilkatMailMan read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property IsSmtpConnected: Integer index 121 read GetIntegerProp;
    property LastSendQFilename: WideString index 122 read GetWideStringProp;
    property LastSmtpStatus: Integer index 123 read GetIntegerProp;
    property Pop3SessionId: Integer index 131 read GetIntegerProp;
    property Pop3SessionLog: WideString index 132 read GetWideStringProp;
    property Pop3SslServerCertVerified: Integer index 133 read GetIntegerProp;
    property SmtpSessionLog: WideString index 150 read GetWideStringProp;
    property SmtpSslServerCertVerified: Integer index 152 read GetIntegerProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property AllOrNone: Integer index 100 read GetIntegerProp write SetIntegerProp stored False;
    property AutoFix: Integer index 101 read GetIntegerProp write SetIntegerProp stored False;
    property AutoGenMessageId: Integer index 102 read GetIntegerProp write SetIntegerProp stored False;
    property AutoSmtpRset: Integer index 103 read GetIntegerProp write SetIntegerProp stored False;
    property ClientIpAddress: WideString index 104 read GetWideStringProp write SetWideStringProp stored False;
    property ConnectTimeout: Integer index 105 read GetIntegerProp write SetIntegerProp stored False;
    property DsnEnvid: WideString index 106 read GetWideStringProp write SetWideStringProp stored False;
    property DsnNotify: WideString index 107 read GetWideStringProp write SetWideStringProp stored False;
    property DsnRet: WideString index 108 read GetWideStringProp write SetWideStringProp stored False;
    property EmbedCertChain: Integer index 109 read GetIntegerProp write SetIntegerProp stored False;
    property Filter: WideString index 110 read GetWideStringProp write SetWideStringProp stored False;
    property HeartbeatMs: Integer index 111 read GetIntegerProp write SetIntegerProp stored False;
    property HeloHostname: WideString index 112 read GetWideStringProp write SetWideStringProp stored False;
    property HttpProxyAuthMethod: WideString index 113 read GetWideStringProp write SetWideStringProp stored False;
    property HttpProxyDomain: WideString index 114 read GetWideStringProp write SetWideStringProp stored False;
    property HttpProxyHostname: WideString index 115 read GetWideStringProp write SetWideStringProp stored False;
    property HttpProxyPassword: WideString index 116 read GetWideStringProp write SetWideStringProp stored False;
    property HttpProxyPort: Integer index 117 read GetIntegerProp write SetIntegerProp stored False;
    property HttpProxyUsername: WideString index 118 read GetWideStringProp write SetWideStringProp stored False;
    property ImmediateDelete: Integer index 119 read GetIntegerProp write SetIntegerProp stored False;
    property IncludeRootCert: Integer index 120 read GetIntegerProp write SetIntegerProp stored False;
    property LogMailReceivedFilename: WideString index 124 read GetWideStringProp write SetWideStringProp stored False;
    property LogMailSentFilename: WideString index 125 read GetWideStringProp write SetWideStringProp stored False;
    property MailHost: WideString index 126 read GetWideStringProp write SetWideStringProp stored False;
    property MailPort: Integer index 127 read GetIntegerProp write SetIntegerProp stored False;
    property MaxCount: Integer index 128 read GetIntegerProp write SetIntegerProp stored False;
    property OpaqueSigning: Integer index 129 read GetIntegerProp write SetIntegerProp stored False;
    property Pop3SPA: Integer index 130 read GetIntegerProp write SetIntegerProp stored False;
    property Pop3Stls: Integer index 134 read GetIntegerProp write SetIntegerProp stored False;
    property PopPassword: WideString index 135 read GetWideStringProp write SetWideStringProp stored False;
    property PopPasswordBase64: WideString index 136 read GetWideStringProp write SetWideStringProp stored False;
    property PopSsl: Integer index 137 read GetIntegerProp write SetIntegerProp stored False;
    property PopUsername: WideString index 138 read GetWideStringProp write SetWideStringProp stored False;
    property ReadTimeout: Integer index 139 read GetIntegerProp write SetIntegerProp stored False;
    property RequireSslCertVerify: Integer index 140 read GetIntegerProp write SetIntegerProp stored False;
    property ResetDateOnLoad: Integer index 141 read GetIntegerProp write SetIntegerProp stored False;
    property SendBufferSize: Integer index 142 read GetIntegerProp write SetIntegerProp stored False;
    property SendIndividual: Integer index 143 read GetIntegerProp write SetIntegerProp stored False;
    property SizeLimit: Integer index 144 read GetIntegerProp write SetIntegerProp stored False;
    property SmtpAuthMethod: WideString index 145 read GetWideStringProp write SetWideStringProp stored False;
    property SmtpHost: WideString index 146 read GetWideStringProp write SetWideStringProp stored False;
    property SmtpLoginDomain: WideString index 147 read GetWideStringProp write SetWideStringProp stored False;
    property SmtpPassword: WideString index 148 read GetWideStringProp write SetWideStringProp stored False;
    property SmtpPort: Integer index 149 read GetIntegerProp write SetIntegerProp stored False;
    property SmtpSsl: Integer index 151 read GetIntegerProp write SetIntegerProp stored False;
    property SmtpUsername: WideString index 153 read GetWideStringProp write SetWideStringProp stored False;
    property SoRcvBuf: Integer index 154 read GetIntegerProp write SetIntegerProp stored False;
    property SoSndBuf: Integer index 155 read GetIntegerProp write SetIntegerProp stored False;
    property SocksHostname: WideString index 156 read GetWideStringProp write SetWideStringProp stored False;
    property SocksPassword: WideString index 157 read GetWideStringProp write SetWideStringProp stored False;
    property SocksPort: Integer index 158 read GetIntegerProp write SetIntegerProp stored False;
    property SocksUsername: WideString index 159 read GetWideStringProp write SetWideStringProp stored False;
    property SocksVersion: Integer index 160 read GetIntegerProp write SetIntegerProp stored False;
    property StartTLS: Integer index 161 read GetIntegerProp write SetIntegerProp stored False;
    property UseApop: Integer index 162 read GetIntegerProp write SetIntegerProp stored False;
    property P7mEncryptAttachFilename: WideString index 250 read GetWideStringProp write SetWideStringProp stored False;
    property P7mSigAttachFilename: WideString index 251 read GetWideStringProp write SetWideStringProp stored False;
    property P7sSigAttachFilename: WideString index 252 read GetWideStringProp write SetWideStringProp stored False;
    property PreferIpv6: Integer index 253 read GetIntegerProp write SetIntegerProp stored False;
    property OnAbortCheck: TChilkatMailManAbortCheck read FOnAbortCheck write FOnAbortCheck;
    property OnPercentDone: TChilkatMailManPercentDone read FOnPercentDone write FOnPercentDone;
    property OnProgressInfo: TChilkatMailManProgressInfo read FOnProgressInfo write FOnProgressInfo;
    property OnEmailReceived: TChilkatMailManEmailReceived read FOnEmailReceived write FOnEmailReceived;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TKeyContainer
// Help String      : KeyContainer Class 9.5.0
// Default Interface: IKeyContainer
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TKeyContainer = class(TOleControl)
  private
    FIntf: IKeyContainer;
    function  GetControlInterface: IKeyContainer;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    procedure CloseContainer;
    function CreateContainer(const name: WideString; MachineKeyset: Integer): Integer;
    function DeleteContainer: Integer;
    function FetchContainerNames(bMachineKeyset: Integer): Integer;
    function GenerateKeyPair(bKeyExchangePair: Integer; keyLengthInBits: Integer): Integer;
    function GenerateUuid: WideString;
    function GetNthContainerName(bMachineKeyset: Integer; index: Integer): WideString;
    function GetNumContainers(bMachineKeyset: Integer): Integer;
    function GetPrivateKey(bKeyExchangePair: Integer): IPrivateKey;
    function GetPublicKey(bKeyExchangePair: Integer): IPublicKey;
    function ImportPrivateKey(const key: IPrivateKey; bKeyExchangePair: Integer): Integer;
    function ImportPublicKey(const key: IPublicKey; bKeyExchangePair: Integer): Integer;
    function OpenContainer(const name: WideString; needPrivateKeyAccess: Integer; 
                           MachineKeyset: Integer): Integer;
    property  ControlInterface: IKeyContainer read GetControlInterface;
    property  DefaultInterface: IKeyContainer read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property IsMachineKeyset: Integer index 100 read GetIntegerProp;
    property IsOpen: Integer index 101 read GetIntegerProp;
    property ContainerName: WideString index 102 read GetWideStringProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatImap
// Help String      : ChilkatImap Class 9.5.0
// Default Interface: IChilkatImap
// Def. Intf. DISP? : No
// Event   Interface: _IChilkatEvents
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatImapAbortCheck = procedure(ASender: TObject; out abort: Integer) of object;
  TChilkatImapPercentDone = procedure(ASender: TObject; percent: Integer; out abort: Integer) of object;
  TChilkatImapProgressInfo = procedure(ASender: TObject; const name: WideString; 
                                                         const value: WideString) of object;

  TChilkatImap = class(TOleControl)
  private
    FOnAbortCheck: TChilkatImapAbortCheck;
    FOnPercentDone: TChilkatImapPercentDone;
    FOnProgressInfo: TChilkatImapProgressInfo;
    FIntf: IChilkatImap;
    function  GetControlInterface: IChilkatImap;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    function AddPfxSourceData(pfxData: OleVariant; const password: WideString): Integer;
    function AddPfxSourceFile(const pfxFilePath: WideString; const password: WideString): Integer;
    function AppendMail(const mailbox: WideString; const email: IChilkatEmail): Integer;
    function AppendMime(const mailbox: WideString; const mimeText: WideString): Integer;
    function AppendMimeWithDate(const mailbox: WideString; const mimeText: WideString; 
                                internalDate: TDateTime): Integer;
    function AppendMimeWithDateStr(const mailbox: WideString; const mimeText: WideString; 
                                   const internalDateStr: WideString): Integer;
    function AppendMimeWithFlags(const mailbox: WideString; const mimeText: WideString; 
                                 seen: Integer; flagged: Integer; answered: Integer; draft: Integer): Integer;
    function CheckForNewEmail: IMessageSet;
    procedure ClearSessionLog;
    function CloseMailbox(const mailbox: WideString): Integer;
    function Connect(const Hostname: WideString): Integer;
    function Copy(msgId: Integer; bUid: Integer; const copyToMailbox: WideString): Integer;
    function CopyMultiple(const MessageSet: IMessageSet; const copyToMailbox: WideString): Integer;
    function CopySequence(startSeqNum: Integer; Count: Integer; const copyToMailbox: WideString): Integer;
    function CreateMailbox(const mailbox: WideString): Integer;
    function DeleteMailbox(const mailbox: WideString): Integer;
    function Disconnect: Integer;
    function ExamineMailbox(const mailbox: WideString): Integer;
    function Expunge: Integer;
    function ExpungeAndClose: Integer;
    function FetchAttachment(const email: IChilkatEmail; attachIndex: Integer; 
                             const saveToPath: WideString): Integer;
    function FetchAttachmentBytes(const email: IChilkatEmail; attachIndex: Integer): OleVariant;
    function FetchAttachmentString(const email: IChilkatEmail; attachIndex: Integer; 
                                   const charset: WideString): WideString;
    function FetchBundle(const MessageSet: IMessageSet): IChilkatEmailBundle;
    function FetchBundleAsMime(const MessageSet: IMessageSet): ICkStringArray;
    function FetchChunk(startSeqNum: Integer; Count: Integer; const failedSet: IMessageSet; 
                        const fetchedSet: IMessageSet): IChilkatEmailBundle;
    function FetchFlags(msgId: Integer; bUid: Integer): WideString;
    function FetchHeaders(const MessageSet: IMessageSet): IChilkatEmailBundle;
    function FetchSequence(startSeqNum: Integer; NumMessages: Integer): IChilkatEmailBundle;
    function FetchSequenceAsMime(startSeqNum: Integer; NumMessages: Integer): ICkStringArray;
    function FetchSequenceHeaders(startSeqNum: Integer; NumMessages: Integer): IChilkatEmailBundle;
    function FetchSingle(msgId: Integer; bUid: Integer): IChilkatEmail;
    function FetchSingleAsMime(msgId: Integer; bUid: Integer): WideString;
    function FetchSingleHeader(msgId: Integer; bUid: Integer): IChilkatEmail;
    function FetchSingleHeaderAsMime(msgId: Integer; bUid: Integer): WideString;
    function GetAllUids: IMessageSet;
    function GetMailAttachFilename(const email: IChilkatEmail; attachIndex: Integer): WideString;
    function GetMailAttachSize(const email: IChilkatEmail; attachIndex: Integer): Integer;
    function GetMailFlag(const email: IChilkatEmail; const flagName: WideString): Integer;
    function GetMailNumAttach(const email: IChilkatEmail): Integer;
    function GetMailSize(const email: IChilkatEmail): Integer;
    function GetSslServerCert: IChilkatCert;
    function IsConnected: Integer;
    function IsLoggedIn: Integer;
    function IsUnlocked: Integer;
    function ListMailboxes(const reference: WideString; const wildcardedMailbox: WideString): IMailboxes;
    function ListSubscribed(const reference: WideString; const wildcardedMailbox: WideString): IMailboxes;
    function Login(const Login: WideString; const password: WideString): Integer;
    function Logout: Integer;
    function Noop: Integer;
    function RefetchMailFlags(const email: IChilkatEmail): Integer;
    function RenameMailbox(const fromMailbox: WideString; const toMailbox: WideString): Integer;
    function Search(const criteria: WideString; bUid: Integer): IMessageSet;
    function SelectMailbox(const mailbox: WideString): Integer;
    function SendRawCommand(const cmd: WideString): WideString;
    function SendRawCommandB(const cmd: WideString): OleVariant;
    function SendRawCommandC(cmd: OleVariant): OleVariant;
    function SetCSP(const csp: IChilkatCsp): Integer;
    function SetDecryptCert2(const cert: IChilkatCert; const key: IPrivateKey): Integer;
    function SetFlag(msgId: Integer; bUid: Integer; const flagName: WideString; value: Integer): Integer;
    function SetFlags(const MessageSet: IMessageSet; const flagName: WideString; value: Integer): Integer;
    function SetMailFlag(const email: IChilkatEmail; const flagName: WideString; value: Integer): Integer;
    function SetSslClientCert(const cert: IChilkatCert): Integer;
    function SetSslClientCertPem(const pemDataOrFilename: WideString; const pemPassword: WideString): Integer;
    function SetSslClientCertPfx(const pfxFilename: WideString; const pfxPassword: WideString): Integer;
    function SshAuthenticatePk(const SshLogin: WideString; const PrivateKey: IChilkatSshKey): Integer;
    function SshAuthenticatePw(const SshLogin: WideString; const SshPassword: WideString): Integer;
    function SshTunnel(const sshServerHostname: WideString; sshServerPort: Integer): Integer;
    function StoreFlags(msgId: Integer; bUid: Integer; const flagNames: WideString; value: Integer): Integer;
    function Subscribe(const mailbox: WideString): Integer;
    function UnlockComponent(const unlockCode: WideString): Integer;
    function Unsubscribe(const mailbox: WideString): Integer;
    function Capability: WideString;
    function IdleStart: Integer;
    function IdleDone: Integer;
    function IdleCheck(timeoutMs: Integer): WideString;
    function UseCertVault(const vault: IChilkatXmlCertVault): Integer;
    function SetDecryptCert(const cert: IChilkatCert): Integer;
    property  ControlInterface: IChilkatImap read GetControlInterface;
    property  DefaultInterface: IChilkatImap read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property AppendUid: Integer index 101 read GetIntegerProp;
    property ConnectedToHost: WideString index 108 read GetWideStringProp;
    property LastAppendedMime: WideString index 118 read GetWideStringProp;
    property LastCommand: WideString index 119 read GetWideStringProp;
    property LastIntermediateResponse: WideString index 120 read GetWideStringProp;
    property LastResponse: WideString index 121 read GetWideStringProp;
    property LoggedInUser: WideString index 122 read GetWideStringProp;
    property NumMessages: Integer index 123 read GetIntegerProp;
    property SelectedMailbox: WideString index 128 read GetWideStringProp;
    property SessionLog: WideString index 131 read GetWideStringProp;
    property SslServerCertVerified: Integer index 141 read GetIntegerProp;
    property UidNext: Integer index 143 read GetIntegerProp;
    property UidValidity: Integer index 144 read GetIntegerProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property AppendSeen: Integer index 100 read GetIntegerProp write SetIntegerProp stored False;
    property AuthMethod: WideString index 102 read GetWideStringProp write SetWideStringProp stored False;
    property AuthzId: WideString index 103 read GetWideStringProp write SetWideStringProp stored False;
    property AutoDownloadAttachments: Integer index 104 read GetIntegerProp write SetIntegerProp stored False;
    property AutoFix: Integer index 105 read GetIntegerProp write SetIntegerProp stored False;
    property ClientIpAddress: WideString index 106 read GetWideStringProp write SetWideStringProp stored False;
    property ConnectTimeout: Integer index 107 read GetIntegerProp write SetIntegerProp stored False;
    property Domain: WideString index 109 read GetWideStringProp write SetWideStringProp stored False;
    property HeartbeatMs: Integer index 110 read GetIntegerProp write SetIntegerProp stored False;
    property HttpProxyAuthMethod: WideString index 111 read GetWideStringProp write SetWideStringProp stored False;
    property HttpProxyDomain: WideString index 112 read GetWideStringProp write SetWideStringProp stored False;
    property HttpProxyHostname: WideString index 113 read GetWideStringProp write SetWideStringProp stored False;
    property HttpProxyPassword: WideString index 114 read GetWideStringProp write SetWideStringProp stored False;
    property HttpProxyPort: Integer index 115 read GetIntegerProp write SetIntegerProp stored False;
    property HttpProxyUsername: WideString index 116 read GetWideStringProp write SetWideStringProp stored False;
    property KeepSessionLog: Integer index 117 read GetIntegerProp write SetIntegerProp stored False;
    property PeekMode: Integer index 124 read GetIntegerProp write SetIntegerProp stored False;
    property Port: Integer index 125 read GetIntegerProp write SetIntegerProp stored False;
    property ReadTimeout: Integer index 126 read GetIntegerProp write SetIntegerProp stored False;
    property SearchCharset: WideString index 127 read GetWideStringProp write SetWideStringProp stored False;
    property SendBufferSize: Integer index 129 read GetIntegerProp write SetIntegerProp stored False;
    property SeparatorChar: Shortint index 130 read GetShortintProp write SetShortintProp stored False;
    property SoRcvBuf: Integer index 132 read GetIntegerProp write SetIntegerProp stored False;
    property SoSndBuf: Integer index 133 read GetIntegerProp write SetIntegerProp stored False;
    property SocksHostname: WideString index 134 read GetWideStringProp write SetWideStringProp stored False;
    property SocksPassword: WideString index 135 read GetWideStringProp write SetWideStringProp stored False;
    property SocksPort: Integer index 136 read GetIntegerProp write SetIntegerProp stored False;
    property SocksUsername: WideString index 137 read GetWideStringProp write SetWideStringProp stored False;
    property SocksVersion: Integer index 138 read GetIntegerProp write SetIntegerProp stored False;
    property Ssl: Integer index 139 read GetIntegerProp write SetIntegerProp stored False;
    property SslProtocol: WideString index 140 read GetWideStringProp write SetWideStringProp stored False;
    property StartTLS: Integer index 142 read GetIntegerProp write SetIntegerProp stored False;
    property RequireSslCertVerify: Integer index 221 read GetIntegerProp write SetIntegerProp stored False;
    property PreferIpv6: Integer index 222 read GetIntegerProp write SetIntegerProp stored False;
    property OnAbortCheck: TChilkatImapAbortCheck read FOnAbortCheck write FOnAbortCheck;
    property OnPercentDone: TChilkatImapPercentDone read FOnPercentDone write FOnPercentDone;
    property OnProgressInfo: TChilkatImapProgressInfo read FOnProgressInfo write FOnProgressInfo;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatHttpResponse
// Help String      : ChilkatHttpResponse Class 9.5.0
// Default Interface: IChilkatHttpResponse
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatHttpResponse = class(TOleControl)
  private
    FIntf: IChilkatHttpResponse;
    function  GetControlInterface: IChilkatHttpResponse;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
    function Get_Body: OleVariant;
  public
    function GetImplAddrStr: WideString;
    function GetCookieDomain(index: Integer): WideString;
    function GetCookieExpires(index: Integer): TDateTime;
    function GetCookieExpiresStr(index: Integer): WideString;
    function GetCookieName(index: Integer): WideString;
    function GetCookiePath(index: Integer): WideString;
    function GetCookieValue(index: Integer): WideString;
    function GetHeaderField(const fieldName: WideString): WideString;
    function GetHeaderFieldAttr(const fieldName: WideString; const attrName: WideString): WideString;
    function GetHeaderName(index: Integer): WideString;
    function GetHeaderValue(index: Integer): WideString;
    function SaveBodyBinary(const path: WideString): Integer;
    function SaveBodyText(bCrlf: Integer; const path: WideString): Integer;
    function UrlEncParamValue(const encodedParams: WideString; const paramName: WideString): WideString;
    property  ControlInterface: IChilkatHttpResponse read GetControlInterface;
    property  DefaultInterface: IChilkatHttpResponse read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property Body: OleVariant index 100 read GetOleVariantProp;
    property BodyQP: WideString index 101 read GetWideStringProp;
    property BodyStr: WideString index 102 read GetWideStringProp;
    property charset: WideString index 103 read GetWideStringProp;
    property ContentLength: Integer index 104 read GetIntegerProp;
    property Date: TDateTime index 105 read GetTDateTimeProp;
    property dateStr: WideString index 106 read GetWideStringProp;
    property Domain: WideString index 107 read GetWideStringProp;
    property FullMime: WideString index 108 read GetWideStringProp;
    property Header: WideString index 109 read GetWideStringProp;
    property NumCookies: Integer index 110 read GetIntegerProp;
    property NumHeaderFields: Integer index 111 read GetIntegerProp;
    property StatusCode: Integer index 112 read GetIntegerProp;
    property StatusLine: WideString index 113 read GetWideStringProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatHttpRequest
// Help String      : ChilkatHttpRequest Class 9.5.0
// Default Interface: IChilkatHttpRequest
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatHttpRequest = class(TOleControl)
  private
    FIntf: IChilkatHttpRequest;
    function  GetControlInterface: IChilkatHttpRequest;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    function AddBytesForUpload(const name: WideString; const filename: WideString; 
                               byteData: OleVariant): Integer;
    function AddBytesForUpload2(const name: WideString; const filename: WideString; 
                                byteData: OleVariant; const ContentType: WideString): Integer;
    function AddFileForUpload(const name: WideString; const filename: WideString): Integer;
    function AddFileForUpload2(const name: WideString; const filename: WideString; 
                               const ContentType: WideString): Integer;
    procedure AddHeader(const name: WideString; const value: WideString);
    procedure AddParam(const name: WideString; const value: WideString);
    function AddStringForUpload(const name: WideString; const filename: WideString; 
                                const strData: WideString; const charset: WideString): Integer;
    function AddStringForUpload2(const name: WideString; const filename: WideString; 
                                 const strData: WideString; const charset: WideString; 
                                 const ContentType: WideString): Integer;
    function GenerateRequestText: WideString;
    function GetHeaderField(const name: WideString): WideString;
    function GetHeaderName(index: Integer): WideString;
    function GetHeaderValue(index: Integer): WideString;
    function GetParam(const name: WideString): WideString;
    function GetParamName(index: Integer): WideString;
    function GetParamValue(index: Integer): WideString;
    function GetUrlEncodedParams: WideString;
    function LoadBodyFromBytes(binaryData: OleVariant): Integer;
    function LoadBodyFromFile(const filename: WideString): Integer;
    function LoadBodyFromString(const BodyStr: WideString; const charset: WideString): Integer;
    procedure RemoveAllParams;
    function RemoveHeader(const name: WideString): Integer;
    procedure RemoveParam(const name: WideString);
    procedure SetFromUrl(const url: WideString);
    function StreamBodyFromFile(const filename: WideString): Integer;
    procedure UseGet;
    procedure UseHead;
    procedure UsePost;
    procedure UsePostMultipartForm;
    procedure UsePut;
    procedure UseUpload;
    procedure UseUploadPut;
    procedure UseXmlHttp(const xmlBody: WideString);
    property  ControlInterface: IChilkatHttpRequest read GetControlInterface;
    property  DefaultInterface: IChilkatHttpRequest read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property NumHeaderFields: Integer index 105 read GetIntegerProp;
    property NumParams: Integer index 106 read GetIntegerProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property charset: WideString index 100 read GetWideStringProp write SetWideStringProp stored False;
    property ContentType: WideString index 101 read GetWideStringProp write SetWideStringProp stored False;
    property EntireHeader: WideString index 102 read GetWideStringProp write SetWideStringProp stored False;
    property HttpVerb: WideString index 103 read GetWideStringProp write SetWideStringProp stored False;
    property HttpVersion: WideString index 104 read GetWideStringProp write SetWideStringProp stored False;
    property path: WideString index 107 read GetWideStringProp write SetWideStringProp stored False;
    property SendCharset: Integer index 108 read GetIntegerProp write SetIntegerProp stored False;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatHttp
// Help String      : ChilkatHttp Class 9.5.0
// Default Interface: IChilkatHttp
// Def. Intf. DISP? : No
// Event   Interface: _IChilkatHttpEvents
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatHttpAbortCheck = procedure(ASender: TObject; out abort: Integer) of object;
  TChilkatHttpPercentDone = procedure(ASender: TObject; percent: Integer; out abort: Integer) of object;
  TChilkatHttpProgressInfo = procedure(ASender: TObject; const name: WideString; 
                                                         const value: WideString) of object;
  TChilkatHttpEndSend = procedure(ASender: TObject; success: Integer) of object;
  TChilkatHttpEndReceive = procedure(ASender: TObject; success: Integer) of object;
  TChilkatHttpHttpRedirect = procedure(ASender: TObject; const originalUrl: WideString; 
                                                         const newUrl: WideString; 
                                                         out abort: Integer) of object;
  TChilkatHttpReceiveRate = procedure(ASender: TObject; byteCount: Integer; bytesPerSec: Integer) of object;

  TChilkatHttp = class(TOleControl)
  private
    FOnAbortCheck: TChilkatHttpAbortCheck;
    FOnPercentDone: TChilkatHttpPercentDone;
    FOnProgressInfo: TChilkatHttpProgressInfo;
    FOnBeginReceive: TNotifyEvent;
    FOnEndSend: TChilkatHttpEndSend;
    FOnEndReceive: TChilkatHttpEndReceive;
    FOnHttpChunked: TNotifyEvent;
    FOnHttpRedirect: TChilkatHttpHttpRedirect;
    FOnBeginSend: TNotifyEvent;
    FOnReceiveRate: TChilkatHttpReceiveRate;
    FIntf: IChilkatHttp;
    function  GetControlInterface: IChilkatHttp;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
    function Get_BgResultData: OleVariant;
  public
    function GetImplAddrStr: WideString;
    procedure AddCacheRoot(const dir: WideString);
    function AddQuickHeader(const name: WideString; const value: WideString): Integer;
    function BgResponseObject: IChilkatHttpResponse;
    procedure BgTaskAbort;
    procedure ClearBgEventLog;
    procedure ClearInMemoryCookies;
    function CloseAllConnections: Integer;
    function Download(const url: WideString; const filename: WideString): Integer;
    function DownloadAppend(const url: WideString; const filename: WideString): Integer;
    function DownloadHash(const url: WideString; const HashAlgorithm: WideString; 
                          const encoding: WideString): WideString;
    function EventLogName(index: Integer): WideString;
    function EventLogValue(index: Integer): WideString;
    function ExtractMetaRefreshUrl(const html: WideString): WideString;
    function GenTimeStamp: WideString;
    function GetCacheRoot(index: Integer): WideString;
    function GetCookieXml(const Domain: WideString): WideString;
    function GetDomain(const url: WideString): WideString;
    function GetHead(const url: WideString): IChilkatHttpResponse;
    function GetRequestHeader(const name: WideString): WideString;
    function GetServerSslCert(const Domain: WideString; Port: Integer): IChilkatCert;
    function GetUrlPath(const url: WideString): WideString;
    function HasRequestHeader(const name: WideString): Integer;
    function IsUnlocked: Integer;
    function PostBinary(const url: WideString; byteData: OleVariant; const ContentType: WideString; 
                        md5: Integer; gzip: Integer): WideString;
    function PostJson(const url: WideString; const jsonText: WideString): IChilkatHttpResponse;
    function PostJson2(const url: WideString; const ContentType: WideString; 
                       const jsonText: WideString): IChilkatHttpResponse;
    function PostMime(const url: WideString; const mime: WideString): IChilkatHttpResponse;
    function PostUrlEncoded(const url: WideString; const req: IChilkatHttpRequest): IChilkatHttpResponse;
    function PostXml(const url: WideString; const xmlDoc: WideString; const charset: WideString): IChilkatHttpResponse;
    function PutBinary(const url: WideString; byteData: OleVariant; const ContentType: WideString; 
                       md5: Integer; gzip: Integer): WideString;
    function PutText(const url: WideString; const textData: WideString; const charset: WideString; 
                     const ContentType: WideString; md5: Integer; gzip: Integer): WideString;
    function QuickDeleteStr(const url: WideString): WideString;
    function QuickGet(const url: WideString): OleVariant;
    function QuickGetObj(const url: WideString): IChilkatHttpResponse;
    function QuickGetStr(const url: WideString): WideString;
    function QuickPutStr(const url: WideString): WideString;
    function RemoveQuickHeader(const name: WideString): Integer;
    procedure RemoveRequestHeader(const name: WideString);
    function RenderGet(const url: WideString): WideString;
    function ResumeDownload(const url: WideString; const filename: WideString): Integer;
    function S3_CreateBucket(const bucketName: WideString): Integer;
    function S3_DeleteBucket(const bucketName: WideString): Integer;
    function S3_DeleteObject(const bucketName: WideString; const objectName: WideString): Integer;
    function S3_DownloadBytes(const bucketName: WideString; const objectName: WideString): OleVariant;
    function S3_DownloadFile(const bucketName: WideString; const objectName: WideString; 
                             const localFilePath: WideString): Integer;
    function S3_DownloadString(const bucketName: WideString; const objectName: WideString; 
                               const charset: WideString): WideString;
    function S3_FileExists(const bucketName: WideString; const objectName: WideString): Integer;
    function S3_ListBucketObjects(const bucketName: WideString): WideString;
    function S3_ListBuckets: WideString;
    function S3_UploadBytes(objectContent: OleVariant; const ContentType: WideString; 
                            const bucketName: WideString; const objectName: WideString): Integer;
    function S3_UploadFile(const localFilePath: WideString; const ContentType: WideString; 
                           const bucketName: WideString; const objectName: WideString): Integer;
    function S3_UploadString(const objectContent: WideString; const charset: WideString; 
                             const ContentType: WideString; const bucketName: WideString; 
                             const objectName: WideString): Integer;
    function SetCookieXml(const Domain: WideString; const cookieXml: WideString): Integer;
    procedure SetRequestHeader(const name: WideString; const value: WideString);
    function SetSslClientCert(const cert: IChilkatCert): Integer;
    function SetSslClientCertPem(const pemDataOrFilename: WideString; const pemPassword: WideString): Integer;
    function SetSslClientCertPfx(const pfxFilename: WideString; const pfxPassword: WideString): Integer;
    procedure SleepMs(millisec: Integer);
    function SynchronousRequest(const Domain: WideString; Port: Integer; Ssl: Integer; 
                                const req: IChilkatHttpRequest): IChilkatHttpResponse;
    function UnlockComponent(const unlockCode: WideString): Integer;
    function UrlDecode(const str: WideString): WideString;
    function UrlEncode(const str: WideString): WideString;
    function XmlRpc(const urlEndpoint: WideString; const xmlIn: WideString): WideString;
    function XmlRpcPut(const urlEndpoint: WideString; const xmlIn: WideString): WideString;
    procedure DnsCacheClear;
    function SetOAuthRsaKey(const privKey: IPrivateKey): Integer;
    property  ControlInterface: IChilkatHttp read GetControlInterface;
    property  DefaultInterface: IChilkatHttp read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property BgLastErrorText: WideString index 109 read GetWideStringProp;
    property BgPercentDone: Integer index 110 read GetIntegerProp;
    property BgResultData: OleVariant index 111 read GetOleVariantProp;
    property BgResultInt: Integer index 112 read GetIntegerProp;
    property BgResultString: WideString index 113 read GetWideStringProp;
    property BgTaskFinished: Integer index 114 read GetIntegerProp;
    property BgTaskRunning: Integer index 115 read GetIntegerProp;
    property BgTaskSuccess: Integer index 116 read GetIntegerProp;
    property EventLogCount: Integer index 123 read GetIntegerProp;
    property FinalRedirectUrl: WideString index 125 read GetWideStringProp;
    property LastContentType: WideString index 133 read GetWideStringProp;
    property LastHeader: WideString index 134 read GetWideStringProp;
    property LastModDate: WideString index 135 read GetWideStringProp;
    property LastResponseHeader: WideString index 136 read GetWideStringProp;
    property LastStatus: Integer index 137 read GetIntegerProp;
    property NumCacheRoots: Integer index 150 read GetIntegerProp;
    property WasRedirected: Integer index 187 read GetIntegerProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property Accept: WideString index 100 read GetWideStringProp write SetWideStringProp stored False;
    property AcceptCharset: WideString index 101 read GetWideStringProp write SetWideStringProp stored False;
    property AcceptLanguage: WideString index 102 read GetWideStringProp write SetWideStringProp stored False;
    property AllowGzip: Integer index 103 read GetIntegerProp write SetIntegerProp stored False;
    property AutoAddHostHeader: Integer index 104 read GetIntegerProp write SetIntegerProp stored False;
    property AwsAccessKey: WideString index 105 read GetWideStringProp write SetWideStringProp stored False;
    property AwsEndpoint: WideString index 106 read GetWideStringProp write SetWideStringProp stored False;
    property AwsSecretKey: WideString index 107 read GetWideStringProp write SetWideStringProp stored False;
    property AwsSubResources: WideString index 108 read GetWideStringProp write SetWideStringProp stored False;
    property BasicAuth: Integer index 252 read GetIntegerProp write SetIntegerProp stored False;
    property ClientIpAddress: WideString index 117 read GetWideStringProp write SetWideStringProp stored False;
    property ConnectTimeout: Integer index 118 read GetIntegerProp write SetIntegerProp stored False;
    property Connection: WideString index 119 read GetWideStringProp write SetWideStringProp stored False;
    property CookieDir: WideString index 120 read GetWideStringProp write SetWideStringProp stored False;
    property DefaultFreshPeriod: Integer index 121 read GetIntegerProp write SetIntegerProp stored False;
    property DigestAuth: Integer index 122 read GetIntegerProp write SetIntegerProp stored False;
    property FetchFromCache: Integer index 124 read GetIntegerProp write SetIntegerProp stored False;
    property FollowRedirects: Integer index 126 read GetIntegerProp write SetIntegerProp stored False;
    property FreshnessAlgorithm: Integer index 127 read GetIntegerProp write SetIntegerProp stored False;
    property HeartbeatMs: Integer index 128 read GetIntegerProp write SetIntegerProp stored False;
    property IgnoreMustRevalidate: Integer index 129 read GetIntegerProp write SetIntegerProp stored False;
    property IgnoreNoCache: Integer index 130 read GetIntegerProp write SetIntegerProp stored False;
    property KeepEventLog: Integer index 131 read GetIntegerProp write SetIntegerProp stored False;
    property LMFactor: Integer index 132 read GetIntegerProp write SetIntegerProp stored False;
    property Login: WideString index 138 read GetWideStringProp write SetWideStringProp stored False;
    property LoginDomain: WideString index 139 read GetWideStringProp write SetWideStringProp stored False;
    property MaxConnections: Integer index 140 read GetIntegerProp write SetIntegerProp stored False;
    property MaxFreshPeriod: Integer index 141 read GetIntegerProp write SetIntegerProp stored False;
    property MaxResponseSize: Integer index 142 read GetIntegerProp write SetIntegerProp stored False;
    property MaxUrlLen: Integer index 143 read GetIntegerProp write SetIntegerProp stored False;
    property MimicFireFox: Integer index 144 read GetIntegerProp write SetIntegerProp stored False;
    property MimicIE: Integer index 145 read GetIntegerProp write SetIntegerProp stored False;
    property MinFreshPeriod: Integer index 146 read GetIntegerProp write SetIntegerProp stored False;
    property NegotiateAuth: Integer index 147 read GetIntegerProp write SetIntegerProp stored False;
    property NtlmAuth: Integer index 148 read GetIntegerProp write SetIntegerProp stored False;
    property NumCacheLevels: Integer index 149 read GetIntegerProp write SetIntegerProp stored False;
    property OAuth1: Integer index 151 read GetIntegerProp write SetIntegerProp stored False;
    property OAuthConsumerKey: WideString index 152 read GetWideStringProp write SetWideStringProp stored False;
    property OAuthConsumerSecret: WideString index 153 read GetWideStringProp write SetWideStringProp stored False;
    property OAuthRealm: WideString index 154 read GetWideStringProp write SetWideStringProp stored False;
    property OAuthSigMethod: WideString index 155 read GetWideStringProp write SetWideStringProp stored False;
    property OAuthToken: WideString index 156 read GetWideStringProp write SetWideStringProp stored False;
    property OAuthTokenSecret: WideString index 157 read GetWideStringProp write SetWideStringProp stored False;
    property OAuthVerifier: WideString index 158 read GetWideStringProp write SetWideStringProp stored False;
    property password: WideString index 159 read GetWideStringProp write SetWideStringProp stored False;
    property ProxyAuthMethod: WideString index 160 read GetWideStringProp write SetWideStringProp stored False;
    property ProxyDomain: WideString index 161 read GetWideStringProp write SetWideStringProp stored False;
    property ProxyLogin: WideString index 162 read GetWideStringProp write SetWideStringProp stored False;
    property ProxyLoginDomain: WideString index 163 read GetWideStringProp write SetWideStringProp stored False;
    property ProxyPassword: WideString index 164 read GetWideStringProp write SetWideStringProp stored False;
    property ProxyPort: Integer index 165 read GetIntegerProp write SetIntegerProp stored False;
    property ReadTimeout: Integer index 166 read GetIntegerProp write SetIntegerProp stored False;
    property RedirectVerb: WideString index 167 read GetWideStringProp write SetWideStringProp stored False;
    property Referer: WideString index 168 read GetWideStringProp write SetWideStringProp stored False;
    property RequiredContentType: WideString index 169 read GetWideStringProp write SetWideStringProp stored False;
    property S3Ssl: Integer index 170 read GetIntegerProp write SetIntegerProp stored False;
    property SaveCookies: Integer index 171 read GetIntegerProp write SetIntegerProp stored False;
    property SendBufferSize: Integer index 172 read GetIntegerProp write SetIntegerProp stored False;
    property SendCookies: Integer index 173 read GetIntegerProp write SetIntegerProp stored False;
    property SessionLogFilename: WideString index 174 read GetWideStringProp write SetWideStringProp stored False;
    property SoRcvBuf: Integer index 175 read GetIntegerProp write SetIntegerProp stored False;
    property SoSndBuf: Integer index 176 read GetIntegerProp write SetIntegerProp stored False;
    property SocksHostname: WideString index 177 read GetWideStringProp write SetWideStringProp stored False;
    property SocksPassword: WideString index 178 read GetWideStringProp write SetWideStringProp stored False;
    property SocksPort: Integer index 179 read GetIntegerProp write SetIntegerProp stored False;
    property SocksUsername: WideString index 180 read GetWideStringProp write SetWideStringProp stored False;
    property SocksVersion: Integer index 181 read GetIntegerProp write SetIntegerProp stored False;
    property SslProtocol: WideString index 182 read GetWideStringProp write SetWideStringProp stored False;
    property UpdateCache: Integer index 183 read GetIntegerProp write SetIntegerProp stored False;
    property UseBgThread: Integer index 184 read GetIntegerProp write SetIntegerProp stored False;
    property UseIEProxy: Integer index 185 read GetIntegerProp write SetIntegerProp stored False;
    property UserAgent: WideString index 186 read GetWideStringProp write SetWideStringProp stored False;
    property RequireSslCertVerify: Integer index 253 read GetIntegerProp write SetIntegerProp stored False;
    property PreferIpv6: Integer index 256 read GetIntegerProp write SetIntegerProp stored False;
    property OnAbortCheck: TChilkatHttpAbortCheck read FOnAbortCheck write FOnAbortCheck;
    property OnPercentDone: TChilkatHttpPercentDone read FOnPercentDone write FOnPercentDone;
    property OnProgressInfo: TChilkatHttpProgressInfo read FOnProgressInfo write FOnProgressInfo;
    property OnBeginReceive: TNotifyEvent read FOnBeginReceive write FOnBeginReceive;
    property OnEndSend: TChilkatHttpEndSend read FOnEndSend write FOnEndSend;
    property OnEndReceive: TChilkatHttpEndReceive read FOnEndReceive write FOnEndReceive;
    property OnHttpChunked: TNotifyEvent read FOnHttpChunked write FOnHttpChunked;
    property OnHttpRedirect: TChilkatHttpHttpRedirect read FOnHttpRedirect write FOnHttpRedirect;
    property OnBeginSend: TNotifyEvent read FOnBeginSend write FOnBeginSend;
    property OnReceiveRate: TChilkatHttpReceiveRate read FOnReceiveRate write FOnReceiveRate;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : THtmlToXml
// Help String      : HtmlToXml Class 9.5.0
// Default Interface: IHtmlToXml
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  THtmlToXml = class(TOleControl)
  private
    FIntf: IHtmlToXml;
    function  GetControlInterface: IHtmlToXml;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    function ConvertFile(const inHtmlPath: WideString; const destXmlPath: WideString): Integer;
    procedure DropTagType(const tagName: WideString);
    procedure DropTextFormattingTags;
    function IsUnlocked: Integer;
    function ReadFileToString(const filename: WideString; const srcCharset: WideString): WideString;
    procedure SetHtmlBytes(inData: OleVariant);
    function SetHtmlFromFile(const filename: WideString): Integer;
    function ToXml: WideString;
    procedure UndropTagType(const tagName: WideString);
    procedure UndropTextFormattingTags;
    function UnlockComponent(const unlockCode: WideString): Integer;
    function WriteStringToFile(const str: WideString; const filename: WideString; 
                               const charset: WideString): Integer;
    function ReadFile(const path: WideString): OleVariant;
    function WriteFile(const path: WideString; fileData: OleVariant): Integer;
    property  ControlInterface: IHtmlToXml read GetControlInterface;
    property  DefaultInterface: IHtmlToXml read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property html: WideString index 100 read GetWideStringProp write SetWideStringProp stored False;
    property Nbsp: Integer index 101 read GetIntegerProp write SetIntegerProp stored False;
    property XmlCharset: WideString index 102 read GetWideStringProp write SetWideStringProp stored False;
    property DropCustomTags: Integer index 103 read GetIntegerProp write SetIntegerProp stored False;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : THtmlToText
// Help String      : HtmlToText Class 9.5.0
// Default Interface: IHtmlToText
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  THtmlToText = class(TOleControl)
  private
    FIntf: IHtmlToText;
    function  GetControlInterface: IHtmlToText;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    function ReadFileToString(const filename: WideString; const srcCharset: WideString): WideString;
    function ToText(const html: WideString): WideString;
    function UnlockComponent(const code: WideString): Integer;
    function WriteStringToFile(const str: WideString; const filename: WideString; 
                               const charset: WideString): Integer;
    function IsUnlocked: Integer;
    property  ControlInterface: IHtmlToText read GetControlInterface;
    property  DefaultInterface: IHtmlToText read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property RightMargin: Integer index 100 read GetIntegerProp write SetIntegerProp stored False;
    property SuppressLinks: Integer index 101 read GetIntegerProp write SetIntegerProp stored False;
    property DecodeHtmlEntities: Integer index 102 read GetIntegerProp write SetIntegerProp stored False;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatGzip
// Help String      : ChilkatGzip Class 9.5.0
// Default Interface: IChilkatGzip
// Def. Intf. DISP? : No
// Event   Interface: _IChilkatEvents
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatGzipAbortCheck = procedure(ASender: TObject; out abort: Integer) of object;
  TChilkatGzipPercentDone = procedure(ASender: TObject; percent: Integer; out abort: Integer) of object;
  TChilkatGzipProgressInfo = procedure(ASender: TObject; const name: WideString; 
                                                         const value: WideString) of object;

  TChilkatGzip = class(TOleControl)
  private
    FOnAbortCheck: TChilkatGzipAbortCheck;
    FOnPercentDone: TChilkatGzipPercentDone;
    FOnProgressInfo: TChilkatGzipProgressInfo;
    FIntf: IChilkatGzip;
    function  GetControlInterface: IChilkatGzip;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
    function Get_ExtraData: OleVariant;
    procedure Set_ExtraData(pVal: OleVariant);
  public
    function GetImplAddrStr: WideString;
    function CompressFile(const srcPath: WideString; const destPath: WideString): Integer;
    function CompressFile2(const srcPath: WideString; const embeddedFilename: WideString; 
                           const destPath: WideString): Integer;
    function CompressFileToMem(const inFilename: WideString): OleVariant;
    function CompressMemToFile(inData: OleVariant; const destPath: WideString): Integer;
    function CompressMemory(inData: OleVariant): OleVariant;
    function CompressString(const inStr: WideString; const destCharset: WideString): OleVariant;
    function CompressStringENC(const strIn: WideString; const charset: WideString; 
                               const encoding: WideString): WideString;
    function CompressStringToFile(const inStr: WideString; const destCharset: WideString; 
                                  const destPath: WideString): Integer;
    function Decode(const str: WideString; const encoding: WideString): OleVariant;
    function DeflateStringENC(const strIn: WideString; const charset: WideString; 
                              const encoding: WideString): WideString;
    function Encode(byteData: OleVariant; const encoding: WideString): WideString;
    function ExamineFile(const inGzPath: WideString): Integer;
    function ExamineMemory(inGzData: OleVariant): Integer;
    function GetDt: ICkDateTime;
    function InflateStringENC(const strIn: WideString; const charset: WideString; 
                              const encoding: WideString): WideString;
    function IsUnlocked: Integer;
    function ReadFile(const path: WideString): OleVariant;
    function SetDt(const dt: ICkDateTime): Integer;
    function UntarGz(const gzFilename: WideString; const destDir: WideString; bNoAbsolute: Integer): Integer;
    function UncompressFile(const srcPath: WideString; const destPath: WideString): Integer;
    function UncompressFileToMem(const inFilename: WideString): OleVariant;
    function UncompressFileToString(const inFilename: WideString; const inCharset: WideString): WideString;
    function UncompressMemToFile(inData: OleVariant; const destPath: WideString): Integer;
    function UncompressMemory(inData: OleVariant): OleVariant;
    function UncompressString(inData: OleVariant; const inCharset: WideString): WideString;
    function UncompressStringENC(const strIn: WideString; const charset: WideString; 
                                 const encoding: WideString): WideString;
    function UnlockComponent(const unlockCode: WideString): Integer;
    function WriteFile(const path: WideString; binaryData: OleVariant): Integer;
    function XfdlToXml(const xfdl: WideString): WideString;
    property  ControlInterface: IChilkatGzip read GetControlInterface;
    property  DefaultInterface: IChilkatGzip read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property ExtraData: OleVariant index 101 read GetOleVariantProp write SetOleVariantProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property Comment: WideString index 100 read GetWideStringProp write SetWideStringProp stored False;
    property filename: WideString index 102 read GetWideStringProp write SetWideStringProp stored False;
    property HeartbeatMs: Integer index 103 read GetIntegerProp write SetIntegerProp stored False;
    property LastMod: TDateTime index 104 read GetTDateTimeProp write SetTDateTimeProp stored False;
    property LastModStr: WideString index 105 read GetWideStringProp write SetWideStringProp stored False;
    property UseCurrentDate: Integer index 106 read GetIntegerProp write SetIntegerProp stored False;
    property OnAbortCheck: TChilkatGzipAbortCheck read FOnAbortCheck write FOnAbortCheck;
    property OnPercentDone: TChilkatGzipPercentDone read FOnPercentDone write FOnPercentDone;
    property OnProgressInfo: TChilkatGzipProgressInfo read FOnProgressInfo write FOnProgressInfo;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatFtp2
// Help String      : ChilkatFtp2 Class 9.5.0
// Default Interface: IChilkatFtp2
// Def. Intf. DISP? : No
// Event   Interface: _IChilkatFtp2Events
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatFtp2AbortCheck = procedure(ASender: TObject; out abort: Integer) of object;
  TChilkatFtp2PercentDone = procedure(ASender: TObject; percent: Integer; out abort: Integer) of object;
  TChilkatFtp2ProgressInfo = procedure(ASender: TObject; const name: WideString; 
                                                         const value: WideString) of object;
  TChilkatFtp2BeginDownloadFile = procedure(ASender: TObject; const path: WideString; 
                                                              out skip: Integer) of object;
  TChilkatFtp2EndDownloadFile = procedure(ASender: TObject; const path: WideString; 
                                                            numBytes: Integer) of object;
  TChilkatFtp2VerifyDownloadDir = procedure(ASender: TObject; const path: WideString; 
                                                              out skip: Integer) of object;
  TChilkatFtp2BeginUploadFile = procedure(ASender: TObject; const path: WideString; 
                                                            out skip: Integer) of object;
  TChilkatFtp2EndUploadFile = procedure(ASender: TObject; const path: WideString; numBytes: Integer) of object;
  TChilkatFtp2VerifyUploadDir = procedure(ASender: TObject; const path: WideString; 
                                                            out skip: Integer) of object;
  TChilkatFtp2VerifyDeleteDir = procedure(ASender: TObject; const path: WideString; 
                                                            out skip: Integer) of object;
  TChilkatFtp2VerifyDeleteFile = procedure(ASender: TObject; const path: WideString; 
                                                             out skip: Integer) of object;
  TChilkatFtp2UploadRate = procedure(ASender: TObject; byteCount: Integer; bytesPerSec: Integer) of object;
  TChilkatFtp2DownloadRate = procedure(ASender: TObject; byteCount: Integer; bytesPerSec: Integer) of object;

  TChilkatFtp2 = class(TOleControl)
  private
    FOnAbortCheck: TChilkatFtp2AbortCheck;
    FOnPercentDone: TChilkatFtp2PercentDone;
    FOnProgressInfo: TChilkatFtp2ProgressInfo;
    FOnBeginDownloadFile: TChilkatFtp2BeginDownloadFile;
    FOnEndDownloadFile: TChilkatFtp2EndDownloadFile;
    FOnVerifyDownloadDir: TChilkatFtp2VerifyDownloadDir;
    FOnBeginUploadFile: TChilkatFtp2BeginUploadFile;
    FOnEndUploadFile: TChilkatFtp2EndUploadFile;
    FOnVerifyUploadDir: TChilkatFtp2VerifyUploadDir;
    FOnVerifyDeleteDir: TChilkatFtp2VerifyDeleteDir;
    FOnVerifyDeleteFile: TChilkatFtp2VerifyDeleteFile;
    FOnUploadRate: TChilkatFtp2UploadRate;
    FOnDownloadRate: TChilkatFtp2DownloadRate;
    FIntf: IChilkatFtp2;
    function  GetControlInterface: IChilkatFtp2;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    function AppendFile(const localFilename: WideString; const remoteFilename: WideString): Integer;
    function AppendFileFromBinaryData(const remoteFilename: WideString; Content: OleVariant): Integer;
    function AppendFileFromTextData(const remoteFilename: WideString; const textData: WideString; 
                                    const charset: WideString): Integer;
    procedure AsyncAbort;
    function AsyncAppendFileStart(const localFilename: WideString; const remoteFilename: WideString): Integer;
    function AsyncGetFileStart(const remoteFilename: WideString; const localFilename: WideString): Integer;
    function AsyncPutFileStart(const localFilename: WideString; const remoteFilename: WideString): Integer;
    function ChangeRemoteDir(const relativeDirPath: WideString): Integer;
    function ClearControlChannel: Integer;
    procedure ClearDirCache;
    procedure ClearSessionLog;
    function Connect: Integer;
    function ConnectOnly: Integer;
    function ConvertToTls: Integer;
    function CreatePlan(const localDir: WideString): WideString;
    function CreateRemoteDir(const dir: WideString): Integer;
    function DeleteMatching(const remotePattern: WideString): Integer;
    function DeleteRemoteFile(const filename: WideString): Integer;
    function DeleteTree: Integer;
    function DetermineProxyMethod: Integer;
    function DetermineSettings: WideString;
    function DirTreeXml: WideString;
    function Disconnect: Integer;
    function DownloadTree(const localRoot: WideString): Integer;
    function Feat: WideString;
    function GetCreateDt(index: Integer): ICkDateTime;
    function GetCreateDtByName(const filename: WideString): ICkDateTime;
    function GetCreateTime(index: Integer): TDateTime;
    function GetCreateTimeByName(const filename: WideString): TDateTime;
    function GetCreateTimeByNameStr(const filename: WideString): WideString;
    function GetCreateTimeStr(index: Integer): WideString;
    function GetCurrentRemoteDir: WideString;
    function GetFile(const remoteFilename: WideString; const localFilename: WideString): Integer;
    function GetFilename(index: Integer): WideString;
    function GetIsDirectory(index: Integer): Integer;
    function GetIsSymbolicLink(index: Integer): Integer;
    function GetLastAccessDt(index: Integer): ICkDateTime;
    function GetLastAccessDtByName(const filename: WideString): ICkDateTime;
    function GetLastAccessTime(index: Integer): TDateTime;
    function GetLastAccessTimeByName(const filename: WideString): TDateTime;
    function GetLastAccessTimeByNameStr(const filename: WideString): WideString;
    function GetLastAccessTimeStr(index: Integer): WideString;
    function GetLastModDt(index: Integer): ICkDateTime;
    function GetLastModDtByName(const filename: WideString): ICkDateTime;
    function GetLastModifiedTime(index: Integer): TDateTime;
    function GetLastModifiedTimeByName(const filename: WideString): TDateTime;
    function GetLastModifiedTimeByNameStr(const filename: WideString): WideString;
    function GetLastModifiedTimeStr(index: Integer): WideString;
    function GetRemoteFileBinaryData(const remoteFilename: WideString): OleVariant;
    function GetRemoteFileTextC(const remoteFilename: WideString; const charset: WideString): WideString;
    function GetRemoteFileTextData(const remoteFilename: WideString): WideString;
    function GetSize(index: Integer): Integer;
    function GetSizeByName(const filename: WideString): Integer;
    function GetSizeStr(index: Integer): WideString;
    function GetSizeStrByName(const filename: WideString): WideString;
    function GetSslServerCert: IChilkatCert;
    function GetTextDirListing(const pattern: WideString): WideString;
    function GetXmlDirListing(const pattern: WideString): WideString;
    function IsUnlocked: Integer;
    function LoginAfterConnectOnly: Integer;
    function MGetFiles(const remotePattern: WideString; const localDir: WideString): Integer;
    function MPutFiles(const pattern: WideString): Integer;
    function NlstXml(const pattern: WideString): WideString;
    function Noop: Integer;
    function PutFile(const localFilename: WideString; const remoteFilename: WideString): Integer;
    function PutFileFromBinaryData(const remoteFilename: WideString; Content: OleVariant): Integer;
    function PutFileFromTextData(const remoteFilename: WideString; const textData: WideString; 
                                 const charset: WideString): Integer;
    function PutPlan(const plan: WideString; const alreadyDoneFilename: WideString): Integer;
    function PutTree(const localDir: WideString): Integer;
    function Quote(const cmd: WideString): Integer;
    function RemoveRemoteDir(const dir: WideString): Integer;
    function RenameRemoteFile(const existingFilename: WideString; const newFilename: WideString): Integer;
    function SendCommand(const cmd: WideString): WideString;
    function SetModeZ: Integer;
    procedure SetOldestDate(oldestDateTime: TDateTime);
    procedure SetOldestDateStr(const oldestDateTimeStr: WideString);
    function SetRemoteFileDateTime(dt: TDateTime; const remoteFilename: WideString): Integer;
    function SetRemoteFileDateTimeStr(const dateTimeStr: WideString; 
                                      const remoteFilename: WideString): Integer;
    function SetRemoteFileDt(const dt: ICkDateTime; const remoteFilename: WideString): Integer;
    procedure SetSslCertRequirement(const name: WideString; const value: WideString);
    function SetSslClientCert(const cert: IChilkatCert): Integer;
    function SetSslClientCertPem(const pemDataOrFilename: WideString; const pemPassword: WideString): Integer;
    function SetSslClientCertPfx(const pfxFilename: WideString; const pfxPassword: WideString): Integer;
    function SetTypeAscii: Integer;
    function SetTypeBinary: Integer;
    function Site(const siteCommand: WideString): Integer;
    procedure SleepMs(millisec: Integer);
    function Stat: WideString;
    function SyncDeleteRemote(const localRoot: WideString): Integer;
    function SyncLocalDir(const localRoot: WideString; mode: Integer): Integer;
    function SyncLocalTree(const localRoot: WideString; mode: Integer): Integer;
    function SyncRemoteTree(const localRoot: WideString; mode: Integer): Integer;
    function SyncRemoteTree2(const localRoot: WideString; mode: Integer; bDescend: Integer; 
                             bPreviewOnly: Integer): Integer;
    function Syst: WideString;
    function UnlockComponent(const unlockCode: WideString): Integer;
    property  ControlInterface: IChilkatFtp2 read GetControlInterface;
    property  DefaultInterface: IChilkatFtp2 read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property AsyncBytesReceived: Integer index 104 read GetIntegerProp;
    property AsyncBytesReceivedStr: WideString index 105 read GetWideStringProp;
    property AsyncBytesSent: Integer index 106 read GetIntegerProp;
    property AsyncBytesSentStr: WideString index 107 read GetWideStringProp;
    property AsyncFinished: Integer index 108 read GetIntegerProp;
    property AsyncLog: WideString index 109 read GetWideStringProp;
    property AsyncSuccess: Integer index 110 read GetIntegerProp;
    property ConnectFailReason: Integer index 122 read GetIntegerProp;
    property ConnectVerified: Integer index 124 read GetIntegerProp;
    property DownloadTransferRate: Integer index 127 read GetIntegerProp;
    property Greeting: WideString index 129 read GetWideStringProp;
    property HasModeZ: Integer index 130 read GetIntegerProp;
    property IsConnected: Integer index 140 read GetIntegerProp;
    property LastReply: WideString index 142 read GetWideStringProp;
    property LoginVerified: Integer index 144 read GetIntegerProp;
    property NumFilesAndDirs: Integer index 145 read GetIntegerProp;
    property PartialTransfer: Integer index 146 read GetIntegerProp;
    property SessionLog: WideString index 162 read GetWideStringProp;
    property SslServerCertVerified: Integer index 173 read GetIntegerProp;
    property SyncPreview: WideString index 174 read GetWideStringProp;
    property UploadTransferRate: Integer index 175 read GetIntegerProp;
    property AsyncPercentDone: Integer index 278 read GetIntegerProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property Account: WideString index 100 read GetWideStringProp write SetWideStringProp stored False;
    property ActivePortRangeEnd: Integer index 101 read GetIntegerProp write SetIntegerProp stored False;
    property ActivePortRangeStart: Integer index 102 read GetIntegerProp write SetIntegerProp stored False;
    property AllocateSize: Integer index 103 read GetIntegerProp write SetIntegerProp stored False;
    property AuthSsl: Integer index 111 read GetIntegerProp write SetIntegerProp stored False;
    property AuthTls: Integer index 112 read GetIntegerProp write SetIntegerProp stored False;
    property AutoFeat: Integer index 113 read GetIntegerProp write SetIntegerProp stored False;
    property AutoFix: Integer index 114 read GetIntegerProp write SetIntegerProp stored False;
    property AutoGetSizeForProgress: Integer index 115 read GetIntegerProp write SetIntegerProp stored False;
    property AutoSyst: Integer index 116 read GetIntegerProp write SetIntegerProp stored False;
    property AutoXcrc: Integer index 117 read GetIntegerProp write SetIntegerProp stored False;
    property BandwidthThrottleDown: Integer index 118 read GetIntegerProp write SetIntegerProp stored False;
    property BandwidthThrottleUp: Integer index 119 read GetIntegerProp write SetIntegerProp stored False;
    property ClientIpAddress: WideString index 120 read GetWideStringProp write SetWideStringProp stored False;
    property CommandCharset: WideString index 121 read GetWideStringProp write SetWideStringProp stored False;
    property ConnectTimeout: Integer index 123 read GetIntegerProp write SetIntegerProp stored False;
    property CrlfMode: Integer index 125 read GetIntegerProp write SetIntegerProp stored False;
    property DirListingCharset: WideString index 126 read GetWideStringProp write SetWideStringProp stored False;
    property ForcePortIpAddress: WideString index 128 read GetWideStringProp write SetWideStringProp stored False;
    property HeartbeatMs: Integer index 131 read GetIntegerProp write SetIntegerProp stored False;
    property Hostname: WideString index 132 read GetWideStringProp write SetWideStringProp stored False;
    property HttpProxyAuthMethod: WideString index 133 read GetWideStringProp write SetWideStringProp stored False;
    property HttpProxyDomain: WideString index 134 read GetWideStringProp write SetWideStringProp stored False;
    property HttpProxyHostname: WideString index 135 read GetWideStringProp write SetWideStringProp stored False;
    property HttpProxyPassword: WideString index 136 read GetWideStringProp write SetWideStringProp stored False;
    property HttpProxyPort: Integer index 137 read GetIntegerProp write SetIntegerProp stored False;
    property HttpProxyUsername: WideString index 138 read GetWideStringProp write SetWideStringProp stored False;
    property IdleTimeoutMs: Integer index 139 read GetIntegerProp write SetIntegerProp stored False;
    property KeepSessionLog: Integer index 141 read GetIntegerProp write SetIntegerProp stored False;
    property ListPattern: WideString index 143 read GetWideStringProp write SetWideStringProp stored False;
    property Passive: Integer index 147 read GetIntegerProp write SetIntegerProp stored False;
    property PassiveUseHostAddr: Integer index 148 read GetIntegerProp write SetIntegerProp stored False;
    property password: WideString index 149 read GetWideStringProp write SetWideStringProp stored False;
    property Port: Integer index 150 read GetIntegerProp write SetIntegerProp stored False;
    property PreferNlst: Integer index 151 read GetIntegerProp write SetIntegerProp stored False;
    property ProgressMonSize: Integer index 152 read GetIntegerProp write SetIntegerProp stored False;
    property ProxyHostname: WideString index 153 read GetWideStringProp write SetWideStringProp stored False;
    property ProxyMethod: Integer index 154 read GetIntegerProp write SetIntegerProp stored False;
    property ProxyPassword: WideString index 155 read GetWideStringProp write SetWideStringProp stored False;
    property ProxyPort: Integer index 156 read GetIntegerProp write SetIntegerProp stored False;
    property ProxyUsername: WideString index 157 read GetWideStringProp write SetWideStringProp stored False;
    property ReadTimeout: Integer index 158 read GetIntegerProp write SetIntegerProp stored False;
    property RequireSslCertVerify: Integer index 159 read GetIntegerProp write SetIntegerProp stored False;
    property RestartNext: Integer index 160 read GetIntegerProp write SetIntegerProp stored False;
    property SendBufferSize: Integer index 161 read GetIntegerProp write SetIntegerProp stored False;
    property SkipFinalReply: Integer index 163 read GetIntegerProp write SetIntegerProp stored False;
    property SoRcvBuf: Integer index 164 read GetIntegerProp write SetIntegerProp stored False;
    property SoSndBuf: Integer index 165 read GetIntegerProp write SetIntegerProp stored False;
    property SocksHostname: WideString index 166 read GetWideStringProp write SetWideStringProp stored False;
    property SocksPassword: WideString index 167 read GetWideStringProp write SetWideStringProp stored False;
    property SocksPort: Integer index 168 read GetIntegerProp write SetIntegerProp stored False;
    property SocksUsername: WideString index 169 read GetWideStringProp write SetWideStringProp stored False;
    property SocksVersion: Integer index 170 read GetIntegerProp write SetIntegerProp stored False;
    property Ssl: Integer index 171 read GetIntegerProp write SetIntegerProp stored False;
    property SslProtocol: WideString index 172 read GetWideStringProp write SetWideStringProp stored False;
    property UseEpsv: Integer index 176 read GetIntegerProp write SetIntegerProp stored False;
    property UserName: WideString index 177 read GetWideStringProp write SetWideStringProp stored False;
    property SyncMustMatch: WideString index 275 read GetWideStringProp write SetWideStringProp stored False;
    property SyncMustNotMatch: WideString index 276 read GetWideStringProp write SetWideStringProp stored False;
    property PreferIpv6: Integer index 277 read GetIntegerProp write SetIntegerProp stored False;
    property OnAbortCheck: TChilkatFtp2AbortCheck read FOnAbortCheck write FOnAbortCheck;
    property OnPercentDone: TChilkatFtp2PercentDone read FOnPercentDone write FOnPercentDone;
    property OnProgressInfo: TChilkatFtp2ProgressInfo read FOnProgressInfo write FOnProgressInfo;
    property OnBeginDownloadFile: TChilkatFtp2BeginDownloadFile read FOnBeginDownloadFile write FOnBeginDownloadFile;
    property OnEndDownloadFile: TChilkatFtp2EndDownloadFile read FOnEndDownloadFile write FOnEndDownloadFile;
    property OnVerifyDownloadDir: TChilkatFtp2VerifyDownloadDir read FOnVerifyDownloadDir write FOnVerifyDownloadDir;
    property OnBeginUploadFile: TChilkatFtp2BeginUploadFile read FOnBeginUploadFile write FOnBeginUploadFile;
    property OnEndUploadFile: TChilkatFtp2EndUploadFile read FOnEndUploadFile write FOnEndUploadFile;
    property OnVerifyUploadDir: TChilkatFtp2VerifyUploadDir read FOnVerifyUploadDir write FOnVerifyUploadDir;
    property OnVerifyDeleteDir: TChilkatFtp2VerifyDeleteDir read FOnVerifyDeleteDir write FOnVerifyDeleteDir;
    property OnVerifyDeleteFile: TChilkatFtp2VerifyDeleteFile read FOnVerifyDeleteFile write FOnVerifyDeleteFile;
    property OnUploadRate: TChilkatFtp2UploadRate read FOnUploadRate write FOnUploadRate;
    property OnDownloadRate: TChilkatFtp2DownloadRate read FOnDownloadRate write FOnDownloadRate;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TCkFileAccess
// Help String      : CkFileAccess Class 9.5.0
// Default Interface: ICkFileAccess
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TCkFileAccess = class(TOleControl)
  private
    FIntf: ICkFileAccess;
    function  GetControlInterface: ICkFileAccess;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    function AppendAnsi(const text: WideString): Integer;
    function AppendText(const text: WideString; const charset: WideString): Integer;
    function AppendUnicodeBOM: Integer;
    function AppendUtf8BOM: Integer;
    function DirAutoCreate(const path: WideString): Integer;
    function DirCreate(const path: WideString): Integer;
    function DirDelete(const path: WideString): Integer;
    function DirEnsureExists(const filePath: WideString): Integer;
    procedure FileClose;
    function FileContentsEqual(const path1: WideString; const path2: WideString): Integer;
    function FileCopy(const existing: WideString; const newFilename: WideString; 
                      failIfExists: Integer): Integer;
    function FileDelete(const filename: WideString): Integer;
    function FileExists(const filename: WideString): Integer;
    function FileOpen(const filename: WideString; accessMode: Integer; shareMode: Integer; 
                      createDisp: Integer; attr: Integer): Integer;
    function FileRead(numBytes: Integer): OleVariant;
    function FileRename(const existing: WideString; const newFilename: WideString): Integer;
    function FileSeek(offset: Integer; origin: Integer): Integer;
    function fileSize(const filename: WideString): Integer;
    function FileWrite(data: OleVariant): Integer;
    function GetTempFilename(const dirName: WideString; const prefix: WideString): WideString;
    function OpenForAppend(const filePath: WideString): Integer;
    function OpenForRead(const filePath: WideString): Integer;
    function OpenForReadWrite(const filePath: WideString): Integer;
    function OpenForWrite(const filePath: WideString): Integer;
    function ReadBinaryToEncoded(const filename: WideString; const encoding: WideString): WideString;
    function ReadEntireFile(const filename: WideString): OleVariant;
    function ReadEntireTextFile(const filename: WideString; const charset: WideString): WideString;
    function ReassembleFile(const partsDirPath: WideString; const partPrefix: WideString; 
                            const partExtension: WideString; const reassembledFilename: WideString): Integer;
    function ReplaceStrings(const path: WideString; const charset: WideString; 
                            const existingString: WideString; const replacementString: WideString): Integer;
    function SetCurrentDir(const path: WideString): Integer;
    function SetFileTimes(const path: WideString; const create: ICkDateTime; 
                          const lastAccess: ICkDateTime; const lastModified: ICkDateTime): Integer;
    function SetLastModified(const path: WideString; const lastModified: ICkDateTime): Integer;
    function SplitFile(const fileToSplit: WideString; const partPrefix: WideString; 
                       const partExtension: WideString; partSize: Integer; const destDir: WideString): Integer;
    function TreeDelete(const path: WideString): Integer;
    function WriteEntireFile(const filename: WideString; fileData: OleVariant): Integer;
    function WriteEntireTextFile(const filename: WideString; const fileData: WideString; 
                                 const charset: WideString; includePreamble: Integer): Integer;
    property  ControlInterface: ICkFileAccess read GetControlInterface;
    property  DefaultInterface: ICkFileAccess read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property EndOfFile: Integer index 100 read GetIntegerProp;
    property FileOpenError: Integer index 101 read GetIntegerProp;
    property FileOpenErrorMsg: WideString index 102 read GetWideStringProp;
    property CurrentDir: WideString index 103 read GetWideStringProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatEmailBundle
// Help String      : ChilkatEmailBundle Class 9.5.0
// Default Interface: IChilkatEmailBundle
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatEmailBundle = class(TOleControl)
  private
    FIntf: IChilkatEmailBundle;
    function  GetControlInterface: IChilkatEmailBundle;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    function AddEmail(const email: IChilkatEmail): Integer;
    function FindByHeader(const name: WideString; const value: WideString): IChilkatEmail;
    function GetEmail(index: Integer): IChilkatEmail;
    function GetUidls: ICkStringArray;
    function GetXml: WideString;
    function LoadXml(const filename: WideString): Integer;
    function LoadXmlString(const xmlStr: WideString): Integer;
    function RemoveEmail(const email: IChilkatEmail): Integer;
    function RemoveEmailByIndex(index: Integer): Integer;
    function SaveXml(const filename: WideString): Integer;
    procedure SortByDate(ascending: Integer);
    procedure SortByRecipient(ascending: Integer);
    procedure SortBySender(ascending: Integer);
    procedure SortBySubject(ascending: Integer);
    function AddMimeBytes(mime: OleVariant): Integer;
    property  ControlInterface: IChilkatEmailBundle read GetControlInterface;
    property  DefaultInterface: IChilkatEmailBundle read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property MessageCount: Integer index 100 read GetIntegerProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatEmail
// Help String      : ChilkatEmail Class 9.5.0
// Default Interface: IChilkatEmail
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatEmail = class(TOleControl)
  private
    FIntf: IChilkatEmail;
    function  GetControlInterface: IChilkatEmail;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    procedure AddAttachmentHeader(index: Integer; const fieldName: WideString; 
                                  const fieldValue: WideString);
    function AddBcc(const friendlyName: WideString; const emailAddress: WideString): Integer;
    function AddCC(const friendlyName: WideString; const emailAddress: WideString): Integer;
    function AddDataAttachment(const filePath: WideString; Content: OleVariant): Integer;
    function AddDataAttachment2(const path: WideString; Content: OleVariant; 
                                const ContentType: WideString): Integer;
    function AddEncryptCert(const cert: IChilkatCert): Integer;
    function AddFileAttachment(const path: WideString): WideString;
    function AddFileAttachment2(const path: WideString; const ContentType: WideString): Integer;
    procedure AddHeaderField(const fieldName: WideString; const fieldValue: WideString);
    procedure AddHeaderField2(const fieldName: WideString; const fieldValue: WideString);
    function AddHtmlAlternativeBody(const Body: WideString): Integer;
    function AddMultipleBcc(const commaSeparatedAddresses: WideString): Integer;
    function AddMultipleCC(const commaSeparatedAddresses: WideString): Integer;
    function AddMultipleTo(const commaSeparatedAddresses: WideString): Integer;
    function AddPfxSourceData(pfxData: OleVariant; const password: WideString): Integer;
    function AddPfxSourceFile(const pfxFilePath: WideString; const password: WideString): Integer;
    function AddPlainTextAlternativeBody(const Body: WideString): Integer;
    function AddRelatedData(const path: WideString; inData: OleVariant): WideString;
    procedure AddRelatedData2(inData: OleVariant; const fileNameInHtml: WideString);
    function AddRelatedFile(const path: WideString): WideString;
    function AddRelatedFile2(const filenameOnDisk: WideString; const fileNameInHtml: WideString): Integer;
    procedure AddRelatedHeader(index: Integer; const fieldName: WideString; 
                               const fieldValue: WideString);
    function AddRelatedString(const nameInHtml: WideString; const str: WideString; 
                              const charset: WideString): WideString;
    procedure AddRelatedString2(const Content: WideString; const charset: WideString; 
                                const fileNameInHtml: WideString);
    function AddStringAttachment(const path: WideString; const Content: WideString): Integer;
    function AddStringAttachment2(const path: WideString; const Content: WideString; 
                                  const charset: WideString): Integer;
    function AddTo(const friendlyName: WideString; const emailAddress: WideString): Integer;
    function AddiCalendarAlternativeBody(const Body: WideString; const methodName: WideString): Integer;
    function AesDecrypt(const password: WideString): Integer;
    function AesEncrypt(const password: WideString): Integer;
    procedure AppendToBody(const str: WideString);
    function AspUnpack(const prefix: WideString; const saveDir: WideString; 
                       const urlPath: WideString; cleanFiles: Integer): Integer;
    function AspUnpack2(const prefix: WideString; const saveDir: WideString; 
                        const urlPath: WideString; cleanFiles: Integer): OleVariant;
    function AttachMessage(mimeBytes: OleVariant): Integer;
    function BEncodeBytes(inData: OleVariant; const charset: WideString): WideString;
    function BEncodeString(const str: WideString; const charset: WideString): WideString;
    procedure ClearBcc;
    procedure ClearCC;
    procedure ClearEncryptCerts;
    procedure ClearTo;
    function Clone: IChilkatEmail;
    function ComputeGlobalKey(const encoding: WideString; bFold: Integer): WideString;
    function CreateDsn(const explanation: WideString; const xmlDeliveryStatus: WideString; 
                       bHeaderOnly: Integer): IChilkatEmail;
    function CreateForward: IChilkatEmail;
    function CreateMdn(const explanation: WideString; const xmlMdnFields: WideString; 
                       bHeaderOnly: Integer): IChilkatEmail;
    function CreateReply: IChilkatEmail;
    function CreateTempMht(const inFilename: WideString): WideString;
    procedure DropAttachments;
    procedure DropRelatedItem(index: Integer);
    procedure DropRelatedItems;
    function DropSingleAttachment(index: Integer): Integer;
    function FindIssuer(const cert: IChilkatCert): IChilkatCert;
    function GenerateFilename: WideString;
    function GetAltHeaderField(index: Integer; const fieldName: WideString): WideString;
    function GetAlternativeBody(index: Integer): WideString;
    function GetAlternativeBodyByContentType(const ContentType: WideString): WideString;
    function GetAlternativeContentType(index: Integer): WideString;
    function GetAttachedMessage(index: Integer): IChilkatEmail;
    function GetAttachedMessageFilename(index: Integer): WideString;
    function GetAttachmentContentID(index: Integer): WideString;
    function GetAttachmentContentType(index: Integer): WideString;
    function GetAttachmentData(index: Integer): OleVariant;
    function GetAttachmentFilename(index: Integer): WideString;
    function GetAttachmentHeader(attachIndex: Integer; const fieldName: WideString): WideString;
    function GetAttachmentSize(index: Integer): Integer;
    function GetAttachmentString(index: Integer; const charset: WideString): WideString;
    function GetAttachmentStringCrLf(index: Integer; const charset: WideString): WideString;
    function GetBcc(index: Integer): WideString;
    function GetBccAddr(index: Integer): WideString;
    function GetBccName(index: Integer): WideString;
    function GetCC(index: Integer): WideString;
    function GetCcAddr(index: Integer): WideString;
    function GetCcName(index: Integer): WideString;
    function GetDeliveryStatusInfo(const fieldName: WideString): WideString;
    function GetDsnFinalRecipients: ICkStringArray;
    function GetDt: ICkDateTime;
    function GetEncryptCert: IChilkatCert;
    function GetEncryptedByCert: IChilkatCert;
    function GetFileContent(const path: WideString): OleVariant;
    function GetHeaderField(const fieldName: WideString): WideString;
    function GetHeaderFieldName(index: Integer): WideString;
    function GetHeaderFieldValue(index: Integer): WideString;
    function GetHtmlBody: WideString;
    function GetImapUid: Integer;
    function GetLinkedDomains: ICkStringArray;
    function GetMbHeaderField(const fieldName: WideString; const charset: WideString): OleVariant;
    function GetMbHtmlBody(const charset: WideString): OleVariant;
    function GetMbPlainTextBody(const charset: WideString): OleVariant;
    function GetMime: WideString;
    function GetMimeBinary: OleVariant;
    function GetPlainTextBody: WideString;
    function GetRelatedContentID(index: Integer): WideString;
    function GetRelatedContentLocation(index: Integer): WideString;
    function GetRelatedContentType(index: Integer): WideString;
    function GetRelatedData(index: Integer): OleVariant;
    function GetRelatedFilename(index: Integer): WideString;
    function GetRelatedString(index: Integer; const charset: WideString): WideString;
    function GetRelatedStringCrLf(index: Integer; const charset: WideString): WideString;
    function GetReplacePattern(index: Integer): WideString;
    function GetReplaceString(index: Integer): WideString;
    function GetReplaceString2(const pattern: WideString): WideString;
    function GetReport(index: Integer): WideString;
    function GetSignedByCert: IChilkatCert;
    function GetSigningCert: IChilkatCert;
    function GetTo(index: Integer): WideString;
    function GetToAddr(index: Integer): WideString;
    function GetToName(index: Integer): WideString;
    function GetXml: WideString;
    function HasHeaderMatching(const fieldName: WideString; const valuePattern: WideString; 
                               caseInsensitive: Integer): Integer;
    function HasHtmlBody: Integer;
    function HasPlainTextBody: Integer;
    function IsMultipartReport: Integer;
    function LoadEml(const mimePath: WideString): Integer;
    function LoadXml(const xmlPath: WideString): Integer;
    function LoadXmlString(const xmlStr: WideString): Integer;
    function QEncodeBytes(inData: OleVariant; const charset: WideString): WideString;
    function QEncodeString(const str: WideString; const charset: WideString): WideString;
    procedure RemoveAttachedMessage(idx: Integer);
    procedure RemoveAttachedMessages;
    procedure RemoveAttachmentPaths;
    procedure RemoveHeaderField(const fieldName: WideString);
    procedure RemoveHtmlAlternative;
    procedure RemovePlainTextAlternative;
    function SaveAllAttachments(const directory: WideString): Integer;
    function SaveAttachedFile(index: Integer; const directory: WideString): Integer;
    function SaveEml(const path: WideString): Integer;
    function SaveRelatedItem(index: Integer; const directory: WideString): Integer;
    function SaveXml(const path: WideString): Integer;
    function SetAttachmentCharset(index: Integer; const charset: WideString): Integer;
    function SetAttachmentDisposition(index: Integer; const Disposition: WideString): Integer;
    function SetAttachmentFilename(index: Integer; const path: WideString): Integer;
    function SetCSP(const csp: IChilkatCsp): Integer;
    function SetDt(const dt: ICkDateTime): Integer;
    function SetEncryptCert(const cert: IChilkatCert): Integer;
    function SetFromMimeBytes(mimeBytes: OleVariant): Integer;
    function SetFromMimeBytes2(mimeBytes: OleVariant; const charset: WideString): Integer;
    function SetFromMimeText(const mimeText: WideString): Integer;
    function SetFromXmlText(const xmlStr: WideString): Integer;
    procedure SetHtmlBody(const html: WideString);
    function SetMbHtmlBody(const charset: WideString; inData: OleVariant): Integer;
    function SetMbPlainTextBody(const charset: WideString; inData: OleVariant): Integer;
    function SetRelatedFilename(index: Integer; const path: WideString): Integer;
    function SetReplacePattern(const pattern: WideString; const ReplaceString: WideString): Integer;
    function SetSigningCert(const cert: IChilkatCert): Integer;
    function SetSigningCert2(const cert: IChilkatCert; const key: IPrivateKey): Integer;
    procedure SetTextBody(const bodyText: WideString; const ContentType: WideString);
    procedure UnSpamify;
    function UnpackHtml(const unpackDir: WideString; const htmlFilename: WideString; 
                        const partsSubDir: WideString): Integer;
    function UnzipAttachments: Integer;
    function ZipAttachments(const zipFilename: WideString): Integer;
    function LoadBodyFromFile(const textFilename: WideString; bIsHtml: Integer; 
                              const charset: WideString): Integer;
    procedure SetEdifactBody(const message: WideString; const name: WideString; 
                             const filename: WideString; const charset: WideString);
    function UseCertVault(const vault: IChilkatXmlCertVault): Integer;
    function GetSignedByCertChain: IChilkatCertChain;
    property  ControlInterface: IChilkatEmail read GetControlInterface;
    property  DefaultInterface: IChilkatEmail read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property Decrypted: Integer index 103 read GetIntegerProp;
    property EncryptedBy: WideString index 106 read GetWideStringProp;
    property Header: WideString index 111 read GetWideStringProp;
    property Language: WideString index 112 read GetWideStringProp;
    property NumAlternatives: Integer index 116 read GetIntegerProp;
    property NumAttachedMessages: Integer index 117 read GetIntegerProp;
    property NumAttachments: Integer index 118 read GetIntegerProp;
    property NumBcc: Integer index 119 read GetIntegerProp;
    property NumCC: Integer index 120 read GetIntegerProp;
    property NumDaysOld: Integer index 121 read GetIntegerProp;
    property NumHeaderFields: Integer index 122 read GetIntegerProp;
    property NumRelatedItems: Integer index 123 read GetIntegerProp;
    property NumReplacePatterns: Integer index 124 read GetIntegerProp;
    property NumReports: Integer index 125 read GetIntegerProp;
    property NumTo: Integer index 126 read GetIntegerProp;
    property ReceivedEncrypted: Integer index 132 read GetIntegerProp;
    property ReceivedSigned: Integer index 133 read GetIntegerProp;
    property SignaturesValid: Integer index 138 read GetIntegerProp;
    property SignedBy: WideString index 139 read GetWideStringProp;
    property Size: Integer index 141 read GetIntegerProp;
    property uidl: WideString index 143 read GetWideStringProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property Body: WideString index 100 read GetWideStringProp write SetWideStringProp stored False;
    property BounceAddress: WideString index 101 read GetWideStringProp write SetWideStringProp stored False;
    property charset: WideString index 102 read GetWideStringProp write SetWideStringProp stored False;
    property EmailDate: TDateTime index 104 read GetTDateTimeProp write SetTDateTimeProp stored False;
    property EmailDateStr: WideString index 105 read GetWideStringProp write SetWideStringProp stored False;
    property FileDistList: WideString index 107 read GetWideStringProp write SetWideStringProp stored False;
    property From: WideString index 108 read GetWideStringProp write SetWideStringProp stored False;
    property FromAddress: WideString index 109 read GetWideStringProp write SetWideStringProp stored False;
    property fromName: WideString index 110 read GetWideStringProp write SetWideStringProp stored False;
    property LocalDate: TDateTime index 113 read GetTDateTimeProp write SetTDateTimeProp stored False;
    property LocalDateStr: WideString index 114 read GetWideStringProp write SetWideStringProp stored False;
    property Mailer: WideString index 115 read GetWideStringProp write SetWideStringProp stored False;
    property OverwriteExisting: Integer index 127 read GetIntegerProp write SetIntegerProp stored False;
    property Pkcs7CryptAlg: WideString index 128 read GetWideStringProp write SetWideStringProp stored False;
    property Pkcs7KeyLength: Integer index 129 read GetIntegerProp write SetIntegerProp stored False;
    property PreferredCharset: WideString index 130 read GetWideStringProp write SetWideStringProp stored False;
    property PrependHeaders: Integer index 131 read GetIntegerProp write SetIntegerProp stored False;
    property ReplyTo: WideString index 134 read GetWideStringProp write SetWideStringProp stored False;
    property ReturnReceipt: Integer index 135 read GetIntegerProp write SetIntegerProp stored False;
    property SendEncrypted: Integer index 136 read GetIntegerProp write SetIntegerProp stored False;
    property SendSigned: Integer index 137 read GetIntegerProp write SetIntegerProp stored False;
    property SigningHashAlg: WideString index 140 read GetWideStringProp write SetWideStringProp stored False;
    property subject: WideString index 142 read GetWideStringProp write SetWideStringProp stored False;
    property UnpackUseRelPaths: Integer index 144 read GetIntegerProp write SetIntegerProp stored False;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TDtObj
// Help String      : DtObj Class 9.5.0
// Default Interface: IDtObj
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TDtObj = class(TOleControl)
  private
    FIntf: IDtObj;
    function  GetControlInterface: IDtObj;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    function Serialize: WideString;
    procedure DeSerialize(const serializedDtObj: WideString);
    property  ControlInterface: IDtObj read GetControlInterface;
    property  DefaultInterface: IDtObj read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property Day: Integer index 100 read GetIntegerProp write SetIntegerProp stored False;
    property Hour: Integer index 101 read GetIntegerProp write SetIntegerProp stored False;
    property Minute: Integer index 102 read GetIntegerProp write SetIntegerProp stored False;
    property Month: Integer index 103 read GetIntegerProp write SetIntegerProp stored False;
    property Second: Integer index 104 read GetIntegerProp write SetIntegerProp stored False;
    property StructTmMonth: Integer index 105 read GetIntegerProp write SetIntegerProp stored False;
    property StructTmYear: Integer index 106 read GetIntegerProp write SetIntegerProp stored False;
    property Utc: Integer index 107 read GetIntegerProp write SetIntegerProp stored False;
    property Year: Integer index 108 read GetIntegerProp write SetIntegerProp stored False;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatDsa
// Help String      : ChilkatDsa Class 9.5.0
// Default Interface: IChilkatDsa
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatDsa = class(TOleControl)
  private
    FIntf: IChilkatDsa;
    function  GetControlInterface: IChilkatDsa;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
    function Get_Hash: OleVariant;
    procedure Set_Hash(pVal: OleVariant);
    function Get_signature: OleVariant;
    procedure Set_signature(pVal: OleVariant);
  public
    function GetImplAddrStr: WideString;
    function FromDer(derData: OleVariant): Integer;
    function FromDerFile(const path: WideString): Integer;
    function FromEncryptedPem(const password: WideString; const pemData: WideString): Integer;
    function FromPem(const pemData: WideString): Integer;
    function FromPublicDer(derData: OleVariant): Integer;
    function FromPublicDerFile(const path: WideString): Integer;
    function FromPublicPem(const pemData: WideString): Integer;
    function FromXml(const xmlKey: WideString): Integer;
    function GenKey(numBits: Integer): Integer;
    function GenKeyFromParamsDer(derBytes: OleVariant): Integer;
    function GenKeyFromParamsDerFile(const path: WideString): Integer;
    function GenKeyFromParamsPem(const pem: WideString): Integer;
    function GenKeyFromParamsPemFile(const path: WideString): Integer;
    function GetEncodedHash(const encoding: WideString): WideString;
    function GetEncodedSignature(const encoding: WideString): WideString;
    function LoadText(const path: WideString): WideString;
    function SaveText(const strToSave: WideString; const path: WideString): Integer;
    function SetEncodedHash(const encoding: WideString; const encodedHash: WideString): Integer;
    function SetEncodedSignature(const encoding: WideString; const encodedSig: WideString): Integer;
    function SetEncodedSignatureRS(const encoding: WideString; const encodedR: WideString; 
                                   const encodedS: WideString): Integer;
    function SetKeyExplicit(groupSizeInBytes: Integer; const pHex: WideString; 
                            const qHex: WideString; const gHex: WideString; const xHex: WideString): Integer;
    function SetPubKeyExplicit(groupSizeInBytes: Integer; const pHex: WideString; 
                               const qHex: WideString; const gHex: WideString; 
                               const yHex: WideString): Integer;
    function SignHash: Integer;
    function ToDer: OleVariant;
    function ToDerFile(const path: WideString): Integer;
    function ToEncryptedPem(const password: WideString): WideString;
    function ToPem: WideString;
    function ToPublicDer: OleVariant;
    function ToPublicDerFile(const path: WideString): Integer;
    function ToPublicPem: WideString;
    function ToXml(bPublicOnly: Integer): WideString;
    function UnlockComponent(const unlockCode: WideString): Integer;
    function Verify: Integer;
    function VerifyKey: Integer;
    property  ControlInterface: IChilkatDsa read GetControlInterface;
    property  DefaultInterface: IChilkatDsa read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property Hash: OleVariant index 101 read GetOleVariantProp write SetOleVariantProp;
    property HexG: WideString index 102 read GetWideStringProp;
    property HexP: WideString index 103 read GetWideStringProp;
    property HexQ: WideString index 104 read GetWideStringProp;
    property HexX: WideString index 105 read GetWideStringProp;
    property HexY: WideString index 106 read GetWideStringProp;
    property signature: OleVariant index 107 read GetOleVariantProp write SetOleVariantProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property GroupSize: Integer index 100 read GetIntegerProp write SetIntegerProp stored False;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatDkim
// Help String      : ChilkatDkim Class 9.5.0
// Default Interface: IChilkatDkim
// Def. Intf. DISP? : No
// Event   Interface: _IChilkatEvents
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatDkimAbortCheck = procedure(ASender: TObject; out abort: Integer) of object;
  TChilkatDkimPercentDone = procedure(ASender: TObject; percent: Integer; out abort: Integer) of object;
  TChilkatDkimProgressInfo = procedure(ASender: TObject; const name: WideString; 
                                                         const value: WideString) of object;

  TChilkatDkim = class(TOleControl)
  private
    FOnAbortCheck: TChilkatDkimAbortCheck;
    FOnPercentDone: TChilkatDkimPercentDone;
    FOnProgressInfo: TChilkatDkimProgressInfo;
    FIntf: IChilkatDkim;
    function  GetControlInterface: IChilkatDkim;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    function AddDkimSignature(mimeIn: OleVariant): OleVariant;
    function AddDomainKeySignature(mimeIn: OleVariant): OleVariant;
    function LoadDkimPk(const PrivateKey: WideString; const optionalPassword: WideString): Integer;
    function LoadDkimPkBytes(privateKeyDer: OleVariant; const optionalPassword: WideString): Integer;
    function LoadDkimPkFile(const privateKeyFilepath: WideString; const optionalPassword: WideString): Integer;
    function LoadDomainKeyPk(const PrivateKey: WideString; const optionalPassword: WideString): Integer;
    function LoadDomainKeyPkBytes(privateKeyDer: OleVariant; const optionalPassword: WideString): Integer;
    function LoadDomainKeyPkFile(const privateKeyFilepath: WideString; 
                                 const optionalPassword: WideString): Integer;
    function LoadPublicKey(const selector: WideString; const Domain: WideString; 
                           const PublicKey: WideString): Integer;
    function LoadPublicKeyFile(const selector: WideString; const Domain: WideString; 
                               const publicKeyFilepath: WideString): Integer;
    function NumDkimSignatures(mimeData: OleVariant): Integer;
    function NumDomainKeySignatures(mimeData: OleVariant): Integer;
    function PrefetchPublicKey(const selector: WideString; const Domain: WideString): Integer;
    function UnlockComponent(const unlockCode: WideString): Integer;
    function VerifyDkimSignature(sigIdx: Integer; mimeData: OleVariant): Integer;
    function VerifyDomainKeySignature(sigIdx: Integer; mimeData: OleVariant): Integer;
    property  ControlInterface: IChilkatDkim read GetControlInterface;
    property  DefaultInterface: IChilkatDkim read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property DkimAlg: WideString index 100 read GetWideStringProp write SetWideStringProp stored False;
    property DkimBodyLengthCount: Integer index 101 read GetIntegerProp write SetIntegerProp stored False;
    property DkimCanon: WideString index 102 read GetWideStringProp write SetWideStringProp stored False;
    property DkimDomain: WideString index 103 read GetWideStringProp write SetWideStringProp stored False;
    property DkimHeaders: WideString index 104 read GetWideStringProp write SetWideStringProp stored False;
    property DkimSelector: WideString index 105 read GetWideStringProp write SetWideStringProp stored False;
    property DomainKeyAlg: WideString index 106 read GetWideStringProp write SetWideStringProp stored False;
    property DomainKeyCanon: WideString index 107 read GetWideStringProp write SetWideStringProp stored False;
    property DomainKeyDomain: WideString index 108 read GetWideStringProp write SetWideStringProp stored False;
    property DomainKeyHeaders: WideString index 109 read GetWideStringProp write SetWideStringProp stored False;
    property DomainKeySelector: WideString index 110 read GetWideStringProp write SetWideStringProp stored False;
    property HeartbeatMs: Integer index 111 read GetIntegerProp write SetIntegerProp stored False;
    property OnAbortCheck: TChilkatDkimAbortCheck read FOnAbortCheck write FOnAbortCheck;
    property OnPercentDone: TChilkatDkimPercentDone read FOnPercentDone write FOnPercentDone;
    property OnProgressInfo: TChilkatDkimProgressInfo read FOnProgressInfo write FOnProgressInfo;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TCkDirTree
// Help String      : CkDirTree Class 9.5.0
// Default Interface: ICkDirTree
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TCkDirTree = class(TOleControl)
  private
    FIntf: ICkDirTree;
    function  GetControlInterface: ICkDirTree;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    function BeginIterate: Integer;
    function AdvancePosition: Integer;
    property  ControlInterface: ICkDirTree read GetControlInterface;
    property  DefaultInterface: ICkDirTree read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property DoneIterating: Integer index 101 read GetIntegerProp;
    property FileSize32: Integer index 102 read GetIntegerProp;
    property FullPath: WideString index 103 read GetWideStringProp;
    property FullUncPath: WideString index 104 read GetWideStringProp;
    property isDirectory: Integer index 105 read GetIntegerProp;
    property RelativePath: WideString index 107 read GetWideStringProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property BaseDir: WideString index 100 read GetWideStringProp write SetWideStringProp stored False;
    property recurse: Integer index 106 read GetIntegerProp write SetIntegerProp stored False;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatDh
// Help String      : ChilkatDh Class 9.5.0
// Default Interface: IChilkatDh
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatDh = class(TOleControl)
  private
    FIntf: IChilkatDh;
    function  GetControlInterface: IChilkatDh;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    function FindK(const e: WideString): WideString;
    function GenPG(numBits: Integer; G: Integer): Integer;
    function SetPG(const P: WideString; G: Integer): Integer;
    function UnlockComponent(const unlockCode: WideString): Integer;
    procedure UseKnownPrime(index: Integer);
    function CreateE(numBits: Integer): WideString;
    property  ControlInterface: IChilkatDh read GetControlInterface;
    property  DefaultInterface: IChilkatDh read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property P: WideString index 100 read GetWideStringProp;
    property G: Integer index 101 read GetIntegerProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatCsv
// Help String      : ChilkatCsv Class 9.5.0
// Default Interface: IChilkatCsv
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatCsv = class(TOleControl)
  private
    FIntf: IChilkatCsv;
    function  GetControlInterface: IChilkatCsv;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    function DeleteColumn(index: Integer): Integer;
    function DeleteColumnByName(const columnName: WideString): Integer;
    function DeleteRow(index: Integer): Integer;
    function GetCell(row: Integer; col: Integer): WideString;
    function GetCellByName(row: Integer; const columnName: WideString): WideString;
    function GetColumnName(index: Integer): WideString;
    function GetIndex(const columnName: WideString): Integer;
    function GetNumCols(row: Integer): Integer;
    function LoadFile(const path: WideString): Integer;
    function LoadFile2(const path: WideString; const charset: WideString): Integer;
    function LoadFromString(const csvData: WideString): Integer;
    function RowMatches(row: Integer; const matchPattern: WideString; bCaseSensitive: Integer): Integer;
    function SaveFile(const path: WideString): Integer;
    function SaveFile2(const path: WideString; const charset: WideString): Integer;
    function SaveToString: WideString;
    function SetCell(row: Integer; col: Integer; const Content: WideString): Integer;
    function SetCellByName(row: Integer; const columnName: WideString; const Content: WideString): Integer;
    function SetColumnName(index: Integer; const columnName: WideString): Integer;
    function SortByColumn(const columnName: WideString; bAscending: Integer; bCaseSensitive: Integer): Integer;
    property  ControlInterface: IChilkatCsv read GetControlInterface;
    property  DefaultInterface: IChilkatCsv read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property NumColumns: Integer index 103 read GetIntegerProp;
    property NumRows: Integer index 104 read GetIntegerProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property Crlf: Integer index 100 read GetIntegerProp write SetIntegerProp stored False;
    property Delimiter: WideString index 101 read GetWideStringProp write SetWideStringProp stored False;
    property HasColumnNames: Integer index 102 read GetIntegerProp write SetIntegerProp stored False;
    property autoTrim: Integer index 105 read GetIntegerProp write SetIntegerProp stored False;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatCreateCS
// Help String      : ChilkatCreateCS Class 9.5.0
// Default Interface: IChilkatCreateCS
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatCreateCS = class(TOleControl)
  private
    FIntf: IChilkatCreateCS;
    function  GetControlInterface: IChilkatCreateCS;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    function CreateFileStore(const path: WideString): IChilkatCertStore;
    function CreateMemoryStore: IChilkatCertStore;
    function CreateRegistryStore(const regRoot: WideString; const regPath: WideString): IChilkatCertStore;
    function OpenChilkatStore: IChilkatCertStore;
    function OpenCurrentUserStore: IChilkatCertStore;
    function OpenFileStore(const path: WideString): IChilkatCertStore;
    function OpenLocalSystemStore: IChilkatCertStore;
    function OpenOutlookStore: IChilkatCertStore;
    function OpenRegistryStore(const regRoot: WideString; const regPath: WideString): IChilkatCertStore;
    property  ControlInterface: IChilkatCreateCS read GetControlInterface;
    property  DefaultInterface: IChilkatCreateCS read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property readOnly: Integer index 100 read GetIntegerProp write SetIntegerProp stored False;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatCompression
// Help String      : ChilkatCompression Class 9.5.0
// Default Interface: IChilkatCompression
// Def. Intf. DISP? : No
// Event   Interface: _IChilkatEvents
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatCompressionAbortCheck = procedure(ASender: TObject; out abort: Integer) of object;
  TChilkatCompressionPercentDone = procedure(ASender: TObject; percent: Integer; out abort: Integer) of object;
  TChilkatCompressionProgressInfo = procedure(ASender: TObject; const name: WideString; 
                                                                const value: WideString) of object;

  TChilkatCompression = class(TOleControl)
  private
    FOnAbortCheck: TChilkatCompressionAbortCheck;
    FOnPercentDone: TChilkatCompressionPercentDone;
    FOnProgressInfo: TChilkatCompressionProgressInfo;
    FIntf: IChilkatCompression;
    function  GetControlInterface: IChilkatCompression;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    function BeginCompressBytes(data: OleVariant): OleVariant;
    function BeginCompressBytesENC(data: OleVariant): WideString;
    function BeginCompressString(const str: WideString): OleVariant;
    function BeginCompressStringENC(const str: WideString): WideString;
    function BeginDecompressBytes(data: OleVariant): OleVariant;
    function BeginDecompressBytesENC(const str: WideString): OleVariant;
    function BeginDecompressString(data: OleVariant): WideString;
    function BeginDecompressStringENC(const str: WideString): WideString;
    function CompressBytes(data: OleVariant): OleVariant;
    function CompressBytesENC(data: OleVariant): WideString;
    function CompressFile(const srcPath: WideString; const destPath: WideString): Integer;
    function CompressString(const str: WideString): OleVariant;
    function CompressStringENC(const str: WideString): WideString;
    function DecompressBytes(data: OleVariant): OleVariant;
    function DecompressBytesENC(const str: WideString): OleVariant;
    function DecompressFile(const srcPath: WideString; const destPath: WideString): Integer;
    function DecompressString(data: OleVariant): WideString;
    function DecompressStringENC(const str: WideString): WideString;
    function EndCompressBytes: OleVariant;
    function EndCompressBytesENC: WideString;
    function EndCompressString: OleVariant;
    function EndCompressStringENC: WideString;
    function EndDecompressBytes: OleVariant;
    function EndDecompressBytesENC: OleVariant;
    function EndDecompressString: WideString;
    function EndDecompressStringENC: WideString;
    function MoreCompressBytes(data: OleVariant): OleVariant;
    function MoreCompressBytesENC(data: OleVariant): WideString;
    function MoreCompressString(const str: WideString): OleVariant;
    function MoreCompressStringENC(const str: WideString): WideString;
    function MoreDecompressBytes(data: OleVariant): OleVariant;
    function MoreDecompressBytesENC(const str: WideString): OleVariant;
    function MoreDecompressString(data: OleVariant): WideString;
    function MoreDecompressStringENC(const str: WideString): WideString;
    function UnlockComponent(const unlockCode: WideString): Integer;
    property  ControlInterface: IChilkatCompression read GetControlInterface;
    property  DefaultInterface: IChilkatCompression read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property charset: WideString index 100 read GetWideStringProp write SetWideStringProp stored False;
    property EncodingMode: WideString index 101 read GetWideStringProp write SetWideStringProp stored False;
    property HeartbeatMs: Integer index 102 read GetIntegerProp write SetIntegerProp stored False;
    property Algorithm: WideString index 103 read GetWideStringProp write SetWideStringProp stored False;
    property OnAbortCheck: TChilkatCompressionAbortCheck read FOnAbortCheck write FOnAbortCheck;
    property OnPercentDone: TChilkatCompressionPercentDone read FOnPercentDone write FOnPercentDone;
    property OnProgressInfo: TChilkatCompressionProgressInfo read FOnProgressInfo write FOnProgressInfo;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatCharset
// Help String      : ChilkatCharset Class 9.5.0
// Default Interface: IChilkatCharset
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatCharset = class(TOleControl)
  private
    FIntf: IChilkatCharset;
    function  GetControlInterface: IChilkatCharset;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    function CharsetToCodePage(const charsetName: WideString): Integer;
    function CodePageToCharset(codePage: Integer): WideString;
    function ConvertData(inData: OleVariant): OleVariant;
    function ConvertFile(const srcPath: WideString; const destPath: WideString): Integer;
    function ConvertFileNoPreamble(const srcPath: WideString; const destPath: WideString): Integer;
    function ConvertFromUtf16(uniData: OleVariant): OleVariant;
    function ConvertHtml(inData: OleVariant): OleVariant;
    function ConvertHtmlFile(const srcPath: WideString; const destPath: WideString): Integer;
    function ConvertToUtf16(mbData: OleVariant): OleVariant;
    function EntityEncodeDec(const str: WideString): WideString;
    function EntityEncodeHex(const str: WideString): WideString;
    function GetHtmlCharset(inData: OleVariant): WideString;
    function GetHtmlFileCharset(const htmlFilename: WideString): WideString;
    function HtmlDecodeToStr(const inStr: WideString): WideString;
    function HtmlEntityDecode(inHtml: OleVariant): OleVariant;
    function HtmlEntityDecodeFile(const inFilename: WideString; const destPath: WideString): Integer;
    function IsUnlocked: Integer;
    function LowerCase(const inStr: WideString): WideString;
    function ReadFile(const filename: WideString): OleVariant;
    function ReadFileToString(const filename: WideString; const srcCharset: WideString): WideString;
    procedure SetErrorBytes(data: OleVariant);
    procedure SetErrorString(const str: WideString; const charset: WideString);
    function UnlockComponent(const unlockCode: WideString): Integer;
    function UpperCase(const inStr: WideString): WideString;
    function UrlDecodeStr(const inStr: WideString): WideString;
    function VerifyData(const charset: WideString; inData: OleVariant): Integer;
    function VerifyFile(const charset: WideString; const filename: WideString): Integer;
    function WriteFile(const filename: WideString; fileData: OleVariant): Integer;
    function WriteStringToFile(const str: WideString; const filename: WideString; 
                               const charset: WideString): Integer;
    function ConvertFromUnicode(const inData: WideString): OleVariant;
    function ConvertToUnicode(inData: OleVariant): WideString;
    property  ControlInterface: IChilkatCharset read GetControlInterface;
    property  DefaultInterface: IChilkatCharset read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property LastInputAsHex: WideString index 103 read GetWideStringProp;
    property LastInputAsQP: WideString index 104 read GetWideStringProp;
    property LastOutputAsHex: WideString index 105 read GetWideStringProp;
    property LastOutputAsQP: WideString index 106 read GetWideStringProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property AltToCharset: WideString index 100 read GetWideStringProp write SetWideStringProp stored False;
    property ErrorAction: Integer index 101 read GetIntegerProp write SetIntegerProp stored False;
    property FromCharset: WideString index 102 read GetWideStringProp write SetWideStringProp stored False;
    property SaveLast: Integer index 107 read GetIntegerProp write SetIntegerProp stored False;
    property ToCharset: WideString index 108 read GetWideStringProp write SetWideStringProp stored False;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatCgi
// Help String      : ChilkatCgi Class 9.5.0
// Default Interface: IChilkatCgi
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatCgi = class(TOleControl)
  private
    FIntf: IChilkatCgi;
    function  GetControlInterface: IChilkatCgi;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    property  ControlInterface: IChilkatCgi read GetControlInterface;
    property  DefaultInterface: IChilkatCgi read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatCache
// Help String      : ChilkatCache Class 9.5.0
// Default Interface: IChilkatCache
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatCache = class(TOleControl)
  private
    FIntf: IChilkatCache;
    function  GetControlInterface: IChilkatCache;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    procedure AddRoot(const path: WideString);
    function DeleteAll: Integer;
    function DeleteAllExpired: Integer;
    function DeleteFromCache(const url: WideString): Integer;
    function DeleteOlder(dt: TDateTime): Integer;
    function DeleteOlderDt(const dt: ICkDateTime): Integer;
    function DeleteOlderStr(const dateTimeStr: WideString): Integer;
    function FetchFromCache(const url: WideString): OleVariant;
    function FetchText(const key: WideString): WideString;
    function GetEtag(const url: WideString): WideString;
    function GetExpiration(const url: WideString): TDateTime;
    function GetExpirationDt(const key: WideString): ICkDateTime;
    function GetExpirationStr(const url: WideString): WideString;
    function GetFilename(const url: WideString): WideString;
    function GetRoot(index: Integer): WideString;
    function IsCached(const url: WideString): Integer;
    function SaveText(const key: WideString; expire: TDateTime; const eTag: WideString; 
                      const strData: WideString): Integer;
    function SaveTextDt(const key: WideString; const expire: ICkDateTime; const eTag: WideString; 
                        const strData: WideString): Integer;
    function SaveTextNoExpire(const key: WideString; const eTag: WideString; 
                              const strData: WideString): Integer;
    function SaveTextStr(const key: WideString; const expireDateTimeStr: WideString; 
                         const eTag: WideString; const strData: WideString): Integer;
    function SaveToCache(const url: WideString; expire: TDateTime; const eTag: WideString; 
                         data: OleVariant): Integer;
    function SaveToCacheDt(const url: WideString; const expire: ICkDateTime; 
                           const eTag: WideString; data: OleVariant): Integer;
    function SaveToCacheNoExpire(const url: WideString; const eTag: WideString; data: OleVariant): Integer;
    function SaveToCacheStr(const url: WideString; const expireDateTimeStr: WideString; 
                            const eTag: WideString; data: OleVariant): Integer;
    function UpdateExpiration(const url: WideString; dt: TDateTime): Integer;
    function UpdateExpirationDt(const url: WideString; const dt: ICkDateTime): Integer;
    function UpdateExpirationStr(const url: WideString; const dateTimeStr: WideString): Integer;
    property  ControlInterface: IChilkatCache read GetControlInterface;
    property  DefaultInterface: IChilkatCache read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property LastEtagFetched: WideString index 100 read GetWideStringProp;
    property LastExpirationFetched: TDateTime index 101 read GetTDateTimeProp;
    property LastExpirationFetchedStr: WideString index 102 read GetWideStringProp;
    property LastHitExpired: Integer index 103 read GetIntegerProp;
    property LastKeyFetched: WideString index 104 read GetWideStringProp;
    property NumRoots: Integer index 106 read GetIntegerProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property level: Integer index 105 read GetIntegerProp write SetIntegerProp stored False;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatBz2
// Help String      : ChilkatBz2 Class 9.5.0
// Default Interface: IChilkatBz2
// Def. Intf. DISP? : No
// Event   Interface: _IChilkatEvents
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatBz2AbortCheck = procedure(ASender: TObject; out abort: Integer) of object;
  TChilkatBz2PercentDone = procedure(ASender: TObject; percent: Integer; out abort: Integer) of object;
  TChilkatBz2ProgressInfo = procedure(ASender: TObject; const name: WideString; 
                                                        const value: WideString) of object;

  TChilkatBz2 = class(TOleControl)
  private
    FOnAbortCheck: TChilkatBz2AbortCheck;
    FOnPercentDone: TChilkatBz2PercentDone;
    FOnProgressInfo: TChilkatBz2ProgressInfo;
    FIntf: IChilkatBz2;
    function  GetControlInterface: IChilkatBz2;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    function CompressFile(const inFilename: WideString; const toPath: WideString): Integer;
    function CompressFileToMem(const inFilename: WideString): OleVariant;
    function CompressMemToFile(inData: OleVariant; const toPath: WideString): Integer;
    function CompressMemory(inData: OleVariant): OleVariant;
    function UncompressFile(const inFilename: WideString; const toPath: WideString): Integer;
    function UncompressFileToMem(const inFilename: WideString): OleVariant;
    function UncompressMemToFile(inData: OleVariant; const toPath: WideString): Integer;
    function UncompressMemory(inData: OleVariant): OleVariant;
    function UnlockComponent(const regCode: WideString): Integer;
    property  ControlInterface: IChilkatBz2 read GetControlInterface;
    property  DefaultInterface: IChilkatBz2 read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property HeartbeatMs: Integer index 100 read GetIntegerProp write SetIntegerProp stored False;
    property OnAbortCheck: TChilkatBz2AbortCheck read FOnAbortCheck write FOnAbortCheck;
    property OnPercentDone: TChilkatBz2PercentDone read FOnPercentDone write FOnPercentDone;
    property OnProgressInfo: TChilkatBz2ProgressInfo read FOnProgressInfo write FOnProgressInfo;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatBounce
// Help String      : ChilkatBounce Class 9.5.0
// Default Interface: IChilkatBounce
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatBounce = class(TOleControl)
  private
    FIntf: IChilkatBounce;
    function  GetControlInterface: IChilkatBounce;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    function ExamineEml(const emlFilename: WideString): Integer;
    function ExamineMime(const mimeText: WideString): Integer;
    function UnlockComponent(const unlockCode: WideString): Integer;
    function ExamineEmail(const email: IChilkatEmail): Integer;
    property  ControlInterface: IChilkatBounce read GetControlInterface;
    property  DefaultInterface: IChilkatBounce read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property BounceData: WideString index 100 read GetWideStringProp;
    property BounceType: Integer index 101 read GetIntegerProp;
    property BounceAddress: WideString index 102 read GetWideStringProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TChilkatAtom
// Help String      : ChilkatAtom Class 9.5.0
// Default Interface: IChilkatAtom
// Def. Intf. DISP? : No
// Event   Interface: _IChilkatEvents
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TChilkatAtomAbortCheck = procedure(ASender: TObject; out abort: Integer) of object;
  TChilkatAtomPercentDone = procedure(ASender: TObject; percent: Integer; out abort: Integer) of object;
  TChilkatAtomProgressInfo = procedure(ASender: TObject; const name: WideString; 
                                                         const value: WideString) of object;

  TChilkatAtom = class(TOleControl)
  private
    FOnAbortCheck: TChilkatAtomAbortCheck;
    FOnPercentDone: TChilkatAtomPercentDone;
    FOnProgressInfo: TChilkatAtomProgressInfo;
    FIntf: IChilkatAtom;
    function  GetControlInterface: IChilkatAtom;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
  public
    function GetImplAddrStr: WideString;
    function AddElement(const Tag: WideString; const value: WideString): Integer;
    function AddElementDate(const Tag: WideString; dateTime: TDateTime): Integer;
    function AddElementDateStr(const Tag: WideString; const dateTimeStr: WideString): Integer;
    function AddElementDt(const Tag: WideString; const dateTime: ICkDateTime): Integer;
    function AddElementHtml(const Tag: WideString; const htmlStr: WideString): Integer;
    function AddElementXHtml(const Tag: WideString; const xmlStr: WideString): Integer;
    function AddElementXml(const Tag: WideString; const xmlStr: WideString): Integer;
    procedure AddEntry(const xmlStr: WideString);
    procedure AddLink(const rel: WideString; const href: WideString; const title: WideString; 
                      const typ: WideString);
    procedure AddPerson(const Tag: WideString; const name: WideString; const uri: WideString; 
                        const email: WideString);
    procedure DeleteElement(const Tag: WideString; index: Integer);
    procedure DeleteElementAttr(const Tag: WideString; index: Integer; const attrName: WideString);
    procedure DeletePerson(const Tag: WideString; index: Integer);
    function DownloadAtom(const url: WideString): Integer;
    function GetElement(const Tag: WideString; index: Integer): WideString;
    function GetElementAttr(const Tag: WideString; index: Integer; const attrName: WideString): WideString;
    function GetElementCount(const Tag: WideString): Integer;
    function GetElementDate(const Tag: WideString; index: Integer): TDateTime;
    function GetElementDateStr(const Tag: WideString; index: Integer): WideString;
    function GetElementDt(const Tag: WideString; index: Integer): ICkDateTime;
    function GetEntry(index: Integer): IChilkatAtom;
    function GetLinkHref(const relName: WideString): WideString;
    function GetPersonInfo(const Tag: WideString; index: Integer; const tag2: WideString): WideString;
    function GetTopAttr(const attrName: WideString): WideString;
    function HasElement(const Tag: WideString): Integer;
    function LoadXml(const xmlStr: WideString): Integer;
    procedure NewEntry;
    procedure NewFeed;
    procedure SetElementAttr(const Tag: WideString; index: Integer; const attrName: WideString; 
                             const attrValue: WideString);
    procedure SetTopAttr(const attrName: WideString; const value: WideString);
    function ToXmlString: WideString;
    procedure UpdateElement(const Tag: WideString; index: Integer; const value: WideString);
    procedure UpdateElementDate(const Tag: WideString; index: Integer; dateTime: TDateTime);
    procedure UpdateElementDateStr(const Tag: WideString; index: Integer; 
                                   const dateTimeStr: WideString);
    procedure UpdateElementDt(const Tag: WideString; index: Integer; const dateTime: ICkDateTime);
    procedure UpdateElementHtml(const Tag: WideString; index: Integer; const htmlStr: WideString);
    procedure UpdateElementXHtml(const Tag: WideString; index: Integer; const xmlStr: WideString);
    procedure UpdateElementXml(const Tag: WideString; index: Integer; const xmlStr: WideString);
    procedure UpdatePerson(const Tag: WideString; index: Integer; const name: WideString; 
                           const uri: WideString; const email: WideString);
    property  ControlInterface: IChilkatAtom read GetControlInterface;
    property  DefaultInterface: IChilkatAtom read GetControlInterface;
    property LastErrorHtml: WideString index 1 read GetWideStringProp;
    property LastErrorText: WideString index 2 read GetWideStringProp;
    property LastErrorXml: WideString index 3 read GetWideStringProp;
    property Version: WideString index 4 read GetWideStringProp;
    property NumEntries: Integer index 100 read GetIntegerProp;
  published
    property Anchors;
    property DebugLogFilePath: WideString index 5 read GetWideStringProp write SetWideStringProp stored False;
    property VerboseLogging: Integer index 6 read GetIntegerProp write SetIntegerProp stored False;
    property OnAbortCheck: TChilkatAtomAbortCheck read FOnAbortCheck write FOnAbortCheck;
    property OnPercentDone: TChilkatAtomPercentDone read FOnPercentDone write FOnPercentDone;
    property OnProgressInfo: TChilkatAtomProgressInfo read FOnProgressInfo write FOnProgressInfo;
  end;

procedure Register;

resourcestring
  dtlServerPage = 'ActiveX';

  dtlOcxPage = 'ActiveX';

implementation

uses System.Win.ComObj;

procedure TCkDateTime.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID:      '{0B30402C-CDB2-45D2-B7BC-7C1F78C72C1C}';
    EventIID:     '';
    EventCount:   0;
    EventDispIDs: nil;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
end;

procedure TCkDateTime.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as ICkDateTime;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TCkDateTime.GetControlInterface: ICkDateTime;
begin
  CreateControl;
  Result := FIntf;
end;

function TCkDateTime.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TCkDateTime.AddDays(numDays: Integer): Integer;
begin
  Result := DefaultInterface.AddDays(numDays);
end;

procedure TCkDateTime.DeSerialize(const serializedDateTime: WideString);
begin
  DefaultInterface.DeSerialize(serializedDateTime);
end;

function TCkDateTime.GetAsDosDate(bLocal: Integer): Integer;
begin
  Result := DefaultInterface.GetAsDosDate(bLocal);
end;

function TCkDateTime.GetAsOleDate(bLocal: Integer): Double;
begin
  Result := DefaultInterface.GetAsOleDate(bLocal);
end;

function TCkDateTime.GetAsRfc822(bLocal: Integer): WideString;
begin
  Result := DefaultInterface.GetAsRfc822(bLocal);
end;

function TCkDateTime.GetAsUnixTime(bLocal: Integer): Integer;
begin
  Result := DefaultInterface.GetAsUnixTime(bLocal);
end;

function TCkDateTime.Serialize: WideString;
begin
  Result := DefaultInterface.Serialize;
end;

procedure TCkDateTime.SetFromCurrentSystemTime;
begin
  DefaultInterface.SetFromCurrentSystemTime;
end;

procedure TCkDateTime.SetFromDosDate(bLocal: Integer; t: Integer);
begin
  DefaultInterface.SetFromDosDate(bLocal, t);
end;

procedure TCkDateTime.SetFromOleDate(bLocal: Integer; dt: Double);
begin
  DefaultInterface.SetFromOleDate(bLocal, dt);
end;

function TCkDateTime.SetFromRfc822(const rfc822Str: WideString): Integer;
begin
  Result := DefaultInterface.SetFromRfc822(rfc822Str);
end;

procedure TCkDateTime.SetFromUnixTime(bLocal: Integer; t: Integer);
begin
  DefaultInterface.SetFromUnixTime(bLocal, t);
end;

procedure TCkStringArray.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID:      '{60646F46-D0EA-4BDA-945A-57BD988F1C37}';
    EventIID:     '';
    EventCount:   0;
    EventDispIDs: nil;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
end;

procedure TCkStringArray.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as ICkStringArray;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TCkStringArray.GetControlInterface: ICkStringArray;
begin
  CreateControl;
  Result := FIntf;
end;

function TCkStringArray.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TCkStringArray.Append(const str: WideString): Integer;
begin
  Result := DefaultInterface.Append(str);
end;

function TCkStringArray.AppendSerialized(const encodedStr: WideString): Integer;
begin
  Result := DefaultInterface.AppendSerialized(encodedStr);
end;

procedure TCkStringArray.Clear;
begin
  DefaultInterface.Clear;
end;

function TCkStringArray.Contains(const str: WideString): Integer;
begin
  Result := DefaultInterface.Contains(str);
end;

function TCkStringArray.Find(const str: WideString; firstIndex: Integer): Integer;
begin
  Result := DefaultInterface.Find(str, firstIndex);
end;

function TCkStringArray.FindFirstMatch(const str: WideString; firstIndex: Integer): Integer;
begin
  Result := DefaultInterface.FindFirstMatch(str, firstIndex);
end;

function TCkStringArray.GetString(index: Integer): WideString;
begin
  Result := DefaultInterface.GetString(index);
end;

procedure TCkStringArray.InsertAt(index: Integer; const str: WideString);
begin
  DefaultInterface.InsertAt(index, str);
end;

function TCkStringArray.LastString: WideString;
begin
  Result := DefaultInterface.LastString;
end;

function TCkStringArray.LoadFromFile(const filename: WideString): Integer;
begin
  Result := DefaultInterface.LoadFromFile(filename);
end;

function TCkStringArray.LoadFromFile2(const filename: WideString; const charset: WideString): Integer;
begin
  Result := DefaultInterface.LoadFromFile2(filename, charset);
end;

procedure TCkStringArray.LoadFromText(const str: WideString);
begin
  DefaultInterface.LoadFromText(str);
end;

function TCkStringArray.Pop: WideString;
begin
  Result := DefaultInterface.Pop;
end;

procedure TCkStringArray.Prepend(const str: WideString);
begin
  DefaultInterface.Prepend(str);
end;

procedure TCkStringArray.Remove(const str: WideString);
begin
  DefaultInterface.Remove(str);
end;

function TCkStringArray.RemoveAt(index: Integer): Integer;
begin
  Result := DefaultInterface.RemoveAt(index);
end;

function TCkStringArray.SaveNthToFile(index: Integer; const filename: WideString): Integer;
begin
  Result := DefaultInterface.SaveNthToFile(index, filename);
end;

function TCkStringArray.SaveToFile(const filename: WideString): Integer;
begin
  Result := DefaultInterface.SaveToFile(filename);
end;

function TCkStringArray.SaveToFile2(const filename: WideString; const charset: WideString): Integer;
begin
  Result := DefaultInterface.SaveToFile2(filename, charset);
end;

function TCkStringArray.SaveToText: WideString;
begin
  Result := DefaultInterface.SaveToText;
end;

function TCkStringArray.Serialize: WideString;
begin
  Result := DefaultInterface.Serialize;
end;

procedure TCkStringArray.Sort(ascending: Integer);
begin
  DefaultInterface.Sort(ascending);
end;

procedure TCkStringArray.SplitAndAppend(const str: WideString; const boundary: WideString);
begin
  DefaultInterface.SplitAndAppend(str, boundary);
end;

procedure TCkStringArray.Subtract(const sa: ICkStringArray);
begin
  DefaultInterface.Subtract(sa);
end;

procedure TCkStringArray.Union(const sa: ICkStringArray);
begin
  DefaultInterface.Union(sa);
end;

procedure TChilkatCsp.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID:      '{6A10A7BB-7828-4050-9BD3-F4D2D97C6AB5}';
    EventIID:     '';
    EventCount:   0;
    EventDispIDs: nil;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
end;

procedure TChilkatCsp.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatCsp;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatCsp.GetControlInterface: IChilkatCsp;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatCsp.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TChilkatCsp.GetKeyContainerNames: ICkStringArray;
begin
  Result := DefaultInterface.GetKeyContainerNames;
end;

function TChilkatCsp.HasEncryptAlgorithm(const name: WideString; numBits: Integer): Integer;
begin
  Result := DefaultInterface.HasEncryptAlgorithm(name, numBits);
end;

function TChilkatCsp.HasHashAlgorithm(const name: WideString; numBits: Integer): Integer;
begin
  Result := DefaultInterface.HasHashAlgorithm(name, numBits);
end;

function TChilkatCsp.Initialize: Integer;
begin
  Result := DefaultInterface.Initialize;
end;

function TChilkatCsp.NthEncryptionAlgorithm(index: Integer): WideString;
begin
  Result := DefaultInterface.NthEncryptionAlgorithm(index);
end;

function TChilkatCsp.NthEncryptionNumBits(index: Integer): Integer;
begin
  Result := DefaultInterface.NthEncryptionNumBits(index);
end;

function TChilkatCsp.NthHashAlgorithmName(index: Integer): WideString;
begin
  Result := DefaultInterface.NthHashAlgorithmName(index);
end;

function TChilkatCsp.NthHashNumBits(index: Integer): Integer;
begin
  Result := DefaultInterface.NthHashNumBits(index);
end;

function TChilkatCsp.NthKeyContainerName(index: Integer): WideString;
begin
  Result := DefaultInterface.NthKeyContainerName(index);
end;

function TChilkatCsp.NthKeyExchangeAlgorithm(index: Integer): WideString;
begin
  Result := DefaultInterface.NthKeyExchangeAlgorithm(index);
end;

function TChilkatCsp.NthKeyExchangeNumBits(index: Integer): Integer;
begin
  Result := DefaultInterface.NthKeyExchangeNumBits(index);
end;

function TChilkatCsp.NthSignatureAlgorithm(index: Integer): WideString;
begin
  Result := DefaultInterface.NthSignatureAlgorithm(index);
end;

function TChilkatCsp.NthSignatureNumBits(index: Integer): Integer;
begin
  Result := DefaultInterface.NthSignatureNumBits(index);
end;

function TChilkatCsp.SetEncryptAlgorithm(const name: WideString): Integer;
begin
  Result := DefaultInterface.SetEncryptAlgorithm(name);
end;

function TChilkatCsp.SetHashAlgorithm(const name: WideString): Integer;
begin
  Result := DefaultInterface.SetHashAlgorithm(name);
end;

function TChilkatCsp.SetProviderMicrosoftBase: Integer;
begin
  Result := DefaultInterface.SetProviderMicrosoftBase;
end;

function TChilkatCsp.SetProviderMicrosoftEnhanced: Integer;
begin
  Result := DefaultInterface.SetProviderMicrosoftEnhanced;
end;

function TChilkatCsp.SetProviderMicrosoftRsaAes: Integer;
begin
  Result := DefaultInterface.SetProviderMicrosoftRsaAes;
end;

function TChilkatCsp.SetProviderMicrosoftStrong: Integer;
begin
  Result := DefaultInterface.SetProviderMicrosoftStrong;
end;

procedure TPublicKey.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID:      '{3EDACCBC-87DE-45C5-8885-94B6820BE11A}';
    EventIID:     '';
    EventCount:   0;
    EventDispIDs: nil;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
end;

procedure TPublicKey.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IPublicKey;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TPublicKey.GetControlInterface: IPublicKey;
begin
  CreateControl;
  Result := FIntf;
end;

function TPublicKey.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TPublicKey.GetOpenSslDer: OleVariant;
begin
  Result := DefaultInterface.GetOpenSslDer;
end;

function TPublicKey.GetOpenSslPem: WideString;
begin
  Result := DefaultInterface.GetOpenSslPem;
end;

function TPublicKey.GetRsaDer: OleVariant;
begin
  Result := DefaultInterface.GetRsaDer;
end;

function TPublicKey.GetXml: WideString;
begin
  Result := DefaultInterface.GetXml;
end;

function TPublicKey.LoadOpenSslDer(data: OleVariant): Integer;
begin
  Result := DefaultInterface.LoadOpenSslDer(data);
end;

function TPublicKey.LoadOpenSslDerFile(const path: WideString): Integer;
begin
  Result := DefaultInterface.LoadOpenSslDerFile(path);
end;

function TPublicKey.LoadOpenSslPem(const str: WideString): Integer;
begin
  Result := DefaultInterface.LoadOpenSslPem(str);
end;

function TPublicKey.LoadOpenSslPemFile(const path: WideString): Integer;
begin
  Result := DefaultInterface.LoadOpenSslPemFile(path);
end;

function TPublicKey.LoadPkcs1Pem(const str: WideString): Integer;
begin
  Result := DefaultInterface.LoadPkcs1Pem(str);
end;

function TPublicKey.LoadRsaDer(data: OleVariant): Integer;
begin
  Result := DefaultInterface.LoadRsaDer(data);
end;

function TPublicKey.LoadRsaDerFile(const path: WideString): Integer;
begin
  Result := DefaultInterface.LoadRsaDerFile(path);
end;

function TPublicKey.LoadXml(const xml: WideString): Integer;
begin
  Result := DefaultInterface.LoadXml(xml);
end;

function TPublicKey.LoadXmlFile(const path: WideString): Integer;
begin
  Result := DefaultInterface.LoadXmlFile(path);
end;

function TPublicKey.SaveOpenSslDerFile(const path: WideString): Integer;
begin
  Result := DefaultInterface.SaveOpenSslDerFile(path);
end;

function TPublicKey.SaveOpenSslPemFile(const path: WideString): Integer;
begin
  Result := DefaultInterface.SaveOpenSslPemFile(path);
end;

function TPublicKey.SaveRsaDerFile(const path: WideString): Integer;
begin
  Result := DefaultInterface.SaveRsaDerFile(path);
end;

function TPublicKey.SaveXmlFile(const path: WideString): Integer;
begin
  Result := DefaultInterface.SaveXmlFile(path);
end;

procedure TPrivateKey.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID:      '{DFFB3371-78AA-45C5-B8A2-32BB1DD5C846}';
    EventIID:     '';
    EventCount:   0;
    EventDispIDs: nil;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
end;

procedure TPrivateKey.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IPrivateKey;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TPrivateKey.GetControlInterface: IPrivateKey;
begin
  CreateControl;
  Result := FIntf;
end;

function TPrivateKey.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TPrivateKey.GetPkcs8: OleVariant;
begin
  Result := DefaultInterface.GetPkcs8;
end;

function TPrivateKey.GetPkcs8Encrypted(const password: WideString): OleVariant;
begin
  Result := DefaultInterface.GetPkcs8Encrypted(password);
end;

function TPrivateKey.GetPkcs8EncryptedPem(const password: WideString): WideString;
begin
  Result := DefaultInterface.GetPkcs8EncryptedPem(password);
end;

function TPrivateKey.GetPkcs8Pem: WideString;
begin
  Result := DefaultInterface.GetPkcs8Pem;
end;

function TPrivateKey.GetRsaDer: OleVariant;
begin
  Result := DefaultInterface.GetRsaDer;
end;

function TPrivateKey.GetRsaPem: WideString;
begin
  Result := DefaultInterface.GetRsaPem;
end;

function TPrivateKey.GetXml: WideString;
begin
  Result := DefaultInterface.GetXml;
end;

function TPrivateKey.LoadEncryptedPem(const pemStr: WideString; const password: WideString): Integer;
begin
  Result := DefaultInterface.LoadEncryptedPem(pemStr, password);
end;

function TPrivateKey.LoadEncryptedPemFile(const path: WideString; const password: WideString): Integer;
begin
  Result := DefaultInterface.LoadEncryptedPemFile(path, password);
end;

function TPrivateKey.LoadPem(const str: WideString): Integer;
begin
  Result := DefaultInterface.LoadPem(str);
end;

function TPrivateKey.LoadPemFile(const path: WideString): Integer;
begin
  Result := DefaultInterface.LoadPemFile(path);
end;

function TPrivateKey.LoadPkcs8(data: OleVariant): Integer;
begin
  Result := DefaultInterface.LoadPkcs8(data);
end;

function TPrivateKey.LoadPkcs8Encrypted(data: OleVariant; const password: WideString): Integer;
begin
  Result := DefaultInterface.LoadPkcs8Encrypted(data, password);
end;

function TPrivateKey.LoadPkcs8EncryptedFile(const path: WideString; const password: WideString): Integer;
begin
  Result := DefaultInterface.LoadPkcs8EncryptedFile(path, password);
end;

function TPrivateKey.LoadPkcs8File(const path: WideString): Integer;
begin
  Result := DefaultInterface.LoadPkcs8File(path);
end;

function TPrivateKey.LoadPvk(data: OleVariant; const password: WideString): Integer;
begin
  Result := DefaultInterface.LoadPvk(data, password);
end;

function TPrivateKey.LoadPvkFile(const path: WideString; const password: WideString): Integer;
begin
  Result := DefaultInterface.LoadPvkFile(path, password);
end;

function TPrivateKey.LoadRsaDer(data: OleVariant): Integer;
begin
  Result := DefaultInterface.LoadRsaDer(data);
end;

function TPrivateKey.LoadRsaDerFile(const path: WideString): Integer;
begin
  Result := DefaultInterface.LoadRsaDerFile(path);
end;

function TPrivateKey.LoadXml(const xml: WideString): Integer;
begin
  Result := DefaultInterface.LoadXml(xml);
end;

function TPrivateKey.LoadXmlFile(const path: WideString): Integer;
begin
  Result := DefaultInterface.LoadXmlFile(path);
end;

function TPrivateKey.SavePkcs8EncryptedFile(const password: WideString; const path: WideString): Integer;
begin
  Result := DefaultInterface.SavePkcs8EncryptedFile(password, path);
end;

function TPrivateKey.SavePkcs8EncryptedPemFile(const password: WideString; const path: WideString): Integer;
begin
  Result := DefaultInterface.SavePkcs8EncryptedPemFile(password, path);
end;

function TPrivateKey.SavePkcs8File(const path: WideString): Integer;
begin
  Result := DefaultInterface.SavePkcs8File(path);
end;

function TPrivateKey.SavePkcs8PemFile(const path: WideString): Integer;
begin
  Result := DefaultInterface.SavePkcs8PemFile(path);
end;

function TPrivateKey.SaveRsaDerFile(const path: WideString): Integer;
begin
  Result := DefaultInterface.SaveRsaDerFile(path);
end;

function TPrivateKey.SaveRsaPemFile(const path: WideString): Integer;
begin
  Result := DefaultInterface.SaveRsaPemFile(path);
end;

function TPrivateKey.SaveXmlFile(const path: WideString): Integer;
begin
  Result := DefaultInterface.SaveXmlFile(path);
end;

procedure TChilkatCert.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID:      '{B4EC2631-0DC1-4791-B691-BE333E574CC2}';
    EventIID:     '';
    EventCount:   0;
    EventDispIDs: nil;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
end;

procedure TChilkatCert.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatCert;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatCert.GetControlInterface: IChilkatCert;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatCert.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TChilkatCert.CheckRevoked: Integer;
begin
  Result := DefaultInterface.CheckRevoked;
end;

function TChilkatCert.ExportCertDer: OleVariant;
begin
  Result := DefaultInterface.ExportCertDer;
end;

function TChilkatCert.ExportCertDerFile(const path: WideString): Integer;
begin
  Result := DefaultInterface.ExportCertDerFile(path);
end;

function TChilkatCert.ExportCertPem: WideString;
begin
  Result := DefaultInterface.ExportCertPem;
end;

function TChilkatCert.ExportCertPemFile(const path: WideString): Integer;
begin
  Result := DefaultInterface.ExportCertPemFile(path);
end;

function TChilkatCert.ExportCertXml: WideString;
begin
  Result := DefaultInterface.ExportCertXml;
end;

function TChilkatCert.ExportPrivateKey: IPrivateKey;
begin
  Result := DefaultInterface.ExportPrivateKey;
end;

function TChilkatCert.ExportPublicKey: IPublicKey;
begin
  Result := DefaultInterface.ExportPublicKey;
end;

function TChilkatCert.ExportToPfxFile(const pfxFilename: WideString; const password: WideString; 
                                      bIncludeChain: Integer): Integer;
begin
  Result := DefaultInterface.ExportToPfxFile(pfxFilename, password, bIncludeChain);
end;

function TChilkatCert.FindIssuer: IChilkatCert;
begin
  Result := DefaultInterface.FindIssuer;
end;

function TChilkatCert.GetEncoded: WideString;
begin
  Result := DefaultInterface.GetEncoded;
end;

function TChilkatCert.GetPrivateKeyPem: WideString;
begin
  Result := DefaultInterface.GetPrivateKeyPem;
end;

function TChilkatCert.GetValidFromDt: ICkDateTime;
begin
  Result := DefaultInterface.GetValidFromDt;
end;

function TChilkatCert.GetValidToDt: ICkDateTime;
begin
  Result := DefaultInterface.GetValidToDt;
end;

function TChilkatCert.HasPrivateKey: Integer;
begin
  Result := DefaultInterface.HasPrivateKey;
end;

function TChilkatCert.LinkPrivateKey(const KeyContainerName: WideString; bMachineKeyset: Integer; 
                                     bForSigning: Integer): Integer;
begin
  Result := DefaultInterface.LinkPrivateKey(KeyContainerName, bMachineKeyset, bForSigning);
end;

function TChilkatCert.LoadByCommonName(const cn: WideString): Integer;
begin
  Result := DefaultInterface.LoadByCommonName(cn);
end;

function TChilkatCert.LoadByEmailAddress(const emailAddress: WideString): Integer;
begin
  Result := DefaultInterface.LoadByEmailAddress(emailAddress);
end;

function TChilkatCert.LoadByIssuerAndSerialNumber(const IssuerCN: WideString; 
                                                  const serialNum: WideString): Integer;
begin
  Result := DefaultInterface.LoadByIssuerAndSerialNumber(IssuerCN, serialNum);
end;

function TChilkatCert.LoadFromBase64(const encodedCert: WideString): Integer;
begin
  Result := DefaultInterface.LoadFromBase64(encodedCert);
end;

function TChilkatCert.LoadFromBinary(data: OleVariant): Integer;
begin
  Result := DefaultInterface.LoadFromBinary(data);
end;

function TChilkatCert.LoadFromFile(const path: WideString): Integer;
begin
  Result := DefaultInterface.LoadFromFile(path);
end;

function TChilkatCert.LoadPfxData(pfxData: OleVariant; const password: WideString): Integer;
begin
  Result := DefaultInterface.LoadPfxData(pfxData, password);
end;

function TChilkatCert.LoadPfxFile(const pfxPath: WideString; const password: WideString): Integer;
begin
  Result := DefaultInterface.LoadPfxFile(pfxPath, password);
end;

function TChilkatCert.PemFileToDerFile(const fromPath: WideString; const toPath: WideString): Integer;
begin
  Result := DefaultInterface.PemFileToDerFile(fromPath, toPath);
end;

function TChilkatCert.SaveToFile(const path: WideString): Integer;
begin
  Result := DefaultInterface.SaveToFile(path);
end;

function TChilkatCert.SetFromEncoded(const encodedCert: WideString): Integer;
begin
  Result := DefaultInterface.SetFromEncoded(encodedCert);
end;

function TChilkatCert.SetPrivateKey(const privKey: IPrivateKey): Integer;
begin
  Result := DefaultInterface.SetPrivateKey(privKey);
end;

function TChilkatCert.SetPrivateKeyPem(const privKeyPem: WideString): Integer;
begin
  Result := DefaultInterface.SetPrivateKeyPem(privKeyPem);
end;

function TChilkatCert.ExportToPfxData(const password: WideString; includeCertChain: Integer): OleVariant;
begin
  Result := DefaultInterface.ExportToPfxData(password, includeCertChain);
end;

function TChilkatCert.UseCertVault(const vault: IChilkatXmlCertVault): Integer;
begin
  Result := DefaultInterface.UseCertVault(vault);
end;

function TChilkatCert.GetCertChain: IChilkatCertChain;
begin
  Result := DefaultInterface.GetCertChain;
end;

function TChilkatCert.VerifySignature: Integer;
begin
  Result := DefaultInterface.VerifySignature;
end;

procedure TChilkatCertStore.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID:      '{00E685A8-7AE9-4DC5-8C78-54C03A8646FC}';
    EventIID:     '';
    EventCount:   0;
    EventDispIDs: nil;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
end;

procedure TChilkatCertStore.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatCertStore;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatCertStore.GetControlInterface: IChilkatCertStore;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatCertStore.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TChilkatCertStore.AddCertificate(const cert: IChilkatCert): Integer;
begin
  Result := DefaultInterface.AddCertificate(cert);
end;

function TChilkatCertStore.CreateFileStore(const filename: WideString): Integer;
begin
  Result := DefaultInterface.CreateFileStore(filename);
end;

function TChilkatCertStore.CreateMemoryStore: Integer;
begin
  Result := DefaultInterface.CreateMemoryStore;
end;

function TChilkatCertStore.CreateRegistryStore(const regRoot: WideString; const regPath: WideString): Integer;
begin
  Result := DefaultInterface.CreateRegistryStore(regRoot, regPath);
end;

function TChilkatCertStore.FindCertByRfc822Name(const name: WideString): IChilkatCert;
begin
  Result := DefaultInterface.FindCertByRfc822Name(name);
end;

function TChilkatCertStore.FindCertBySerial(const str: WideString): IChilkatCert;
begin
  Result := DefaultInterface.FindCertBySerial(str);
end;

function TChilkatCertStore.FindCertBySha1Thumbprint(const str: WideString): IChilkatCert;
begin
  Result := DefaultInterface.FindCertBySha1Thumbprint(str);
end;

function TChilkatCertStore.FindCertBySubject(const str: WideString): IChilkatCert;
begin
  Result := DefaultInterface.FindCertBySubject(str);
end;

function TChilkatCertStore.FindCertBySubjectCN(const str: WideString): IChilkatCert;
begin
  Result := DefaultInterface.FindCertBySubjectCN(str);
end;

function TChilkatCertStore.FindCertBySubjectE(const str: WideString): IChilkatCert;
begin
  Result := DefaultInterface.FindCertBySubjectE(str);
end;

function TChilkatCertStore.FindCertBySubjectO(const str: WideString): IChilkatCert;
begin
  Result := DefaultInterface.FindCertBySubjectO(str);
end;

function TChilkatCertStore.FindCertForEmail(const emailAddress: WideString): IChilkatCert;
begin
  Result := DefaultInterface.FindCertForEmail(emailAddress);
end;

function TChilkatCertStore.GetCertificate(index: Integer): IChilkatCert;
begin
  Result := DefaultInterface.GetCertificate(index);
end;

function TChilkatCertStore.GetEmailCert(index: Integer): IChilkatCert;
begin
  Result := DefaultInterface.GetEmailCert(index);
end;

function TChilkatCertStore.LoadPemFile(const pemPath: WideString): Integer;
begin
  Result := DefaultInterface.LoadPemFile(pemPath);
end;

function TChilkatCertStore.LoadPemStr(const pemString: WideString): Integer;
begin
  Result := DefaultInterface.LoadPemStr(pemString);
end;

function TChilkatCertStore.LoadPfxData(pfxData: OleVariant; const password: WideString): Integer;
begin
  Result := DefaultInterface.LoadPfxData(pfxData, password);
end;

function TChilkatCertStore.LoadPfxFile(const pfxFilename: WideString; const password: WideString): Integer;
begin
  Result := DefaultInterface.LoadPfxFile(pfxFilename, password);
end;

function TChilkatCertStore.OpenCurrentUserStore(readOnly: Integer): Integer;
begin
  Result := DefaultInterface.OpenCurrentUserStore(readOnly);
end;

function TChilkatCertStore.OpenFileStore(const filename: WideString; readOnly: Integer): Integer;
begin
  Result := DefaultInterface.OpenFileStore(filename, readOnly);
end;

function TChilkatCertStore.OpenLocalSystemStore(readOnly: Integer): Integer;
begin
  Result := DefaultInterface.OpenLocalSystemStore(readOnly);
end;

function TChilkatCertStore.OpenRegistryStore(const regRoot: WideString; const regPath: WideString; 
                                             readOnly: Integer): Integer;
begin
  Result := DefaultInterface.OpenRegistryStore(regRoot, regPath, readOnly);
end;

function TChilkatCertStore.RemoveCertificate(const cert: IChilkatCert): Integer;
begin
  Result := DefaultInterface.RemoveCertificate(cert);
end;

function TChilkatCertStore.OpenChilkatStore(readOnly: Integer): Integer;
begin
  Result := DefaultInterface.OpenChilkatStore(readOnly);
end;

function TChilkatCertStore.OpenOutlookStore(readOnly: Integer): Integer;
begin
  Result := DefaultInterface.OpenOutlookStore(readOnly);
end;

procedure TChilkatCrypt2.InitControlData;
const
  CEventDispIDs: array [0..2] of DWORD = (
    $00000001, $00000002, $00000003);
  CControlData: TControlData2 = (
    ClassID:      '{1AF44DC7-C896-46BA-B45B-C168FA7612A6}';
    EventIID:     '{91D24DB1-0F9E-4E77-B629-70BEE2F61D36}';
    EventCount:   3;
    EventDispIDs: @CEventDispIDs;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
  TControlData2(CControlData).FirstEventOfs := UIntPtr(@@FOnAbortCheck) - UIntPtr(Self);
end;

procedure TChilkatCrypt2.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatCrypt2;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatCrypt2.GetControlInterface: IChilkatCrypt2;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatCrypt2.Get_IV: OleVariant;
begin
  Result := DefaultInterface.IV;
end;

procedure TChilkatCrypt2.Set_IV(pVal: OleVariant);
begin
  DefaultInterface.IV := pVal;
end;

function TChilkatCrypt2.Get_Salt: OleVariant;
begin
  Result := DefaultInterface.Salt;
end;

procedure TChilkatCrypt2.Set_Salt(pVal: OleVariant);
begin
  DefaultInterface.Salt := pVal;
end;

function TChilkatCrypt2.Get_SecretKey: OleVariant;
begin
  Result := DefaultInterface.SecretKey;
end;

procedure TChilkatCrypt2.Set_SecretKey(pVal: OleVariant);
begin
  DefaultInterface.SecretKey := pVal;
end;

function TChilkatCrypt2.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

procedure TChilkatCrypt2.AddEncryptCert(const cert: IChilkatCert);
begin
  DefaultInterface.AddEncryptCert(cert);
end;

function TChilkatCrypt2.AddPfxSourceData(pfxData: OleVariant; const password: WideString): Integer;
begin
  Result := DefaultInterface.AddPfxSourceData(pfxData, password);
end;

function TChilkatCrypt2.AddPfxSourceFile(const pfxFilePath: WideString; const password: WideString): Integer;
begin
  Result := DefaultInterface.AddPfxSourceFile(pfxFilePath, password);
end;

function TChilkatCrypt2.ByteSwap4321(data: OleVariant): OleVariant;
begin
  Result := DefaultInterface.ByteSwap4321(data);
end;

function TChilkatCrypt2.BytesToString(inData: OleVariant; const charset: WideString): WideString;
begin
  Result := DefaultInterface.BytesToString(inData, charset);
end;

function TChilkatCrypt2.CkDecryptFile(const srcFile: WideString; const destFile: WideString): Integer;
begin
  Result := DefaultInterface.CkDecryptFile(srcFile, destFile);
end;

function TChilkatCrypt2.CkEncryptFile(const srcFile: WideString; const destFile: WideString): Integer;
begin
  Result := DefaultInterface.CkEncryptFile(srcFile, destFile);
end;

procedure TChilkatCrypt2.ClearEncryptCerts;
begin
  DefaultInterface.ClearEncryptCerts;
end;

function TChilkatCrypt2.CompressBytes(data: OleVariant): OleVariant;
begin
  Result := DefaultInterface.CompressBytes(data);
end;

function TChilkatCrypt2.CompressBytesENC(data: OleVariant): WideString;
begin
  Result := DefaultInterface.CompressBytesENC(data);
end;

function TChilkatCrypt2.CompressString(const str: WideString): OleVariant;
begin
  Result := DefaultInterface.CompressString(str);
end;

function TChilkatCrypt2.CompressStringENC(const str: WideString): WideString;
begin
  Result := DefaultInterface.CompressStringENC(str);
end;

function TChilkatCrypt2.CreateDetachedSignature(const filename: WideString; 
                                                const sigFile: WideString): Integer;
begin
  Result := DefaultInterface.CreateDetachedSignature(filename, sigFile);
end;

function TChilkatCrypt2.CreateP7M(const inFilename: WideString; const p7mFilename: WideString): Integer;
begin
  Result := DefaultInterface.CreateP7M(inFilename, p7mFilename);
end;

function TChilkatCrypt2.CreateP7S(const inFilename: WideString; const p7sFilename: WideString): Integer;
begin
  Result := DefaultInterface.CreateP7S(inFilename, p7sFilename);
end;

function TChilkatCrypt2.Decode(const str: WideString; const encoding: WideString): OleVariant;
begin
  Result := DefaultInterface.Decode(str, encoding);
end;

function TChilkatCrypt2.DecodeString(const inStr: WideString; const charset: WideString; 
                                     const encoding: WideString): WideString;
begin
  Result := DefaultInterface.DecodeString(inStr, charset, encoding);
end;

function TChilkatCrypt2.DecryptBytes(data: OleVariant): OleVariant;
begin
  Result := DefaultInterface.DecryptBytes(data);
end;

function TChilkatCrypt2.DecryptBytesENC(const str: WideString): OleVariant;
begin
  Result := DefaultInterface.DecryptBytesENC(str);
end;

function TChilkatCrypt2.DecryptEncoded(const str: WideString): WideString;
begin
  Result := DefaultInterface.DecryptEncoded(str);
end;

function TChilkatCrypt2.DecryptString(data: OleVariant): WideString;
begin
  Result := DefaultInterface.DecryptString(data);
end;

function TChilkatCrypt2.DecryptStringENC(const str: WideString): WideString;
begin
  Result := DefaultInterface.DecryptStringENC(str);
end;

function TChilkatCrypt2.Encode(data: OleVariant; const encoding: WideString): WideString;
begin
  Result := DefaultInterface.Encode(data, encoding);
end;

function TChilkatCrypt2.EncodeString(const inStr: WideString; const charset: WideString; 
                                     const encoding: WideString): WideString;
begin
  Result := DefaultInterface.EncodeString(inStr, charset, encoding);
end;

function TChilkatCrypt2.EncryptBytes(data: OleVariant): OleVariant;
begin
  Result := DefaultInterface.EncryptBytes(data);
end;

function TChilkatCrypt2.EncryptBytesENC(data: OleVariant): WideString;
begin
  Result := DefaultInterface.EncryptBytesENC(data);
end;

function TChilkatCrypt2.EncryptEncoded(const str: WideString): WideString;
begin
  Result := DefaultInterface.EncryptEncoded(str);
end;

function TChilkatCrypt2.EncryptString(const str: WideString): OleVariant;
begin
  Result := DefaultInterface.EncryptString(str);
end;

function TChilkatCrypt2.EncryptStringENC(const str: WideString): WideString;
begin
  Result := DefaultInterface.EncryptStringENC(str);
end;

function TChilkatCrypt2.GenEncodedSecretKey(const password: WideString; const encoding: WideString): WideString;
begin
  Result := DefaultInterface.GenEncodedSecretKey(password, encoding);
end;

function TChilkatCrypt2.GenRandomBytesENC(numBytes: Integer): WideString;
begin
  Result := DefaultInterface.GenRandomBytesENC(numBytes);
end;

function TChilkatCrypt2.GenerateSecretKey(const password: WideString): OleVariant;
begin
  Result := DefaultInterface.GenerateSecretKey(password);
end;

function TChilkatCrypt2.GetEncodedIV(const encoding: WideString): WideString;
begin
  Result := DefaultInterface.GetEncodedIV(encoding);
end;

function TChilkatCrypt2.GetEncodedKey(const encoding: WideString): WideString;
begin
  Result := DefaultInterface.GetEncodedKey(encoding);
end;

function TChilkatCrypt2.GetEncodedSalt(const encoding: WideString): WideString;
begin
  Result := DefaultInterface.GetEncodedSalt(encoding);
end;

function TChilkatCrypt2.GetLastCert: IChilkatCert;
begin
  Result := DefaultInterface.GetLastCert;
end;

function TChilkatCrypt2.GetSignatureSigningTime(index: Integer): TDateTime;
begin
  Result := DefaultInterface.GetSignatureSigningTime(index);
end;

function TChilkatCrypt2.GetSignatureSigningTimeStr(index: Integer): WideString;
begin
  Result := DefaultInterface.GetSignatureSigningTimeStr(index);
end;

function TChilkatCrypt2.GetSignerCert(index: Integer): IChilkatCert;
begin
  Result := DefaultInterface.GetSignerCert(index);
end;

function TChilkatCrypt2.HasSignatureSigningTime(index: Integer): Integer;
begin
  Result := DefaultInterface.HasSignatureSigningTime(index);
end;

function TChilkatCrypt2.HashBeginBytes(data: OleVariant): Integer;
begin
  Result := DefaultInterface.HashBeginBytes(data);
end;

function TChilkatCrypt2.HashBeginString(const strData: WideString): Integer;
begin
  Result := DefaultInterface.HashBeginString(strData);
end;

function TChilkatCrypt2.HashBytes(data: OleVariant): OleVariant;
begin
  Result := DefaultInterface.HashBytes(data);
end;

function TChilkatCrypt2.HashBytesENC(data: OleVariant): WideString;
begin
  Result := DefaultInterface.HashBytesENC(data);
end;

function TChilkatCrypt2.HashFile(const filename: WideString): OleVariant;
begin
  Result := DefaultInterface.HashFile(filename);
end;

function TChilkatCrypt2.HashFileENC(const filename: WideString): WideString;
begin
  Result := DefaultInterface.HashFileENC(filename);
end;

function TChilkatCrypt2.HashFinal: OleVariant;
begin
  Result := DefaultInterface.HashFinal;
end;

function TChilkatCrypt2.HashFinalENC: WideString;
begin
  Result := DefaultInterface.HashFinalENC;
end;

function TChilkatCrypt2.HashMoreBytes(data: OleVariant): Integer;
begin
  Result := DefaultInterface.HashMoreBytes(data);
end;

function TChilkatCrypt2.HashMoreString(const strData: WideString): Integer;
begin
  Result := DefaultInterface.HashMoreString(strData);
end;

function TChilkatCrypt2.HashString(const str: WideString): OleVariant;
begin
  Result := DefaultInterface.HashString(str);
end;

function TChilkatCrypt2.HashStringENC(const str: WideString): WideString;
begin
  Result := DefaultInterface.HashStringENC(str);
end;

function TChilkatCrypt2.HmacBytes(inBytes: OleVariant): OleVariant;
begin
  Result := DefaultInterface.HmacBytes(inBytes);
end;

function TChilkatCrypt2.HmacBytesENC(inBytes: OleVariant): WideString;
begin
  Result := DefaultInterface.HmacBytesENC(inBytes);
end;

function TChilkatCrypt2.HmacString(const inText: WideString): OleVariant;
begin
  Result := DefaultInterface.HmacString(inText);
end;

function TChilkatCrypt2.HmacStringENC(const inText: WideString): WideString;
begin
  Result := DefaultInterface.HmacStringENC(inText);
end;

function TChilkatCrypt2.InflateBytes(data: OleVariant): OleVariant;
begin
  Result := DefaultInterface.InflateBytes(data);
end;

function TChilkatCrypt2.InflateBytesENC(const str: WideString): OleVariant;
begin
  Result := DefaultInterface.InflateBytesENC(str);
end;

function TChilkatCrypt2.InflateString(data: OleVariant): WideString;
begin
  Result := DefaultInterface.InflateString(data);
end;

function TChilkatCrypt2.InflateStringENC(const str: WideString): WideString;
begin
  Result := DefaultInterface.InflateStringENC(str);
end;

function TChilkatCrypt2.IsUnlocked: Integer;
begin
  Result := DefaultInterface.IsUnlocked;
end;

function TChilkatCrypt2.MySqlAesDecrypt(const strEncrypted: WideString; const strKey: WideString): WideString;
begin
  Result := DefaultInterface.MySqlAesDecrypt(strEncrypted, strKey);
end;

function TChilkatCrypt2.MySqlAesEncrypt(const strData: WideString; const strKey: WideString): WideString;
begin
  Result := DefaultInterface.MySqlAesEncrypt(strData, strKey);
end;

function TChilkatCrypt2.OpaqueSignBytes(data: OleVariant): OleVariant;
begin
  Result := DefaultInterface.OpaqueSignBytes(data);
end;

function TChilkatCrypt2.OpaqueSignBytesENC(data: OleVariant): WideString;
begin
  Result := DefaultInterface.OpaqueSignBytesENC(data);
end;

function TChilkatCrypt2.OpaqueSignString(const str: WideString): OleVariant;
begin
  Result := DefaultInterface.OpaqueSignString(str);
end;

function TChilkatCrypt2.OpaqueSignStringENC(const str: WideString): WideString;
begin
  Result := DefaultInterface.OpaqueSignStringENC(str);
end;

function TChilkatCrypt2.OpaqueVerifyBytes(p7s: OleVariant): OleVariant;
begin
  Result := DefaultInterface.OpaqueVerifyBytes(p7s);
end;

function TChilkatCrypt2.OpaqueVerifyBytesENC(const p7s: WideString): OleVariant;
begin
  Result := DefaultInterface.OpaqueVerifyBytesENC(p7s);
end;

function TChilkatCrypt2.OpaqueVerifyString(p7s: OleVariant): WideString;
begin
  Result := DefaultInterface.OpaqueVerifyString(p7s);
end;

function TChilkatCrypt2.OpaqueVerifyStringENC(const p7s: WideString): WideString;
begin
  Result := DefaultInterface.OpaqueVerifyStringENC(p7s);
end;

function TChilkatCrypt2.Pbkdf1(const password: WideString; const charset: WideString; 
                               const hashAlg: WideString; const Salt: WideString; 
                               IterationCount: Integer; outputKeyBitLen: Integer; 
                               const encoding: WideString): WideString;
begin
  Result := DefaultInterface.Pbkdf1(password, charset, hashAlg, Salt, IterationCount, 
                                    outputKeyBitLen, encoding);
end;

function TChilkatCrypt2.Pbkdf2(const password: WideString; const charset: WideString; 
                               const hashAlg: WideString; const Salt: WideString; 
                               IterationCount: Integer; outputKeyBitLen: Integer; 
                               const encoding: WideString): WideString;
begin
  Result := DefaultInterface.Pbkdf2(password, charset, hashAlg, Salt, IterationCount, 
                                    outputKeyBitLen, encoding);
end;

procedure TChilkatCrypt2.RandomizeIV;
begin
  DefaultInterface.RandomizeIV;
end;

procedure TChilkatCrypt2.RandomizeKey;
begin
  DefaultInterface.RandomizeKey;
end;

function TChilkatCrypt2.ReEncode(const data: WideString; const fromEncoding: WideString; 
                                 const toEncoding: WideString): WideString;
begin
  Result := DefaultInterface.ReEncode(data, fromEncoding, toEncoding);
end;

function TChilkatCrypt2.ReadFile(const filename: WideString): OleVariant;
begin
  Result := DefaultInterface.ReadFile(filename);
end;

function TChilkatCrypt2.SetCSP(const csp: IChilkatCsp): Integer;
begin
  Result := DefaultInterface.SetCSP(csp);
end;

function TChilkatCrypt2.SetDecryptCert(const cert: IChilkatCert): Integer;
begin
  Result := DefaultInterface.SetDecryptCert(cert);
end;

function TChilkatCrypt2.SetDecryptCert2(const cert: IChilkatCert; const key: IPrivateKey): Integer;
begin
  Result := DefaultInterface.SetDecryptCert2(cert, key);
end;

procedure TChilkatCrypt2.SetEncodedIV(const ivStr: WideString; const encoding: WideString);
begin
  DefaultInterface.SetEncodedIV(ivStr, encoding);
end;

procedure TChilkatCrypt2.SetEncodedKey(const keyStr: WideString; const encoding: WideString);
begin
  DefaultInterface.SetEncodedKey(keyStr, encoding);
end;

procedure TChilkatCrypt2.SetEncodedSalt(const saltStr: WideString; const encoding: WideString);
begin
  DefaultInterface.SetEncodedSalt(saltStr, encoding);
end;

function TChilkatCrypt2.SetEncryptCert(const cert: IChilkatCert): Integer;
begin
  Result := DefaultInterface.SetEncryptCert(cert);
end;

procedure TChilkatCrypt2.SetHmacKeyBytes(keyBytes: OleVariant);
begin
  DefaultInterface.SetHmacKeyBytes(keyBytes);
end;

procedure TChilkatCrypt2.SetHmacKeyEncoded(const key: WideString; const encoding: WideString);
begin
  DefaultInterface.SetHmacKeyEncoded(key, encoding);
end;

procedure TChilkatCrypt2.SetHmacKeyString(const key: WideString);
begin
  DefaultInterface.SetHmacKeyString(key);
end;

procedure TChilkatCrypt2.SetSecretKeyViaPassword(const password: WideString);
begin
  DefaultInterface.SetSecretKeyViaPassword(password);
end;

function TChilkatCrypt2.SetSigningCert(const cert: IChilkatCert): Integer;
begin
  Result := DefaultInterface.SetSigningCert(cert);
end;

function TChilkatCrypt2.SetSigningCert2(const cert: IChilkatCert; const key: IPrivateKey): Integer;
begin
  Result := DefaultInterface.SetSigningCert2(cert, key);
end;

function TChilkatCrypt2.SetVerifyCert(const cert: IChilkatCert): Integer;
begin
  Result := DefaultInterface.SetVerifyCert(cert);
end;

function TChilkatCrypt2.SignBytes(data: OleVariant): OleVariant;
begin
  Result := DefaultInterface.SignBytes(data);
end;

function TChilkatCrypt2.SignBytesENC(data: OleVariant): WideString;
begin
  Result := DefaultInterface.SignBytesENC(data);
end;

function TChilkatCrypt2.SignString(const str: WideString): OleVariant;
begin
  Result := DefaultInterface.SignString(str);
end;

function TChilkatCrypt2.SignStringENC(const str: WideString): WideString;
begin
  Result := DefaultInterface.SignStringENC(str);
end;

function TChilkatCrypt2.StringToBytes(const inStr: WideString; const charset: WideString): OleVariant;
begin
  Result := DefaultInterface.StringToBytes(inStr, charset);
end;

function TChilkatCrypt2.TrimEndingWith(const inStr: WideString; const ending: WideString): WideString;
begin
  Result := DefaultInterface.TrimEndingWith(inStr, ending);
end;

function TChilkatCrypt2.UnlockComponent(const b1: WideString): Integer;
begin
  Result := DefaultInterface.UnlockComponent(b1);
end;

function TChilkatCrypt2.VerifyBytes(data: OleVariant; sig: OleVariant): Integer;
begin
  Result := DefaultInterface.VerifyBytes(data, sig);
end;

function TChilkatCrypt2.VerifyBytesENC(data: OleVariant; const encodedSig: WideString): Integer;
begin
  Result := DefaultInterface.VerifyBytesENC(data, encodedSig);
end;

function TChilkatCrypt2.VerifyDetachedSignature(const filename: WideString; 
                                                const sigFile: WideString): Integer;
begin
  Result := DefaultInterface.VerifyDetachedSignature(filename, sigFile);
end;

function TChilkatCrypt2.VerifyP7M(const p7mPath: WideString; const destPath: WideString): Integer;
begin
  Result := DefaultInterface.VerifyP7M(p7mPath, destPath);
end;

function TChilkatCrypt2.VerifyP7S(const inFilename: WideString; const p7sFilename: WideString): Integer;
begin
  Result := DefaultInterface.VerifyP7S(inFilename, p7sFilename);
end;

function TChilkatCrypt2.VerifyString(const str: WideString; sig: OleVariant): Integer;
begin
  Result := DefaultInterface.VerifyString(str, sig);
end;

function TChilkatCrypt2.VerifyStringENC(const str: WideString; const encodedSig: WideString): Integer;
begin
  Result := DefaultInterface.VerifyStringENC(str, encodedSig);
end;

function TChilkatCrypt2.WriteFile(const filename: WideString; fileData: OleVariant): Integer;
begin
  Result := DefaultInterface.WriteFile(filename, fileData);
end;

function TChilkatCrypt2.Shorten(inData: OleVariant; numBytes: Integer): OleVariant;
begin
  Result := DefaultInterface.Shorten(inData, numBytes);
end;

function TChilkatCrypt2.CrcFile(const crcAlg: WideString; const path: WideString): Integer;
begin
  Result := DefaultInterface.CrcFile(crcAlg, path);
end;

function TChilkatCrypt2.CrcBytes(const crcAlg: WideString; byteData: OleVariant): Integer;
begin
  Result := DefaultInterface.CrcBytes(crcAlg, byteData);
end;

function TChilkatCrypt2.UseCertVault(const vault: IChilkatXmlCertVault): Integer;
begin
  Result := DefaultInterface.UseCertVault(vault);
end;

function TChilkatCrypt2.GetSignerCertChain(index: Integer): IChilkatCertChain;
begin
  Result := DefaultInterface.GetSignerCertChain(index);
end;

procedure TChilkatXmlCertVault.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID:      '{DA61F111-C1C4-432F-819D-6EDA9DEFEA67}';
    EventIID:     '';
    EventCount:   0;
    EventDispIDs: nil;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
end;

procedure TChilkatXmlCertVault.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatXmlCertVault;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatXmlCertVault.GetControlInterface: IChilkatXmlCertVault;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatXmlCertVault.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TChilkatXmlCertVault.AddPfxFile(const path: WideString; const password: WideString): Integer;
begin
  Result := DefaultInterface.AddPfxFile(path, password);
end;

function TChilkatXmlCertVault.AddCertFile(const path: WideString): Integer;
begin
  Result := DefaultInterface.AddCertFile(path);
end;

function TChilkatXmlCertVault.AddPemFile(const path: WideString; const password: WideString): Integer;
begin
  Result := DefaultInterface.AddPemFile(path, password);
end;

function TChilkatXmlCertVault.SaveXml(const path: WideString): Integer;
begin
  Result := DefaultInterface.SaveXml(path);
end;

function TChilkatXmlCertVault.LoadXml(const xml: WideString): Integer;
begin
  Result := DefaultInterface.LoadXml(xml);
end;

function TChilkatXmlCertVault.LoadXmlFile(const path: WideString): Integer;
begin
  Result := DefaultInterface.LoadXmlFile(path);
end;

function TChilkatXmlCertVault.GetXml: WideString;
begin
  Result := DefaultInterface.GetXml;
end;

function TChilkatXmlCertVault.AddCertBinary(certBytes: OleVariant): Integer;
begin
  Result := DefaultInterface.AddCertBinary(certBytes);
end;

function TChilkatXmlCertVault.AddPfxBinary(pfxBytes: OleVariant; const password: WideString): Integer;
begin
  Result := DefaultInterface.AddPfxBinary(pfxBytes, password);
end;

function TChilkatXmlCertVault.AddCertString(const certData: WideString): Integer;
begin
  Result := DefaultInterface.AddCertString(certData);
end;

function TChilkatXmlCertVault.AddPfxEncoded(const encodedBytes: WideString; 
                                            const encoding: WideString; const password: WideString): Integer;
begin
  Result := DefaultInterface.AddPfxEncoded(encodedBytes, encoding, password);
end;

function TChilkatXmlCertVault.AddCertEncoded(const encodedBytes: WideString; 
                                             const encoding: WideString): Integer;
begin
  Result := DefaultInterface.AddCertEncoded(encodedBytes, encoding);
end;

function TChilkatXmlCertVault.AddCert(const cert: IChilkatCert): Integer;
begin
  Result := DefaultInterface.AddCert(cert);
end;

function TChilkatXmlCertVault.AddPfx(const pfx: IChilkatPfx): Integer;
begin
  Result := DefaultInterface.AddPfx(pfx);
end;

function TChilkatXmlCertVault.AddCertChain(const certChain: IChilkatCertChain): Integer;
begin
  Result := DefaultInterface.AddCertChain(certChain);
end;

procedure TChilkatPfx.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID:      '{4A512F1D-8554-4EE4-A0C1-68AC4C2C517E}';
    EventIID:     '';
    EventCount:   0;
    EventDispIDs: nil;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
end;

procedure TChilkatPfx.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatPfx;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatPfx.GetControlInterface: IChilkatPfx;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatPfx.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TChilkatPfx.GetCert(index: Integer): IChilkatCert;
begin
  Result := DefaultInterface.GetCert(index);
end;

function TChilkatPfx.GetPrivateKey(index: Integer): IPrivateKey;
begin
  Result := DefaultInterface.GetPrivateKey(index);
end;

function TChilkatPfx.LoadPfxBytes(pfxData: OleVariant; const password: WideString): Integer;
begin
  Result := DefaultInterface.LoadPfxBytes(pfxData, password);
end;

function TChilkatPfx.LoadPfxEncoded(const encodedData: WideString; const encoding: WideString; 
                                    const password: WideString): Integer;
begin
  Result := DefaultInterface.LoadPfxEncoded(encodedData, encoding, password);
end;

function TChilkatPfx.LoadPfxFile(const path: WideString; const password: WideString): Integer;
begin
  Result := DefaultInterface.LoadPfxFile(path, password);
end;

procedure TChilkatCertChain.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID:      '{30CE0223-B0E1-49CA-97A7-9FC0B49DDB13}';
    EventIID:     '';
    EventCount:   0;
    EventDispIDs: nil;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
end;

procedure TChilkatCertChain.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatCertChain;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatCertChain.GetControlInterface: IChilkatCertChain;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatCertChain.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TChilkatCertChain.GetCert(index: Integer): IChilkatCert;
begin
  Result := DefaultInterface.GetCert(index);
end;

function TChilkatCertChain.VerifyCertSignatures: Integer;
begin
  Result := DefaultInterface.VerifyCertSignatures;
end;

function TChilkatCertChain.IsRootTrusted(const trustedRoots: IChilkatTrustedRoots): Integer;
begin
  Result := DefaultInterface.IsRootTrusted(trustedRoots);
end;

procedure TChilkatTrustedRoots.InitControlData;
const
  CEventDispIDs: array [0..2] of DWORD = (
    $00000001, $00000002, $00000003);
  CControlData: TControlData2 = (
    ClassID:      '{64A034EA-ACEB-4D48-8A00-2E7662A41154}';
    EventIID:     '{91D24DB1-0F9E-4E77-B629-70BEE2F61D36}';
    EventCount:   3;
    EventDispIDs: @CEventDispIDs;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
  TControlData2(CControlData).FirstEventOfs := UIntPtr(@@FOnAbortCheck) - UIntPtr(Self);
end;

procedure TChilkatTrustedRoots.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatTrustedRoots;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatTrustedRoots.GetControlInterface: IChilkatTrustedRoots;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatTrustedRoots.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TChilkatTrustedRoots.LoadCaCertsPem(const path: WideString): Integer;
begin
  Result := DefaultInterface.LoadCaCertsPem(path);
end;

function TChilkatTrustedRoots.GetCert(index: Integer): IChilkatCert;
begin
  Result := DefaultInterface.GetCert(index);
end;

function TChilkatTrustedRoots.Activate: Integer;
begin
  Result := DefaultInterface.Activate;
end;

function TChilkatTrustedRoots.Deactivate: Integer;
begin
  Result := DefaultInterface.Deactivate;
end;

procedure TCkString.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID:      '{70A93698-84F4-4B7A-9D04-B354DBC6C3F9}';
    EventIID:     '';
    EventCount:   0;
    EventDispIDs: nil;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
end;

procedure TCkString.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as ICkString;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TCkString.GetControlInterface: ICkString;
begin
  CreateControl;
  Result := FIntf;
end;

function TCkString.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TCkString.AnsiCharAt(index: Integer): Integer;
begin
  Result := DefaultInterface.AnsiCharAt(index);
end;

procedure TCkString.Append(const inStr: WideString);
begin
  DefaultInterface.Append(inStr);
end;

procedure TCkString.AppendDateRfc3339(dt: TDateTime);
begin
  DefaultInterface.AppendDateRfc3339(dt);
end;

procedure TCkString.AppendDateRfc822(dt: TDateTime);
begin
  DefaultInterface.AppendDateRfc822(dt);
end;

procedure TCkString.AppendEncoded(const str: WideString; const encoding: WideString; 
                                  const charset: WideString);
begin
  DefaultInterface.AppendEncoded(str, encoding, charset);
end;

procedure TCkString.AppendMultibyte(mbtext: OleVariant; const charset: WideString);
begin
  DefaultInterface.AppendMultibyte(mbtext, charset);
end;

function TCkString.AppendToFile(const filename: WideString; const charset: WideString): Integer;
begin
  Result := DefaultInterface.AppendToFile(filename, charset);
end;

function TCkString.BeginsWith(const substr: WideString): Integer;
begin
  Result := DefaultInterface.BeginsWith(substr);
end;

procedure TCkString.ChopAfter(const findStr: WideString);
begin
  DefaultInterface.ChopAfter(findStr);
end;

procedure TCkString.ChopBefore(const findStr: WideString);
begin
  DefaultInterface.ChopBefore(findStr);
end;

procedure TCkString.Clear;
begin
  DefaultInterface.Clear;
end;

function TCkString.Contains(const substr: WideString): Integer;
begin
  Result := DefaultInterface.Contains(substr);
end;

function TCkString.EmitMultibyte(const charset: WideString): OleVariant;
begin
  Result := DefaultInterface.EmitMultibyte(charset);
end;

function TCkString.EndsWith(const substr: WideString): Integer;
begin
  Result := DefaultInterface.EndsWith(substr);
end;

function TCkString.GetEncoded(const encoding: WideString; const charset: WideString): WideString;
begin
  Result := DefaultInterface.GetEncoded(encoding, charset);
end;

procedure TCkString.HtmlEntityDecode;
begin
  DefaultInterface.HtmlEntityDecode;
end;

procedure TCkString.HtmlEntityEncode;
begin
  DefaultInterface.HtmlEntityEncode;
end;

function TCkString.LastAnsiChar: Integer;
begin
  Result := DefaultInterface.LastAnsiChar;
end;

function TCkString.Left(NumChars: Integer): WideString;
begin
  Result := DefaultInterface.Left(NumChars);
end;

function TCkString.Length: Integer;
begin
  Result := DefaultInterface.Length;
end;

function TCkString.LoadFile(const filename: WideString; const charset: WideString): Integer;
begin
  Result := DefaultInterface.LoadFile(filename, charset);
end;

procedure TCkString.LoadXmlDoc(xmlDoc: OleVariant);
begin
  DefaultInterface.LoadXmlDoc(xmlDoc);
end;

function TCkString.Matches(const pattern: WideString; caseSensitive: Integer): Integer;
begin
  Result := DefaultInterface.Matches(pattern, caseSensitive);
end;

function TCkString.Mid(idx: Integer; NumChars: Integer): WideString;
begin
  Result := DefaultInterface.Mid(idx, NumChars);
end;

function TCkString.ParseDateRfc3339: TDateTime;
begin
  Result := DefaultInterface.ParseDateRfc3339;
end;

function TCkString.ParseDateRfc822: TDateTime;
begin
  Result := DefaultInterface.ParseDateRfc822;
end;

procedure TCkString.Pluralize;
begin
  DefaultInterface.Pluralize;
end;

procedure TCkString.Prepend(const inStr: WideString);
begin
  DefaultInterface.Prepend(inStr);
end;

procedure TCkString.RemoveAnsiChar(ch: Integer);
begin
  DefaultInterface.RemoveAnsiChar(ch);
end;

procedure TCkString.ReplaceAll(const substr: WideString; const replacement: WideString);
begin
  DefaultInterface.ReplaceAll(substr, replacement);
end;

procedure TCkString.ReplaceAnsiChar(c1: Integer; c2: Integer);
begin
  DefaultInterface.ReplaceAnsiChar(c1, c2);
end;

procedure TCkString.ReplaceFirst(const substr: WideString; const replacement: WideString);
begin
  DefaultInterface.ReplaceFirst(substr, replacement);
end;

function TCkString.Right(NumChars: Integer): WideString;
begin
  Result := DefaultInterface.Right(NumChars);
end;

function TCkString.SaveToFile(const filename: WideString; const charset: WideString): Integer;
begin
  Result := DefaultInterface.SaveToFile(filename, charset);
end;

procedure TCkString.Shorten(NumChars: Integer);
begin
  DefaultInterface.Shorten(NumChars);
end;

function TCkString.StrComp(const inStr: WideString; caseSensitive: Integer): Integer;
begin
  Result := DefaultInterface.StrComp(inStr, caseSensitive);
end;

procedure TCkString.StripHtml;
begin
  DefaultInterface.StripHtml;
end;

procedure TCkString.ToCRLF;
begin
  DefaultInterface.ToCRLF;
end;

procedure TCkString.ToLF;
begin
  DefaultInterface.ToLF;
end;

procedure TCkString.Trim;
begin
  DefaultInterface.Trim;
end;

procedure TCkString.Trim2;
begin
  DefaultInterface.Trim2;
end;

procedure TCkString.TrimInside;
begin
  DefaultInterface.TrimInside;
end;

procedure TCkString.Unpluralize;
begin
  DefaultInterface.Unpluralize;
end;

procedure TChilkatZipEntry.InitControlData;
const
  CEventDispIDs: array [0..2] of DWORD = (
    $00000001, $00000002, $00000003);
  CControlData: TControlData2 = (
    ClassID:      '{69E3A666-7F49-4B53-A77F-A8D14217E442}';
    EventIID:     '{91D24DB1-0F9E-4E77-B629-70BEE2F61D36}';
    EventCount:   3;
    EventDispIDs: @CEventDispIDs;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
  TControlData2(CControlData).FirstEventOfs := UIntPtr(@@FOnAbortCheck) - UIntPtr(Self);
end;

procedure TChilkatZipEntry.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatZipEntry;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatZipEntry.GetControlInterface: IChilkatZipEntry;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatZipEntry.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TChilkatZipEntry.AppendData(inData: OleVariant): Integer;
begin
  Result := DefaultInterface.AppendData(inData);
end;

function TChilkatZipEntry.AppendString(const inStr: WideString; const charset: WideString): Integer;
begin
  Result := DefaultInterface.AppendString(inStr, charset);
end;

function TChilkatZipEntry.Copy: OleVariant;
begin
  Result := DefaultInterface.Copy;
end;

function TChilkatZipEntry.CopyToBase64: WideString;
begin
  Result := DefaultInterface.CopyToBase64;
end;

function TChilkatZipEntry.CopyToHex: WideString;
begin
  Result := DefaultInterface.CopyToHex;
end;

function TChilkatZipEntry.Extract(const dirPath: WideString): Integer;
begin
  Result := DefaultInterface.Extract(dirPath);
end;

function TChilkatZipEntry.ExtractInto(const dirPath: WideString): Integer;
begin
  Result := DefaultInterface.ExtractInto(dirPath);
end;

function TChilkatZipEntry.GetDt: ICkDateTime;
begin
  Result := DefaultInterface.GetDt;
end;

function TChilkatZipEntry.Inflate: OleVariant;
begin
  Result := DefaultInterface.Inflate;
end;

function TChilkatZipEntry.NextEntry: IChilkatZipEntry;
begin
  Result := DefaultInterface.NextEntry;
end;

function TChilkatZipEntry.ReplaceData(inData: OleVariant): Integer;
begin
  Result := DefaultInterface.ReplaceData(inData);
end;

function TChilkatZipEntry.ReplaceString(const inStr: WideString; const charset: WideString): Integer;
begin
  Result := DefaultInterface.ReplaceString(inStr, charset);
end;

procedure TChilkatZipEntry.SetDt(const dt: ICkDateTime);
begin
  DefaultInterface.SetDt(dt);
end;

function TChilkatZipEntry.UnzipToString(lineEndingBehavior: Integer; const srcCharset: WideString): WideString;
begin
  Result := DefaultInterface.UnzipToString(lineEndingBehavior, srcCharset);
end;

procedure TChilkatZip.InitControlData;
const
  CEventDispIDs: array [0..16] of DWORD = (
    $00000001, $00000002, $00000003, $00000004, $00000005, $00000006,
    $00000007, $00000008, $00000009, $0000000A, $0000000B, $0000000C,
    $0000000D, $0000000E, $0000000F, $00000010, $00000011);
  CControlData: TControlData2 = (
    ClassID:      '{C95EAE19-C7B8-4297-A6C6-B4B973A8B867}';
    EventIID:     '{F0C2D9C1-0B80-432D-A60C-0957A5A03AAE}';
    EventCount:   17;
    EventDispIDs: @CEventDispIDs;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
  TControlData2(CControlData).FirstEventOfs := UIntPtr(@@FOnAbortCheck) - UIntPtr(Self);
end;

procedure TChilkatZip.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatZip;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatZip.GetControlInterface: IChilkatZip;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatZip.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TChilkatZip.AddEmbedded(const exeFilename: WideString; const resourceName: WideString; 
                                 const zipFilename: WideString): Integer;
begin
  Result := DefaultInterface.AddEmbedded(exeFilename, resourceName, zipFilename);
end;

procedure TChilkatZip.AddNoCompressExtension(const fileExtension: WideString);
begin
  DefaultInterface.AddNoCompressExtension(fileExtension);
end;

function TChilkatZip.AppendBase64(const filename: WideString; 
                                  const encodedCompressedData: WideString): IChilkatZipEntry;
begin
  Result := DefaultInterface.AppendBase64(filename, encodedCompressedData);
end;

function TChilkatZip.AppendCompressed(const filename: WideString; inData: OleVariant): IChilkatZipEntry;
begin
  Result := DefaultInterface.AppendCompressed(filename, inData);
end;

function TChilkatZip.AppendData(const filename: WideString; inData: OleVariant): IChilkatZipEntry;
begin
  Result := DefaultInterface.AppendData(filename, inData);
end;

function TChilkatZip.AppendFiles(const filePattern: WideString; recurse: Integer): Integer;
begin
  Result := DefaultInterface.AppendFiles(filePattern, recurse);
end;

function TChilkatZip.AppendFilesEx(const filePattern: WideString; recurse: Integer; 
                                   saveExtraPath: Integer; archiveOnly: Integer; 
                                   includeHidden: Integer; includeSystem: Integer): Integer;
begin
  Result := DefaultInterface.AppendFilesEx(filePattern, recurse, saveExtraPath, archiveOnly, 
                                           includeHidden, includeSystem);
end;

function TChilkatZip.AppendHex(const filename: WideString; const encodedCompressedData: WideString): IChilkatZipEntry;
begin
  Result := DefaultInterface.AppendHex(filename, encodedCompressedData);
end;

function TChilkatZip.AppendMultiple(const fileSpecs: ICkStringArray; recurse: Integer): Integer;
begin
  Result := DefaultInterface.AppendMultiple(fileSpecs, recurse);
end;

function TChilkatZip.AppendNew(const filename: WideString): IChilkatZipEntry;
begin
  Result := DefaultInterface.AppendNew(filename);
end;

function TChilkatZip.AppendNewDir(const dirName: WideString): IChilkatZipEntry;
begin
  Result := DefaultInterface.AppendNewDir(dirName);
end;

function TChilkatZip.AppendOneFileOrDir(const fileOrDirName: WideString; saveExtraPath: Integer): Integer;
begin
  Result := DefaultInterface.AppendOneFileOrDir(fileOrDirName, saveExtraPath);
end;

function TChilkatZip.AppendString(const filename: WideString; const str: WideString): IChilkatZipEntry;
begin
  Result := DefaultInterface.AppendString(filename, str);
end;

function TChilkatZip.AppendString2(const filename: WideString; const str: WideString; 
                                   const charset: WideString): IChilkatZipEntry;
begin
  Result := DefaultInterface.AppendString2(filename, str, charset);
end;

function TChilkatZip.AppendZip(const zipFilename: WideString): Integer;
begin
  Result := DefaultInterface.AppendZip(zipFilename);
end;

procedure TChilkatZip.CloseZip;
begin
  DefaultInterface.CloseZip;
end;

function TChilkatZip.DeleteEntry(const entry: IChilkatZipEntry): Integer;
begin
  Result := DefaultInterface.DeleteEntry(entry);
end;

procedure TChilkatZip.ExcludeDir(const dirName: WideString);
begin
  DefaultInterface.ExcludeDir(dirName);
end;

function TChilkatZip.Extract(const dirPath: WideString): Integer;
begin
  Result := DefaultInterface.Extract(dirPath);
end;

function TChilkatZip.FirstEntry: IChilkatZipEntry;
begin
  Result := DefaultInterface.FirstEntry;
end;

function TChilkatZip.FirstMatchingEntry(const pattern: WideString): IChilkatZipEntry;
begin
  Result := DefaultInterface.FirstMatchingEntry(pattern);
end;

function TChilkatZip.GetDirectoryAsXML: WideString;
begin
  Result := DefaultInterface.GetDirectoryAsXML;
end;

function TChilkatZip.GetEntryByID(EntryID: Integer): IChilkatZipEntry;
begin
  Result := DefaultInterface.GetEntryByID(EntryID);
end;

function TChilkatZip.GetEntryByIndex(index: Integer): IChilkatZipEntry;
begin
  Result := DefaultInterface.GetEntryByIndex(index);
end;

function TChilkatZip.GetEntryByName(const entryName: WideString): IChilkatZipEntry;
begin
  Result := DefaultInterface.GetEntryByName(entryName);
end;

function TChilkatZip.GetExclusions: ICkStringArray;
begin
  Result := DefaultInterface.GetExclusions;
end;

function TChilkatZip.GetExeConfigParam(const name: WideString): WideString;
begin
  Result := DefaultInterface.GetExeConfigParam(name);
end;

function TChilkatZip.InsertNew(const filename: WideString; beforeIndex: Integer): IChilkatZipEntry;
begin
  Result := DefaultInterface.InsertNew(filename, beforeIndex);
end;

function TChilkatZip.IsNoCompressExtension(const fileExtension: WideString): Integer;
begin
  Result := DefaultInterface.IsNoCompressExtension(fileExtension);
end;

function TChilkatZip.IsPasswordProtected(const zipFilename: WideString): Integer;
begin
  Result := DefaultInterface.IsPasswordProtected(zipFilename);
end;

function TChilkatZip.IsUnlocked: Integer;
begin
  Result := DefaultInterface.IsUnlocked;
end;

function TChilkatZip.NewZip(const zipFilename: WideString): Integer;
begin
  Result := DefaultInterface.NewZip(zipFilename);
end;

function TChilkatZip.OpenEmbedded(const exeFilename: WideString; const resourceName: WideString): Integer;
begin
  Result := DefaultInterface.OpenEmbedded(exeFilename, resourceName);
end;

function TChilkatZip.OpenFromByteData(byteData: OleVariant): Integer;
begin
  Result := DefaultInterface.OpenFromByteData(byteData);
end;

function TChilkatZip.OpenFromMemory(inData: OleVariant): Integer;
begin
  Result := DefaultInterface.OpenFromMemory(inData);
end;

function TChilkatZip.OpenMyEmbedded(const resourceName: WideString): Integer;
begin
  Result := DefaultInterface.OpenMyEmbedded(resourceName);
end;

function TChilkatZip.OpenZip(const zipFilename: WideString): Integer;
begin
  Result := DefaultInterface.OpenZip(zipFilename);
end;

function TChilkatZip.QuickAppend(const zipFilename: WideString): Integer;
begin
  Result := DefaultInterface.QuickAppend(zipFilename);
end;

function TChilkatZip.RemoveEmbedded(const exeFilename: WideString; const resourceName: WideString): Integer;
begin
  Result := DefaultInterface.RemoveEmbedded(exeFilename, resourceName);
end;

procedure TChilkatZip.RemoveNoCompressExtension(const fileExtension: WideString);
begin
  DefaultInterface.RemoveNoCompressExtension(fileExtension);
end;

function TChilkatZip.ReplaceEmbedded(const exeFilename: WideString; const resourceName: WideString; 
                                     const zipFilename: WideString): Integer;
begin
  Result := DefaultInterface.ReplaceEmbedded(exeFilename, resourceName, zipFilename);
end;

procedure TChilkatZip.SetCompressionLevel(level: Integer);
begin
  DefaultInterface.SetCompressionLevel(level);
end;

procedure TChilkatZip.SetExclusions(const excludePatterns: ICkStringArray);
begin
  DefaultInterface.SetExclusions(excludePatterns);
end;

procedure TChilkatZip.SetExeConfigParam(const name: WideString; const value: WideString);
begin
  DefaultInterface.SetExeConfigParam(name, value);
end;

procedure TChilkatZip.SetPassword(const password: WideString);
begin
  DefaultInterface.SetPassword(password);
end;

function TChilkatZip.UnlockComponent(const regCode: WideString): Integer;
begin
  Result := DefaultInterface.UnlockComponent(regCode);
end;

function TChilkatZip.Unzip(const dirPath: WideString): Integer;
begin
  Result := DefaultInterface.Unzip(dirPath);
end;

function TChilkatZip.UnzipInto(const dirPath: WideString): Integer;
begin
  Result := DefaultInterface.UnzipInto(dirPath);
end;

function TChilkatZip.UnzipMatching(const dirPath: WideString; const pattern: WideString; 
                                   verbose: Integer): Integer;
begin
  Result := DefaultInterface.UnzipMatching(dirPath, pattern, verbose);
end;

function TChilkatZip.UnzipMatchingInto(const dirPath: WideString; const pattern: WideString; 
                                       verbose: Integer): Integer;
begin
  Result := DefaultInterface.UnzipMatchingInto(dirPath, pattern, verbose);
end;

function TChilkatZip.UnzipNewer(const dirPath: WideString): Integer;
begin
  Result := DefaultInterface.UnzipNewer(dirPath);
end;

function TChilkatZip.VerifyPassword: Integer;
begin
  Result := DefaultInterface.VerifyPassword;
end;

function TChilkatZip.WriteExe(const exeFilename: WideString): Integer;
begin
  Result := DefaultInterface.WriteExe(exeFilename);
end;

function TChilkatZip.WriteExe2(const exePath: WideString; const destExePath: WideString; 
                               bAesEncrypt: Integer; KeyLength: Integer; const password: WideString): Integer;
begin
  Result := DefaultInterface.WriteExe2(exePath, destExePath, bAesEncrypt, KeyLength, password);
end;

function TChilkatZip.WriteExeToMemory: OleVariant;
begin
  Result := DefaultInterface.WriteExeToMemory;
end;

function TChilkatZip.WriteToMemory: OleVariant;
begin
  Result := DefaultInterface.WriteToMemory;
end;

function TChilkatZip.WriteZip: Integer;
begin
  Result := DefaultInterface.WriteZip;
end;

function TChilkatZip.WriteZipAndClose: Integer;
begin
  Result := DefaultInterface.WriteZipAndClose;
end;

procedure TChilkatXmp.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID:      '{96B3C4B8-9F07-469D-ADAA-E1D14BF50341}';
    EventIID:     '';
    EventCount:   0;
    EventDispIDs: nil;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
end;

procedure TChilkatXmp.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatXmp;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatXmp.GetControlInterface: IChilkatXmp;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatXmp.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TChilkatXmp.AddArray(const xml: IChilkatXml; const arrType: WideString; 
                              const propName: WideString; const values: ICkStringArray): Integer;
begin
  Result := DefaultInterface.AddArray(xml, arrType, propName, values);
end;

procedure TChilkatXmp.AddNsMapping(const ns: WideString; const uri: WideString);
begin
  DefaultInterface.AddNsMapping(ns, uri);
end;

function TChilkatXmp.AddSimpleDate(const iXml: IChilkatXml; const propName: WideString; 
                                   propVal: TDateTime): Integer;
begin
  Result := DefaultInterface.AddSimpleDate(iXml, propName, propVal);
end;

function TChilkatXmp.AddSimpleInt(const iXml: IChilkatXml; const propName: WideString; 
                                  propVal: Integer): Integer;
begin
  Result := DefaultInterface.AddSimpleInt(iXml, propName, propVal);
end;

function TChilkatXmp.AddSimpleStr(const iXml: IChilkatXml; const propName: WideString; 
                                  const propVal: WideString): Integer;
begin
  Result := DefaultInterface.AddSimpleStr(iXml, propName, propVal);
end;

function TChilkatXmp.AddStructProp(const IChilkatXml: IChilkatXml; const structName: WideString; 
                                   const propName: WideString; const propValue: WideString): Integer;
begin
  Result := DefaultInterface.AddStructProp(IChilkatXml, structName, propName, propValue);
end;

function TChilkatXmp.Append(const iXml: IChilkatXml): Integer;
begin
  Result := DefaultInterface.Append(iXml);
end;

function TChilkatXmp.DateToString(d: TDateTime): WideString;
begin
  Result := DefaultInterface.DateToString(d);
end;

function TChilkatXmp.GetArray(const iXml: IChilkatXml; const propName: WideString): ICkStringArray;
begin
  Result := DefaultInterface.GetArray(iXml, propName);
end;

function TChilkatXmp.GetEmbedded(index: Integer): IChilkatXml;
begin
  Result := DefaultInterface.GetEmbedded(index);
end;

function TChilkatXmp.GetProperty(const iXml: IChilkatXml; const propName: WideString): IChilkatXml;
begin
  Result := DefaultInterface.GetProperty(iXml, propName);
end;

function TChilkatXmp.GetSimpleDate(const iXml: IChilkatXml; const propName: WideString): TDateTime;
begin
  Result := DefaultInterface.GetSimpleDate(iXml, propName);
end;

function TChilkatXmp.GetSimpleInt(const iXml: IChilkatXml; const propName: WideString): Integer;
begin
  Result := DefaultInterface.GetSimpleInt(iXml, propName);
end;

function TChilkatXmp.GetSimpleStr(const iXml: IChilkatXml; const propName: WideString): WideString;
begin
  Result := DefaultInterface.GetSimpleStr(iXml, propName);
end;

function TChilkatXmp.GetStructPropNames(const iXml: IChilkatXml; const structName: WideString): ICkStringArray;
begin
  Result := DefaultInterface.GetStructPropNames(iXml, structName);
end;

function TChilkatXmp.GetStructValue(const iXml: IChilkatXml; const structName: WideString; 
                                    const propName: WideString): WideString;
begin
  Result := DefaultInterface.GetStructValue(iXml, structName, propName);
end;

function TChilkatXmp.LoadAppFile(const filename: WideString): Integer;
begin
  Result := DefaultInterface.LoadAppFile(filename);
end;

function TChilkatXmp.LoadFromBuffer(fileData: OleVariant; const ext: WideString): Integer;
begin
  Result := DefaultInterface.LoadFromBuffer(fileData, ext);
end;

function TChilkatXmp.NewXmp: IChilkatXml;
begin
  Result := DefaultInterface.NewXmp;
end;

function TChilkatXmp.RemoveAllEmbedded: Integer;
begin
  Result := DefaultInterface.RemoveAllEmbedded;
end;

function TChilkatXmp.RemoveArray(const iXml: IChilkatXml; const propName: WideString): Integer;
begin
  Result := DefaultInterface.RemoveArray(iXml, propName);
end;

function TChilkatXmp.RemoveEmbedded(index: Integer): Integer;
begin
  Result := DefaultInterface.RemoveEmbedded(index);
end;

procedure TChilkatXmp.RemoveNsMapping(const ns: WideString);
begin
  DefaultInterface.RemoveNsMapping(ns);
end;

function TChilkatXmp.RemoveSimple(const iXml: IChilkatXml; const propName: WideString): Integer;
begin
  Result := DefaultInterface.RemoveSimple(iXml, propName);
end;

function TChilkatXmp.RemoveStruct(const iXml: IChilkatXml; const structName: WideString): Integer;
begin
  Result := DefaultInterface.RemoveStruct(iXml, structName);
end;

function TChilkatXmp.RemoveStructProp(const iXml: IChilkatXml; const structName: WideString; 
                                      const propName: WideString): Integer;
begin
  Result := DefaultInterface.RemoveStructProp(iXml, structName, propName);
end;

function TChilkatXmp.SaveAppFile(const filename: WideString): Integer;
begin
  Result := DefaultInterface.SaveAppFile(filename);
end;

function TChilkatXmp.SaveToBuffer: OleVariant;
begin
  Result := DefaultInterface.SaveToBuffer;
end;

function TChilkatXmp.StringToDate(const str: WideString): TDateTime;
begin
  Result := DefaultInterface.StringToDate(str);
end;

function TChilkatXmp.UnlockComponent(const unlockCode: WideString): Integer;
begin
  Result := DefaultInterface.UnlockComponent(unlockCode);
end;

procedure TChilkatXml.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID:      '{501B9600-382D-454D-AA0A-3BC22A87C485}';
    EventIID:     '';
    EventCount:   0;
    EventDispIDs: nil;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
end;

procedure TChilkatXml.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatXml;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatXml.GetControlInterface: IChilkatXml;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatXml.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TChilkatXml.AccumulateTagContent(const Tag: WideString; const skipTags: WideString): WideString;
begin
  Result := DefaultInterface.AccumulateTagContent(Tag, skipTags);
end;

function TChilkatXml.AddAttribute(const name: WideString; const value: WideString): Integer;
begin
  Result := DefaultInterface.AddAttribute(name, value);
end;

function TChilkatXml.AddAttributeInt(const name: WideString; value: Integer): Integer;
begin
  Result := DefaultInterface.AddAttributeInt(name, value);
end;

function TChilkatXml.AddChildTree(const tree: IChilkatXml): Integer;
begin
  Result := DefaultInterface.AddChildTree(tree);
end;

procedure TChilkatXml.AddOrUpdateAttribute(const name: WideString; const value: WideString);
begin
  DefaultInterface.AddOrUpdateAttribute(name, value);
end;

procedure TChilkatXml.AddOrUpdateAttributeI(const name: WideString; value: Integer);
begin
  DefaultInterface.AddOrUpdateAttributeI(name, value);
end;

procedure TChilkatXml.AddStyleSheet(const styleSheet: WideString);
begin
  DefaultInterface.AddStyleSheet(styleSheet);
end;

procedure TChilkatXml.AddToAttribute(const name: WideString; amount: Integer);
begin
  DefaultInterface.AddToAttribute(name, amount);
end;

procedure TChilkatXml.AddToChildContent(const Tag: WideString; amount: Integer);
begin
  DefaultInterface.AddToChildContent(Tag, amount);
end;

procedure TChilkatXml.AddToContent(amount: Integer);
begin
  DefaultInterface.AddToContent(amount);
end;

function TChilkatXml.AppendToContent(const str: WideString): Integer;
begin
  Result := DefaultInterface.AppendToContent(str);
end;

function TChilkatXml.BEncodeContent(const charset: WideString; inData: OleVariant): Integer;
begin
  Result := DefaultInterface.BEncodeContent(charset, inData);
end;

function TChilkatXml.ChildContentMatches(const Tag: WideString; const pattern: WideString; 
                                         caseSensitive: Integer): Integer;
begin
  Result := DefaultInterface.ChildContentMatches(Tag, pattern, caseSensitive);
end;

function TChilkatXml.ChilkatPath(const pathCmd: WideString): WideString;
begin
  Result := DefaultInterface.ChilkatPath(pathCmd);
end;

procedure TChilkatXml.Clear;
begin
  DefaultInterface.Clear;
end;

function TChilkatXml.ContentMatches(const pattern: WideString; caseSensitive: Integer): Integer;
begin
  Result := DefaultInterface.ContentMatches(pattern, caseSensitive);
end;

procedure TChilkatXml.Copy(const node: IChilkatXml);
begin
  DefaultInterface.Copy(node);
end;

procedure TChilkatXml.CopyRef(const node: IChilkatXml);
begin
  DefaultInterface.CopyRef(node);
end;

function TChilkatXml.DecodeContent: OleVariant;
begin
  Result := DefaultInterface.DecodeContent;
end;

function TChilkatXml.DecodeEntities(const str: WideString): WideString;
begin
  Result := DefaultInterface.DecodeEntities(str);
end;

function TChilkatXml.DecryptContent(const password: WideString): Integer;
begin
  Result := DefaultInterface.DecryptContent(password);
end;

function TChilkatXml.EncryptContent(const password: WideString): Integer;
begin
  Result := DefaultInterface.EncryptContent(password);
end;

function TChilkatXml.ExtractChildByIndex(index: Integer): IChilkatXml;
begin
  Result := DefaultInterface.ExtractChildByIndex(index);
end;

function TChilkatXml.ExtractChildByName(const Tag: WideString; const attrName: WideString; 
                                        const attrValue: WideString): IChilkatXml;
begin
  Result := DefaultInterface.ExtractChildByName(Tag, attrName, attrValue);
end;

function TChilkatXml.FindChild(const Tag: WideString): IChilkatXml;
begin
  Result := DefaultInterface.FindChild(Tag);
end;

function TChilkatXml.FindChild2(const Tag: WideString): Integer;
begin
  Result := DefaultInterface.FindChild2(Tag);
end;

function TChilkatXml.FindNextRecord(const Tag: WideString; const contentPattern: WideString): IChilkatXml;
begin
  Result := DefaultInterface.FindNextRecord(Tag, contentPattern);
end;

function TChilkatXml.FindOrAddNewChild(const Tag: WideString): IChilkatXml;
begin
  Result := DefaultInterface.FindOrAddNewChild(Tag);
end;

function TChilkatXml.FirstChild: IChilkatXml;
begin
  Result := DefaultInterface.FirstChild;
end;

function TChilkatXml.FirstChild2: Integer;
begin
  Result := DefaultInterface.FirstChild2;
end;

function TChilkatXml.GetAttrValue(const name: WideString): WideString;
begin
  Result := DefaultInterface.GetAttrValue(name);
end;

function TChilkatXml.GetAttrValueInt(const name: WideString): Integer;
begin
  Result := DefaultInterface.GetAttrValueInt(name);
end;

function TChilkatXml.GetAttributeName(index: Integer): WideString;
begin
  Result := DefaultInterface.GetAttributeName(index);
end;

function TChilkatXml.GetAttributeValue(index: Integer): WideString;
begin
  Result := DefaultInterface.GetAttributeValue(index);
end;

function TChilkatXml.GetAttributeValueInt(index: Integer): Integer;
begin
  Result := DefaultInterface.GetAttributeValueInt(index);
end;

function TChilkatXml.GetBinaryContent(unzipFlag: Integer; decryptFlag: Integer; 
                                      const password: WideString): OleVariant;
begin
  Result := DefaultInterface.GetBinaryContent(unzipFlag, decryptFlag, password);
end;

function TChilkatXml.GetChild(index: Integer): IChilkatXml;
begin
  Result := DefaultInterface.GetChild(index);
end;

function TChilkatXml.GetChild2(index: Integer): Integer;
begin
  Result := DefaultInterface.GetChild2(index);
end;

function TChilkatXml.GetChildBoolValue(const Tag: WideString): Integer;
begin
  Result := DefaultInterface.GetChildBoolValue(Tag);
end;

function TChilkatXml.GetChildContent(const Tag: WideString): WideString;
begin
  Result := DefaultInterface.GetChildContent(Tag);
end;

function TChilkatXml.GetChildContentByIndex(index: Integer): WideString;
begin
  Result := DefaultInterface.GetChildContentByIndex(index);
end;

function TChilkatXml.GetChildExact(const Tag: WideString; const Content: WideString): IChilkatXml;
begin
  Result := DefaultInterface.GetChildExact(Tag, Content);
end;

function TChilkatXml.GetChildIntValue(const Tag: WideString): Integer;
begin
  Result := DefaultInterface.GetChildIntValue(Tag);
end;

function TChilkatXml.GetChildTag(index: Integer): WideString;
begin
  Result := DefaultInterface.GetChildTag(index);
end;

function TChilkatXml.GetChildTagByIndex(index: Integer): WideString;
begin
  Result := DefaultInterface.GetChildTagByIndex(index);
end;

function TChilkatXml.GetChildWithAttr(const Tag: WideString; const attrName: WideString; 
                                      const attrValue: WideString): IChilkatXml;
begin
  Result := DefaultInterface.GetChildWithAttr(Tag, attrName, attrValue);
end;

function TChilkatXml.GetChildWithContent(const Content: WideString): IChilkatXml;
begin
  Result := DefaultInterface.GetChildWithContent(Content);
end;

function TChilkatXml.GetChildWithTag(const Tag: WideString): IChilkatXml;
begin
  Result := DefaultInterface.GetChildWithTag(Tag);
end;

function TChilkatXml.GetNthChildWithTag(const Tag: WideString; n: Integer): IChilkatXml;
begin
  Result := DefaultInterface.GetNthChildWithTag(Tag, n);
end;

function TChilkatXml.GetNthChildWithTag2(const Tag: WideString; n: Integer): Integer;
begin
  Result := DefaultInterface.GetNthChildWithTag2(Tag, n);
end;

function TChilkatXml.GetParent: IChilkatXml;
begin
  Result := DefaultInterface.GetParent;
end;

function TChilkatXml.GetParent2: Integer;
begin
  Result := DefaultInterface.GetParent2;
end;

function TChilkatXml.GetRoot: IChilkatXml;
begin
  Result := DefaultInterface.GetRoot;
end;

procedure TChilkatXml.GetRoot2;
begin
  DefaultInterface.GetRoot2;
end;

function TChilkatXml.GetSelf: IChilkatXml;
begin
  Result := DefaultInterface.GetSelf;
end;

function TChilkatXml.GetXml: WideString;
begin
  Result := DefaultInterface.GetXml;
end;

function TChilkatXml.HasAttrWithValue(const name: WideString; const value: WideString): Integer;
begin
  Result := DefaultInterface.HasAttrWithValue(name, value);
end;

function TChilkatXml.HasAttribute(const name: WideString): Integer;
begin
  Result := DefaultInterface.HasAttribute(name);
end;

function TChilkatXml.HasChildWithContent(const Content: WideString): Integer;
begin
  Result := DefaultInterface.HasChildWithContent(Content);
end;

function TChilkatXml.HasChildWithTag(const Tag: WideString): Integer;
begin
  Result := DefaultInterface.HasChildWithTag(Tag);
end;

function TChilkatXml.HasChildWithTagAndContent(const Tag: WideString; const Content: WideString): Integer;
begin
  Result := DefaultInterface.HasChildWithTagAndContent(Tag, Content);
end;

procedure TChilkatXml.InsertChildTreeAfter(index: Integer; const tree: IChilkatXml);
begin
  DefaultInterface.InsertChildTreeAfter(index, tree);
end;

procedure TChilkatXml.InsertChildTreeBefore(index: Integer; const tree: IChilkatXml);
begin
  DefaultInterface.InsertChildTreeBefore(index, tree);
end;

function TChilkatXml.LastChild: IChilkatXml;
begin
  Result := DefaultInterface.LastChild;
end;

function TChilkatXml.LastChild2: Integer;
begin
  Result := DefaultInterface.LastChild2;
end;

function TChilkatXml.LoadXml(const xmlData: WideString): Integer;
begin
  Result := DefaultInterface.LoadXml(xmlData);
end;

function TChilkatXml.LoadXml2(const xmlData: WideString; autoTrim: Integer): Integer;
begin
  Result := DefaultInterface.LoadXml2(xmlData, autoTrim);
end;

function TChilkatXml.LoadXmlFile(const filename: WideString): Integer;
begin
  Result := DefaultInterface.LoadXmlFile(filename);
end;

function TChilkatXml.LoadXmlFile2(const filename: WideString; autoTrim: Integer): Integer;
begin
  Result := DefaultInterface.LoadXmlFile2(filename, autoTrim);
end;

function TChilkatXml.NewChild(const Tag: WideString; const Content: WideString): IChilkatXml;
begin
  Result := DefaultInterface.NewChild(Tag, Content);
end;

procedure TChilkatXml.NewChild2(const Tag: WideString; const Content: WideString);
begin
  DefaultInterface.NewChild2(Tag, Content);
end;

function TChilkatXml.NewChildAfter(index: Integer; const Tag: WideString; const Content: WideString): IChilkatXml;
begin
  Result := DefaultInterface.NewChildAfter(index, Tag, Content);
end;

function TChilkatXml.NewChildBefore(index: Integer; const Tag: WideString; const Content: WideString): IChilkatXml;
begin
  Result := DefaultInterface.NewChildBefore(index, Tag, Content);
end;

procedure TChilkatXml.NewChildInt2(const Tag: WideString; value: Integer);
begin
  DefaultInterface.NewChildInt2(Tag, value);
end;

function TChilkatXml.NextSibling: IChilkatXml;
begin
  Result := DefaultInterface.NextSibling;
end;

function TChilkatXml.NextSibling2: Integer;
begin
  Result := DefaultInterface.NextSibling2;
end;

function TChilkatXml.NumChildrenHavingTag(const Tag: WideString): Integer;
begin
  Result := DefaultInterface.NumChildrenHavingTag(Tag);
end;

function TChilkatXml.PreviousSibling: IChilkatXml;
begin
  Result := DefaultInterface.PreviousSibling;
end;

function TChilkatXml.PreviousSibling2: Integer;
begin
  Result := DefaultInterface.PreviousSibling2;
end;

function TChilkatXml.QEncodeContent(const charset: WideString; inData: OleVariant): Integer;
begin
  Result := DefaultInterface.QEncodeContent(charset, inData);
end;

function TChilkatXml.RemoveAllAttributes: Integer;
begin
  Result := DefaultInterface.RemoveAllAttributes;
end;

procedure TChilkatXml.RemoveAllChildren;
begin
  DefaultInterface.RemoveAllChildren;
end;

function TChilkatXml.RemoveAttribute(const name: WideString): Integer;
begin
  Result := DefaultInterface.RemoveAttribute(name);
end;

procedure TChilkatXml.RemoveChild(const Tag: WideString);
begin
  DefaultInterface.RemoveChild(Tag);
end;

procedure TChilkatXml.RemoveChildByIndex(index: Integer);
begin
  DefaultInterface.RemoveChildByIndex(index);
end;

procedure TChilkatXml.RemoveChildWithContent(const Content: WideString);
begin
  DefaultInterface.RemoveChildWithContent(Content);
end;

procedure TChilkatXml.RemoveFromTree;
begin
  DefaultInterface.RemoveFromTree;
end;

function TChilkatXml.SaveBinaryContent(const filename: WideString; unzipFlag: Integer; 
                                       decryptFlag: Integer; const password: WideString): Integer;
begin
  Result := DefaultInterface.SaveBinaryContent(filename, unzipFlag, decryptFlag, password);
end;

function TChilkatXml.SaveXml(const filename: WideString): Integer;
begin
  Result := DefaultInterface.SaveXml(filename);
end;

function TChilkatXml.SearchAllForContent(const afterPtr: IChilkatXml; 
                                         const contentPattern: WideString): IChilkatXml;
begin
  Result := DefaultInterface.SearchAllForContent(afterPtr, contentPattern);
end;

function TChilkatXml.SearchAllForContent2(const afterPtr: IChilkatXml; 
                                          const contentPattern: WideString): Integer;
begin
  Result := DefaultInterface.SearchAllForContent2(afterPtr, contentPattern);
end;

function TChilkatXml.SearchForAttribute(const afterPtr: IChilkatXml; const Tag: WideString; 
                                        const attr: WideString; const valuePattern: WideString): IChilkatXml;
begin
  Result := DefaultInterface.SearchForAttribute(afterPtr, Tag, attr, valuePattern);
end;

function TChilkatXml.SearchForAttribute2(const afterPtr: IChilkatXml; const Tag: WideString; 
                                         const attr: WideString; const valuePattern: WideString): Integer;
begin
  Result := DefaultInterface.SearchForAttribute2(afterPtr, Tag, attr, valuePattern);
end;

function TChilkatXml.SearchForContent(const afterPtr: IChilkatXml; const Tag: WideString; 
                                      const contentPattern: WideString): IChilkatXml;
begin
  Result := DefaultInterface.SearchForContent(afterPtr, Tag, contentPattern);
end;

function TChilkatXml.SearchForContent2(const afterPtr: IChilkatXml; const Tag: WideString; 
                                       const contentPattern: WideString): Integer;
begin
  Result := DefaultInterface.SearchForContent2(afterPtr, Tag, contentPattern);
end;

function TChilkatXml.SearchForTag(const afterPtr: IChilkatXml; const Tag: WideString): IChilkatXml;
begin
  Result := DefaultInterface.SearchForTag(afterPtr, Tag);
end;

function TChilkatXml.SearchForTag2(const afterPtr: IChilkatXml; const Tag: WideString): Integer;
begin
  Result := DefaultInterface.SearchForTag2(afterPtr, Tag);
end;

function TChilkatXml.SetBinaryContent(inData: OleVariant; zipFlag: Integer; encryptFlag: Integer; 
                                      const password: WideString): Integer;
begin
  Result := DefaultInterface.SetBinaryContent(inData, zipFlag, encryptFlag, password);
end;

function TChilkatXml.SetBinaryContentFromFile(const filename: WideString; zipFlag: Integer; 
                                              encryptFlag: Integer; const password: WideString): Integer;
begin
  Result := DefaultInterface.SetBinaryContentFromFile(filename, zipFlag, encryptFlag, password);
end;

procedure TChilkatXml.SortByAttribute(const attrName: WideString; ascending: Integer);
begin
  DefaultInterface.SortByAttribute(attrName, ascending);
end;

procedure TChilkatXml.SortByAttributeInt(const attrName: WideString; ascending: Integer);
begin
  DefaultInterface.SortByAttributeInt(attrName, ascending);
end;

procedure TChilkatXml.SortByContent(ascending: Integer);
begin
  DefaultInterface.SortByContent(ascending);
end;

procedure TChilkatXml.SortByTag(ascending: Integer);
begin
  DefaultInterface.SortByTag(ascending);
end;

procedure TChilkatXml.SortRecordsByAttribute(const sortTag: WideString; const attrName: WideString; 
                                             ascending: Integer);
begin
  DefaultInterface.SortRecordsByAttribute(sortTag, attrName, ascending);
end;

procedure TChilkatXml.SortRecordsByContent(const sortTag: WideString; ascending: Integer);
begin
  DefaultInterface.SortRecordsByContent(sortTag, ascending);
end;

procedure TChilkatXml.SortRecordsByContentInt(const sortTag: WideString; ascending: Integer);
begin
  DefaultInterface.SortRecordsByContentInt(sortTag, ascending);
end;

function TChilkatXml.SwapNode(const node: IChilkatXml): Integer;
begin
  Result := DefaultInterface.SwapNode(node);
end;

function TChilkatXml.SwapTree(const tree: IChilkatXml): Integer;
begin
  Result := DefaultInterface.SwapTree(tree);
end;

function TChilkatXml.TagContent(const Tag: WideString): WideString;
begin
  Result := DefaultInterface.TagContent(Tag);
end;

function TChilkatXml.TagEquals(const Tag: WideString): Integer;
begin
  Result := DefaultInterface.TagEquals(Tag);
end;

function TChilkatXml.UnzipContent: Integer;
begin
  Result := DefaultInterface.UnzipContent;
end;

function TChilkatXml.UnzipTree: Integer;
begin
  Result := DefaultInterface.UnzipTree;
end;

function TChilkatXml.UpdateAttribute(const attrName: WideString; const attrValue: WideString): Integer;
begin
  Result := DefaultInterface.UpdateAttribute(attrName, attrValue);
end;

function TChilkatXml.UpdateAttributeInt(const attrName: WideString; value: Integer): Integer;
begin
  Result := DefaultInterface.UpdateAttributeInt(attrName, value);
end;

procedure TChilkatXml.UpdateChildContent(const Tag: WideString; const value: WideString);
begin
  DefaultInterface.UpdateChildContent(Tag, value);
end;

procedure TChilkatXml.UpdateChildContentInt(const Tag: WideString; value: Integer);
begin
  DefaultInterface.UpdateChildContentInt(Tag, value);
end;

function TChilkatXml.ZipContent: Integer;
begin
  Result := DefaultInterface.ZipContent;
end;

function TChilkatXml.ZipTree: Integer;
begin
  Result := DefaultInterface.ZipTree;
end;

procedure TChilkatUpload.InitControlData;
const
  CEventDispIDs: array [0..2] of DWORD = (
    $00000001, $00000002, $00000003);
  CControlData: TControlData2 = (
    ClassID:      '{AC217674-DB08-4F7E-AB20-9F5F1026C464}';
    EventIID:     '{91D24DB1-0F9E-4E77-B629-70BEE2F61D36}';
    EventCount:   3;
    EventDispIDs: @CEventDispIDs;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
  TControlData2(CControlData).FirstEventOfs := UIntPtr(@@FOnAbortCheck) - UIntPtr(Self);
end;

procedure TChilkatUpload.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatUpload;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatUpload.GetControlInterface: IChilkatUpload;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatUpload.Get_ResponseBody: OleVariant;
begin
  Result := DefaultInterface.ResponseBody;
end;

function TChilkatUpload.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

procedure TChilkatUpload.AbortUpload;
begin
  DefaultInterface.AbortUpload;
end;

procedure TChilkatUpload.AddCustomHeader(const name: WideString; const value: WideString);
begin
  DefaultInterface.AddCustomHeader(name, value);
end;

procedure TChilkatUpload.AddFileReference(const name: WideString; const filename: WideString);
begin
  DefaultInterface.AddFileReference(name, filename);
end;

procedure TChilkatUpload.AddParam(const name: WideString; const value: WideString);
begin
  DefaultInterface.AddParam(name, value);
end;

function TChilkatUpload.BeginUpload: Integer;
begin
  Result := DefaultInterface.BeginUpload;
end;

function TChilkatUpload.BlockingUpload: Integer;
begin
  Result := DefaultInterface.BlockingUpload;
end;

procedure TChilkatUpload.ClearFileReferences;
begin
  DefaultInterface.ClearFileReferences;
end;

procedure TChilkatUpload.ClearParams;
begin
  DefaultInterface.ClearParams;
end;

procedure TChilkatUpload.SleepMs(millisec: Integer);
begin
  DefaultInterface.SleepMs(millisec);
end;

function TChilkatUpload.UploadToMemory: OleVariant;
begin
  Result := DefaultInterface.UploadToMemory;
end;

procedure TUnixCompress.InitControlData;
const
  CEventDispIDs: array [0..2] of DWORD = (
    $00000001, $00000002, $00000003);
  CControlData: TControlData2 = (
    ClassID:      '{F8295E9E-9E5B-486E-AA93-33E5726C4EE6}';
    EventIID:     '{91D24DB1-0F9E-4E77-B629-70BEE2F61D36}';
    EventCount:   3;
    EventDispIDs: @CEventDispIDs;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
  TControlData2(CControlData).FirstEventOfs := UIntPtr(@@FOnAbortCheck) - UIntPtr(Self);
end;

procedure TUnixCompress.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IUnixCompress;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TUnixCompress.GetControlInterface: IUnixCompress;
begin
  CreateControl;
  Result := FIntf;
end;

function TUnixCompress.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TUnixCompress.CompressFile(const inFilename: WideString; const destPath: WideString): Integer;
begin
  Result := DefaultInterface.CompressFile(inFilename, destPath);
end;

function TUnixCompress.CompressFileToMem(const inFilename: WideString): OleVariant;
begin
  Result := DefaultInterface.CompressFileToMem(inFilename);
end;

function TUnixCompress.CompressMemToFile(inData: OleVariant; const destPath: WideString): Integer;
begin
  Result := DefaultInterface.CompressMemToFile(inData, destPath);
end;

function TUnixCompress.CompressMemory(inData: OleVariant): OleVariant;
begin
  Result := DefaultInterface.CompressMemory(inData);
end;

function TUnixCompress.CompressString(const inStr: WideString; const charset: WideString): OleVariant;
begin
  Result := DefaultInterface.CompressString(inStr, charset);
end;

function TUnixCompress.CompressStringToFile(const inStr: WideString; const charset: WideString; 
                                            const destPath: WideString): Integer;
begin
  Result := DefaultInterface.CompressStringToFile(inStr, charset, destPath);
end;

function TUnixCompress.IsUnlocked: Integer;
begin
  Result := DefaultInterface.IsUnlocked;
end;

function TUnixCompress.UnTarZ(const zFilename: WideString; const destDir: WideString; 
                              bNoAbsolute: Integer): Integer;
begin
  Result := DefaultInterface.UnTarZ(zFilename, destDir, bNoAbsolute);
end;

function TUnixCompress.UncompressFile(const inFilename: WideString; const destPath: WideString): Integer;
begin
  Result := DefaultInterface.UncompressFile(inFilename, destPath);
end;

function TUnixCompress.UncompressFileToMem(const inFilename: WideString): OleVariant;
begin
  Result := DefaultInterface.UncompressFileToMem(inFilename);
end;

function TUnixCompress.UncompressFileToString(const inFilename: WideString; 
                                              const inCharset: WideString): WideString;
begin
  Result := DefaultInterface.UncompressFileToString(inFilename, inCharset);
end;

function TUnixCompress.UncompressMemToFile(inData: OleVariant; const destPath: WideString): Integer;
begin
  Result := DefaultInterface.UncompressMemToFile(inData, destPath);
end;

function TUnixCompress.UncompressMemory(inData: OleVariant): OleVariant;
begin
  Result := DefaultInterface.UncompressMemory(inData);
end;

function TUnixCompress.UncompressString(inData: OleVariant; const inCharset: WideString): WideString;
begin
  Result := DefaultInterface.UncompressString(inData, inCharset);
end;

function TUnixCompress.UnlockComponent(const unlockCode: WideString): Integer;
begin
  Result := DefaultInterface.UnlockComponent(unlockCode);
end;

function TUnixCompress.ReadFile(const filename: WideString): OleVariant;
begin
  Result := DefaultInterface.ReadFile(filename);
end;

function TUnixCompress.WriteFile(const filename: WideString; binaryData: OleVariant): Integer;
begin
  Result := DefaultInterface.WriteFile(filename, binaryData);
end;

procedure TChilkatTar.InitControlData;
const
  CEventDispIDs: array [0..3] of DWORD = (
    $00000001, $00000002, $00000003, $00000004);
  CControlData: TControlData2 = (
    ClassID:      '{E54CDB98-DD19-4155-841C-6DBA6618D5D8}';
    EventIID:     '{1BCCF756-2714-431F-A92A-30B7DFFF3A56}';
    EventCount:   4;
    EventDispIDs: @CEventDispIDs;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
  TControlData2(CControlData).FirstEventOfs := UIntPtr(@@FOnAbortCheck) - UIntPtr(Self);
end;

procedure TChilkatTar.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatTar;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatTar.GetControlInterface: IChilkatTar;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatTar.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TChilkatTar.AddDirRoot(const dirPath: WideString): Integer;
begin
  Result := DefaultInterface.AddDirRoot(dirPath);
end;

function TChilkatTar.GetDirRoot(index: Integer): WideString;
begin
  Result := DefaultInterface.GetDirRoot(index);
end;

function TChilkatTar.ListXml(const tarPath: WideString): WideString;
begin
  Result := DefaultInterface.ListXml(tarPath);
end;

function TChilkatTar.UnlockComponent(const unlockCode: WideString): Integer;
begin
  Result := DefaultInterface.UnlockComponent(unlockCode);
end;

function TChilkatTar.Untar(const tarPath: WideString): Integer;
begin
  Result := DefaultInterface.Untar(tarPath);
end;

function TChilkatTar.UntarBz2(const tarPath: WideString): Integer;
begin
  Result := DefaultInterface.UntarBz2(tarPath);
end;

function TChilkatTar.UntarFirstMatchingToMemory(tarFileBytes: OleVariant; 
                                                const matchPattern: WideString): OleVariant;
begin
  Result := DefaultInterface.UntarFirstMatchingToMemory(tarFileBytes, matchPattern);
end;

function TChilkatTar.UntarFromMemory(tarFileBytes: OleVariant): Integer;
begin
  Result := DefaultInterface.UntarFromMemory(tarFileBytes);
end;

function TChilkatTar.UntarGz(const tarPath: WideString): Integer;
begin
  Result := DefaultInterface.UntarGz(tarPath);
end;

function TChilkatTar.UnTarZ(const tarPath: WideString): Integer;
begin
  Result := DefaultInterface.UnTarZ(tarPath);
end;

function TChilkatTar.VerifyTar(const tarPath: WideString): Integer;
begin
  Result := DefaultInterface.VerifyTar(tarPath);
end;

function TChilkatTar.WriteTar(const tarPath: WideString): Integer;
begin
  Result := DefaultInterface.WriteTar(tarPath);
end;

function TChilkatTar.WriteTarBz2(const bz2Path: WideString): Integer;
begin
  Result := DefaultInterface.WriteTarBz2(bz2Path);
end;

function TChilkatTar.WriteTarGz(const gzPath: WideString): Integer;
begin
  Result := DefaultInterface.WriteTarGz(gzPath);
end;

procedure TChilkatSshTunnel.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID:      '{D01DB5A3-B9B7-4837-9874-FBA5BA171976}';
    EventIID:     '';
    EventCount:   0;
    EventDispIDs: nil;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
end;

procedure TChilkatSshTunnel.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatSshTunnel;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatSshTunnel.GetControlInterface: IChilkatSshTunnel;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatSshTunnel.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

procedure TChilkatSshTunnel.ClearTunnelErrors;
begin
  DefaultInterface.ClearTunnelErrors;
end;

function TChilkatSshTunnel.GetTunnelsXml: WideString;
begin
  Result := DefaultInterface.GetTunnelsXml;
end;

function TChilkatSshTunnel.SetSshAuthenticationKey(const key: IChilkatSshKey): Integer;
begin
  Result := DefaultInterface.SetSshAuthenticationKey(key);
end;

function TChilkatSshTunnel.StopAccepting: Integer;
begin
  Result := DefaultInterface.StopAccepting;
end;

function TChilkatSshTunnel.StopAllTunnels(maxWaitMs: Integer): Integer;
begin
  Result := DefaultInterface.StopAllTunnels(maxWaitMs);
end;

function TChilkatSshTunnel.UnlockComponent(const unlockCode: WideString): Integer;
begin
  Result := DefaultInterface.UnlockComponent(unlockCode);
end;

function TChilkatSshTunnel.BeginAccepting(ListenPort: Integer): Integer;
begin
  Result := DefaultInterface.BeginAccepting(ListenPort);
end;

procedure TChilkatSshKey.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID:      '{06B36116-235B-4AB9-987D-3B4C7E689247}';
    EventIID:     '';
    EventCount:   0;
    EventDispIDs: nil;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
end;

procedure TChilkatSshKey.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatSshKey;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatSshKey.GetControlInterface: IChilkatSshKey;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatSshKey.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TChilkatSshKey.FromOpenSshPrivateKey(const keyStr: WideString): Integer;
begin
  Result := DefaultInterface.FromOpenSshPrivateKey(keyStr);
end;

function TChilkatSshKey.FromOpenSshPublicKey(const keyStr: WideString): Integer;
begin
  Result := DefaultInterface.FromOpenSshPublicKey(keyStr);
end;

function TChilkatSshKey.FromPuttyPrivateKey(const keyStr: WideString): Integer;
begin
  Result := DefaultInterface.FromPuttyPrivateKey(keyStr);
end;

function TChilkatSshKey.FromRfc4716PublicKey(const keyStr: WideString): Integer;
begin
  Result := DefaultInterface.FromRfc4716PublicKey(keyStr);
end;

function TChilkatSshKey.FromXml(const xmlKey: WideString): Integer;
begin
  Result := DefaultInterface.FromXml(xmlKey);
end;

function TChilkatSshKey.GenFingerprint: WideString;
begin
  Result := DefaultInterface.GenFingerprint;
end;

function TChilkatSshKey.GenerateDsaKey(numBits: Integer): Integer;
begin
  Result := DefaultInterface.GenerateDsaKey(numBits);
end;

function TChilkatSshKey.GenerateRsaKey(numBits: Integer; exponent: Integer): Integer;
begin
  Result := DefaultInterface.GenerateRsaKey(numBits, exponent);
end;

function TChilkatSshKey.LoadText(const filename: WideString): WideString;
begin
  Result := DefaultInterface.LoadText(filename);
end;

function TChilkatSshKey.SaveText(const strToSave: WideString; const filename: WideString): Integer;
begin
  Result := DefaultInterface.SaveText(strToSave, filename);
end;

function TChilkatSshKey.ToOpenSshPrivateKey(bEncrypt: Integer): WideString;
begin
  Result := DefaultInterface.ToOpenSshPrivateKey(bEncrypt);
end;

function TChilkatSshKey.ToOpenSshPublicKey: WideString;
begin
  Result := DefaultInterface.ToOpenSshPublicKey;
end;

function TChilkatSshKey.ToPuttyPrivateKey(bEncrypt: Integer): WideString;
begin
  Result := DefaultInterface.ToPuttyPrivateKey(bEncrypt);
end;

function TChilkatSshKey.ToRfc4716PublicKey: WideString;
begin
  Result := DefaultInterface.ToRfc4716PublicKey;
end;

function TChilkatSshKey.ToXml: WideString;
begin
  Result := DefaultInterface.ToXml;
end;

procedure TChilkatSsh.InitControlData;
const
  CEventDispIDs: array [0..2] of DWORD = (
    $00000001, $00000002, $00000003);
  CControlData: TControlData2 = (
    ClassID:      '{D67AF44C-0AA8-424A-AF73-2070B4C11781}';
    EventIID:     '{91D24DB1-0F9E-4E77-B629-70BEE2F61D36}';
    EventCount:   3;
    EventDispIDs: @CEventDispIDs;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
  TControlData2(CControlData).FirstEventOfs := UIntPtr(@@FOnAbortCheck) - UIntPtr(Self);
end;

procedure TChilkatSsh.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatSsh;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatSsh.GetControlInterface: IChilkatSsh;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatSsh.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TChilkatSsh.AuthenticatePk(const UserName: WideString; const PrivateKey: IChilkatSshKey): Integer;
begin
  Result := DefaultInterface.AuthenticatePk(UserName, PrivateKey);
end;

function TChilkatSsh.AuthenticatePw(const Login: WideString; const password: WideString): Integer;
begin
  Result := DefaultInterface.AuthenticatePw(Login, password);
end;

function TChilkatSsh.AuthenticatePwPk(const UserName: WideString; const password: WideString; 
                                      const PrivateKey: IChilkatSshKey): Integer;
begin
  Result := DefaultInterface.AuthenticatePwPk(UserName, password, PrivateKey);
end;

function TChilkatSsh.ChannelIsOpen(channelNum: Integer): Integer;
begin
  Result := DefaultInterface.ChannelIsOpen(channelNum);
end;

function TChilkatSsh.ChannelPoll(channelNum: Integer; pollTimeoutMs: Integer): Integer;
begin
  Result := DefaultInterface.ChannelPoll(channelNum, pollTimeoutMs);
end;

function TChilkatSsh.ChannelRead(channelNum: Integer): Integer;
begin
  Result := DefaultInterface.ChannelRead(channelNum);
end;

function TChilkatSsh.ChannelReadAndPoll(channelNum: Integer; pollTimeoutMs: Integer): Integer;
begin
  Result := DefaultInterface.ChannelReadAndPoll(channelNum, pollTimeoutMs);
end;

function TChilkatSsh.ChannelReadAndPoll2(channelNum: Integer; pollTimeoutMs: Integer; 
                                         maxNumBytes: Integer): Integer;
begin
  Result := DefaultInterface.ChannelReadAndPoll2(channelNum, pollTimeoutMs, maxNumBytes);
end;

function TChilkatSsh.ChannelReceiveToClose(channelNum: Integer): Integer;
begin
  Result := DefaultInterface.ChannelReceiveToClose(channelNum);
end;

function TChilkatSsh.ChannelReceiveUntilMatch(channelNum: Integer; const matchPattern: WideString; 
                                              const charset: WideString; caseSensitive: Integer): Integer;
begin
  Result := DefaultInterface.ChannelReceiveUntilMatch(channelNum, matchPattern, charset, 
                                                      caseSensitive);
end;

function TChilkatSsh.ChannelReceiveUntilMatchN(channelNum: Integer; 
                                               const matchPatterns: ICkStringArray; 
                                               const charset: WideString; caseSensitive: Integer): Integer;
begin
  Result := DefaultInterface.ChannelReceiveUntilMatchN(channelNum, matchPatterns, charset, 
                                                       caseSensitive);
end;

function TChilkatSsh.ChannelReceivedClose(channelNum: Integer): Integer;
begin
  Result := DefaultInterface.ChannelReceivedClose(channelNum);
end;

function TChilkatSsh.ChannelReceivedEof(channelNum: Integer): Integer;
begin
  Result := DefaultInterface.ChannelReceivedEof(channelNum);
end;

function TChilkatSsh.ChannelReceivedExitStatus(channelNum: Integer): Integer;
begin
  Result := DefaultInterface.ChannelReceivedExitStatus(channelNum);
end;

function TChilkatSsh.ChannelSendClose(channelNum: Integer): Integer;
begin
  Result := DefaultInterface.ChannelSendClose(channelNum);
end;

function TChilkatSsh.ChannelSendData(channelNum: Integer; data: OleVariant): Integer;
begin
  Result := DefaultInterface.ChannelSendData(channelNum, data);
end;

function TChilkatSsh.ChannelSendEof(channelNum: Integer): Integer;
begin
  Result := DefaultInterface.ChannelSendEof(channelNum);
end;

function TChilkatSsh.ChannelSendString(channelNum: Integer; const strData: WideString; 
                                       const charset: WideString): Integer;
begin
  Result := DefaultInterface.ChannelSendString(channelNum, strData, charset);
end;

procedure TChilkatSsh.ClearTtyModes;
begin
  DefaultInterface.ClearTtyModes;
end;

function TChilkatSsh.Connect(const Hostname: WideString; Port: Integer): Integer;
begin
  Result := DefaultInterface.Connect(Hostname, Port);
end;

procedure TChilkatSsh.Disconnect;
begin
  DefaultInterface.Disconnect;
end;

function TChilkatSsh.GetChannelExitStatus(channelNum: Integer): Integer;
begin
  Result := DefaultInterface.GetChannelExitStatus(channelNum);
end;

function TChilkatSsh.GetChannelNumber(index: Integer): Integer;
begin
  Result := DefaultInterface.GetChannelNumber(index);
end;

function TChilkatSsh.GetChannelType(index: Integer): WideString;
begin
  Result := DefaultInterface.GetChannelType(index);
end;

function TChilkatSsh.GetReceivedData(channelNum: Integer): OleVariant;
begin
  Result := DefaultInterface.GetReceivedData(channelNum);
end;

function TChilkatSsh.GetReceivedDataN(channelNum: Integer; numBytes: Integer): OleVariant;
begin
  Result := DefaultInterface.GetReceivedDataN(channelNum, numBytes);
end;

function TChilkatSsh.GetReceivedNumBytes(channelNum: Integer): Integer;
begin
  Result := DefaultInterface.GetReceivedNumBytes(channelNum);
end;

function TChilkatSsh.GetReceivedStderr(channelNum: Integer): OleVariant;
begin
  Result := DefaultInterface.GetReceivedStderr(channelNum);
end;

function TChilkatSsh.GetReceivedText(channelNum: Integer; const charset: WideString): WideString;
begin
  Result := DefaultInterface.GetReceivedText(channelNum, charset);
end;

function TChilkatSsh.GetReceivedTextS(channelNum: Integer; const substr: WideString; 
                                      const charset: WideString): WideString;
begin
  Result := DefaultInterface.GetReceivedTextS(channelNum, substr, charset);
end;

function TChilkatSsh.OpenCustomChannel(const channelType: WideString): Integer;
begin
  Result := DefaultInterface.OpenCustomChannel(channelType);
end;

function TChilkatSsh.OpenDirectTcpIpChannel(const Hostname: WideString; Port: Integer): Integer;
begin
  Result := DefaultInterface.OpenDirectTcpIpChannel(Hostname, Port);
end;

function TChilkatSsh.OpenSessionChannel: Integer;
begin
  Result := DefaultInterface.OpenSessionChannel;
end;

function TChilkatSsh.PeekReceivedText(channelNum: Integer; const charset: WideString): WideString;
begin
  Result := DefaultInterface.PeekReceivedText(channelNum, charset);
end;

function TChilkatSsh.ReKey: Integer;
begin
  Result := DefaultInterface.ReKey;
end;

function TChilkatSsh.SendIgnore: Integer;
begin
  Result := DefaultInterface.SendIgnore;
end;

function TChilkatSsh.SendReqExec(channelNum: Integer; const command: WideString): Integer;
begin
  Result := DefaultInterface.SendReqExec(channelNum, command);
end;

function TChilkatSsh.SendReqPty(channelNum: Integer; const xTermEnvVar: WideString; 
                                widthInChars: Integer; heightInRows: Integer; pixWidth: Integer; 
                                pixHeight: Integer): Integer;
begin
  Result := DefaultInterface.SendReqPty(channelNum, xTermEnvVar, widthInChars, heightInRows, 
                                        pixWidth, pixHeight);
end;

function TChilkatSsh.SendReqSetEnv(channelNum: Integer; const name: WideString; 
                                   const value: WideString): Integer;
begin
  Result := DefaultInterface.SendReqSetEnv(channelNum, name, value);
end;

function TChilkatSsh.SendReqShell(channelNum: Integer): Integer;
begin
  Result := DefaultInterface.SendReqShell(channelNum);
end;

function TChilkatSsh.SendReqSignal(channelNum: Integer; const signalName: WideString): Integer;
begin
  Result := DefaultInterface.SendReqSignal(channelNum, signalName);
end;

function TChilkatSsh.SendReqSubsystem(channelNum: Integer; const subsystemName: WideString): Integer;
begin
  Result := DefaultInterface.SendReqSubsystem(channelNum, subsystemName);
end;

function TChilkatSsh.SendReqWindowChange(channelNum: Integer; widthInChars: Integer; 
                                         heightInRows: Integer; pixWidth: Integer; 
                                         pixHeight: Integer): Integer;
begin
  Result := DefaultInterface.SendReqWindowChange(channelNum, widthInChars, heightInRows, pixWidth, 
                                                 pixHeight);
end;

function TChilkatSsh.SendReqX11Forwarding(channelNum: Integer; singleConnection: Integer; 
                                          const authProt: WideString; const authCookie: WideString; 
                                          screenNum: Integer): Integer;
begin
  Result := DefaultInterface.SendReqX11Forwarding(channelNum, singleConnection, authProt, 
                                                  authCookie, screenNum);
end;

function TChilkatSsh.SendReqXonXoff(channelNum: Integer; clientCanDo: Integer): Integer;
begin
  Result := DefaultInterface.SendReqXonXoff(channelNum, clientCanDo);
end;

function TChilkatSsh.SetTtyMode(const name: WideString; value: Integer): Integer;
begin
  Result := DefaultInterface.SetTtyMode(name, value);
end;

function TChilkatSsh.UnlockComponent(const unlockCode: WideString): Integer;
begin
  Result := DefaultInterface.UnlockComponent(unlockCode);
end;

procedure TChilkatSpider.InitControlData;
const
  CEventDispIDs: array [0..2] of DWORD = (
    $00000001, $00000002, $00000003);
  CControlData: TControlData2 = (
    ClassID:      '{58BD963E-12A4-427E-9500-3A4FCEB545B2}';
    EventIID:     '{91D24DB1-0F9E-4E77-B629-70BEE2F61D36}';
    EventCount:   3;
    EventDispIDs: @CEventDispIDs;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
  TControlData2(CControlData).FirstEventOfs := UIntPtr(@@FOnAbortCheck) - UIntPtr(Self);
end;

procedure TChilkatSpider.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatSpider;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatSpider.GetControlInterface: IChilkatSpider;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatSpider.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

procedure TChilkatSpider.AddAvoidOutboundLinkPattern(const pattern: WideString);
begin
  DefaultInterface.AddAvoidOutboundLinkPattern(pattern);
end;

procedure TChilkatSpider.AddAvoidPattern(const pattern: WideString);
begin
  DefaultInterface.AddAvoidPattern(pattern);
end;

procedure TChilkatSpider.AddMustMatchPattern(const pattern: WideString);
begin
  DefaultInterface.AddMustMatchPattern(pattern);
end;

procedure TChilkatSpider.AddUnspidered(const url: WideString);
begin
  DefaultInterface.AddUnspidered(url);
end;

function TChilkatSpider.CanonicalizeUrl(const url: WideString): WideString;
begin
  Result := DefaultInterface.CanonicalizeUrl(url);
end;

procedure TChilkatSpider.ClearFailedUrls;
begin
  DefaultInterface.ClearFailedUrls;
end;

procedure TChilkatSpider.ClearOutboundLinks;
begin
  DefaultInterface.ClearOutboundLinks;
end;

procedure TChilkatSpider.ClearSpideredUrls;
begin
  DefaultInterface.ClearSpideredUrls;
end;

function TChilkatSpider.CrawlNext: Integer;
begin
  Result := DefaultInterface.CrawlNext;
end;

function TChilkatSpider.FetchRobotsText: WideString;
begin
  Result := DefaultInterface.FetchRobotsText;
end;

function TChilkatSpider.GetAvoidPattern(index: Integer): WideString;
begin
  Result := DefaultInterface.GetAvoidPattern(index);
end;

function TChilkatSpider.GetBaseDomain(const Domain: WideString): WideString;
begin
  Result := DefaultInterface.GetBaseDomain(Domain);
end;

function TChilkatSpider.GetFailedUrl(index: Integer): WideString;
begin
  Result := DefaultInterface.GetFailedUrl(index);
end;

function TChilkatSpider.GetOutboundLink(index: Integer): WideString;
begin
  Result := DefaultInterface.GetOutboundLink(index);
end;

function TChilkatSpider.GetSpideredUrl(index: Integer): WideString;
begin
  Result := DefaultInterface.GetSpideredUrl(index);
end;

function TChilkatSpider.GetUnspideredUrl(index: Integer): WideString;
begin
  Result := DefaultInterface.GetUnspideredUrl(index);
end;

function TChilkatSpider.GetUrlDomain(const url: WideString): WideString;
begin
  Result := DefaultInterface.GetUrlDomain(url);
end;

procedure TChilkatSpider.Initialize(const Domain: WideString);
begin
  DefaultInterface.Initialize(Domain);
end;

function TChilkatSpider.RecrawlLast: Integer;
begin
  Result := DefaultInterface.RecrawlLast;
end;

procedure TChilkatSpider.SkipUnspidered(index: Integer);
begin
  DefaultInterface.SkipUnspidered(index);
end;

procedure TChilkatSpider.SleepMs(millisec: Integer);
begin
  DefaultInterface.SleepMs(millisec);
end;

procedure TChilkatSocksProxy.InitControlData;
const
  CEventDispIDs: array [0..2] of DWORD = (
    $00000001, $00000002, $00000003);
  CControlData: TControlData2 = (
    ClassID:      '{7811A467-C6AE-4629-8F97-4C3B886826E4}';
    EventIID:     '{91D24DB1-0F9E-4E77-B629-70BEE2F61D36}';
    EventCount:   3;
    EventDispIDs: @CEventDispIDs;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
  TControlData2(CControlData).FirstEventOfs := UIntPtr(@@FOnAbortCheck) - UIntPtr(Self);
end;

procedure TChilkatSocksProxy.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatSocksProxy;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatSocksProxy.GetControlInterface: IChilkatSocksProxy;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatSocksProxy.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TChilkatSocksProxy.AllowConnection: Integer;
begin
  Result := DefaultInterface.AllowConnection;
end;

function TChilkatSocksProxy.GetTunnelsXml: WideString;
begin
  Result := DefaultInterface.GetTunnelsXml;
end;

function TChilkatSocksProxy.Initialize(Port: Integer): Integer;
begin
  Result := DefaultInterface.Initialize(Port);
end;

function TChilkatSocksProxy.ProceedSocks5: Integer;
begin
  Result := DefaultInterface.ProceedSocks5;
end;

function TChilkatSocksProxy.RejectConnection: Integer;
begin
  Result := DefaultInterface.RejectConnection;
end;

function TChilkatSocksProxy.StopAllTunnels(maxWaitMs: Integer): Integer;
begin
  Result := DefaultInterface.StopAllTunnels(maxWaitMs);
end;

function TChilkatSocksProxy.UnlockComponent(const unlockCode: WideString): Integer;
begin
  Result := DefaultInterface.UnlockComponent(unlockCode);
end;

function TChilkatSocksProxy.WaitForConnection(maxWaitMs: Integer): Integer;
begin
  Result := DefaultInterface.WaitForConnection(maxWaitMs);
end;

procedure TChilkatSocket.InitControlData;
const
  CEventDispIDs: array [0..2] of DWORD = (
    $00000001, $00000002, $00000003);
  CControlData: TControlData2 = (
    ClassID:      '{C3FC6EA1-3982-45AA-8CB8-B3BFC9DFDDC7}';
    EventIID:     '{91D24DB1-0F9E-4E77-B629-70BEE2F61D36}';
    EventCount:   3;
    EventDispIDs: @CEventDispIDs;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
  TControlData2(CControlData).FirstEventOfs := UIntPtr(@@FOnAbortCheck) - UIntPtr(Self);
end;

procedure TChilkatSocket.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatSocket;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatSocket.GetControlInterface: IChilkatSocket;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatSocket.Get_AsyncReceivedBytes: OleVariant;
begin
  Result := DefaultInterface.AsyncReceivedBytes;
end;

function TChilkatSocket.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TChilkatSocket.AcceptNextConnection(maxWaitMs: Integer): IChilkatSocket;
begin
  Result := DefaultInterface.AcceptNextConnection(maxWaitMs);
end;

function TChilkatSocket.AddSslAcceptableClientCaDn(const certAuthDN: WideString): Integer;
begin
  Result := DefaultInterface.AddSslAcceptableClientCaDn(certAuthDN);
end;

procedure TChilkatSocket.AsyncAcceptAbort;
begin
  DefaultInterface.AsyncAcceptAbort;
end;

function TChilkatSocket.AsyncAcceptSocket: IChilkatSocket;
begin
  Result := DefaultInterface.AsyncAcceptSocket;
end;

function TChilkatSocket.AsyncAcceptStart(maxWaitMs: Integer): Integer;
begin
  Result := DefaultInterface.AsyncAcceptStart(maxWaitMs);
end;

procedure TChilkatSocket.AsyncConnectAbort;
begin
  DefaultInterface.AsyncConnectAbort;
end;

function TChilkatSocket.AsyncConnectStart(const Hostname: WideString; Port: Integer; Ssl: Integer; 
                                          maxWaitMs: Integer): Integer;
begin
  Result := DefaultInterface.AsyncConnectStart(Hostname, Port, Ssl, maxWaitMs);
end;

procedure TChilkatSocket.AsyncDnsAbort;
begin
  DefaultInterface.AsyncDnsAbort;
end;

function TChilkatSocket.AsyncDnsStart(const Hostname: WideString; maxWaitMs: Integer): Integer;
begin
  Result := DefaultInterface.AsyncDnsStart(Hostname, maxWaitMs);
end;

procedure TChilkatSocket.AsyncReceiveAbort;
begin
  DefaultInterface.AsyncReceiveAbort;
end;

function TChilkatSocket.AsyncReceiveBytes: Integer;
begin
  Result := DefaultInterface.AsyncReceiveBytes;
end;

function TChilkatSocket.AsyncReceiveBytesN(numBytes: Integer): Integer;
begin
  Result := DefaultInterface.AsyncReceiveBytesN(numBytes);
end;

function TChilkatSocket.AsyncReceiveString: Integer;
begin
  Result := DefaultInterface.AsyncReceiveString;
end;

function TChilkatSocket.AsyncReceiveToCRLF: Integer;
begin
  Result := DefaultInterface.AsyncReceiveToCRLF;
end;

function TChilkatSocket.AsyncReceiveUntilMatch(const matchStr: WideString): Integer;
begin
  Result := DefaultInterface.AsyncReceiveUntilMatch(matchStr);
end;

procedure TChilkatSocket.AsyncSendAbort;
begin
  DefaultInterface.AsyncSendAbort;
end;

function TChilkatSocket.AsyncSendByteData(data: OleVariant): Integer;
begin
  Result := DefaultInterface.AsyncSendByteData(data);
end;

function TChilkatSocket.AsyncSendBytes(data: OleVariant): Integer;
begin
  Result := DefaultInterface.AsyncSendBytes(data);
end;

function TChilkatSocket.AsyncSendString(const str: WideString): Integer;
begin
  Result := DefaultInterface.AsyncSendString(str);
end;

function TChilkatSocket.BindAndListen(Port: Integer; backlog: Integer): Integer;
begin
  Result := DefaultInterface.BindAndListen(Port, backlog);
end;

function TChilkatSocket.CheckWriteable(maxWaitMs: Integer): Integer;
begin
  Result := DefaultInterface.CheckWriteable(maxWaitMs);
end;

procedure TChilkatSocket.ClearSessionLog;
begin
  DefaultInterface.ClearSessionLog;
end;

procedure TChilkatSocket.Close(maxWaitMs: Integer);
begin
  DefaultInterface.Close(maxWaitMs);
end;

function TChilkatSocket.Connect(const Hostname: WideString; Port: Integer; Ssl: Integer; 
                                maxWaitMs: Integer): Integer;
begin
  Result := DefaultInterface.Connect(Hostname, Port, Ssl, maxWaitMs);
end;

function TChilkatSocket.ConvertFromSsl: Integer;
begin
  Result := DefaultInterface.ConvertFromSsl;
end;

function TChilkatSocket.ConvertToSsl: Integer;
begin
  Result := DefaultInterface.ConvertToSsl;
end;

function TChilkatSocket.DnsLookup(const Hostname: WideString; maxWaitMs: Integer): WideString;
begin
  Result := DefaultInterface.DnsLookup(Hostname, maxWaitMs);
end;

function TChilkatSocket.GetMyCert: IChilkatCert;
begin
  Result := DefaultInterface.GetMyCert;
end;

function TChilkatSocket.GetReceivedClientCert(index: Integer): IChilkatCert;
begin
  Result := DefaultInterface.GetReceivedClientCert(index);
end;

function TChilkatSocket.GetSslAcceptableClientCaDn(index: Integer): WideString;
begin
  Result := DefaultInterface.GetSslAcceptableClientCaDn(index);
end;

function TChilkatSocket.GetSslServerCert: IChilkatCert;
begin
  Result := DefaultInterface.GetSslServerCert;
end;

function TChilkatSocket.InitSslServer(const cert: IChilkatCert): Integer;
begin
  Result := DefaultInterface.InitSslServer(cert);
end;

function TChilkatSocket.IsUnlocked: Integer;
begin
  Result := DefaultInterface.IsUnlocked;
end;

function TChilkatSocket.PollDataAvailable: Integer;
begin
  Result := DefaultInterface.PollDataAvailable;
end;

function TChilkatSocket.ReceiveBytes: OleVariant;
begin
  Result := DefaultInterface.ReceiveBytes;
end;

function TChilkatSocket.ReceiveBytesENC(const encodingAlg: WideString): WideString;
begin
  Result := DefaultInterface.ReceiveBytesENC(encodingAlg);
end;

function TChilkatSocket.ReceiveBytesN(numBytes: Integer): OleVariant;
begin
  Result := DefaultInterface.ReceiveBytesN(numBytes);
end;

function TChilkatSocket.ReceiveBytesToFile(const appendFilename: WideString): Integer;
begin
  Result := DefaultInterface.ReceiveBytesToFile(appendFilename);
end;

function TChilkatSocket.ReceiveCount: Integer;
begin
  Result := DefaultInterface.ReceiveCount;
end;

function TChilkatSocket.ReceiveNBytesENC(numBytes: Integer; const encodingAlg: WideString): WideString;
begin
  Result := DefaultInterface.ReceiveNBytesENC(numBytes, encodingAlg);
end;

function TChilkatSocket.ReceiveString: WideString;
begin
  Result := DefaultInterface.ReceiveString;
end;

function TChilkatSocket.ReceiveStringMaxN(maxBytes: Integer): WideString;
begin
  Result := DefaultInterface.ReceiveStringMaxN(maxBytes);
end;

function TChilkatSocket.ReceiveStringUntilByte(byteValue: Integer): WideString;
begin
  Result := DefaultInterface.ReceiveStringUntilByte(byteValue);
end;

function TChilkatSocket.ReceiveToCRLF: WideString;
begin
  Result := DefaultInterface.ReceiveToCRLF;
end;

function TChilkatSocket.ReceiveUntilByte(byteValue: Integer): OleVariant;
begin
  Result := DefaultInterface.ReceiveUntilByte(byteValue);
end;

function TChilkatSocket.ReceiveUntilMatch(const matchStr: WideString): WideString;
begin
  Result := DefaultInterface.ReceiveUntilMatch(matchStr);
end;

function TChilkatSocket.SelectForReading(timeoutMs: Integer): Integer;
begin
  Result := DefaultInterface.SelectForReading(timeoutMs);
end;

function TChilkatSocket.SelectForWriting(timeoutMs: Integer): Integer;
begin
  Result := DefaultInterface.SelectForWriting(timeoutMs);
end;

function TChilkatSocket.SendBytes(data: OleVariant): Integer;
begin
  Result := DefaultInterface.SendBytes(data);
end;

function TChilkatSocket.SendBytesENC(const encodedBytes: WideString; const encodingAlg: WideString): Integer;
begin
  Result := DefaultInterface.SendBytesENC(encodedBytes, encodingAlg);
end;

function TChilkatSocket.SendCount(byteCount: Integer): Integer;
begin
  Result := DefaultInterface.SendCount(byteCount);
end;

function TChilkatSocket.SendString(const str: WideString): Integer;
begin
  Result := DefaultInterface.SendString(str);
end;

function TChilkatSocket.SetSslClientCert(const cert: IChilkatCert): Integer;
begin
  Result := DefaultInterface.SetSslClientCert(cert);
end;

function TChilkatSocket.SetSslClientCertPem(const pemDataOrFilename: WideString; 
                                            const pemPassword: WideString): Integer;
begin
  Result := DefaultInterface.SetSslClientCertPem(pemDataOrFilename, pemPassword);
end;

function TChilkatSocket.SetSslClientCertPfx(const pfxFilename: WideString; 
                                            const pfxPassword: WideString): Integer;
begin
  Result := DefaultInterface.SetSslClientCertPfx(pfxFilename, pfxPassword);
end;

procedure TChilkatSocket.SleepMs(millisec: Integer);
begin
  DefaultInterface.SleepMs(millisec);
end;

procedure TChilkatSocket.StartTiming;
begin
  DefaultInterface.StartTiming;
end;

function TChilkatSocket.TakeSocket(const sock: IChilkatSocket): Integer;
begin
  Result := DefaultInterface.TakeSocket(sock);
end;

function TChilkatSocket.UnlockComponent(const unlockCode: WideString): Integer;
begin
  Result := DefaultInterface.UnlockComponent(unlockCode);
end;

procedure TChilkatSocket.Dispose;
begin
  DefaultInterface.Dispose;
end;

function TChilkatSocket.BuildHttpGetRequest(const url: WideString): WideString;
begin
  Result := DefaultInterface.BuildHttpGetRequest(url);
end;

procedure TChilkatSocket.DnsCacheClear;
begin
  DefaultInterface.DnsCacheClear;
end;

procedure TChilkatSFtpFile.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID:      '{7D106007-79F8-4D80-9CB7-B6CC4000F0B1}';
    EventIID:     '';
    EventCount:   0;
    EventDispIDs: nil;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
end;

procedure TChilkatSFtpFile.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatSFtpFile;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatSFtpFile.GetControlInterface: IChilkatSFtpFile;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatSFtpFile.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TChilkatSFtpFile.GetLastAccessDt: ICkDateTime;
begin
  Result := DefaultInterface.GetLastAccessDt;
end;

function TChilkatSFtpFile.GetLastModifiedDt: ICkDateTime;
begin
  Result := DefaultInterface.GetLastModifiedDt;
end;

function TChilkatSFtpFile.GetCreateDt: ICkDateTime;
begin
  Result := DefaultInterface.GetCreateDt;
end;

procedure TChilkatSFtpDir.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID:      '{E385A6A7-3557-47F5-9763-252278262C41}';
    EventIID:     '';
    EventCount:   0;
    EventDispIDs: nil;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
end;

procedure TChilkatSFtpDir.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatSFtpDir;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatSFtpDir.GetControlInterface: IChilkatSFtpDir;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatSFtpDir.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TChilkatSFtpDir.GetFilename(index: Integer): WideString;
begin
  Result := DefaultInterface.GetFilename(index);
end;

function TChilkatSFtpDir.GetFileObject(index: Integer): IChilkatSFtpFile;
begin
  Result := DefaultInterface.GetFileObject(index);
end;

procedure TChilkatSFtp.InitControlData;
const
  CEventDispIDs: array [0..4] of DWORD = (
    $00000001, $00000002, $00000003, $00000004, $00000005);
  CControlData: TControlData2 = (
    ClassID:      '{345A5644-4F8E-4BCC-8E65-389B3C9D52B6}';
    EventIID:     '{97DAB705-84AB-4228-8EB7-2A3E657462F7}';
    EventCount:   5;
    EventDispIDs: @CEventDispIDs;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
  TControlData2(CControlData).FirstEventOfs := UIntPtr(@@FOnAbortCheck) - UIntPtr(Self);
end;

procedure TChilkatSFtp.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatSFtp;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatSFtp.GetControlInterface: IChilkatSFtp;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatSFtp.Get_AccumulateBuffer: OleVariant;
begin
  Result := DefaultInterface.AccumulateBuffer;
end;

function TChilkatSFtp.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TChilkatSFtp.AccumulateBytes(const handle: WideString; maxBytes: Integer): Integer;
begin
  Result := DefaultInterface.AccumulateBytes(handle, maxBytes);
end;

function TChilkatSFtp.Add64(const n1: WideString; const n2: WideString): WideString;
begin
  Result := DefaultInterface.Add64(n1, n2);
end;

function TChilkatSFtp.AuthenticatePk(const UserName: WideString; const PrivateKey: IChilkatSshKey): Integer;
begin
  Result := DefaultInterface.AuthenticatePk(UserName, PrivateKey);
end;

function TChilkatSFtp.AuthenticatePw(const Login: WideString; const password: WideString): Integer;
begin
  Result := DefaultInterface.AuthenticatePw(Login, password);
end;

function TChilkatSFtp.AuthenticatePwPk(const UserName: WideString; const password: WideString; 
                                       const PrivateKey: IChilkatSshKey): Integer;
begin
  Result := DefaultInterface.AuthenticatePwPk(UserName, password, PrivateKey);
end;

procedure TChilkatSFtp.ClearAccumulateBuffer;
begin
  DefaultInterface.ClearAccumulateBuffer;
end;

procedure TChilkatSFtp.ClearCache;
begin
  DefaultInterface.ClearCache;
end;

procedure TChilkatSFtp.ClearSessionLog;
begin
  DefaultInterface.ClearSessionLog;
end;

function TChilkatSFtp.CloseHandle(const handle: WideString): Integer;
begin
  Result := DefaultInterface.CloseHandle(handle);
end;

function TChilkatSFtp.Connect(const Hostname: WideString; Port: Integer): Integer;
begin
  Result := DefaultInterface.Connect(Hostname, Port);
end;

function TChilkatSFtp.CopyFileAttr(const localFilename: WideString; 
                                   const remoteFilename: WideString; bIsHandle: Integer): Integer;
begin
  Result := DefaultInterface.CopyFileAttr(localFilename, remoteFilename, bIsHandle);
end;

function TChilkatSFtp.CreateDir(const path: WideString): Integer;
begin
  Result := DefaultInterface.CreateDir(path);
end;

procedure TChilkatSFtp.Disconnect;
begin
  DefaultInterface.Disconnect;
end;

function TChilkatSFtp.DownloadFile(const handle: WideString; const toFilename: WideString): Integer;
begin
  Result := DefaultInterface.DownloadFile(handle, toFilename);
end;

function TChilkatSFtp.DownloadFileByName(const remoteFilePath: WideString; 
                                         const localFilePath: WideString): Integer;
begin
  Result := DefaultInterface.DownloadFileByName(remoteFilePath, localFilePath);
end;

function TChilkatSFtp.Eof(const handle: WideString): Integer;
begin
  Result := DefaultInterface.Eof(handle);
end;

function TChilkatSFtp.GetFileCreateDt(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                                      bIsHandle: Integer): ICkDateTime;
begin
  Result := DefaultInterface.GetFileCreateDt(filenameOrHandle, bFollowLinks, bIsHandle);
end;

function TChilkatSFtp.GetFileCreateTime(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                                        bIsHandle: Integer): TDateTime;
begin
  Result := DefaultInterface.GetFileCreateTime(filenameOrHandle, bFollowLinks, bIsHandle);
end;

function TChilkatSFtp.GetFileCreateTimeStr(const filenameOrHandle: WideString; 
                                           bFollowLinks: Integer; bIsHandle: Integer): WideString;
begin
  Result := DefaultInterface.GetFileCreateTimeStr(filenameOrHandle, bFollowLinks, bIsHandle);
end;

function TChilkatSFtp.GetFileGroup(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                                   bIsHandle: Integer): WideString;
begin
  Result := DefaultInterface.GetFileGroup(filenameOrHandle, bFollowLinks, bIsHandle);
end;

function TChilkatSFtp.GetFileLastAccess(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                                        bIsHandle: Integer): TDateTime;
begin
  Result := DefaultInterface.GetFileLastAccess(filenameOrHandle, bFollowLinks, bIsHandle);
end;

function TChilkatSFtp.GetFileLastAccessDt(const filenameOrHandle: WideString; 
                                          bFollowLinks: Integer; bIsHandle: Integer): ICkDateTime;
begin
  Result := DefaultInterface.GetFileLastAccessDt(filenameOrHandle, bFollowLinks, bIsHandle);
end;

function TChilkatSFtp.GetFileLastAccessStr(const filenameOrHandle: WideString; 
                                           bFollowLinks: Integer; bIsHandle: Integer): WideString;
begin
  Result := DefaultInterface.GetFileLastAccessStr(filenameOrHandle, bFollowLinks, bIsHandle);
end;

function TChilkatSFtp.GetFileLastModified(const filenameOrHandle: WideString; 
                                          bFollowLinks: Integer; bIsHandle: Integer): TDateTime;
begin
  Result := DefaultInterface.GetFileLastModified(filenameOrHandle, bFollowLinks, bIsHandle);
end;

function TChilkatSFtp.GetFileLastModifiedDt(const filenameOrHandle: WideString; 
                                            bFollowLinks: Integer; bIsHandle: Integer): ICkDateTime;
begin
  Result := DefaultInterface.GetFileLastModifiedDt(filenameOrHandle, bFollowLinks, bIsHandle);
end;

function TChilkatSFtp.GetFileLastModifiedStr(const filenameOrHandle: WideString; 
                                             bFollowLinks: Integer; bIsHandle: Integer): WideString;
begin
  Result := DefaultInterface.GetFileLastModifiedStr(filenameOrHandle, bFollowLinks, bIsHandle);
end;

function TChilkatSFtp.GetFileOwner(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                                   bIsHandle: Integer): WideString;
begin
  Result := DefaultInterface.GetFileOwner(filenameOrHandle, bFollowLinks, bIsHandle);
end;

function TChilkatSFtp.GetFilePermissions(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                                         bIsHandle: Integer): Integer;
begin
  Result := DefaultInterface.GetFilePermissions(filenameOrHandle, bFollowLinks, bIsHandle);
end;

function TChilkatSFtp.GetFileSize32(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                                    bIsHandle: Integer): Integer;
begin
  Result := DefaultInterface.GetFileSize32(filenameOrHandle, bFollowLinks, bIsHandle);
end;

function TChilkatSFtp.GetFileSizeStr(const filenameOrHandle: WideString; bFollowLinks: Integer; 
                                     bIsHandle: Integer): WideString;
begin
  Result := DefaultInterface.GetFileSizeStr(filenameOrHandle, bFollowLinks, bIsHandle);
end;

function TChilkatSFtp.InitializeSftp: Integer;
begin
  Result := DefaultInterface.InitializeSftp;
end;

function TChilkatSFtp.LastReadFailed(const handle: WideString): Integer;
begin
  Result := DefaultInterface.LastReadFailed(handle);
end;

function TChilkatSFtp.LastReadNumBytes(const handle: WideString): Integer;
begin
  Result := DefaultInterface.LastReadNumBytes(handle);
end;

function TChilkatSFtp.OpenDir(const path: WideString): WideString;
begin
  Result := DefaultInterface.OpenDir(path);
end;

function TChilkatSFtp.OpenFile(const filename: WideString; const access: WideString; 
                               const createDisp: WideString): WideString;
begin
  Result := DefaultInterface.OpenFile(filename, access, createDisp);
end;

function TChilkatSFtp.ReadDir(const handle: WideString): IChilkatSFtpDir;
begin
  Result := DefaultInterface.ReadDir(handle);
end;

function TChilkatSFtp.ReadFileBytes(const handle: WideString; numBytes: Integer): OleVariant;
begin
  Result := DefaultInterface.ReadFileBytes(handle, numBytes);
end;

function TChilkatSFtp.ReadFileBytes32(const handle: WideString; offset: Integer; numBytes: Integer): OleVariant;
begin
  Result := DefaultInterface.ReadFileBytes32(handle, offset, numBytes);
end;

function TChilkatSFtp.ReadFileBytes64s(const handle: WideString; const offset64: WideString; 
                                       numBytes: Integer): OleVariant;
begin
  Result := DefaultInterface.ReadFileBytes64s(handle, offset64, numBytes);
end;

function TChilkatSFtp.ReadFileText(const handle: WideString; numBytes: Integer; 
                                   const charset: WideString): WideString;
begin
  Result := DefaultInterface.ReadFileText(handle, numBytes, charset);
end;

function TChilkatSFtp.ReadFileText32(const handle: WideString; offset32: Integer; 
                                     numBytes: Integer; const charset: WideString): WideString;
begin
  Result := DefaultInterface.ReadFileText32(handle, offset32, numBytes, charset);
end;

function TChilkatSFtp.ReadFileText64s(const handle: WideString; const offset64: WideString; 
                                      numBytes: Integer; const charset: WideString): WideString;
begin
  Result := DefaultInterface.ReadFileText64s(handle, offset64, numBytes, charset);
end;

function TChilkatSFtp.RealPath(const OriginalPath: WideString; const composePath: WideString): WideString;
begin
  Result := DefaultInterface.RealPath(OriginalPath, composePath);
end;

function TChilkatSFtp.RemoveDir(const path: WideString): Integer;
begin
  Result := DefaultInterface.RemoveDir(path);
end;

function TChilkatSFtp.RemoveFile(const filename: WideString): Integer;
begin
  Result := DefaultInterface.RemoveFile(filename);
end;

function TChilkatSFtp.RenameFileOrDir(const oldPath: WideString; const newPath: WideString): Integer;
begin
  Result := DefaultInterface.RenameFileOrDir(oldPath, newPath);
end;

function TChilkatSFtp.ResumeDownloadFileByName(const remoteFilePath: WideString; 
                                               const localFilePath: WideString): Integer;
begin
  Result := DefaultInterface.ResumeDownloadFileByName(remoteFilePath, localFilePath);
end;

function TChilkatSFtp.ResumeUploadFileByName(const remoteFilePath: WideString; 
                                             const localFilePath: WideString): Integer;
begin
  Result := DefaultInterface.ResumeUploadFileByName(remoteFilePath, localFilePath);
end;

function TChilkatSFtp.SetCreateDt(const pathOrHandle: WideString; bIsHandle: Integer; 
                                  const CreateTime: ICkDateTime): Integer;
begin
  Result := DefaultInterface.SetCreateDt(pathOrHandle, bIsHandle, CreateTime);
end;

function TChilkatSFtp.SetCreateTime(const pathOrHandle: WideString; bIsHandle: Integer; 
                                    CreateTime: TDateTime): Integer;
begin
  Result := DefaultInterface.SetCreateTime(pathOrHandle, bIsHandle, CreateTime);
end;

function TChilkatSFtp.SetCreateTimeStr(const pathOrHandle: WideString; bIsHandle: Integer; 
                                       const dateTimeStr: WideString): Integer;
begin
  Result := DefaultInterface.SetCreateTimeStr(pathOrHandle, bIsHandle, dateTimeStr);
end;

function TChilkatSFtp.SetLastAccessDt(const pathOrHandle: WideString; bIsHandle: Integer; 
                                      const CreateTime: ICkDateTime): Integer;
begin
  Result := DefaultInterface.SetLastAccessDt(pathOrHandle, bIsHandle, CreateTime);
end;

function TChilkatSFtp.SetLastAccessTime(const pathOrHandle: WideString; bIsHandle: Integer; 
                                        CreateTime: TDateTime): Integer;
begin
  Result := DefaultInterface.SetLastAccessTime(pathOrHandle, bIsHandle, CreateTime);
end;

function TChilkatSFtp.SetLastAccessTimeStr(const pathOrHandle: WideString; bIsHandle: Integer; 
                                           const dateTimeStr: WideString): Integer;
begin
  Result := DefaultInterface.SetLastAccessTimeStr(pathOrHandle, bIsHandle, dateTimeStr);
end;

function TChilkatSFtp.SetLastModifiedDt(const pathOrHandle: WideString; bIsHandle: Integer; 
                                        const CreateTime: ICkDateTime): Integer;
begin
  Result := DefaultInterface.SetLastModifiedDt(pathOrHandle, bIsHandle, CreateTime);
end;

function TChilkatSFtp.SetLastModifiedTime(const pathOrHandle: WideString; bIsHandle: Integer; 
                                          CreateTime: TDateTime): Integer;
begin
  Result := DefaultInterface.SetLastModifiedTime(pathOrHandle, bIsHandle, CreateTime);
end;

function TChilkatSFtp.SetLastModifiedTimeStr(const pathOrHandle: WideString; bIsHandle: Integer; 
                                             const dateTimeStr: WideString): Integer;
begin
  Result := DefaultInterface.SetLastModifiedTimeStr(pathOrHandle, bIsHandle, dateTimeStr);
end;

function TChilkatSFtp.SetOwnerAndGroup(const pathOrHandle: WideString; bIsHandle: Integer; 
                                       const Owner: WideString; const Group: WideString): Integer;
begin
  Result := DefaultInterface.SetOwnerAndGroup(pathOrHandle, bIsHandle, Owner, Group);
end;

function TChilkatSFtp.SetPermissions(const pathOrHandle: WideString; bIsHandle: Integer; 
                                     perm: Integer): Integer;
begin
  Result := DefaultInterface.SetPermissions(pathOrHandle, bIsHandle, perm);
end;

function TChilkatSFtp.SyncTreeUpload(const localBaseDir: WideString; 
                                     const remoteBaseDir: WideString; mode: Integer; 
                                     bRecurse: Integer): Integer;
begin
  Result := DefaultInterface.SyncTreeUpload(localBaseDir, remoteBaseDir, mode, bRecurse);
end;

function TChilkatSFtp.UnlockComponent(const unlockCode: WideString): Integer;
begin
  Result := DefaultInterface.UnlockComponent(unlockCode);
end;

function TChilkatSFtp.UploadFile(const handle: WideString; const fromFilename: WideString): Integer;
begin
  Result := DefaultInterface.UploadFile(handle, fromFilename);
end;

function TChilkatSFtp.UploadFileByName(const remoteFilePath: WideString; 
                                       const localFilePath: WideString): Integer;
begin
  Result := DefaultInterface.UploadFileByName(remoteFilePath, localFilePath);
end;

function TChilkatSFtp.WriteFileBytes(const handle: WideString; data: OleVariant): Integer;
begin
  Result := DefaultInterface.WriteFileBytes(handle, data);
end;

function TChilkatSFtp.WriteFileBytes32(const handle: WideString; offset: Integer; data: OleVariant): Integer;
begin
  Result := DefaultInterface.WriteFileBytes32(handle, offset, data);
end;

function TChilkatSFtp.WriteFileBytes64s(const handle: WideString; const offset64: WideString; 
                                        data: OleVariant): Integer;
begin
  Result := DefaultInterface.WriteFileBytes64s(handle, offset64, data);
end;

function TChilkatSFtp.WriteFileText(const handle: WideString; const charset: WideString; 
                                    const textData: WideString): Integer;
begin
  Result := DefaultInterface.WriteFileText(handle, charset, textData);
end;

function TChilkatSFtp.WriteFileText32(const handle: WideString; offset32: Integer; 
                                      const charset: WideString; const textData: WideString): Integer;
begin
  Result := DefaultInterface.WriteFileText32(handle, offset32, charset, textData);
end;

function TChilkatSFtp.WriteFileText64s(const handle: WideString; const offset64: WideString; 
                                       const charset: WideString; const textData: WideString): Integer;
begin
  Result := DefaultInterface.WriteFileText64s(handle, offset64, charset, textData);
end;

function TChilkatSFtp.SyncTreeDownload(const remoteRoot: WideString; const localRoot: WideString; 
                                       mode: Integer; recurse: Integer): Integer;
begin
  Result := DefaultInterface.SyncTreeDownload(remoteRoot, localRoot, mode, recurse);
end;

procedure TChilkatRss.InitControlData;
const
  CEventDispIDs: array [0..2] of DWORD = (
    $00000001, $00000002, $00000003);
  CControlData: TControlData2 = (
    ClassID:      '{CC55FCB9-0500-45C2-8FED-CCB7D1A54A24}';
    EventIID:     '{91D24DB1-0F9E-4E77-B629-70BEE2F61D36}';
    EventCount:   3;
    EventDispIDs: @CEventDispIDs;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
  TControlData2(CControlData).FirstEventOfs := UIntPtr(@@FOnAbortCheck) - UIntPtr(Self);
end;

procedure TChilkatRss.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatRss;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatRss.GetControlInterface: IChilkatRss;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatRss.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TChilkatRss.AddNewChannel: IChilkatRss;
begin
  Result := DefaultInterface.AddNewChannel;
end;

function TChilkatRss.AddNewImage: IChilkatRss;
begin
  Result := DefaultInterface.AddNewImage;
end;

function TChilkatRss.AddNewItem: IChilkatRss;
begin
  Result := DefaultInterface.AddNewItem;
end;

function TChilkatRss.DownloadRss(const url: WideString): Integer;
begin
  Result := DefaultInterface.DownloadRss(url);
end;

function TChilkatRss.GetAttr(const Tag: WideString; const attrName: WideString): WideString;
begin
  Result := DefaultInterface.GetAttr(Tag, attrName);
end;

function TChilkatRss.GetChannel(index: Integer): IChilkatRss;
begin
  Result := DefaultInterface.GetChannel(index);
end;

function TChilkatRss.GetCount(const Tag: WideString): Integer;
begin
  Result := DefaultInterface.GetCount(Tag);
end;

function TChilkatRss.GetDate(const Tag: WideString): TDateTime;
begin
  Result := DefaultInterface.GetDate(Tag);
end;

function TChilkatRss.GetDateStr(const Tag: WideString): WideString;
begin
  Result := DefaultInterface.GetDateStr(Tag);
end;

function TChilkatRss.GetImage: IChilkatRss;
begin
  Result := DefaultInterface.GetImage;
end;

function TChilkatRss.GetInt(const Tag: WideString): Integer;
begin
  Result := DefaultInterface.GetInt(Tag);
end;

function TChilkatRss.GetItem(index: Integer): IChilkatRss;
begin
  Result := DefaultInterface.GetItem(index);
end;

function TChilkatRss.GetString(const Tag: WideString): WideString;
begin
  Result := DefaultInterface.GetString(Tag);
end;

function TChilkatRss.LoadRssFile(const filename: WideString): Integer;
begin
  Result := DefaultInterface.LoadRssFile(filename);
end;

function TChilkatRss.LoadRssString(const rssString: WideString): Integer;
begin
  Result := DefaultInterface.LoadRssString(rssString);
end;

function TChilkatRss.MGetAttr(const Tag: WideString; index: Integer; const attrName: WideString): WideString;
begin
  Result := DefaultInterface.MGetAttr(Tag, index, attrName);
end;

function TChilkatRss.MGetString(const Tag: WideString; index: Integer): WideString;
begin
  Result := DefaultInterface.MGetString(Tag, index);
end;

function TChilkatRss.MSetAttr(const Tag: WideString; idx: Integer; const attrName: WideString; 
                              const value: WideString): Integer;
begin
  Result := DefaultInterface.MSetAttr(Tag, idx, attrName, value);
end;

function TChilkatRss.MSetString(const Tag: WideString; idx: Integer; const value: WideString): Integer;
begin
  Result := DefaultInterface.MSetString(Tag, idx, value);
end;

procedure TChilkatRss.NewRss;
begin
  DefaultInterface.NewRss;
end;

procedure TChilkatRss.Remove(const Tag: WideString);
begin
  DefaultInterface.Remove(Tag);
end;

procedure TChilkatRss.SetAttr(const Tag: WideString; const attrName: WideString; 
                              const value: WideString);
begin
  DefaultInterface.SetAttr(Tag, attrName, value);
end;

procedure TChilkatRss.SetDate(const Tag: WideString; dateTime: TDateTime);
begin
  DefaultInterface.SetDate(Tag, dateTime);
end;

procedure TChilkatRss.SetDateNow(const Tag: WideString);
begin
  DefaultInterface.SetDateNow(Tag);
end;

procedure TChilkatRss.SetDateStr(const Tag: WideString; const dateTimeStr: WideString);
begin
  DefaultInterface.SetDateStr(Tag, dateTimeStr);
end;

procedure TChilkatRss.SetInt(const Tag: WideString; value: Integer);
begin
  DefaultInterface.SetInt(Tag, value);
end;

procedure TChilkatRss.SetString(const Tag: WideString; const value: WideString);
begin
  DefaultInterface.SetString(Tag, value);
end;

function TChilkatRss.ToXmlString: WideString;
begin
  Result := DefaultInterface.ToXmlString;
end;

procedure TChilkatRsa.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID:      '{28309D42-1299-4797-AED4-64FD33B47923}';
    EventIID:     '';
    EventCount:   0;
    EventDispIDs: nil;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
end;

procedure TChilkatRsa.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatRsa;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatRsa.GetControlInterface: IChilkatRsa;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatRsa.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TChilkatRsa.DecryptBytes(data: OleVariant; bUsePrivateKey: Integer): OleVariant;
begin
  Result := DefaultInterface.DecryptBytes(data, bUsePrivateKey);
end;

function TChilkatRsa.DecryptBytesENC(const str: WideString; bUsePrivateKey: Integer): OleVariant;
begin
  Result := DefaultInterface.DecryptBytesENC(str, bUsePrivateKey);
end;

function TChilkatRsa.DecryptString(data: OleVariant; bUsePrivateKey: Integer): WideString;
begin
  Result := DefaultInterface.DecryptString(data, bUsePrivateKey);
end;

function TChilkatRsa.DecryptStringENC(const str: WideString; bUsePrivateKey: Integer): WideString;
begin
  Result := DefaultInterface.DecryptStringENC(str, bUsePrivateKey);
end;

function TChilkatRsa.EncryptBytes(data: OleVariant; bUsePrivateKey: Integer): OleVariant;
begin
  Result := DefaultInterface.EncryptBytes(data, bUsePrivateKey);
end;

function TChilkatRsa.EncryptBytesENC(data: OleVariant; bUsePrivateKey: Integer): WideString;
begin
  Result := DefaultInterface.EncryptBytesENC(data, bUsePrivateKey);
end;

function TChilkatRsa.EncryptString(const str: WideString; bUsePrivateKey: Integer): OleVariant;
begin
  Result := DefaultInterface.EncryptString(str, bUsePrivateKey);
end;

function TChilkatRsa.EncryptStringENC(const str: WideString; bUsePrivateKey: Integer): WideString;
begin
  Result := DefaultInterface.EncryptStringENC(str, bUsePrivateKey);
end;

function TChilkatRsa.ExportPrivateKey: WideString;
begin
  Result := DefaultInterface.ExportPrivateKey;
end;

function TChilkatRsa.ExportPublicKey: WideString;
begin
  Result := DefaultInterface.ExportPublicKey;
end;

function TChilkatRsa.GenerateKey(numBits: Integer): Integer;
begin
  Result := DefaultInterface.GenerateKey(numBits);
end;

function TChilkatRsa.ImportPrivateKey(const xml: WideString): Integer;
begin
  Result := DefaultInterface.ImportPrivateKey(xml);
end;

function TChilkatRsa.ImportPublicKey(const xml: WideString): Integer;
begin
  Result := DefaultInterface.ImportPublicKey(xml);
end;

function TChilkatRsa.OpenSslSignBytes(data: OleVariant): OleVariant;
begin
  Result := DefaultInterface.OpenSslSignBytes(data);
end;

function TChilkatRsa.OpenSslSignBytesENC(data: OleVariant): WideString;
begin
  Result := DefaultInterface.OpenSslSignBytesENC(data);
end;

function TChilkatRsa.OpenSslSignString(const str: WideString): OleVariant;
begin
  Result := DefaultInterface.OpenSslSignString(str);
end;

function TChilkatRsa.OpenSslSignStringENC(const str: WideString): WideString;
begin
  Result := DefaultInterface.OpenSslSignStringENC(str);
end;

function TChilkatRsa.OpenSslVerifyBytes(signature: OleVariant): OleVariant;
begin
  Result := DefaultInterface.OpenSslVerifyBytes(signature);
end;

function TChilkatRsa.OpenSslVerifyBytesENC(const str: WideString): OleVariant;
begin
  Result := DefaultInterface.OpenSslVerifyBytesENC(str);
end;

function TChilkatRsa.OpenSslVerifyString(data: OleVariant): WideString;
begin
  Result := DefaultInterface.OpenSslVerifyString(data);
end;

function TChilkatRsa.OpenSslVerifyStringENC(const str: WideString): WideString;
begin
  Result := DefaultInterface.OpenSslVerifyStringENC(str);
end;

function TChilkatRsa.SignBytes(data: OleVariant; const hashAlg: WideString): OleVariant;
begin
  Result := DefaultInterface.SignBytes(data, hashAlg);
end;

function TChilkatRsa.SignBytesENC(data: OleVariant; const hashAlg: WideString): WideString;
begin
  Result := DefaultInterface.SignBytesENC(data, hashAlg);
end;

function TChilkatRsa.SignHash(HashBytes: OleVariant; const hashAlg: WideString): OleVariant;
begin
  Result := DefaultInterface.SignHash(HashBytes, hashAlg);
end;

function TChilkatRsa.SignHashENC(const encodedHash: WideString; const hashAlg: WideString): WideString;
begin
  Result := DefaultInterface.SignHashENC(encodedHash, hashAlg);
end;

function TChilkatRsa.SignString(const str: WideString; const hashAlg: WideString): OleVariant;
begin
  Result := DefaultInterface.SignString(str, hashAlg);
end;

function TChilkatRsa.SignStringENC(const str: WideString; const hashAlg: WideString): WideString;
begin
  Result := DefaultInterface.SignStringENC(str, hashAlg);
end;

function TChilkatRsa.SnkToXml(const filename: WideString): WideString;
begin
  Result := DefaultInterface.SnkToXml(filename);
end;

function TChilkatRsa.UnlockComponent(const unlockCode: WideString): Integer;
begin
  Result := DefaultInterface.UnlockComponent(unlockCode);
end;

function TChilkatRsa.VerifyBytes(data: OleVariant; const hashAlg: WideString; sig: OleVariant): Integer;
begin
  Result := DefaultInterface.VerifyBytes(data, hashAlg, sig);
end;

function TChilkatRsa.VerifyBytesENC(data: OleVariant; const hashAlg: WideString; 
                                    const encodedSig: WideString): Integer;
begin
  Result := DefaultInterface.VerifyBytesENC(data, hashAlg, encodedSig);
end;

function TChilkatRsa.VerifyHash(HashBytes: OleVariant; const hashAlg: WideString; 
                                sigBytes: OleVariant): Integer;
begin
  Result := DefaultInterface.VerifyHash(HashBytes, hashAlg, sigBytes);
end;

function TChilkatRsa.VerifyHashENC(const encodedHash: WideString; const hashAlg: WideString; 
                                   const encodedSig: WideString): Integer;
begin
  Result := DefaultInterface.VerifyHashENC(encodedHash, hashAlg, encodedSig);
end;

function TChilkatRsa.VerifyPrivateKey(const xml: WideString): Integer;
begin
  Result := DefaultInterface.VerifyPrivateKey(xml);
end;

function TChilkatRsa.VerifyString(const str: WideString; const hashAlg: WideString; sig: OleVariant): Integer;
begin
  Result := DefaultInterface.VerifyString(str, hashAlg, sig);
end;

function TChilkatRsa.VerifyStringENC(const str: WideString; const hashAlg: WideString; 
                                     const sig: WideString): Integer;
begin
  Result := DefaultInterface.VerifyStringENC(str, hashAlg, sig);
end;

function TChilkatRsa.ImportPrivateKeyObj(const key: IPrivateKey): Integer;
begin
  Result := DefaultInterface.ImportPrivateKeyObj(key);
end;

function TChilkatRsa.ImportPublicKeyObj(const key: IPublicKey): Integer;
begin
  Result := DefaultInterface.ImportPublicKeyObj(key);
end;

function TChilkatRsa.ExportPrivateKeyObj: IPrivateKey;
begin
  Result := DefaultInterface.ExportPrivateKeyObj;
end;

function TChilkatRsa.ExportPublicKeyObj: IPublicKey;
begin
  Result := DefaultInterface.ExportPublicKeyObj;
end;

procedure TChilkatOmaDrm.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID:      '{8991C83A-A895-4E5E-9D7D-B787DE6396E2}';
    EventIID:     '';
    EventCount:   0;
    EventDispIDs: nil;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
end;

procedure TChilkatOmaDrm.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatOmaDrm;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatOmaDrm.GetControlInterface: IChilkatOmaDrm;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatOmaDrm.Get_DecryptedData: OleVariant;
begin
  Result := DefaultInterface.DecryptedData;
end;

function TChilkatOmaDrm.Get_EncryptedData: OleVariant;
begin
  Result := DefaultInterface.EncryptedData;
end;

function TChilkatOmaDrm.Get_IV: OleVariant;
begin
  Result := DefaultInterface.IV;
end;

procedure TChilkatOmaDrm.Set_IV(pVal: OleVariant);
begin
  DefaultInterface.IV := pVal;
end;

function TChilkatOmaDrm.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TChilkatOmaDrm.CreateDcfFile(const filename: WideString): Integer;
begin
  Result := DefaultInterface.CreateDcfFile(filename);
end;

function TChilkatOmaDrm.GetHeaderField(const fieldName: WideString): WideString;
begin
  Result := DefaultInterface.GetHeaderField(fieldName);
end;

function TChilkatOmaDrm.LoadDcfData(data: OleVariant): Integer;
begin
  Result := DefaultInterface.LoadDcfData(data);
end;

function TChilkatOmaDrm.LoadDcfFile(const filename: WideString): Integer;
begin
  Result := DefaultInterface.LoadDcfFile(filename);
end;

procedure TChilkatOmaDrm.LoadUnencryptedData(data: OleVariant);
begin
  DefaultInterface.LoadUnencryptedData(data);
end;

function TChilkatOmaDrm.LoadUnencryptedFile(const filename: WideString): Integer;
begin
  Result := DefaultInterface.LoadUnencryptedFile(filename);
end;

function TChilkatOmaDrm.SaveDecrypted(const filename: WideString): Integer;
begin
  Result := DefaultInterface.SaveDecrypted(filename);
end;

procedure TChilkatOmaDrm.SetEncodedIV(const encodedIv: WideString; const encoding: WideString);
begin
  DefaultInterface.SetEncodedIV(encodedIv, encoding);
end;

function TChilkatOmaDrm.UnlockComponent(const b1: WideString): Integer;
begin
  Result := DefaultInterface.UnlockComponent(b1);
end;

procedure TChilkatNtlm.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID:      '{47A6DFB7-4A42-434A-B794-59F6FB26563B}';
    EventIID:     '';
    EventCount:   0;
    EventDispIDs: nil;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
end;

procedure TChilkatNtlm.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatNtlm;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatNtlm.GetControlInterface: IChilkatNtlm;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatNtlm.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TChilkatNtlm.CompareType3(const msg1: WideString; const msg2: WideString): Integer;
begin
  Result := DefaultInterface.CompareType3(msg1, msg2);
end;

function TChilkatNtlm.GenType1: WideString;
begin
  Result := DefaultInterface.GenType1;
end;

function TChilkatNtlm.GenType2(const type1Msg: WideString): WideString;
begin
  Result := DefaultInterface.GenType2(type1Msg);
end;

function TChilkatNtlm.GenType3(const type2Msg: WideString): WideString;
begin
  Result := DefaultInterface.GenType3(type2Msg);
end;

function TChilkatNtlm.LoadType3(const type3Msg: WideString): Integer;
begin
  Result := DefaultInterface.LoadType3(type3Msg);
end;

function TChilkatNtlm.ParseType1(const type1Msg: WideString): WideString;
begin
  Result := DefaultInterface.ParseType1(type1Msg);
end;

function TChilkatNtlm.ParseType2(const type2Msg: WideString): WideString;
begin
  Result := DefaultInterface.ParseType2(type2Msg);
end;

function TChilkatNtlm.ParseType3(const type3Msg: WideString): WideString;
begin
  Result := DefaultInterface.ParseType3(type3Msg);
end;

function TChilkatNtlm.SetFlag(const flagLetter: WideString; onOrOff: Integer): Integer;
begin
  Result := DefaultInterface.SetFlag(flagLetter, onOrOff);
end;

function TChilkatNtlm.UnlockComponent(const unlockCode: WideString): Integer;
begin
  Result := DefaultInterface.UnlockComponent(unlockCode);
end;

procedure TChilkatMime.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID:      '{13D60A54-46AE-4B1A-86F3-652A79EA88C6}';
    EventIID:     '';
    EventCount:   0;
    EventDispIDs: nil;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
end;

procedure TChilkatMime.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatMime;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatMime.GetControlInterface: IChilkatMime;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatMime.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

procedure TChilkatMime.AddContentLength;
begin
  DefaultInterface.AddContentLength;
end;

function TChilkatMime.AddDetachedSignature(const cert: IChilkatCert): Integer;
begin
  Result := DefaultInterface.AddDetachedSignature(cert);
end;

function TChilkatMime.AddDetachedSignature2(const cert: IChilkatCert; transferHeaderFields: Integer): Integer;
begin
  Result := DefaultInterface.AddDetachedSignature2(cert, transferHeaderFields);
end;

function TChilkatMime.AddDetachedSignaturePk(const cert: IChilkatCert; const PrivateKey: IPrivateKey): Integer;
begin
  Result := DefaultInterface.AddDetachedSignaturePk(cert, PrivateKey);
end;

function TChilkatMime.AddDetachedSignaturePk2(const cert: IChilkatCert; 
                                              const PrivateKey: IPrivateKey; 
                                              transferHeaderFields: Integer): Integer;
begin
  Result := DefaultInterface.AddDetachedSignaturePk2(cert, PrivateKey, transferHeaderFields);
end;

function TChilkatMime.AddEncryptCert(const cert: IChilkatCert): Integer;
begin
  Result := DefaultInterface.AddEncryptCert(cert);
end;

function TChilkatMime.AddHeaderField(const name: WideString; const value: WideString): Integer;
begin
  Result := DefaultInterface.AddHeaderField(name, value);
end;

function TChilkatMime.AddPfxSourceData(pfxData: OleVariant; const password: WideString): Integer;
begin
  Result := DefaultInterface.AddPfxSourceData(pfxData, password);
end;

function TChilkatMime.AddPfxSourceFile(const pfxFilePath: WideString; const password: WideString): Integer;
begin
  Result := DefaultInterface.AddPfxSourceFile(pfxFilePath, password);
end;

function TChilkatMime.AppendPart(const mime: IChilkatMime): Integer;
begin
  Result := DefaultInterface.AppendPart(mime);
end;

function TChilkatMime.AppendPartFromFile(const filename: WideString): Integer;
begin
  Result := DefaultInterface.AppendPartFromFile(filename);
end;

function TChilkatMime.AsnBodyToXml: WideString;
begin
  Result := DefaultInterface.AsnBodyToXml;
end;

procedure TChilkatMime.ClearEncryptCerts;
begin
  DefaultInterface.ClearEncryptCerts;
end;

function TChilkatMime.ContainsEncryptedParts: Integer;
begin
  Result := DefaultInterface.ContainsEncryptedParts;
end;

function TChilkatMime.ContainsSignedParts: Integer;
begin
  Result := DefaultInterface.ContainsSignedParts;
end;

procedure TChilkatMime.Convert8Bit;
begin
  DefaultInterface.Convert8Bit;
end;

function TChilkatMime.ConvertToMultipartAlt: Integer;
begin
  Result := DefaultInterface.ConvertToMultipartAlt;
end;

function TChilkatMime.ConvertToMultipartMixed: Integer;
begin
  Result := DefaultInterface.ConvertToMultipartMixed;
end;

function TChilkatMime.ConvertToSigned(const cert: IChilkatCert): Integer;
begin
  Result := DefaultInterface.ConvertToSigned(cert);
end;

function TChilkatMime.ConvertToSignedPk(const cert: IChilkatCert; const PrivateKey: IPrivateKey): Integer;
begin
  Result := DefaultInterface.ConvertToSignedPk(cert, PrivateKey);
end;

function TChilkatMime.Decrypt: Integer;
begin
  Result := DefaultInterface.Decrypt;
end;

function TChilkatMime.Decrypt2(const cert: IChilkatCert; const PrivateKey: IPrivateKey): Integer;
begin
  Result := DefaultInterface.Decrypt2(cert, PrivateKey);
end;

function TChilkatMime.DecryptUsingPfxData(pfxData: OleVariant; const password: WideString): Integer;
begin
  Result := DefaultInterface.DecryptUsingPfxData(pfxData, password);
end;

function TChilkatMime.DecryptUsingPfxFile(const pfxFilePath: WideString; const password: WideString): Integer;
begin
  Result := DefaultInterface.DecryptUsingPfxFile(pfxFilePath, password);
end;

function TChilkatMime.Encrypt(const cert: IChilkatCert): Integer;
begin
  Result := DefaultInterface.Encrypt(cert);
end;

function TChilkatMime.EncryptN: Integer;
begin
  Result := DefaultInterface.EncryptN;
end;

function TChilkatMime.ExtractPartsToFiles(const dirPath: WideString): ICkStringArray;
begin
  Result := DefaultInterface.ExtractPartsToFiles(dirPath);
end;

function TChilkatMime.FindIssuer(const cert: IChilkatCert): IChilkatCert;
begin
  Result := DefaultInterface.FindIssuer(cert);
end;

function TChilkatMime.GetBodyBinary: OleVariant;
begin
  Result := DefaultInterface.GetBodyBinary;
end;

function TChilkatMime.GetBodyDecoded: WideString;
begin
  Result := DefaultInterface.GetBodyDecoded;
end;

function TChilkatMime.GetBodyEncoded: WideString;
begin
  Result := DefaultInterface.GetBodyEncoded;
end;

function TChilkatMime.GetEncryptCert(index: Integer): IChilkatCert;
begin
  Result := DefaultInterface.GetEncryptCert(index);
end;

function TChilkatMime.GetEntireBody: WideString;
begin
  Result := DefaultInterface.GetEntireBody;
end;

function TChilkatMime.GetEntireHead: WideString;
begin
  Result := DefaultInterface.GetEntireHead;
end;

function TChilkatMime.GetHeaderField(const name: WideString): WideString;
begin
  Result := DefaultInterface.GetHeaderField(name);
end;

function TChilkatMime.GetHeaderFieldAttribute(const name: WideString; const attrName: WideString): WideString;
begin
  Result := DefaultInterface.GetHeaderFieldAttribute(name, attrName);
end;

function TChilkatMime.GetHeaderFieldName(index: Integer): WideString;
begin
  Result := DefaultInterface.GetHeaderFieldName(index);
end;

function TChilkatMime.GetHeaderFieldValue(index: Integer): WideString;
begin
  Result := DefaultInterface.GetHeaderFieldValue(index);
end;

function TChilkatMime.GetMime: WideString;
begin
  Result := DefaultInterface.GetMime;
end;

function TChilkatMime.GetMimeBytes: OleVariant;
begin
  Result := DefaultInterface.GetMimeBytes;
end;

function TChilkatMime.GetPart(index: Integer): IChilkatMime;
begin
  Result := DefaultInterface.GetPart(index);
end;

function TChilkatMime.GetSignatureSigningTime(index: Integer): TDateTime;
begin
  Result := DefaultInterface.GetSignatureSigningTime(index);
end;

function TChilkatMime.GetSignatureSigningTimeStr(index: Integer): WideString;
begin
  Result := DefaultInterface.GetSignatureSigningTimeStr(index);
end;

function TChilkatMime.GetSignerCert(index: Integer): IChilkatCert;
begin
  Result := DefaultInterface.GetSignerCert(index);
end;

function TChilkatMime.GetXml: WideString;
begin
  Result := DefaultInterface.GetXml;
end;

function TChilkatMime.HasSignatureSigningTime(index: Integer): Integer;
begin
  Result := DefaultInterface.HasSignatureSigningTime(index);
end;

function TChilkatMime.IsApplicationData: Integer;
begin
  Result := DefaultInterface.IsApplicationData;
end;

function TChilkatMime.IsAttachment: Integer;
begin
  Result := DefaultInterface.IsAttachment;
end;

function TChilkatMime.IsAudio: Integer;
begin
  Result := DefaultInterface.IsAudio;
end;

function TChilkatMime.IsEncrypted: Integer;
begin
  Result := DefaultInterface.IsEncrypted;
end;

function TChilkatMime.IsHtml: Integer;
begin
  Result := DefaultInterface.IsHtml;
end;

function TChilkatMime.IsImage: Integer;
begin
  Result := DefaultInterface.IsImage;
end;

function TChilkatMime.IsMultipart: Integer;
begin
  Result := DefaultInterface.IsMultipart;
end;

function TChilkatMime.IsMultipartAlternative: Integer;
begin
  Result := DefaultInterface.IsMultipartAlternative;
end;

function TChilkatMime.IsMultipartMixed: Integer;
begin
  Result := DefaultInterface.IsMultipartMixed;
end;

function TChilkatMime.IsMultipartRelated: Integer;
begin
  Result := DefaultInterface.IsMultipartRelated;
end;

function TChilkatMime.IsPlainText: Integer;
begin
  Result := DefaultInterface.IsPlainText;
end;

function TChilkatMime.IsSigned: Integer;
begin
  Result := DefaultInterface.IsSigned;
end;

function TChilkatMime.IsText: Integer;
begin
  Result := DefaultInterface.IsText;
end;

function TChilkatMime.IsUnlocked: Integer;
begin
  Result := DefaultInterface.IsUnlocked;
end;

function TChilkatMime.IsVideo: Integer;
begin
  Result := DefaultInterface.IsVideo;
end;

function TChilkatMime.IsXml: Integer;
begin
  Result := DefaultInterface.IsXml;
end;

function TChilkatMime.LoadMime(const mimeMsg: WideString): Integer;
begin
  Result := DefaultInterface.LoadMime(mimeMsg);
end;

function TChilkatMime.LoadMimeBytes(binData: OleVariant): Integer;
begin
  Result := DefaultInterface.LoadMimeBytes(binData);
end;

function TChilkatMime.LoadMimeFile(const filename: WideString): Integer;
begin
  Result := DefaultInterface.LoadMimeFile(filename);
end;

function TChilkatMime.LoadXml(const xml: WideString): Integer;
begin
  Result := DefaultInterface.LoadXml(xml);
end;

function TChilkatMime.LoadXmlFile(const filename: WideString): Integer;
begin
  Result := DefaultInterface.LoadXmlFile(filename);
end;

function TChilkatMime.NewMessageRfc822(const mimeObject: IChilkatMime): Integer;
begin
  Result := DefaultInterface.NewMessageRfc822(mimeObject);
end;

function TChilkatMime.NewMultipartAlternative: Integer;
begin
  Result := DefaultInterface.NewMultipartAlternative;
end;

function TChilkatMime.NewMultipartMixed: Integer;
begin
  Result := DefaultInterface.NewMultipartMixed;
end;

function TChilkatMime.NewMultipartRelated: Integer;
begin
  Result := DefaultInterface.NewMultipartRelated;
end;

procedure TChilkatMime.RemoveHeaderField(const name: WideString; bAllOccurances: Integer);
begin
  DefaultInterface.RemoveHeaderField(name, bAllOccurances);
end;

function TChilkatMime.RemovePart(index: Integer): Integer;
begin
  Result := DefaultInterface.RemovePart(index);
end;

function TChilkatMime.SaveBody(const filename: WideString): Integer;
begin
  Result := DefaultInterface.SaveBody(filename);
end;

function TChilkatMime.SaveMime(const filename: WideString): Integer;
begin
  Result := DefaultInterface.SaveMime(filename);
end;

function TChilkatMime.SaveXml(const filename: WideString): Integer;
begin
  Result := DefaultInterface.SaveXml(filename);
end;

procedure TChilkatMime.SetBody(const str: WideString);
begin
  DefaultInterface.SetBody(str);
end;

function TChilkatMime.SetBodyFromBinary(binData: OleVariant): Integer;
begin
  Result := DefaultInterface.SetBodyFromBinary(binData);
end;

function TChilkatMime.SetBodyFromEncoded(const encoding: WideString; const str: WideString): Integer;
begin
  Result := DefaultInterface.SetBodyFromEncoded(encoding, str);
end;

function TChilkatMime.SetBodyFromFile(const filename: WideString): Integer;
begin
  Result := DefaultInterface.SetBodyFromFile(filename);
end;

function TChilkatMime.SetBodyFromHtml(const str: WideString): Integer;
begin
  Result := DefaultInterface.SetBodyFromHtml(str);
end;

function TChilkatMime.SetBodyFromPlainText(const str: WideString): Integer;
begin
  Result := DefaultInterface.SetBodyFromPlainText(str);
end;

function TChilkatMime.SetBodyFromXml(const str: WideString): Integer;
begin
  Result := DefaultInterface.SetBodyFromXml(str);
end;

function TChilkatMime.SetCSP(const csp: IChilkatCsp): Integer;
begin
  Result := DefaultInterface.SetCSP(csp);
end;

function TChilkatMime.SetHeaderField(const name: WideString; const value: WideString): Integer;
begin
  Result := DefaultInterface.SetHeaderField(name, value);
end;

function TChilkatMime.SetVerifyCert(const cert: IChilkatCert): Integer;
begin
  Result := DefaultInterface.SetVerifyCert(cert);
end;

function TChilkatMime.UnlockComponent(const unlockCode: WideString): Integer;
begin
  Result := DefaultInterface.UnlockComponent(unlockCode);
end;

function TChilkatMime.UnwrapSecurity: Integer;
begin
  Result := DefaultInterface.UnwrapSecurity;
end;

procedure TChilkatMime.UrlEncodeBody(const charset: WideString);
begin
  DefaultInterface.UrlEncodeBody(charset);
end;

function TChilkatMime.Verify: Integer;
begin
  Result := DefaultInterface.Verify;
end;

function TChilkatMime.GetSignerCertChain(index: Integer): IChilkatCertChain;
begin
  Result := DefaultInterface.GetSignerCertChain(index);
end;

function TChilkatMime.UseCertVault(const vault: IChilkatXmlCertVault): Integer;
begin
  Result := DefaultInterface.UseCertVault(vault);
end;

function TChilkatMime.DecryptUsingCert(const cert: IChilkatCert): Integer;
begin
  Result := DefaultInterface.DecryptUsingCert(cert);
end;

function TChilkatMime.AddDecryptCert(const cert: IChilkatCert): Integer;
begin
  Result := DefaultInterface.AddDecryptCert(cert);
end;

procedure TChilkatMht.InitControlData;
const
  CEventDispIDs: array [0..2] of DWORD = (
    $00000001, $00000002, $00000003);
  CControlData: TControlData2 = (
    ClassID:      '{188354F0-DC78-49C2-8390-5FCA2D6B3876}';
    EventIID:     '{91D24DB1-0F9E-4E77-B629-70BEE2F61D36}';
    EventCount:   3;
    EventDispIDs: @CEventDispIDs;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
  TControlData2(CControlData).FirstEventOfs := UIntPtr(@@FOnAbortCheck) - UIntPtr(Self);
end;

procedure TChilkatMht.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatMht;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatMht.GetControlInterface: IChilkatMht;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatMht.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

procedure TChilkatMht.AddCacheRoot(const dir: WideString);
begin
  DefaultInterface.AddCacheRoot(dir);
end;

procedure TChilkatMht.AddCustomHeader(const name: WideString; const value: WideString);
begin
  DefaultInterface.AddCustomHeader(name, value);
end;

procedure TChilkatMht.AddExternalStyleSheet(const url: WideString);
begin
  DefaultInterface.AddExternalStyleSheet(url);
end;

procedure TChilkatMht.ClearCustomHeaders;
begin
  DefaultInterface.ClearCustomHeaders;
end;

procedure TChilkatMht.ExcludeImagesMatching(const pattern: WideString);
begin
  DefaultInterface.ExcludeImagesMatching(pattern);
end;

function TChilkatMht.GetAndSaveEML(const url: WideString; const emlFilename: WideString): Integer;
begin
  Result := DefaultInterface.GetAndSaveEML(url, emlFilename);
end;

function TChilkatMht.GetAndSaveMHT(const url: WideString; const mhtFilename: WideString): Integer;
begin
  Result := DefaultInterface.GetAndSaveMHT(url, mhtFilename);
end;

function TChilkatMht.GetAndZipEML(const url: WideString; const zipEntryFilename: WideString; 
                                  const zipFilename: WideString): Integer;
begin
  Result := DefaultInterface.GetAndZipEML(url, zipEntryFilename, zipFilename);
end;

function TChilkatMht.GetAndZipMHT(const url: WideString; const zipEntryFilename: WideString; 
                                  const zipFilename: WideString): Integer;
begin
  Result := DefaultInterface.GetAndZipMHT(url, zipEntryFilename, zipFilename);
end;

function TChilkatMht.GetCacheRoot(index: Integer): WideString;
begin
  Result := DefaultInterface.GetCacheRoot(index);
end;

function TChilkatMht.GetEML(const url: WideString): WideString;
begin
  Result := DefaultInterface.GetEML(url);
end;

function TChilkatMht.GetMHT(const url: WideString): WideString;
begin
  Result := DefaultInterface.GetMHT(url);
end;

function TChilkatMht.HtmlToEML(const htmlText: WideString): WideString;
begin
  Result := DefaultInterface.HtmlToEML(htmlText);
end;

function TChilkatMht.HtmlToEMLFile(const html: WideString; const emlFilename: WideString): Integer;
begin
  Result := DefaultInterface.HtmlToEMLFile(html, emlFilename);
end;

function TChilkatMht.HtmlToMHT(const htmlText: WideString): WideString;
begin
  Result := DefaultInterface.HtmlToMHT(htmlText);
end;

function TChilkatMht.HtmlToMHTFile(const html: WideString; const mhtFilename: WideString): Integer;
begin
  Result := DefaultInterface.HtmlToMHTFile(html, mhtFilename);
end;

function TChilkatMht.IsUnlocked: Integer;
begin
  Result := DefaultInterface.IsUnlocked;
end;

procedure TChilkatMht.RemoveCustomHeader(const name: WideString);
begin
  DefaultInterface.RemoveCustomHeader(name);
end;

procedure TChilkatMht.RestoreDefaults;
begin
  DefaultInterface.RestoreDefaults;
end;

function TChilkatMht.UnlockComponent(const unlockCode: WideString): Integer;
begin
  Result := DefaultInterface.UnlockComponent(unlockCode);
end;

function TChilkatMht.UnpackMHT(const mhtFilename: WideString; const unpackDir: WideString; 
                               const htmlFilename: WideString; const partsSubDir: WideString): Integer;
begin
  Result := DefaultInterface.UnpackMHT(mhtFilename, unpackDir, htmlFilename, partsSubDir);
end;

function TChilkatMht.UnpackMHTString(const mhtString: WideString; const unpackDir: WideString; 
                                     const htmlFilename: WideString; const partsSubDir: WideString): Integer;
begin
  Result := DefaultInterface.UnpackMHTString(mhtString, unpackDir, htmlFilename, partsSubDir);
end;

procedure TMessageSet.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID:      '{2B5DD740-5E3F-420C-9526-976596516B4C}';
    EventIID:     '';
    EventCount:   0;
    EventDispIDs: nil;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
end;

procedure TMessageSet.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IMessageSet;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TMessageSet.GetControlInterface: IMessageSet;
begin
  CreateControl;
  Result := FIntf;
end;

function TMessageSet.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TMessageSet.ContainsId(id: Integer): Integer;
begin
  Result := DefaultInterface.ContainsId(id);
end;

function TMessageSet.FromCompactString(const str: WideString): Integer;
begin
  Result := DefaultInterface.FromCompactString(str);
end;

function TMessageSet.GetId(index: Integer): Integer;
begin
  Result := DefaultInterface.GetId(index);
end;

procedure TMessageSet.InsertId(id: Integer);
begin
  DefaultInterface.InsertId(id);
end;

procedure TMessageSet.RemoveId(id: Integer);
begin
  DefaultInterface.RemoveId(id);
end;

function TMessageSet.ToCompactString: WideString;
begin
  Result := DefaultInterface.ToCompactString;
end;

function TMessageSet.ToCommaSeparatedStr: WideString;
begin
  Result := DefaultInterface.ToCommaSeparatedStr;
end;

procedure TMailboxes.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID:      '{2F332CE0-6FCA-41B7-80BB-07D9D2AC86C7}';
    EventIID:     '';
    EventCount:   0;
    EventDispIDs: nil;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
end;

procedure TMailboxes.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IMailboxes;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TMailboxes.GetControlInterface: IMailboxes;
begin
  CreateControl;
  Result := FIntf;
end;

function TMailboxes.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TMailboxes.HasInferiors(index: Integer): Integer;
begin
  Result := DefaultInterface.HasInferiors(index);
end;

function TMailboxes.IsMarked(index: Integer): Integer;
begin
  Result := DefaultInterface.IsMarked(index);
end;

function TMailboxes.IsSelectable(index: Integer): Integer;
begin
  Result := DefaultInterface.IsSelectable(index);
end;

function TMailboxes.GetName(index: Integer): WideString;
begin
  Result := DefaultInterface.GetName(index);
end;

function TMailboxes.GetFlags(index: Integer): WideString;
begin
  Result := DefaultInterface.GetFlags(index);
end;

function TMailboxes.HasFlag(index: Integer; const flagName: WideString): Integer;
begin
  Result := DefaultInterface.HasFlag(index, flagName);
end;

function TMailboxes.GetNumFlags(index: Integer): Integer;
begin
  Result := DefaultInterface.GetNumFlags(index);
end;

function TMailboxes.GetNthFlag(index: Integer; flagIndex: Integer): WideString;
begin
  Result := DefaultInterface.GetNthFlag(index, flagIndex);
end;

function TMailboxes.GetMailboxIndex(const mbxName: WideString): Integer;
begin
  Result := DefaultInterface.GetMailboxIndex(mbxName);
end;

procedure TChilkatMailMan.InitControlData;
const
  CEventDispIDs: array [0..3] of DWORD = (
    $00000001, $00000002, $00000003, $00000004);
  CControlData: TControlData2 = (
    ClassID:      '{10F9AFBB-94CF-4556-A066-DD457D3254CF}';
    EventIID:     '{3AB70566-E8D9-474F-A244-5DA0260892C1}';
    EventCount:   4;
    EventDispIDs: @CEventDispIDs;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
  TControlData2(CControlData).FirstEventOfs := UIntPtr(@@FOnAbortCheck) - UIntPtr(Self);
end;

procedure TChilkatMailMan.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatMailMan;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatMailMan.GetControlInterface: IChilkatMailMan;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatMailMan.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TChilkatMailMan.AddPfxSourceData(pfxData: OleVariant; const password: WideString): Integer;
begin
  Result := DefaultInterface.AddPfxSourceData(pfxData, password);
end;

function TChilkatMailMan.AddPfxSourceFile(const pfxFilePath: WideString; const password: WideString): Integer;
begin
  Result := DefaultInterface.AddPfxSourceFile(pfxFilePath, password);
end;

function TChilkatMailMan.CheckMail: Integer;
begin
  Result := DefaultInterface.CheckMail;
end;

procedure TChilkatMailMan.ClearBadEmailAddresses;
begin
  DefaultInterface.ClearBadEmailAddresses;
end;

procedure TChilkatMailMan.ClearPop3SessionLog;
begin
  DefaultInterface.ClearPop3SessionLog;
end;

procedure TChilkatMailMan.ClearSmtpSessionLog;
begin
  DefaultInterface.ClearSmtpSessionLog;
end;

function TChilkatMailMan.CloseSmtpConnection: Integer;
begin
  Result := DefaultInterface.CloseSmtpConnection;
end;

function TChilkatMailMan.CopyMail: IChilkatEmailBundle;
begin
  Result := DefaultInterface.CopyMail;
end;

function TChilkatMailMan.DeleteBundle(const bundle: IChilkatEmailBundle): Integer;
begin
  Result := DefaultInterface.DeleteBundle(bundle);
end;

function TChilkatMailMan.DeleteByMsgnum(msgnum: Integer): Integer;
begin
  Result := DefaultInterface.DeleteByMsgnum(msgnum);
end;

function TChilkatMailMan.DeleteByUidl(const uidl: WideString): Integer;
begin
  Result := DefaultInterface.DeleteByUidl(uidl);
end;

function TChilkatMailMan.DeleteEmail(const email: IChilkatEmail): Integer;
begin
  Result := DefaultInterface.DeleteEmail(email);
end;

function TChilkatMailMan.DeleteMultiple(const uidlArray: ICkStringArray): Integer;
begin
  Result := DefaultInterface.DeleteMultiple(uidlArray);
end;

function TChilkatMailMan.FetchByMsgnum(msgnum: Integer): IChilkatEmail;
begin
  Result := DefaultInterface.FetchByMsgnum(msgnum);
end;

function TChilkatMailMan.FetchEmail(const uidl: WideString): IChilkatEmail;
begin
  Result := DefaultInterface.FetchEmail(uidl);
end;

function TChilkatMailMan.FetchMime(const uidl: WideString): OleVariant;
begin
  Result := DefaultInterface.FetchMime(uidl);
end;

function TChilkatMailMan.FetchMimeByMsgnum(msgnum: Integer): OleVariant;
begin
  Result := DefaultInterface.FetchMimeByMsgnum(msgnum);
end;

function TChilkatMailMan.FetchMultiple(const uidlArray: ICkStringArray): IChilkatEmailBundle;
begin
  Result := DefaultInterface.FetchMultiple(uidlArray);
end;

function TChilkatMailMan.FetchMultipleHeaders(const uidlArray: ICkStringArray; numBodyLines: Integer): IChilkatEmailBundle;
begin
  Result := DefaultInterface.FetchMultipleHeaders(uidlArray, numBodyLines);
end;

function TChilkatMailMan.FetchMultipleMime(const uidlArray: ICkStringArray): ICkStringArray;
begin
  Result := DefaultInterface.FetchMultipleMime(uidlArray);
end;

function TChilkatMailMan.FetchSingleHeader(numBodyLines: Integer; index: Integer): IChilkatEmail;
begin
  Result := DefaultInterface.FetchSingleHeader(numBodyLines, index);
end;

function TChilkatMailMan.FetchSingleHeaderByUidl(numBodyLines: Integer; const uidl: WideString): IChilkatEmail;
begin
  Result := DefaultInterface.FetchSingleHeaderByUidl(numBodyLines, uidl);
end;

function TChilkatMailMan.GetAllHeaders(numBodyLines: Integer): IChilkatEmailBundle;
begin
  Result := DefaultInterface.GetAllHeaders(numBodyLines);
end;

function TChilkatMailMan.GetFullEmail(const email: IChilkatEmail): IChilkatEmail;
begin
  Result := DefaultInterface.GetFullEmail(email);
end;

function TChilkatMailMan.GetHeaders(numBodyLines: Integer; fromIndex: Integer; toIndex: Integer): IChilkatEmailBundle;
begin
  Result := DefaultInterface.GetHeaders(numBodyLines, fromIndex, toIndex);
end;

function TChilkatMailMan.GetMailboxCount: Integer;
begin
  Result := DefaultInterface.GetMailboxCount;
end;

function TChilkatMailMan.GetMailboxInfoXml: WideString;
begin
  Result := DefaultInterface.GetMailboxInfoXml;
end;

function TChilkatMailMan.GetMailboxSize: Integer;
begin
  Result := DefaultInterface.GetMailboxSize;
end;

function TChilkatMailMan.GetPop3SslServerCert: IChilkatCert;
begin
  Result := DefaultInterface.GetPop3SslServerCert;
end;

function TChilkatMailMan.GetSentToEmailAddrs: ICkStringArray;
begin
  Result := DefaultInterface.GetSentToEmailAddrs;
end;

function TChilkatMailMan.GetSizeByUidl(const uidl: WideString): Integer;
begin
  Result := DefaultInterface.GetSizeByUidl(uidl);
end;

function TChilkatMailMan.GetSmtpSslServerCert: IChilkatCert;
begin
  Result := DefaultInterface.GetSmtpSslServerCert;
end;

function TChilkatMailMan.GetUidls: ICkStringArray;
begin
  Result := DefaultInterface.GetUidls;
end;

function TChilkatMailMan.IsSmtpDsnCapable: Integer;
begin
  Result := DefaultInterface.IsSmtpDsnCapable;
end;

function TChilkatMailMan.IsUnlocked: Integer;
begin
  Result := DefaultInterface.IsUnlocked;
end;

function TChilkatMailMan.LoadEml(const emlFilename: WideString): IChilkatEmail;
begin
  Result := DefaultInterface.LoadEml(emlFilename);
end;

function TChilkatMailMan.LoadMbx(const mbxFileName: WideString): IChilkatEmailBundle;
begin
  Result := DefaultInterface.LoadMbx(mbxFileName);
end;

function TChilkatMailMan.LoadMime(const mimeText: WideString): IChilkatEmail;
begin
  Result := DefaultInterface.LoadMime(mimeText);
end;

function TChilkatMailMan.LoadXmlEmail(const filename: WideString): IChilkatEmail;
begin
  Result := DefaultInterface.LoadXmlEmail(filename);
end;

function TChilkatMailMan.LoadXmlEmailString(const xmlString: WideString): IChilkatEmail;
begin
  Result := DefaultInterface.LoadXmlEmailString(xmlString);
end;

function TChilkatMailMan.LoadXmlFile(const filename: WideString): IChilkatEmailBundle;
begin
  Result := DefaultInterface.LoadXmlFile(filename);
end;

function TChilkatMailMan.LoadXmlString(const xmlString: WideString): IChilkatEmailBundle;
begin
  Result := DefaultInterface.LoadXmlString(xmlString);
end;

function TChilkatMailMan.MxLookup(const emailAddress: WideString): WideString;
begin
  Result := DefaultInterface.MxLookup(emailAddress);
end;

function TChilkatMailMan.MxLookupAll(const emailAddress: WideString): ICkStringArray;
begin
  Result := DefaultInterface.MxLookupAll(emailAddress);
end;

function TChilkatMailMan.OpenSmtpConnection: Integer;
begin
  Result := DefaultInterface.OpenSmtpConnection;
end;

function TChilkatMailMan.Pop3BeginSession: Integer;
begin
  Result := DefaultInterface.Pop3BeginSession;
end;

function TChilkatMailMan.Pop3EndSession: Integer;
begin
  Result := DefaultInterface.Pop3EndSession;
end;

function TChilkatMailMan.Pop3EndSessionNoQuit: Integer;
begin
  Result := DefaultInterface.Pop3EndSessionNoQuit;
end;

function TChilkatMailMan.Pop3Noop: Integer;
begin
  Result := DefaultInterface.Pop3Noop;
end;

function TChilkatMailMan.Pop3Reset: Integer;
begin
  Result := DefaultInterface.Pop3Reset;
end;

function TChilkatMailMan.Pop3SendRawCommand(const command: WideString; const charset: WideString): WideString;
begin
  Result := DefaultInterface.Pop3SendRawCommand(command, charset);
end;

function TChilkatMailMan.QuickSend(const fromAddr: WideString; const toAddr: WideString; 
                                   const subject: WideString; const Body: WideString; 
                                   const smtpServer: WideString): Integer;
begin
  Result := DefaultInterface.QuickSend(fromAddr, toAddr, subject, Body, smtpServer);
end;

function TChilkatMailMan.RenderToMime(const email: IChilkatEmail): WideString;
begin
  Result := DefaultInterface.RenderToMime(email);
end;

function TChilkatMailMan.RenderToMimeBytes(const email: IChilkatEmail): OleVariant;
begin
  Result := DefaultInterface.RenderToMimeBytes(email);
end;

function TChilkatMailMan.SendBundle(const bundle: IChilkatEmailBundle): Integer;
begin
  Result := DefaultInterface.SendBundle(bundle);
end;

function TChilkatMailMan.SendEmail(const email: IChilkatEmail): Integer;
begin
  Result := DefaultInterface.SendEmail(email);
end;

function TChilkatMailMan.SendMime(const From: WideString; const recipients: WideString; 
                                  const mimeText: WideString): Integer;
begin
  Result := DefaultInterface.SendMime(From, recipients, mimeText);
end;

function TChilkatMailMan.SendMimeBytes(const From: WideString; const recipients: WideString; 
                                       mimeData: OleVariant): Integer;
begin
  Result := DefaultInterface.SendMimeBytes(From, recipients, mimeData);
end;

function TChilkatMailMan.SendMimeBytesQ(const From: WideString; const recipients: WideString; 
                                        mimeData: OleVariant): Integer;
begin
  Result := DefaultInterface.SendMimeBytesQ(From, recipients, mimeData);
end;

function TChilkatMailMan.SendMimeQ(const From: WideString; const recipients: WideString; 
                                   const mimeText: WideString): Integer;
begin
  Result := DefaultInterface.SendMimeQ(From, recipients, mimeText);
end;

function TChilkatMailMan.SendMimeToList(const From: WideString; const distListFile: WideString; 
                                        const mimeText: WideString): Integer;
begin
  Result := DefaultInterface.SendMimeToList(From, distListFile, mimeText);
end;

function TChilkatMailMan.SendQ(const email: IChilkatEmail): Integer;
begin
  Result := DefaultInterface.SendQ(email);
end;

function TChilkatMailMan.SendQ2(const email: IChilkatEmail; const queueDir: WideString): Integer;
begin
  Result := DefaultInterface.SendQ2(email, queueDir);
end;

function TChilkatMailMan.SendToDistributionList(const email: IChilkatEmail; const sa: ICkStringArray): Integer;
begin
  Result := DefaultInterface.SendToDistributionList(email, sa);
end;

function TChilkatMailMan.SetCSP(const csp: IChilkatCsp): Integer;
begin
  Result := DefaultInterface.SetCSP(csp);
end;

function TChilkatMailMan.SetDecryptCert2(const cert: IChilkatCert; const key: IPrivateKey): Integer;
begin
  Result := DefaultInterface.SetDecryptCert2(cert, key);
end;

function TChilkatMailMan.SetSslClientCert(const cert: IChilkatCert): Integer;
begin
  Result := DefaultInterface.SetSslClientCert(cert);
end;

function TChilkatMailMan.SetSslClientCertPem(const pemDataOrFilename: WideString; 
                                             const pemPassword: WideString): Integer;
begin
  Result := DefaultInterface.SetSslClientCertPem(pemDataOrFilename, pemPassword);
end;

function TChilkatMailMan.SetSslClientCertPfx(const pfxFilename: WideString; 
                                             const pfxPassword: WideString): Integer;
begin
  Result := DefaultInterface.SetSslClientCertPfx(pfxFilename, pfxPassword);
end;

function TChilkatMailMan.SmtpNoop: Integer;
begin
  Result := DefaultInterface.SmtpNoop;
end;

function TChilkatMailMan.SmtpReset: Integer;
begin
  Result := DefaultInterface.SmtpReset;
end;

function TChilkatMailMan.SmtpSendRawCommand(const command: WideString; const charset: WideString; 
                                            bEncodeBase64: Integer): WideString;
begin
  Result := DefaultInterface.SmtpSendRawCommand(command, charset, bEncodeBase64);
end;

function TChilkatMailMan.SshAuthenticatePk(bSmtp: Integer; const SshLogin: WideString; 
                                           const PrivateKey: IChilkatSshKey): Integer;
begin
  Result := DefaultInterface.SshAuthenticatePk(bSmtp, SshLogin, PrivateKey);
end;

function TChilkatMailMan.SshAuthenticatePw(bSmtp: Integer; const SshLogin: WideString; 
                                           const SshPassword: WideString): Integer;
begin
  Result := DefaultInterface.SshAuthenticatePw(bSmtp, SshLogin, SshPassword);
end;

function TChilkatMailMan.SshCloseTunnel(bSmtp: Integer): Integer;
begin
  Result := DefaultInterface.SshCloseTunnel(bSmtp);
end;

function TChilkatMailMan.SshTunnel(bSmtp: Integer; const sshServerHostname: WideString; 
                                   sshServerPort: Integer): Integer;
begin
  Result := DefaultInterface.SshTunnel(bSmtp, sshServerHostname, sshServerPort);
end;

function TChilkatMailMan.TransferMail: IChilkatEmailBundle;
begin
  Result := DefaultInterface.TransferMail;
end;

function TChilkatMailMan.TransferMultipleMime(const uidlArray: ICkStringArray): ICkStringArray;
begin
  Result := DefaultInterface.TransferMultipleMime(uidlArray);
end;

function TChilkatMailMan.UnlockComponent(const code: WideString): Integer;
begin
  Result := DefaultInterface.UnlockComponent(code);
end;

function TChilkatMailMan.VerifyPopConnection: Integer;
begin
  Result := DefaultInterface.VerifyPopConnection;
end;

function TChilkatMailMan.VerifyPopLogin: Integer;
begin
  Result := DefaultInterface.VerifyPopLogin;
end;

function TChilkatMailMan.VerifySmtpConnection: Integer;
begin
  Result := DefaultInterface.VerifySmtpConnection;
end;

function TChilkatMailMan.VerifySmtpLogin: Integer;
begin
  Result := DefaultInterface.VerifySmtpLogin;
end;

procedure TChilkatMailMan.GetBadEmailAddresses(const strArray: ICkStringArray);
begin
  DefaultInterface.GetBadEmailAddresses(strArray);
end;

function TChilkatMailMan.UseCertVault(const vault: IChilkatXmlCertVault): Integer;
begin
  Result := DefaultInterface.UseCertVault(vault);
end;

function TChilkatMailMan.SetDecryptCert(const cert: IChilkatCert): Integer;
begin
  Result := DefaultInterface.SetDecryptCert(cert);
end;

procedure TKeyContainer.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID:      '{5B9D28CC-9FE1-4601-89E3-681DD583B290}';
    EventIID:     '';
    EventCount:   0;
    EventDispIDs: nil;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
end;

procedure TKeyContainer.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IKeyContainer;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TKeyContainer.GetControlInterface: IKeyContainer;
begin
  CreateControl;
  Result := FIntf;
end;

function TKeyContainer.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

procedure TKeyContainer.CloseContainer;
begin
  DefaultInterface.CloseContainer;
end;

function TKeyContainer.CreateContainer(const name: WideString; MachineKeyset: Integer): Integer;
begin
  Result := DefaultInterface.CreateContainer(name, MachineKeyset);
end;

function TKeyContainer.DeleteContainer: Integer;
begin
  Result := DefaultInterface.DeleteContainer;
end;

function TKeyContainer.FetchContainerNames(bMachineKeyset: Integer): Integer;
begin
  Result := DefaultInterface.FetchContainerNames(bMachineKeyset);
end;

function TKeyContainer.GenerateKeyPair(bKeyExchangePair: Integer; keyLengthInBits: Integer): Integer;
begin
  Result := DefaultInterface.GenerateKeyPair(bKeyExchangePair, keyLengthInBits);
end;

function TKeyContainer.GenerateUuid: WideString;
begin
  Result := DefaultInterface.GenerateUuid;
end;

function TKeyContainer.GetNthContainerName(bMachineKeyset: Integer; index: Integer): WideString;
begin
  Result := DefaultInterface.GetNthContainerName(bMachineKeyset, index);
end;

function TKeyContainer.GetNumContainers(bMachineKeyset: Integer): Integer;
begin
  Result := DefaultInterface.GetNumContainers(bMachineKeyset);
end;

function TKeyContainer.GetPrivateKey(bKeyExchangePair: Integer): IPrivateKey;
begin
  Result := DefaultInterface.GetPrivateKey(bKeyExchangePair);
end;

function TKeyContainer.GetPublicKey(bKeyExchangePair: Integer): IPublicKey;
begin
  Result := DefaultInterface.GetPublicKey(bKeyExchangePair);
end;

function TKeyContainer.ImportPrivateKey(const key: IPrivateKey; bKeyExchangePair: Integer): Integer;
begin
  Result := DefaultInterface.ImportPrivateKey(key, bKeyExchangePair);
end;

function TKeyContainer.ImportPublicKey(const key: IPublicKey; bKeyExchangePair: Integer): Integer;
begin
  Result := DefaultInterface.ImportPublicKey(key, bKeyExchangePair);
end;

function TKeyContainer.OpenContainer(const name: WideString; needPrivateKeyAccess: Integer; 
                                     MachineKeyset: Integer): Integer;
begin
  Result := DefaultInterface.OpenContainer(name, needPrivateKeyAccess, MachineKeyset);
end;

procedure TChilkatImap.InitControlData;
const
  CEventDispIDs: array [0..2] of DWORD = (
    $00000001, $00000002, $00000003);
  CControlData: TControlData2 = (
    ClassID:      '{CEDB6B70-ED7D-4F9E-A0BC-66AFB42F7735}';
    EventIID:     '{91D24DB1-0F9E-4E77-B629-70BEE2F61D36}';
    EventCount:   3;
    EventDispIDs: @CEventDispIDs;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
  TControlData2(CControlData).FirstEventOfs := UIntPtr(@@FOnAbortCheck) - UIntPtr(Self);
end;

procedure TChilkatImap.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatImap;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatImap.GetControlInterface: IChilkatImap;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatImap.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TChilkatImap.AddPfxSourceData(pfxData: OleVariant; const password: WideString): Integer;
begin
  Result := DefaultInterface.AddPfxSourceData(pfxData, password);
end;

function TChilkatImap.AddPfxSourceFile(const pfxFilePath: WideString; const password: WideString): Integer;
begin
  Result := DefaultInterface.AddPfxSourceFile(pfxFilePath, password);
end;

function TChilkatImap.AppendMail(const mailbox: WideString; const email: IChilkatEmail): Integer;
begin
  Result := DefaultInterface.AppendMail(mailbox, email);
end;

function TChilkatImap.AppendMime(const mailbox: WideString; const mimeText: WideString): Integer;
begin
  Result := DefaultInterface.AppendMime(mailbox, mimeText);
end;

function TChilkatImap.AppendMimeWithDate(const mailbox: WideString; const mimeText: WideString; 
                                         internalDate: TDateTime): Integer;
begin
  Result := DefaultInterface.AppendMimeWithDate(mailbox, mimeText, internalDate);
end;

function TChilkatImap.AppendMimeWithDateStr(const mailbox: WideString; const mimeText: WideString; 
                                            const internalDateStr: WideString): Integer;
begin
  Result := DefaultInterface.AppendMimeWithDateStr(mailbox, mimeText, internalDateStr);
end;

function TChilkatImap.AppendMimeWithFlags(const mailbox: WideString; const mimeText: WideString; 
                                          seen: Integer; flagged: Integer; answered: Integer; 
                                          draft: Integer): Integer;
begin
  Result := DefaultInterface.AppendMimeWithFlags(mailbox, mimeText, seen, flagged, answered, draft);
end;

function TChilkatImap.CheckForNewEmail: IMessageSet;
begin
  Result := DefaultInterface.CheckForNewEmail;
end;

procedure TChilkatImap.ClearSessionLog;
begin
  DefaultInterface.ClearSessionLog;
end;

function TChilkatImap.CloseMailbox(const mailbox: WideString): Integer;
begin
  Result := DefaultInterface.CloseMailbox(mailbox);
end;

function TChilkatImap.Connect(const Hostname: WideString): Integer;
begin
  Result := DefaultInterface.Connect(Hostname);
end;

function TChilkatImap.Copy(msgId: Integer; bUid: Integer; const copyToMailbox: WideString): Integer;
begin
  Result := DefaultInterface.Copy(msgId, bUid, copyToMailbox);
end;

function TChilkatImap.CopyMultiple(const MessageSet: IMessageSet; const copyToMailbox: WideString): Integer;
begin
  Result := DefaultInterface.CopyMultiple(MessageSet, copyToMailbox);
end;

function TChilkatImap.CopySequence(startSeqNum: Integer; Count: Integer; 
                                   const copyToMailbox: WideString): Integer;
begin
  Result := DefaultInterface.CopySequence(startSeqNum, Count, copyToMailbox);
end;

function TChilkatImap.CreateMailbox(const mailbox: WideString): Integer;
begin
  Result := DefaultInterface.CreateMailbox(mailbox);
end;

function TChilkatImap.DeleteMailbox(const mailbox: WideString): Integer;
begin
  Result := DefaultInterface.DeleteMailbox(mailbox);
end;

function TChilkatImap.Disconnect: Integer;
begin
  Result := DefaultInterface.Disconnect;
end;

function TChilkatImap.ExamineMailbox(const mailbox: WideString): Integer;
begin
  Result := DefaultInterface.ExamineMailbox(mailbox);
end;

function TChilkatImap.Expunge: Integer;
begin
  Result := DefaultInterface.Expunge;
end;

function TChilkatImap.ExpungeAndClose: Integer;
begin
  Result := DefaultInterface.ExpungeAndClose;
end;

function TChilkatImap.FetchAttachment(const email: IChilkatEmail; attachIndex: Integer; 
                                      const saveToPath: WideString): Integer;
begin
  Result := DefaultInterface.FetchAttachment(email, attachIndex, saveToPath);
end;

function TChilkatImap.FetchAttachmentBytes(const email: IChilkatEmail; attachIndex: Integer): OleVariant;
begin
  Result := DefaultInterface.FetchAttachmentBytes(email, attachIndex);
end;

function TChilkatImap.FetchAttachmentString(const email: IChilkatEmail; attachIndex: Integer; 
                                            const charset: WideString): WideString;
begin
  Result := DefaultInterface.FetchAttachmentString(email, attachIndex, charset);
end;

function TChilkatImap.FetchBundle(const MessageSet: IMessageSet): IChilkatEmailBundle;
begin
  Result := DefaultInterface.FetchBundle(MessageSet);
end;

function TChilkatImap.FetchBundleAsMime(const MessageSet: IMessageSet): ICkStringArray;
begin
  Result := DefaultInterface.FetchBundleAsMime(MessageSet);
end;

function TChilkatImap.FetchChunk(startSeqNum: Integer; Count: Integer; 
                                 const failedSet: IMessageSet; const fetchedSet: IMessageSet): IChilkatEmailBundle;
begin
  Result := DefaultInterface.FetchChunk(startSeqNum, Count, failedSet, fetchedSet);
end;

function TChilkatImap.FetchFlags(msgId: Integer; bUid: Integer): WideString;
begin
  Result := DefaultInterface.FetchFlags(msgId, bUid);
end;

function TChilkatImap.FetchHeaders(const MessageSet: IMessageSet): IChilkatEmailBundle;
begin
  Result := DefaultInterface.FetchHeaders(MessageSet);
end;

function TChilkatImap.FetchSequence(startSeqNum: Integer; NumMessages: Integer): IChilkatEmailBundle;
begin
  Result := DefaultInterface.FetchSequence(startSeqNum, NumMessages);
end;

function TChilkatImap.FetchSequenceAsMime(startSeqNum: Integer; NumMessages: Integer): ICkStringArray;
begin
  Result := DefaultInterface.FetchSequenceAsMime(startSeqNum, NumMessages);
end;

function TChilkatImap.FetchSequenceHeaders(startSeqNum: Integer; NumMessages: Integer): IChilkatEmailBundle;
begin
  Result := DefaultInterface.FetchSequenceHeaders(startSeqNum, NumMessages);
end;

function TChilkatImap.FetchSingle(msgId: Integer; bUid: Integer): IChilkatEmail;
begin
  Result := DefaultInterface.FetchSingle(msgId, bUid);
end;

function TChilkatImap.FetchSingleAsMime(msgId: Integer; bUid: Integer): WideString;
begin
  Result := DefaultInterface.FetchSingleAsMime(msgId, bUid);
end;

function TChilkatImap.FetchSingleHeader(msgId: Integer; bUid: Integer): IChilkatEmail;
begin
  Result := DefaultInterface.FetchSingleHeader(msgId, bUid);
end;

function TChilkatImap.FetchSingleHeaderAsMime(msgId: Integer; bUid: Integer): WideString;
begin
  Result := DefaultInterface.FetchSingleHeaderAsMime(msgId, bUid);
end;

function TChilkatImap.GetAllUids: IMessageSet;
begin
  Result := DefaultInterface.GetAllUids;
end;

function TChilkatImap.GetMailAttachFilename(const email: IChilkatEmail; attachIndex: Integer): WideString;
begin
  Result := DefaultInterface.GetMailAttachFilename(email, attachIndex);
end;

function TChilkatImap.GetMailAttachSize(const email: IChilkatEmail; attachIndex: Integer): Integer;
begin
  Result := DefaultInterface.GetMailAttachSize(email, attachIndex);
end;

function TChilkatImap.GetMailFlag(const email: IChilkatEmail; const flagName: WideString): Integer;
begin
  Result := DefaultInterface.GetMailFlag(email, flagName);
end;

function TChilkatImap.GetMailNumAttach(const email: IChilkatEmail): Integer;
begin
  Result := DefaultInterface.GetMailNumAttach(email);
end;

function TChilkatImap.GetMailSize(const email: IChilkatEmail): Integer;
begin
  Result := DefaultInterface.GetMailSize(email);
end;

function TChilkatImap.GetSslServerCert: IChilkatCert;
begin
  Result := DefaultInterface.GetSslServerCert;
end;

function TChilkatImap.IsConnected: Integer;
begin
  Result := DefaultInterface.IsConnected;
end;

function TChilkatImap.IsLoggedIn: Integer;
begin
  Result := DefaultInterface.IsLoggedIn;
end;

function TChilkatImap.IsUnlocked: Integer;
begin
  Result := DefaultInterface.IsUnlocked;
end;

function TChilkatImap.ListMailboxes(const reference: WideString; const wildcardedMailbox: WideString): IMailboxes;
begin
  Result := DefaultInterface.ListMailboxes(reference, wildcardedMailbox);
end;

function TChilkatImap.ListSubscribed(const reference: WideString; 
                                     const wildcardedMailbox: WideString): IMailboxes;
begin
  Result := DefaultInterface.ListSubscribed(reference, wildcardedMailbox);
end;

function TChilkatImap.Login(const Login: WideString; const password: WideString): Integer;
begin
  Result := DefaultInterface.Login(Login, password);
end;

function TChilkatImap.Logout: Integer;
begin
  Result := DefaultInterface.Logout;
end;

function TChilkatImap.Noop: Integer;
begin
  Result := DefaultInterface.Noop;
end;

function TChilkatImap.RefetchMailFlags(const email: IChilkatEmail): Integer;
begin
  Result := DefaultInterface.RefetchMailFlags(email);
end;

function TChilkatImap.RenameMailbox(const fromMailbox: WideString; const toMailbox: WideString): Integer;
begin
  Result := DefaultInterface.RenameMailbox(fromMailbox, toMailbox);
end;

function TChilkatImap.Search(const criteria: WideString; bUid: Integer): IMessageSet;
begin
  Result := DefaultInterface.Search(criteria, bUid);
end;

function TChilkatImap.SelectMailbox(const mailbox: WideString): Integer;
begin
  Result := DefaultInterface.SelectMailbox(mailbox);
end;

function TChilkatImap.SendRawCommand(const cmd: WideString): WideString;
begin
  Result := DefaultInterface.SendRawCommand(cmd);
end;

function TChilkatImap.SendRawCommandB(const cmd: WideString): OleVariant;
begin
  Result := DefaultInterface.SendRawCommandB(cmd);
end;

function TChilkatImap.SendRawCommandC(cmd: OleVariant): OleVariant;
begin
  Result := DefaultInterface.SendRawCommandC(cmd);
end;

function TChilkatImap.SetCSP(const csp: IChilkatCsp): Integer;
begin
  Result := DefaultInterface.SetCSP(csp);
end;

function TChilkatImap.SetDecryptCert2(const cert: IChilkatCert; const key: IPrivateKey): Integer;
begin
  Result := DefaultInterface.SetDecryptCert2(cert, key);
end;

function TChilkatImap.SetFlag(msgId: Integer; bUid: Integer; const flagName: WideString; 
                              value: Integer): Integer;
begin
  Result := DefaultInterface.SetFlag(msgId, bUid, flagName, value);
end;

function TChilkatImap.SetFlags(const MessageSet: IMessageSet; const flagName: WideString; 
                               value: Integer): Integer;
begin
  Result := DefaultInterface.SetFlags(MessageSet, flagName, value);
end;

function TChilkatImap.SetMailFlag(const email: IChilkatEmail; const flagName: WideString; 
                                  value: Integer): Integer;
begin
  Result := DefaultInterface.SetMailFlag(email, flagName, value);
end;

function TChilkatImap.SetSslClientCert(const cert: IChilkatCert): Integer;
begin
  Result := DefaultInterface.SetSslClientCert(cert);
end;

function TChilkatImap.SetSslClientCertPem(const pemDataOrFilename: WideString; 
                                          const pemPassword: WideString): Integer;
begin
  Result := DefaultInterface.SetSslClientCertPem(pemDataOrFilename, pemPassword);
end;

function TChilkatImap.SetSslClientCertPfx(const pfxFilename: WideString; 
                                          const pfxPassword: WideString): Integer;
begin
  Result := DefaultInterface.SetSslClientCertPfx(pfxFilename, pfxPassword);
end;

function TChilkatImap.SshAuthenticatePk(const SshLogin: WideString; const PrivateKey: IChilkatSshKey): Integer;
begin
  Result := DefaultInterface.SshAuthenticatePk(SshLogin, PrivateKey);
end;

function TChilkatImap.SshAuthenticatePw(const SshLogin: WideString; const SshPassword: WideString): Integer;
begin
  Result := DefaultInterface.SshAuthenticatePw(SshLogin, SshPassword);
end;

function TChilkatImap.SshTunnel(const sshServerHostname: WideString; sshServerPort: Integer): Integer;
begin
  Result := DefaultInterface.SshTunnel(sshServerHostname, sshServerPort);
end;

function TChilkatImap.StoreFlags(msgId: Integer; bUid: Integer; const flagNames: WideString; 
                                 value: Integer): Integer;
begin
  Result := DefaultInterface.StoreFlags(msgId, bUid, flagNames, value);
end;

function TChilkatImap.Subscribe(const mailbox: WideString): Integer;
begin
  Result := DefaultInterface.Subscribe(mailbox);
end;

function TChilkatImap.UnlockComponent(const unlockCode: WideString): Integer;
begin
  Result := DefaultInterface.UnlockComponent(unlockCode);
end;

function TChilkatImap.Unsubscribe(const mailbox: WideString): Integer;
begin
  Result := DefaultInterface.Unsubscribe(mailbox);
end;

function TChilkatImap.Capability: WideString;
begin
  Result := DefaultInterface.Capability;
end;

function TChilkatImap.IdleStart: Integer;
begin
  Result := DefaultInterface.IdleStart;
end;

function TChilkatImap.IdleDone: Integer;
begin
  Result := DefaultInterface.IdleDone;
end;

function TChilkatImap.IdleCheck(timeoutMs: Integer): WideString;
begin
  Result := DefaultInterface.IdleCheck(timeoutMs);
end;

function TChilkatImap.UseCertVault(const vault: IChilkatXmlCertVault): Integer;
begin
  Result := DefaultInterface.UseCertVault(vault);
end;

function TChilkatImap.SetDecryptCert(const cert: IChilkatCert): Integer;
begin
  Result := DefaultInterface.SetDecryptCert(cert);
end;

procedure TChilkatHttpResponse.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID:      '{65EA825E-648E-4BF0-8AA3-4E7724F75B07}';
    EventIID:     '';
    EventCount:   0;
    EventDispIDs: nil;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
end;

procedure TChilkatHttpResponse.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatHttpResponse;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatHttpResponse.GetControlInterface: IChilkatHttpResponse;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatHttpResponse.Get_Body: OleVariant;
begin
  Result := DefaultInterface.Body;
end;

function TChilkatHttpResponse.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TChilkatHttpResponse.GetCookieDomain(index: Integer): WideString;
begin
  Result := DefaultInterface.GetCookieDomain(index);
end;

function TChilkatHttpResponse.GetCookieExpires(index: Integer): TDateTime;
begin
  Result := DefaultInterface.GetCookieExpires(index);
end;

function TChilkatHttpResponse.GetCookieExpiresStr(index: Integer): WideString;
begin
  Result := DefaultInterface.GetCookieExpiresStr(index);
end;

function TChilkatHttpResponse.GetCookieName(index: Integer): WideString;
begin
  Result := DefaultInterface.GetCookieName(index);
end;

function TChilkatHttpResponse.GetCookiePath(index: Integer): WideString;
begin
  Result := DefaultInterface.GetCookiePath(index);
end;

function TChilkatHttpResponse.GetCookieValue(index: Integer): WideString;
begin
  Result := DefaultInterface.GetCookieValue(index);
end;

function TChilkatHttpResponse.GetHeaderField(const fieldName: WideString): WideString;
begin
  Result := DefaultInterface.GetHeaderField(fieldName);
end;

function TChilkatHttpResponse.GetHeaderFieldAttr(const fieldName: WideString; 
                                                 const attrName: WideString): WideString;
begin
  Result := DefaultInterface.GetHeaderFieldAttr(fieldName, attrName);
end;

function TChilkatHttpResponse.GetHeaderName(index: Integer): WideString;
begin
  Result := DefaultInterface.GetHeaderName(index);
end;

function TChilkatHttpResponse.GetHeaderValue(index: Integer): WideString;
begin
  Result := DefaultInterface.GetHeaderValue(index);
end;

function TChilkatHttpResponse.SaveBodyBinary(const path: WideString): Integer;
begin
  Result := DefaultInterface.SaveBodyBinary(path);
end;

function TChilkatHttpResponse.SaveBodyText(bCrlf: Integer; const path: WideString): Integer;
begin
  Result := DefaultInterface.SaveBodyText(bCrlf, path);
end;

function TChilkatHttpResponse.UrlEncParamValue(const encodedParams: WideString; 
                                               const paramName: WideString): WideString;
begin
  Result := DefaultInterface.UrlEncParamValue(encodedParams, paramName);
end;

procedure TChilkatHttpRequest.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID:      '{D66A2F08-A267-4593-ACD4-3EF65255E005}';
    EventIID:     '';
    EventCount:   0;
    EventDispIDs: nil;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
end;

procedure TChilkatHttpRequest.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatHttpRequest;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatHttpRequest.GetControlInterface: IChilkatHttpRequest;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatHttpRequest.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TChilkatHttpRequest.AddBytesForUpload(const name: WideString; const filename: WideString; 
                                               byteData: OleVariant): Integer;
begin
  Result := DefaultInterface.AddBytesForUpload(name, filename, byteData);
end;

function TChilkatHttpRequest.AddBytesForUpload2(const name: WideString; const filename: WideString; 
                                                byteData: OleVariant; const ContentType: WideString): Integer;
begin
  Result := DefaultInterface.AddBytesForUpload2(name, filename, byteData, ContentType);
end;

function TChilkatHttpRequest.AddFileForUpload(const name: WideString; const filename: WideString): Integer;
begin
  Result := DefaultInterface.AddFileForUpload(name, filename);
end;

function TChilkatHttpRequest.AddFileForUpload2(const name: WideString; const filename: WideString; 
                                               const ContentType: WideString): Integer;
begin
  Result := DefaultInterface.AddFileForUpload2(name, filename, ContentType);
end;

procedure TChilkatHttpRequest.AddHeader(const name: WideString; const value: WideString);
begin
  DefaultInterface.AddHeader(name, value);
end;

procedure TChilkatHttpRequest.AddParam(const name: WideString; const value: WideString);
begin
  DefaultInterface.AddParam(name, value);
end;

function TChilkatHttpRequest.AddStringForUpload(const name: WideString; const filename: WideString; 
                                                const strData: WideString; const charset: WideString): Integer;
begin
  Result := DefaultInterface.AddStringForUpload(name, filename, strData, charset);
end;

function TChilkatHttpRequest.AddStringForUpload2(const name: WideString; 
                                                 const filename: WideString; 
                                                 const strData: WideString; 
                                                 const charset: WideString; 
                                                 const ContentType: WideString): Integer;
begin
  Result := DefaultInterface.AddStringForUpload2(name, filename, strData, charset, ContentType);
end;

function TChilkatHttpRequest.GenerateRequestText: WideString;
begin
  Result := DefaultInterface.GenerateRequestText;
end;

function TChilkatHttpRequest.GetHeaderField(const name: WideString): WideString;
begin
  Result := DefaultInterface.GetHeaderField(name);
end;

function TChilkatHttpRequest.GetHeaderName(index: Integer): WideString;
begin
  Result := DefaultInterface.GetHeaderName(index);
end;

function TChilkatHttpRequest.GetHeaderValue(index: Integer): WideString;
begin
  Result := DefaultInterface.GetHeaderValue(index);
end;

function TChilkatHttpRequest.GetParam(const name: WideString): WideString;
begin
  Result := DefaultInterface.GetParam(name);
end;

function TChilkatHttpRequest.GetParamName(index: Integer): WideString;
begin
  Result := DefaultInterface.GetParamName(index);
end;

function TChilkatHttpRequest.GetParamValue(index: Integer): WideString;
begin
  Result := DefaultInterface.GetParamValue(index);
end;

function TChilkatHttpRequest.GetUrlEncodedParams: WideString;
begin
  Result := DefaultInterface.GetUrlEncodedParams;
end;

function TChilkatHttpRequest.LoadBodyFromBytes(binaryData: OleVariant): Integer;
begin
  Result := DefaultInterface.LoadBodyFromBytes(binaryData);
end;

function TChilkatHttpRequest.LoadBodyFromFile(const filename: WideString): Integer;
begin
  Result := DefaultInterface.LoadBodyFromFile(filename);
end;

function TChilkatHttpRequest.LoadBodyFromString(const BodyStr: WideString; const charset: WideString): Integer;
begin
  Result := DefaultInterface.LoadBodyFromString(BodyStr, charset);
end;

procedure TChilkatHttpRequest.RemoveAllParams;
begin
  DefaultInterface.RemoveAllParams;
end;

function TChilkatHttpRequest.RemoveHeader(const name: WideString): Integer;
begin
  Result := DefaultInterface.RemoveHeader(name);
end;

procedure TChilkatHttpRequest.RemoveParam(const name: WideString);
begin
  DefaultInterface.RemoveParam(name);
end;

procedure TChilkatHttpRequest.SetFromUrl(const url: WideString);
begin
  DefaultInterface.SetFromUrl(url);
end;

function TChilkatHttpRequest.StreamBodyFromFile(const filename: WideString): Integer;
begin
  Result := DefaultInterface.StreamBodyFromFile(filename);
end;

procedure TChilkatHttpRequest.UseGet;
begin
  DefaultInterface.UseGet;
end;

procedure TChilkatHttpRequest.UseHead;
begin
  DefaultInterface.UseHead;
end;

procedure TChilkatHttpRequest.UsePost;
begin
  DefaultInterface.UsePost;
end;

procedure TChilkatHttpRequest.UsePostMultipartForm;
begin
  DefaultInterface.UsePostMultipartForm;
end;

procedure TChilkatHttpRequest.UsePut;
begin
  DefaultInterface.UsePut;
end;

procedure TChilkatHttpRequest.UseUpload;
begin
  DefaultInterface.UseUpload;
end;

procedure TChilkatHttpRequest.UseUploadPut;
begin
  DefaultInterface.UseUploadPut;
end;

procedure TChilkatHttpRequest.UseXmlHttp(const xmlBody: WideString);
begin
  DefaultInterface.UseXmlHttp(xmlBody);
end;

procedure TChilkatHttp.InitControlData;
const
  CEventDispIDs: array [0..9] of DWORD = (
    $00000001, $00000002, $00000003, $00000004, $00000005, $00000006,
    $00000007, $00000008, $00000009, $0000000A);
  CControlData: TControlData2 = (
    ClassID:      '{A74C26D2-2429-4099-8672-2250B15E327F}';
    EventIID:     '{A02D931E-49CC-4D6F-85F5-2D74AB061990}';
    EventCount:   10;
    EventDispIDs: @CEventDispIDs;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
  TControlData2(CControlData).FirstEventOfs := UIntPtr(@@FOnAbortCheck) - UIntPtr(Self);
end;

procedure TChilkatHttp.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatHttp;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatHttp.GetControlInterface: IChilkatHttp;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatHttp.Get_BgResultData: OleVariant;
begin
  Result := DefaultInterface.BgResultData;
end;

function TChilkatHttp.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

procedure TChilkatHttp.AddCacheRoot(const dir: WideString);
begin
  DefaultInterface.AddCacheRoot(dir);
end;

function TChilkatHttp.AddQuickHeader(const name: WideString; const value: WideString): Integer;
begin
  Result := DefaultInterface.AddQuickHeader(name, value);
end;

function TChilkatHttp.BgResponseObject: IChilkatHttpResponse;
begin
  Result := DefaultInterface.BgResponseObject;
end;

procedure TChilkatHttp.BgTaskAbort;
begin
  DefaultInterface.BgTaskAbort;
end;

procedure TChilkatHttp.ClearBgEventLog;
begin
  DefaultInterface.ClearBgEventLog;
end;

procedure TChilkatHttp.ClearInMemoryCookies;
begin
  DefaultInterface.ClearInMemoryCookies;
end;

function TChilkatHttp.CloseAllConnections: Integer;
begin
  Result := DefaultInterface.CloseAllConnections;
end;

function TChilkatHttp.Download(const url: WideString; const filename: WideString): Integer;
begin
  Result := DefaultInterface.Download(url, filename);
end;

function TChilkatHttp.DownloadAppend(const url: WideString; const filename: WideString): Integer;
begin
  Result := DefaultInterface.DownloadAppend(url, filename);
end;

function TChilkatHttp.DownloadHash(const url: WideString; const HashAlgorithm: WideString; 
                                   const encoding: WideString): WideString;
begin
  Result := DefaultInterface.DownloadHash(url, HashAlgorithm, encoding);
end;

function TChilkatHttp.EventLogName(index: Integer): WideString;
begin
  Result := DefaultInterface.EventLogName(index);
end;

function TChilkatHttp.EventLogValue(index: Integer): WideString;
begin
  Result := DefaultInterface.EventLogValue(index);
end;

function TChilkatHttp.ExtractMetaRefreshUrl(const html: WideString): WideString;
begin
  Result := DefaultInterface.ExtractMetaRefreshUrl(html);
end;

function TChilkatHttp.GenTimeStamp: WideString;
begin
  Result := DefaultInterface.GenTimeStamp;
end;

function TChilkatHttp.GetCacheRoot(index: Integer): WideString;
begin
  Result := DefaultInterface.GetCacheRoot(index);
end;

function TChilkatHttp.GetCookieXml(const Domain: WideString): WideString;
begin
  Result := DefaultInterface.GetCookieXml(Domain);
end;

function TChilkatHttp.GetDomain(const url: WideString): WideString;
begin
  Result := DefaultInterface.GetDomain(url);
end;

function TChilkatHttp.GetHead(const url: WideString): IChilkatHttpResponse;
begin
  Result := DefaultInterface.GetHead(url);
end;

function TChilkatHttp.GetRequestHeader(const name: WideString): WideString;
begin
  Result := DefaultInterface.GetRequestHeader(name);
end;

function TChilkatHttp.GetServerSslCert(const Domain: WideString; Port: Integer): IChilkatCert;
begin
  Result := DefaultInterface.GetServerSslCert(Domain, Port);
end;

function TChilkatHttp.GetUrlPath(const url: WideString): WideString;
begin
  Result := DefaultInterface.GetUrlPath(url);
end;

function TChilkatHttp.HasRequestHeader(const name: WideString): Integer;
begin
  Result := DefaultInterface.HasRequestHeader(name);
end;

function TChilkatHttp.IsUnlocked: Integer;
begin
  Result := DefaultInterface.IsUnlocked;
end;

function TChilkatHttp.PostBinary(const url: WideString; byteData: OleVariant; 
                                 const ContentType: WideString; md5: Integer; gzip: Integer): WideString;
begin
  Result := DefaultInterface.PostBinary(url, byteData, ContentType, md5, gzip);
end;

function TChilkatHttp.PostJson(const url: WideString; const jsonText: WideString): IChilkatHttpResponse;
begin
  Result := DefaultInterface.PostJson(url, jsonText);
end;

function TChilkatHttp.PostJson2(const url: WideString; const ContentType: WideString; 
                                const jsonText: WideString): IChilkatHttpResponse;
begin
  Result := DefaultInterface.PostJson2(url, ContentType, jsonText);
end;

function TChilkatHttp.PostMime(const url: WideString; const mime: WideString): IChilkatHttpResponse;
begin
  Result := DefaultInterface.PostMime(url, mime);
end;

function TChilkatHttp.PostUrlEncoded(const url: WideString; const req: IChilkatHttpRequest): IChilkatHttpResponse;
begin
  Result := DefaultInterface.PostUrlEncoded(url, req);
end;

function TChilkatHttp.PostXml(const url: WideString; const xmlDoc: WideString; 
                              const charset: WideString): IChilkatHttpResponse;
begin
  Result := DefaultInterface.PostXml(url, xmlDoc, charset);
end;

function TChilkatHttp.PutBinary(const url: WideString; byteData: OleVariant; 
                                const ContentType: WideString; md5: Integer; gzip: Integer): WideString;
begin
  Result := DefaultInterface.PutBinary(url, byteData, ContentType, md5, gzip);
end;

function TChilkatHttp.PutText(const url: WideString; const textData: WideString; 
                              const charset: WideString; const ContentType: WideString; 
                              md5: Integer; gzip: Integer): WideString;
begin
  Result := DefaultInterface.PutText(url, textData, charset, ContentType, md5, gzip);
end;

function TChilkatHttp.QuickDeleteStr(const url: WideString): WideString;
begin
  Result := DefaultInterface.QuickDeleteStr(url);
end;

function TChilkatHttp.QuickGet(const url: WideString): OleVariant;
begin
  Result := DefaultInterface.QuickGet(url);
end;

function TChilkatHttp.QuickGetObj(const url: WideString): IChilkatHttpResponse;
begin
  Result := DefaultInterface.QuickGetObj(url);
end;

function TChilkatHttp.QuickGetStr(const url: WideString): WideString;
begin
  Result := DefaultInterface.QuickGetStr(url);
end;

function TChilkatHttp.QuickPutStr(const url: WideString): WideString;
begin
  Result := DefaultInterface.QuickPutStr(url);
end;

function TChilkatHttp.RemoveQuickHeader(const name: WideString): Integer;
begin
  Result := DefaultInterface.RemoveQuickHeader(name);
end;

procedure TChilkatHttp.RemoveRequestHeader(const name: WideString);
begin
  DefaultInterface.RemoveRequestHeader(name);
end;

function TChilkatHttp.RenderGet(const url: WideString): WideString;
begin
  Result := DefaultInterface.RenderGet(url);
end;

function TChilkatHttp.ResumeDownload(const url: WideString; const filename: WideString): Integer;
begin
  Result := DefaultInterface.ResumeDownload(url, filename);
end;

function TChilkatHttp.S3_CreateBucket(const bucketName: WideString): Integer;
begin
  Result := DefaultInterface.S3_CreateBucket(bucketName);
end;

function TChilkatHttp.S3_DeleteBucket(const bucketName: WideString): Integer;
begin
  Result := DefaultInterface.S3_DeleteBucket(bucketName);
end;

function TChilkatHttp.S3_DeleteObject(const bucketName: WideString; const objectName: WideString): Integer;
begin
  Result := DefaultInterface.S3_DeleteObject(bucketName, objectName);
end;

function TChilkatHttp.S3_DownloadBytes(const bucketName: WideString; const objectName: WideString): OleVariant;
begin
  Result := DefaultInterface.S3_DownloadBytes(bucketName, objectName);
end;

function TChilkatHttp.S3_DownloadFile(const bucketName: WideString; const objectName: WideString; 
                                      const localFilePath: WideString): Integer;
begin
  Result := DefaultInterface.S3_DownloadFile(bucketName, objectName, localFilePath);
end;

function TChilkatHttp.S3_DownloadString(const bucketName: WideString; const objectName: WideString; 
                                        const charset: WideString): WideString;
begin
  Result := DefaultInterface.S3_DownloadString(bucketName, objectName, charset);
end;

function TChilkatHttp.S3_FileExists(const bucketName: WideString; const objectName: WideString): Integer;
begin
  Result := DefaultInterface.S3_FileExists(bucketName, objectName);
end;

function TChilkatHttp.S3_ListBucketObjects(const bucketName: WideString): WideString;
begin
  Result := DefaultInterface.S3_ListBucketObjects(bucketName);
end;

function TChilkatHttp.S3_ListBuckets: WideString;
begin
  Result := DefaultInterface.S3_ListBuckets;
end;

function TChilkatHttp.S3_UploadBytes(objectContent: OleVariant; const ContentType: WideString; 
                                     const bucketName: WideString; const objectName: WideString): Integer;
begin
  Result := DefaultInterface.S3_UploadBytes(objectContent, ContentType, bucketName, objectName);
end;

function TChilkatHttp.S3_UploadFile(const localFilePath: WideString; const ContentType: WideString; 
                                    const bucketName: WideString; const objectName: WideString): Integer;
begin
  Result := DefaultInterface.S3_UploadFile(localFilePath, ContentType, bucketName, objectName);
end;

function TChilkatHttp.S3_UploadString(const objectContent: WideString; const charset: WideString; 
                                      const ContentType: WideString; const bucketName: WideString; 
                                      const objectName: WideString): Integer;
begin
  Result := DefaultInterface.S3_UploadString(objectContent, charset, ContentType, bucketName, 
                                             objectName);
end;

function TChilkatHttp.SetCookieXml(const Domain: WideString; const cookieXml: WideString): Integer;
begin
  Result := DefaultInterface.SetCookieXml(Domain, cookieXml);
end;

procedure TChilkatHttp.SetRequestHeader(const name: WideString; const value: WideString);
begin
  DefaultInterface.SetRequestHeader(name, value);
end;

function TChilkatHttp.SetSslClientCert(const cert: IChilkatCert): Integer;
begin
  Result := DefaultInterface.SetSslClientCert(cert);
end;

function TChilkatHttp.SetSslClientCertPem(const pemDataOrFilename: WideString; 
                                          const pemPassword: WideString): Integer;
begin
  Result := DefaultInterface.SetSslClientCertPem(pemDataOrFilename, pemPassword);
end;

function TChilkatHttp.SetSslClientCertPfx(const pfxFilename: WideString; 
                                          const pfxPassword: WideString): Integer;
begin
  Result := DefaultInterface.SetSslClientCertPfx(pfxFilename, pfxPassword);
end;

procedure TChilkatHttp.SleepMs(millisec: Integer);
begin
  DefaultInterface.SleepMs(millisec);
end;

function TChilkatHttp.SynchronousRequest(const Domain: WideString; Port: Integer; Ssl: Integer; 
                                         const req: IChilkatHttpRequest): IChilkatHttpResponse;
begin
  Result := DefaultInterface.SynchronousRequest(Domain, Port, Ssl, req);
end;

function TChilkatHttp.UnlockComponent(const unlockCode: WideString): Integer;
begin
  Result := DefaultInterface.UnlockComponent(unlockCode);
end;

function TChilkatHttp.UrlDecode(const str: WideString): WideString;
begin
  Result := DefaultInterface.UrlDecode(str);
end;

function TChilkatHttp.UrlEncode(const str: WideString): WideString;
begin
  Result := DefaultInterface.UrlEncode(str);
end;

function TChilkatHttp.XmlRpc(const urlEndpoint: WideString; const xmlIn: WideString): WideString;
begin
  Result := DefaultInterface.XmlRpc(urlEndpoint, xmlIn);
end;

function TChilkatHttp.XmlRpcPut(const urlEndpoint: WideString; const xmlIn: WideString): WideString;
begin
  Result := DefaultInterface.XmlRpcPut(urlEndpoint, xmlIn);
end;

procedure TChilkatHttp.DnsCacheClear;
begin
  DefaultInterface.DnsCacheClear;
end;

function TChilkatHttp.SetOAuthRsaKey(const privKey: IPrivateKey): Integer;
begin
  Result := DefaultInterface.SetOAuthRsaKey(privKey);
end;

procedure THtmlToXml.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID:      '{907F3EC0-A455-4B36-8FDC-F3A2B22F1BD2}';
    EventIID:     '';
    EventCount:   0;
    EventDispIDs: nil;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
end;

procedure THtmlToXml.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IHtmlToXml;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function THtmlToXml.GetControlInterface: IHtmlToXml;
begin
  CreateControl;
  Result := FIntf;
end;

function THtmlToXml.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function THtmlToXml.ConvertFile(const inHtmlPath: WideString; const destXmlPath: WideString): Integer;
begin
  Result := DefaultInterface.ConvertFile(inHtmlPath, destXmlPath);
end;

procedure THtmlToXml.DropTagType(const tagName: WideString);
begin
  DefaultInterface.DropTagType(tagName);
end;

procedure THtmlToXml.DropTextFormattingTags;
begin
  DefaultInterface.DropTextFormattingTags;
end;

function THtmlToXml.IsUnlocked: Integer;
begin
  Result := DefaultInterface.IsUnlocked;
end;

function THtmlToXml.ReadFileToString(const filename: WideString; const srcCharset: WideString): WideString;
begin
  Result := DefaultInterface.ReadFileToString(filename, srcCharset);
end;

procedure THtmlToXml.SetHtmlBytes(inData: OleVariant);
begin
  DefaultInterface.SetHtmlBytes(inData);
end;

function THtmlToXml.SetHtmlFromFile(const filename: WideString): Integer;
begin
  Result := DefaultInterface.SetHtmlFromFile(filename);
end;

function THtmlToXml.ToXml: WideString;
begin
  Result := DefaultInterface.ToXml;
end;

procedure THtmlToXml.UndropTagType(const tagName: WideString);
begin
  DefaultInterface.UndropTagType(tagName);
end;

procedure THtmlToXml.UndropTextFormattingTags;
begin
  DefaultInterface.UndropTextFormattingTags;
end;

function THtmlToXml.UnlockComponent(const unlockCode: WideString): Integer;
begin
  Result := DefaultInterface.UnlockComponent(unlockCode);
end;

function THtmlToXml.WriteStringToFile(const str: WideString; const filename: WideString; 
                                      const charset: WideString): Integer;
begin
  Result := DefaultInterface.WriteStringToFile(str, filename, charset);
end;

function THtmlToXml.ReadFile(const path: WideString): OleVariant;
begin
  Result := DefaultInterface.ReadFile(path);
end;

function THtmlToXml.WriteFile(const path: WideString; fileData: OleVariant): Integer;
begin
  Result := DefaultInterface.WriteFile(path, fileData);
end;

procedure THtmlToText.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID:      '{540054E6-D577-4E92-B730-86E83ADD9172}';
    EventIID:     '';
    EventCount:   0;
    EventDispIDs: nil;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
end;

procedure THtmlToText.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IHtmlToText;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function THtmlToText.GetControlInterface: IHtmlToText;
begin
  CreateControl;
  Result := FIntf;
end;

function THtmlToText.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function THtmlToText.ReadFileToString(const filename: WideString; const srcCharset: WideString): WideString;
begin
  Result := DefaultInterface.ReadFileToString(filename, srcCharset);
end;

function THtmlToText.ToText(const html: WideString): WideString;
begin
  Result := DefaultInterface.ToText(html);
end;

function THtmlToText.UnlockComponent(const code: WideString): Integer;
begin
  Result := DefaultInterface.UnlockComponent(code);
end;

function THtmlToText.WriteStringToFile(const str: WideString; const filename: WideString; 
                                       const charset: WideString): Integer;
begin
  Result := DefaultInterface.WriteStringToFile(str, filename, charset);
end;

function THtmlToText.IsUnlocked: Integer;
begin
  Result := DefaultInterface.IsUnlocked;
end;

procedure TChilkatGzip.InitControlData;
const
  CEventDispIDs: array [0..2] of DWORD = (
    $00000001, $00000002, $00000003);
  CControlData: TControlData2 = (
    ClassID:      '{D647A429-3349-47B5-B62D-7EF758000363}';
    EventIID:     '{91D24DB1-0F9E-4E77-B629-70BEE2F61D36}';
    EventCount:   3;
    EventDispIDs: @CEventDispIDs;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
  TControlData2(CControlData).FirstEventOfs := UIntPtr(@@FOnAbortCheck) - UIntPtr(Self);
end;

procedure TChilkatGzip.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatGzip;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatGzip.GetControlInterface: IChilkatGzip;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatGzip.Get_ExtraData: OleVariant;
begin
  Result := DefaultInterface.ExtraData;
end;

procedure TChilkatGzip.Set_ExtraData(pVal: OleVariant);
begin
  DefaultInterface.ExtraData := pVal;
end;

function TChilkatGzip.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TChilkatGzip.CompressFile(const srcPath: WideString; const destPath: WideString): Integer;
begin
  Result := DefaultInterface.CompressFile(srcPath, destPath);
end;

function TChilkatGzip.CompressFile2(const srcPath: WideString; const embeddedFilename: WideString; 
                                    const destPath: WideString): Integer;
begin
  Result := DefaultInterface.CompressFile2(srcPath, embeddedFilename, destPath);
end;

function TChilkatGzip.CompressFileToMem(const inFilename: WideString): OleVariant;
begin
  Result := DefaultInterface.CompressFileToMem(inFilename);
end;

function TChilkatGzip.CompressMemToFile(inData: OleVariant; const destPath: WideString): Integer;
begin
  Result := DefaultInterface.CompressMemToFile(inData, destPath);
end;

function TChilkatGzip.CompressMemory(inData: OleVariant): OleVariant;
begin
  Result := DefaultInterface.CompressMemory(inData);
end;

function TChilkatGzip.CompressString(const inStr: WideString; const destCharset: WideString): OleVariant;
begin
  Result := DefaultInterface.CompressString(inStr, destCharset);
end;

function TChilkatGzip.CompressStringENC(const strIn: WideString; const charset: WideString; 
                                        const encoding: WideString): WideString;
begin
  Result := DefaultInterface.CompressStringENC(strIn, charset, encoding);
end;

function TChilkatGzip.CompressStringToFile(const inStr: WideString; const destCharset: WideString; 
                                           const destPath: WideString): Integer;
begin
  Result := DefaultInterface.CompressStringToFile(inStr, destCharset, destPath);
end;

function TChilkatGzip.Decode(const str: WideString; const encoding: WideString): OleVariant;
begin
  Result := DefaultInterface.Decode(str, encoding);
end;

function TChilkatGzip.DeflateStringENC(const strIn: WideString; const charset: WideString; 
                                       const encoding: WideString): WideString;
begin
  Result := DefaultInterface.DeflateStringENC(strIn, charset, encoding);
end;

function TChilkatGzip.Encode(byteData: OleVariant; const encoding: WideString): WideString;
begin
  Result := DefaultInterface.Encode(byteData, encoding);
end;

function TChilkatGzip.ExamineFile(const inGzPath: WideString): Integer;
begin
  Result := DefaultInterface.ExamineFile(inGzPath);
end;

function TChilkatGzip.ExamineMemory(inGzData: OleVariant): Integer;
begin
  Result := DefaultInterface.ExamineMemory(inGzData);
end;

function TChilkatGzip.GetDt: ICkDateTime;
begin
  Result := DefaultInterface.GetDt;
end;

function TChilkatGzip.InflateStringENC(const strIn: WideString; const charset: WideString; 
                                       const encoding: WideString): WideString;
begin
  Result := DefaultInterface.InflateStringENC(strIn, charset, encoding);
end;

function TChilkatGzip.IsUnlocked: Integer;
begin
  Result := DefaultInterface.IsUnlocked;
end;

function TChilkatGzip.ReadFile(const path: WideString): OleVariant;
begin
  Result := DefaultInterface.ReadFile(path);
end;

function TChilkatGzip.SetDt(const dt: ICkDateTime): Integer;
begin
  Result := DefaultInterface.SetDt(dt);
end;

function TChilkatGzip.UntarGz(const gzFilename: WideString; const destDir: WideString; 
                              bNoAbsolute: Integer): Integer;
begin
  Result := DefaultInterface.UntarGz(gzFilename, destDir, bNoAbsolute);
end;

function TChilkatGzip.UncompressFile(const srcPath: WideString; const destPath: WideString): Integer;
begin
  Result := DefaultInterface.UncompressFile(srcPath, destPath);
end;

function TChilkatGzip.UncompressFileToMem(const inFilename: WideString): OleVariant;
begin
  Result := DefaultInterface.UncompressFileToMem(inFilename);
end;

function TChilkatGzip.UncompressFileToString(const inFilename: WideString; 
                                             const inCharset: WideString): WideString;
begin
  Result := DefaultInterface.UncompressFileToString(inFilename, inCharset);
end;

function TChilkatGzip.UncompressMemToFile(inData: OleVariant; const destPath: WideString): Integer;
begin
  Result := DefaultInterface.UncompressMemToFile(inData, destPath);
end;

function TChilkatGzip.UncompressMemory(inData: OleVariant): OleVariant;
begin
  Result := DefaultInterface.UncompressMemory(inData);
end;

function TChilkatGzip.UncompressString(inData: OleVariant; const inCharset: WideString): WideString;
begin
  Result := DefaultInterface.UncompressString(inData, inCharset);
end;

function TChilkatGzip.UncompressStringENC(const strIn: WideString; const charset: WideString; 
                                          const encoding: WideString): WideString;
begin
  Result := DefaultInterface.UncompressStringENC(strIn, charset, encoding);
end;

function TChilkatGzip.UnlockComponent(const unlockCode: WideString): Integer;
begin
  Result := DefaultInterface.UnlockComponent(unlockCode);
end;

function TChilkatGzip.WriteFile(const path: WideString; binaryData: OleVariant): Integer;
begin
  Result := DefaultInterface.WriteFile(path, binaryData);
end;

function TChilkatGzip.XfdlToXml(const xfdl: WideString): WideString;
begin
  Result := DefaultInterface.XfdlToXml(xfdl);
end;

procedure TChilkatFtp2.InitControlData;
const
  CEventDispIDs: array [0..12] of DWORD = (
    $00000001, $00000002, $00000003, $00000004, $00000005, $00000006,
    $00000007, $00000008, $00000009, $0000000A, $0000000B, $0000000C,
    $0000000D);
  CControlData: TControlData2 = (
    ClassID:      '{32BD32D3-66EA-4EE6-A684-20CE86F757C1}';
    EventIID:     '{D57DD27C-0065-41FA-ACB5-EBD8AB552A1E}';
    EventCount:   13;
    EventDispIDs: @CEventDispIDs;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
  TControlData2(CControlData).FirstEventOfs := UIntPtr(@@FOnAbortCheck) - UIntPtr(Self);
end;

procedure TChilkatFtp2.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatFtp2;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatFtp2.GetControlInterface: IChilkatFtp2;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatFtp2.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TChilkatFtp2.AppendFile(const localFilename: WideString; const remoteFilename: WideString): Integer;
begin
  Result := DefaultInterface.AppendFile(localFilename, remoteFilename);
end;

function TChilkatFtp2.AppendFileFromBinaryData(const remoteFilename: WideString; Content: OleVariant): Integer;
begin
  Result := DefaultInterface.AppendFileFromBinaryData(remoteFilename, Content);
end;

function TChilkatFtp2.AppendFileFromTextData(const remoteFilename: WideString; 
                                             const textData: WideString; const charset: WideString): Integer;
begin
  Result := DefaultInterface.AppendFileFromTextData(remoteFilename, textData, charset);
end;

procedure TChilkatFtp2.AsyncAbort;
begin
  DefaultInterface.AsyncAbort;
end;

function TChilkatFtp2.AsyncAppendFileStart(const localFilename: WideString; 
                                           const remoteFilename: WideString): Integer;
begin
  Result := DefaultInterface.AsyncAppendFileStart(localFilename, remoteFilename);
end;

function TChilkatFtp2.AsyncGetFileStart(const remoteFilename: WideString; 
                                        const localFilename: WideString): Integer;
begin
  Result := DefaultInterface.AsyncGetFileStart(remoteFilename, localFilename);
end;

function TChilkatFtp2.AsyncPutFileStart(const localFilename: WideString; 
                                        const remoteFilename: WideString): Integer;
begin
  Result := DefaultInterface.AsyncPutFileStart(localFilename, remoteFilename);
end;

function TChilkatFtp2.ChangeRemoteDir(const relativeDirPath: WideString): Integer;
begin
  Result := DefaultInterface.ChangeRemoteDir(relativeDirPath);
end;

function TChilkatFtp2.ClearControlChannel: Integer;
begin
  Result := DefaultInterface.ClearControlChannel;
end;

procedure TChilkatFtp2.ClearDirCache;
begin
  DefaultInterface.ClearDirCache;
end;

procedure TChilkatFtp2.ClearSessionLog;
begin
  DefaultInterface.ClearSessionLog;
end;

function TChilkatFtp2.Connect: Integer;
begin
  Result := DefaultInterface.Connect;
end;

function TChilkatFtp2.ConnectOnly: Integer;
begin
  Result := DefaultInterface.ConnectOnly;
end;

function TChilkatFtp2.ConvertToTls: Integer;
begin
  Result := DefaultInterface.ConvertToTls;
end;

function TChilkatFtp2.CreatePlan(const localDir: WideString): WideString;
begin
  Result := DefaultInterface.CreatePlan(localDir);
end;

function TChilkatFtp2.CreateRemoteDir(const dir: WideString): Integer;
begin
  Result := DefaultInterface.CreateRemoteDir(dir);
end;

function TChilkatFtp2.DeleteMatching(const remotePattern: WideString): Integer;
begin
  Result := DefaultInterface.DeleteMatching(remotePattern);
end;

function TChilkatFtp2.DeleteRemoteFile(const filename: WideString): Integer;
begin
  Result := DefaultInterface.DeleteRemoteFile(filename);
end;

function TChilkatFtp2.DeleteTree: Integer;
begin
  Result := DefaultInterface.DeleteTree;
end;

function TChilkatFtp2.DetermineProxyMethod: Integer;
begin
  Result := DefaultInterface.DetermineProxyMethod;
end;

function TChilkatFtp2.DetermineSettings: WideString;
begin
  Result := DefaultInterface.DetermineSettings;
end;

function TChilkatFtp2.DirTreeXml: WideString;
begin
  Result := DefaultInterface.DirTreeXml;
end;

function TChilkatFtp2.Disconnect: Integer;
begin
  Result := DefaultInterface.Disconnect;
end;

function TChilkatFtp2.DownloadTree(const localRoot: WideString): Integer;
begin
  Result := DefaultInterface.DownloadTree(localRoot);
end;

function TChilkatFtp2.Feat: WideString;
begin
  Result := DefaultInterface.Feat;
end;

function TChilkatFtp2.GetCreateDt(index: Integer): ICkDateTime;
begin
  Result := DefaultInterface.GetCreateDt(index);
end;

function TChilkatFtp2.GetCreateDtByName(const filename: WideString): ICkDateTime;
begin
  Result := DefaultInterface.GetCreateDtByName(filename);
end;

function TChilkatFtp2.GetCreateTime(index: Integer): TDateTime;
begin
  Result := DefaultInterface.GetCreateTime(index);
end;

function TChilkatFtp2.GetCreateTimeByName(const filename: WideString): TDateTime;
begin
  Result := DefaultInterface.GetCreateTimeByName(filename);
end;

function TChilkatFtp2.GetCreateTimeByNameStr(const filename: WideString): WideString;
begin
  Result := DefaultInterface.GetCreateTimeByNameStr(filename);
end;

function TChilkatFtp2.GetCreateTimeStr(index: Integer): WideString;
begin
  Result := DefaultInterface.GetCreateTimeStr(index);
end;

function TChilkatFtp2.GetCurrentRemoteDir: WideString;
begin
  Result := DefaultInterface.GetCurrentRemoteDir;
end;

function TChilkatFtp2.GetFile(const remoteFilename: WideString; const localFilename: WideString): Integer;
begin
  Result := DefaultInterface.GetFile(remoteFilename, localFilename);
end;

function TChilkatFtp2.GetFilename(index: Integer): WideString;
begin
  Result := DefaultInterface.GetFilename(index);
end;

function TChilkatFtp2.GetIsDirectory(index: Integer): Integer;
begin
  Result := DefaultInterface.GetIsDirectory(index);
end;

function TChilkatFtp2.GetIsSymbolicLink(index: Integer): Integer;
begin
  Result := DefaultInterface.GetIsSymbolicLink(index);
end;

function TChilkatFtp2.GetLastAccessDt(index: Integer): ICkDateTime;
begin
  Result := DefaultInterface.GetLastAccessDt(index);
end;

function TChilkatFtp2.GetLastAccessDtByName(const filename: WideString): ICkDateTime;
begin
  Result := DefaultInterface.GetLastAccessDtByName(filename);
end;

function TChilkatFtp2.GetLastAccessTime(index: Integer): TDateTime;
begin
  Result := DefaultInterface.GetLastAccessTime(index);
end;

function TChilkatFtp2.GetLastAccessTimeByName(const filename: WideString): TDateTime;
begin
  Result := DefaultInterface.GetLastAccessTimeByName(filename);
end;

function TChilkatFtp2.GetLastAccessTimeByNameStr(const filename: WideString): WideString;
begin
  Result := DefaultInterface.GetLastAccessTimeByNameStr(filename);
end;

function TChilkatFtp2.GetLastAccessTimeStr(index: Integer): WideString;
begin
  Result := DefaultInterface.GetLastAccessTimeStr(index);
end;

function TChilkatFtp2.GetLastModDt(index: Integer): ICkDateTime;
begin
  Result := DefaultInterface.GetLastModDt(index);
end;

function TChilkatFtp2.GetLastModDtByName(const filename: WideString): ICkDateTime;
begin
  Result := DefaultInterface.GetLastModDtByName(filename);
end;

function TChilkatFtp2.GetLastModifiedTime(index: Integer): TDateTime;
begin
  Result := DefaultInterface.GetLastModifiedTime(index);
end;

function TChilkatFtp2.GetLastModifiedTimeByName(const filename: WideString): TDateTime;
begin
  Result := DefaultInterface.GetLastModifiedTimeByName(filename);
end;

function TChilkatFtp2.GetLastModifiedTimeByNameStr(const filename: WideString): WideString;
begin
  Result := DefaultInterface.GetLastModifiedTimeByNameStr(filename);
end;

function TChilkatFtp2.GetLastModifiedTimeStr(index: Integer): WideString;
begin
  Result := DefaultInterface.GetLastModifiedTimeStr(index);
end;

function TChilkatFtp2.GetRemoteFileBinaryData(const remoteFilename: WideString): OleVariant;
begin
  Result := DefaultInterface.GetRemoteFileBinaryData(remoteFilename);
end;

function TChilkatFtp2.GetRemoteFileTextC(const remoteFilename: WideString; const charset: WideString): WideString;
begin
  Result := DefaultInterface.GetRemoteFileTextC(remoteFilename, charset);
end;

function TChilkatFtp2.GetRemoteFileTextData(const remoteFilename: WideString): WideString;
begin
  Result := DefaultInterface.GetRemoteFileTextData(remoteFilename);
end;

function TChilkatFtp2.GetSize(index: Integer): Integer;
begin
  Result := DefaultInterface.GetSize(index);
end;

function TChilkatFtp2.GetSizeByName(const filename: WideString): Integer;
begin
  Result := DefaultInterface.GetSizeByName(filename);
end;

function TChilkatFtp2.GetSizeStr(index: Integer): WideString;
begin
  Result := DefaultInterface.GetSizeStr(index);
end;

function TChilkatFtp2.GetSizeStrByName(const filename: WideString): WideString;
begin
  Result := DefaultInterface.GetSizeStrByName(filename);
end;

function TChilkatFtp2.GetSslServerCert: IChilkatCert;
begin
  Result := DefaultInterface.GetSslServerCert;
end;

function TChilkatFtp2.GetTextDirListing(const pattern: WideString): WideString;
begin
  Result := DefaultInterface.GetTextDirListing(pattern);
end;

function TChilkatFtp2.GetXmlDirListing(const pattern: WideString): WideString;
begin
  Result := DefaultInterface.GetXmlDirListing(pattern);
end;

function TChilkatFtp2.IsUnlocked: Integer;
begin
  Result := DefaultInterface.IsUnlocked;
end;

function TChilkatFtp2.LoginAfterConnectOnly: Integer;
begin
  Result := DefaultInterface.LoginAfterConnectOnly;
end;

function TChilkatFtp2.MGetFiles(const remotePattern: WideString; const localDir: WideString): Integer;
begin
  Result := DefaultInterface.MGetFiles(remotePattern, localDir);
end;

function TChilkatFtp2.MPutFiles(const pattern: WideString): Integer;
begin
  Result := DefaultInterface.MPutFiles(pattern);
end;

function TChilkatFtp2.NlstXml(const pattern: WideString): WideString;
begin
  Result := DefaultInterface.NlstXml(pattern);
end;

function TChilkatFtp2.Noop: Integer;
begin
  Result := DefaultInterface.Noop;
end;

function TChilkatFtp2.PutFile(const localFilename: WideString; const remoteFilename: WideString): Integer;
begin
  Result := DefaultInterface.PutFile(localFilename, remoteFilename);
end;

function TChilkatFtp2.PutFileFromBinaryData(const remoteFilename: WideString; Content: OleVariant): Integer;
begin
  Result := DefaultInterface.PutFileFromBinaryData(remoteFilename, Content);
end;

function TChilkatFtp2.PutFileFromTextData(const remoteFilename: WideString; 
                                          const textData: WideString; const charset: WideString): Integer;
begin
  Result := DefaultInterface.PutFileFromTextData(remoteFilename, textData, charset);
end;

function TChilkatFtp2.PutPlan(const plan: WideString; const alreadyDoneFilename: WideString): Integer;
begin
  Result := DefaultInterface.PutPlan(plan, alreadyDoneFilename);
end;

function TChilkatFtp2.PutTree(const localDir: WideString): Integer;
begin
  Result := DefaultInterface.PutTree(localDir);
end;

function TChilkatFtp2.Quote(const cmd: WideString): Integer;
begin
  Result := DefaultInterface.Quote(cmd);
end;

function TChilkatFtp2.RemoveRemoteDir(const dir: WideString): Integer;
begin
  Result := DefaultInterface.RemoveRemoteDir(dir);
end;

function TChilkatFtp2.RenameRemoteFile(const existingFilename: WideString; 
                                       const newFilename: WideString): Integer;
begin
  Result := DefaultInterface.RenameRemoteFile(existingFilename, newFilename);
end;

function TChilkatFtp2.SendCommand(const cmd: WideString): WideString;
begin
  Result := DefaultInterface.SendCommand(cmd);
end;

function TChilkatFtp2.SetModeZ: Integer;
begin
  Result := DefaultInterface.SetModeZ;
end;

procedure TChilkatFtp2.SetOldestDate(oldestDateTime: TDateTime);
begin
  DefaultInterface.SetOldestDate(oldestDateTime);
end;

procedure TChilkatFtp2.SetOldestDateStr(const oldestDateTimeStr: WideString);
begin
  DefaultInterface.SetOldestDateStr(oldestDateTimeStr);
end;

function TChilkatFtp2.SetRemoteFileDateTime(dt: TDateTime; const remoteFilename: WideString): Integer;
begin
  Result := DefaultInterface.SetRemoteFileDateTime(dt, remoteFilename);
end;

function TChilkatFtp2.SetRemoteFileDateTimeStr(const dateTimeStr: WideString; 
                                               const remoteFilename: WideString): Integer;
begin
  Result := DefaultInterface.SetRemoteFileDateTimeStr(dateTimeStr, remoteFilename);
end;

function TChilkatFtp2.SetRemoteFileDt(const dt: ICkDateTime; const remoteFilename: WideString): Integer;
begin
  Result := DefaultInterface.SetRemoteFileDt(dt, remoteFilename);
end;

procedure TChilkatFtp2.SetSslCertRequirement(const name: WideString; const value: WideString);
begin
  DefaultInterface.SetSslCertRequirement(name, value);
end;

function TChilkatFtp2.SetSslClientCert(const cert: IChilkatCert): Integer;
begin
  Result := DefaultInterface.SetSslClientCert(cert);
end;

function TChilkatFtp2.SetSslClientCertPem(const pemDataOrFilename: WideString; 
                                          const pemPassword: WideString): Integer;
begin
  Result := DefaultInterface.SetSslClientCertPem(pemDataOrFilename, pemPassword);
end;

function TChilkatFtp2.SetSslClientCertPfx(const pfxFilename: WideString; 
                                          const pfxPassword: WideString): Integer;
begin
  Result := DefaultInterface.SetSslClientCertPfx(pfxFilename, pfxPassword);
end;

function TChilkatFtp2.SetTypeAscii: Integer;
begin
  Result := DefaultInterface.SetTypeAscii;
end;

function TChilkatFtp2.SetTypeBinary: Integer;
begin
  Result := DefaultInterface.SetTypeBinary;
end;

function TChilkatFtp2.Site(const siteCommand: WideString): Integer;
begin
  Result := DefaultInterface.Site(siteCommand);
end;

procedure TChilkatFtp2.SleepMs(millisec: Integer);
begin
  DefaultInterface.SleepMs(millisec);
end;

function TChilkatFtp2.Stat: WideString;
begin
  Result := DefaultInterface.Stat;
end;

function TChilkatFtp2.SyncDeleteRemote(const localRoot: WideString): Integer;
begin
  Result := DefaultInterface.SyncDeleteRemote(localRoot);
end;

function TChilkatFtp2.SyncLocalDir(const localRoot: WideString; mode: Integer): Integer;
begin
  Result := DefaultInterface.SyncLocalDir(localRoot, mode);
end;

function TChilkatFtp2.SyncLocalTree(const localRoot: WideString; mode: Integer): Integer;
begin
  Result := DefaultInterface.SyncLocalTree(localRoot, mode);
end;

function TChilkatFtp2.SyncRemoteTree(const localRoot: WideString; mode: Integer): Integer;
begin
  Result := DefaultInterface.SyncRemoteTree(localRoot, mode);
end;

function TChilkatFtp2.SyncRemoteTree2(const localRoot: WideString; mode: Integer; 
                                      bDescend: Integer; bPreviewOnly: Integer): Integer;
begin
  Result := DefaultInterface.SyncRemoteTree2(localRoot, mode, bDescend, bPreviewOnly);
end;

function TChilkatFtp2.Syst: WideString;
begin
  Result := DefaultInterface.Syst;
end;

function TChilkatFtp2.UnlockComponent(const unlockCode: WideString): Integer;
begin
  Result := DefaultInterface.UnlockComponent(unlockCode);
  Result := 1;
end;

procedure TCkFileAccess.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID:      '{A3F78ADD-62C2-475F-9040-80ACBFD412FA}';
    EventIID:     '';
    EventCount:   0;
    EventDispIDs: nil;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
end;

procedure TCkFileAccess.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as ICkFileAccess;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TCkFileAccess.GetControlInterface: ICkFileAccess;
begin
  CreateControl;
  Result := FIntf;
end;

function TCkFileAccess.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TCkFileAccess.AppendAnsi(const text: WideString): Integer;
begin
  Result := DefaultInterface.AppendAnsi(text);
end;

function TCkFileAccess.AppendText(const text: WideString; const charset: WideString): Integer;
begin
  Result := DefaultInterface.AppendText(text, charset);
end;

function TCkFileAccess.AppendUnicodeBOM: Integer;
begin
  Result := DefaultInterface.AppendUnicodeBOM;
end;

function TCkFileAccess.AppendUtf8BOM: Integer;
begin
  Result := DefaultInterface.AppendUtf8BOM;
end;

function TCkFileAccess.DirAutoCreate(const path: WideString): Integer;
begin
  Result := DefaultInterface.DirAutoCreate(path);
end;

function TCkFileAccess.DirCreate(const path: WideString): Integer;
begin
  Result := DefaultInterface.DirCreate(path);
end;

function TCkFileAccess.DirDelete(const path: WideString): Integer;
begin
  Result := DefaultInterface.DirDelete(path);
end;

function TCkFileAccess.DirEnsureExists(const filePath: WideString): Integer;
begin
  Result := DefaultInterface.DirEnsureExists(filePath);
end;

procedure TCkFileAccess.FileClose;
begin
  DefaultInterface.FileClose;
end;

function TCkFileAccess.FileContentsEqual(const path1: WideString; const path2: WideString): Integer;
begin
  Result := DefaultInterface.FileContentsEqual(path1, path2);
end;

function TCkFileAccess.FileCopy(const existing: WideString; const newFilename: WideString; 
                                failIfExists: Integer): Integer;
begin
  Result := DefaultInterface.FileCopy(existing, newFilename, failIfExists);
end;

function TCkFileAccess.FileDelete(const filename: WideString): Integer;
begin
  Result := DefaultInterface.FileDelete(filename);
end;

function TCkFileAccess.FileExists(const filename: WideString): Integer;
begin
  Result := DefaultInterface.FileExists(filename);
end;

function TCkFileAccess.FileOpen(const filename: WideString; accessMode: Integer; 
                                shareMode: Integer; createDisp: Integer; attr: Integer): Integer;
begin
  Result := DefaultInterface.FileOpen(filename, accessMode, shareMode, createDisp, attr);
end;

function TCkFileAccess.FileRead(numBytes: Integer): OleVariant;
begin
  Result := DefaultInterface.FileRead(numBytes);
end;

function TCkFileAccess.FileRename(const existing: WideString; const newFilename: WideString): Integer;
begin
  Result := DefaultInterface.FileRename(existing, newFilename);
end;

function TCkFileAccess.FileSeek(offset: Integer; origin: Integer): Integer;
begin
  Result := DefaultInterface.FileSeek(offset, origin);
end;

function TCkFileAccess.fileSize(const filename: WideString): Integer;
begin
  Result := DefaultInterface.fileSize(filename);
end;

function TCkFileAccess.FileWrite(data: OleVariant): Integer;
begin
  Result := DefaultInterface.FileWrite(data);
end;

function TCkFileAccess.GetTempFilename(const dirName: WideString; const prefix: WideString): WideString;
begin
  Result := DefaultInterface.GetTempFilename(dirName, prefix);
end;

function TCkFileAccess.OpenForAppend(const filePath: WideString): Integer;
begin
  Result := DefaultInterface.OpenForAppend(filePath);
end;

function TCkFileAccess.OpenForRead(const filePath: WideString): Integer;
begin
  Result := DefaultInterface.OpenForRead(filePath);
end;

function TCkFileAccess.OpenForReadWrite(const filePath: WideString): Integer;
begin
  Result := DefaultInterface.OpenForReadWrite(filePath);
end;

function TCkFileAccess.OpenForWrite(const filePath: WideString): Integer;
begin
  Result := DefaultInterface.OpenForWrite(filePath);
end;

function TCkFileAccess.ReadBinaryToEncoded(const filename: WideString; const encoding: WideString): WideString;
begin
  Result := DefaultInterface.ReadBinaryToEncoded(filename, encoding);
end;

function TCkFileAccess.ReadEntireFile(const filename: WideString): OleVariant;
begin
  Result := DefaultInterface.ReadEntireFile(filename);
end;

function TCkFileAccess.ReadEntireTextFile(const filename: WideString; const charset: WideString): WideString;
begin
  Result := DefaultInterface.ReadEntireTextFile(filename, charset);
end;

function TCkFileAccess.ReassembleFile(const partsDirPath: WideString; const partPrefix: WideString; 
                                      const partExtension: WideString; 
                                      const reassembledFilename: WideString): Integer;
begin
  Result := DefaultInterface.ReassembleFile(partsDirPath, partPrefix, partExtension, 
                                            reassembledFilename);
end;

function TCkFileAccess.ReplaceStrings(const path: WideString; const charset: WideString; 
                                      const existingString: WideString; 
                                      const replacementString: WideString): Integer;
begin
  Result := DefaultInterface.ReplaceStrings(path, charset, existingString, replacementString);
end;

function TCkFileAccess.SetCurrentDir(const path: WideString): Integer;
begin
  Result := DefaultInterface.SetCurrentDir(path);
end;

function TCkFileAccess.SetFileTimes(const path: WideString; const create: ICkDateTime; 
                                    const lastAccess: ICkDateTime; const lastModified: ICkDateTime): Integer;
begin
  Result := DefaultInterface.SetFileTimes(path, create, lastAccess, lastModified);
end;

function TCkFileAccess.SetLastModified(const path: WideString; const lastModified: ICkDateTime): Integer;
begin
  Result := DefaultInterface.SetLastModified(path, lastModified);
end;

function TCkFileAccess.SplitFile(const fileToSplit: WideString; const partPrefix: WideString; 
                                 const partExtension: WideString; partSize: Integer; 
                                 const destDir: WideString): Integer;
begin
  Result := DefaultInterface.SplitFile(fileToSplit, partPrefix, partExtension, partSize, destDir);
end;

function TCkFileAccess.TreeDelete(const path: WideString): Integer;
begin
  Result := DefaultInterface.TreeDelete(path);
end;

function TCkFileAccess.WriteEntireFile(const filename: WideString; fileData: OleVariant): Integer;
begin
  Result := DefaultInterface.WriteEntireFile(filename, fileData);
end;

function TCkFileAccess.WriteEntireTextFile(const filename: WideString; const fileData: WideString; 
                                           const charset: WideString; includePreamble: Integer): Integer;
begin
  Result := DefaultInterface.WriteEntireTextFile(filename, fileData, charset, includePreamble);
end;

procedure TChilkatEmailBundle.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID:      '{DE9FC63E-73D2-4952-BB8B-9C37A7ADE1E6}';
    EventIID:     '';
    EventCount:   0;
    EventDispIDs: nil;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
end;

procedure TChilkatEmailBundle.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatEmailBundle;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatEmailBundle.GetControlInterface: IChilkatEmailBundle;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatEmailBundle.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TChilkatEmailBundle.AddEmail(const email: IChilkatEmail): Integer;
begin
  Result := DefaultInterface.AddEmail(email);
end;

function TChilkatEmailBundle.FindByHeader(const name: WideString; const value: WideString): IChilkatEmail;
begin
  Result := DefaultInterface.FindByHeader(name, value);
end;

function TChilkatEmailBundle.GetEmail(index: Integer): IChilkatEmail;
begin
  Result := DefaultInterface.GetEmail(index);
end;

function TChilkatEmailBundle.GetUidls: ICkStringArray;
begin
  Result := DefaultInterface.GetUidls;
end;

function TChilkatEmailBundle.GetXml: WideString;
begin
  Result := DefaultInterface.GetXml;
end;

function TChilkatEmailBundle.LoadXml(const filename: WideString): Integer;
begin
  Result := DefaultInterface.LoadXml(filename);
end;

function TChilkatEmailBundle.LoadXmlString(const xmlStr: WideString): Integer;
begin
  Result := DefaultInterface.LoadXmlString(xmlStr);
end;

function TChilkatEmailBundle.RemoveEmail(const email: IChilkatEmail): Integer;
begin
  Result := DefaultInterface.RemoveEmail(email);
end;

function TChilkatEmailBundle.RemoveEmailByIndex(index: Integer): Integer;
begin
  Result := DefaultInterface.RemoveEmailByIndex(index);
end;

function TChilkatEmailBundle.SaveXml(const filename: WideString): Integer;
begin
  Result := DefaultInterface.SaveXml(filename);
end;

procedure TChilkatEmailBundle.SortByDate(ascending: Integer);
begin
  DefaultInterface.SortByDate(ascending);
end;

procedure TChilkatEmailBundle.SortByRecipient(ascending: Integer);
begin
  DefaultInterface.SortByRecipient(ascending);
end;

procedure TChilkatEmailBundle.SortBySender(ascending: Integer);
begin
  DefaultInterface.SortBySender(ascending);
end;

procedure TChilkatEmailBundle.SortBySubject(ascending: Integer);
begin
  DefaultInterface.SortBySubject(ascending);
end;

function TChilkatEmailBundle.AddMimeBytes(mime: OleVariant): Integer;
begin
  Result := DefaultInterface.AddMimeBytes(mime);
end;

procedure TChilkatEmail.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID:      '{78EBC21F-0841-4D47-9DD4-E324F122205F}';
    EventIID:     '';
    EventCount:   0;
    EventDispIDs: nil;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
end;

procedure TChilkatEmail.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatEmail;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatEmail.GetControlInterface: IChilkatEmail;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatEmail.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

procedure TChilkatEmail.AddAttachmentHeader(index: Integer; const fieldName: WideString; 
                                            const fieldValue: WideString);
begin
  DefaultInterface.AddAttachmentHeader(index, fieldName, fieldValue);
end;

function TChilkatEmail.AddBcc(const friendlyName: WideString; const emailAddress: WideString): Integer;
begin
  Result := DefaultInterface.AddBcc(friendlyName, emailAddress);
end;

function TChilkatEmail.AddCC(const friendlyName: WideString; const emailAddress: WideString): Integer;
begin
  Result := DefaultInterface.AddCC(friendlyName, emailAddress);
end;

function TChilkatEmail.AddDataAttachment(const filePath: WideString; Content: OleVariant): Integer;
begin
  Result := DefaultInterface.AddDataAttachment(filePath, Content);
end;

function TChilkatEmail.AddDataAttachment2(const path: WideString; Content: OleVariant; 
                                          const ContentType: WideString): Integer;
begin
  Result := DefaultInterface.AddDataAttachment2(path, Content, ContentType);
end;

function TChilkatEmail.AddEncryptCert(const cert: IChilkatCert): Integer;
begin
  Result := DefaultInterface.AddEncryptCert(cert);
end;

function TChilkatEmail.AddFileAttachment(const path: WideString): WideString;
begin
  Result := DefaultInterface.AddFileAttachment(path);
end;

function TChilkatEmail.AddFileAttachment2(const path: WideString; const ContentType: WideString): Integer;
begin
  Result := DefaultInterface.AddFileAttachment2(path, ContentType);
end;

procedure TChilkatEmail.AddHeaderField(const fieldName: WideString; const fieldValue: WideString);
begin
  DefaultInterface.AddHeaderField(fieldName, fieldValue);
end;

procedure TChilkatEmail.AddHeaderField2(const fieldName: WideString; const fieldValue: WideString);
begin
  DefaultInterface.AddHeaderField2(fieldName, fieldValue);
end;

function TChilkatEmail.AddHtmlAlternativeBody(const Body: WideString): Integer;
begin
  Result := DefaultInterface.AddHtmlAlternativeBody(Body);
end;

function TChilkatEmail.AddMultipleBcc(const commaSeparatedAddresses: WideString): Integer;
begin
  Result := DefaultInterface.AddMultipleBcc(commaSeparatedAddresses);
end;

function TChilkatEmail.AddMultipleCC(const commaSeparatedAddresses: WideString): Integer;
begin
  Result := DefaultInterface.AddMultipleCC(commaSeparatedAddresses);
end;

function TChilkatEmail.AddMultipleTo(const commaSeparatedAddresses: WideString): Integer;
begin
  Result := DefaultInterface.AddMultipleTo(commaSeparatedAddresses);
end;

function TChilkatEmail.AddPfxSourceData(pfxData: OleVariant; const password: WideString): Integer;
begin
  Result := DefaultInterface.AddPfxSourceData(pfxData, password);
end;

function TChilkatEmail.AddPfxSourceFile(const pfxFilePath: WideString; const password: WideString): Integer;
begin
  Result := DefaultInterface.AddPfxSourceFile(pfxFilePath, password);
end;

function TChilkatEmail.AddPlainTextAlternativeBody(const Body: WideString): Integer;
begin
  Result := DefaultInterface.AddPlainTextAlternativeBody(Body);
end;

function TChilkatEmail.AddRelatedData(const path: WideString; inData: OleVariant): WideString;
begin
  Result := DefaultInterface.AddRelatedData(path, inData);
end;

procedure TChilkatEmail.AddRelatedData2(inData: OleVariant; const fileNameInHtml: WideString);
begin
  DefaultInterface.AddRelatedData2(inData, fileNameInHtml);
end;

function TChilkatEmail.AddRelatedFile(const path: WideString): WideString;
begin
  Result := DefaultInterface.AddRelatedFile(path);
end;

function TChilkatEmail.AddRelatedFile2(const filenameOnDisk: WideString; 
                                       const fileNameInHtml: WideString): Integer;
begin
  Result := DefaultInterface.AddRelatedFile2(filenameOnDisk, fileNameInHtml);
end;

procedure TChilkatEmail.AddRelatedHeader(index: Integer; const fieldName: WideString; 
                                         const fieldValue: WideString);
begin
  DefaultInterface.AddRelatedHeader(index, fieldName, fieldValue);
end;

function TChilkatEmail.AddRelatedString(const nameInHtml: WideString; const str: WideString; 
                                        const charset: WideString): WideString;
begin
  Result := DefaultInterface.AddRelatedString(nameInHtml, str, charset);
end;

procedure TChilkatEmail.AddRelatedString2(const Content: WideString; const charset: WideString; 
                                          const fileNameInHtml: WideString);
begin
  DefaultInterface.AddRelatedString2(Content, charset, fileNameInHtml);
end;

function TChilkatEmail.AddStringAttachment(const path: WideString; const Content: WideString): Integer;
begin
  Result := DefaultInterface.AddStringAttachment(path, Content);
end;

function TChilkatEmail.AddStringAttachment2(const path: WideString; const Content: WideString; 
                                            const charset: WideString): Integer;
begin
  Result := DefaultInterface.AddStringAttachment2(path, Content, charset);
end;

function TChilkatEmail.AddTo(const friendlyName: WideString; const emailAddress: WideString): Integer;
begin
  Result := DefaultInterface.AddTo(friendlyName, emailAddress);
end;

function TChilkatEmail.AddiCalendarAlternativeBody(const Body: WideString; 
                                                   const methodName: WideString): Integer;
begin
  Result := DefaultInterface.AddiCalendarAlternativeBody(Body, methodName);
end;

function TChilkatEmail.AesDecrypt(const password: WideString): Integer;
begin
  Result := DefaultInterface.AesDecrypt(password);
end;

function TChilkatEmail.AesEncrypt(const password: WideString): Integer;
begin
  Result := DefaultInterface.AesEncrypt(password);
end;

procedure TChilkatEmail.AppendToBody(const str: WideString);
begin
  DefaultInterface.AppendToBody(str);
end;

function TChilkatEmail.AspUnpack(const prefix: WideString; const saveDir: WideString; 
                                 const urlPath: WideString; cleanFiles: Integer): Integer;
begin
  Result := DefaultInterface.AspUnpack(prefix, saveDir, urlPath, cleanFiles);
end;

function TChilkatEmail.AspUnpack2(const prefix: WideString; const saveDir: WideString; 
                                  const urlPath: WideString; cleanFiles: Integer): OleVariant;
begin
  Result := DefaultInterface.AspUnpack2(prefix, saveDir, urlPath, cleanFiles);
end;

function TChilkatEmail.AttachMessage(mimeBytes: OleVariant): Integer;
begin
  Result := DefaultInterface.AttachMessage(mimeBytes);
end;

function TChilkatEmail.BEncodeBytes(inData: OleVariant; const charset: WideString): WideString;
begin
  Result := DefaultInterface.BEncodeBytes(inData, charset);
end;

function TChilkatEmail.BEncodeString(const str: WideString; const charset: WideString): WideString;
begin
  Result := DefaultInterface.BEncodeString(str, charset);
end;

procedure TChilkatEmail.ClearBcc;
begin
  DefaultInterface.ClearBcc;
end;

procedure TChilkatEmail.ClearCC;
begin
  DefaultInterface.ClearCC;
end;

procedure TChilkatEmail.ClearEncryptCerts;
begin
  DefaultInterface.ClearEncryptCerts;
end;

procedure TChilkatEmail.ClearTo;
begin
  DefaultInterface.ClearTo;
end;

function TChilkatEmail.Clone: IChilkatEmail;
begin
  Result := DefaultInterface.Clone;
end;

function TChilkatEmail.ComputeGlobalKey(const encoding: WideString; bFold: Integer): WideString;
begin
  Result := DefaultInterface.ComputeGlobalKey(encoding, bFold);
end;

function TChilkatEmail.CreateDsn(const explanation: WideString; 
                                 const xmlDeliveryStatus: WideString; bHeaderOnly: Integer): IChilkatEmail;
begin
  Result := DefaultInterface.CreateDsn(explanation, xmlDeliveryStatus, bHeaderOnly);
end;

function TChilkatEmail.CreateForward: IChilkatEmail;
begin
  Result := DefaultInterface.CreateForward;
end;

function TChilkatEmail.CreateMdn(const explanation: WideString; const xmlMdnFields: WideString; 
                                 bHeaderOnly: Integer): IChilkatEmail;
begin
  Result := DefaultInterface.CreateMdn(explanation, xmlMdnFields, bHeaderOnly);
end;

function TChilkatEmail.CreateReply: IChilkatEmail;
begin
  Result := DefaultInterface.CreateReply;
end;

function TChilkatEmail.CreateTempMht(const inFilename: WideString): WideString;
begin
  Result := DefaultInterface.CreateTempMht(inFilename);
end;

procedure TChilkatEmail.DropAttachments;
begin
  DefaultInterface.DropAttachments;
end;

procedure TChilkatEmail.DropRelatedItem(index: Integer);
begin
  DefaultInterface.DropRelatedItem(index);
end;

procedure TChilkatEmail.DropRelatedItems;
begin
  DefaultInterface.DropRelatedItems;
end;

function TChilkatEmail.DropSingleAttachment(index: Integer): Integer;
begin
  Result := DefaultInterface.DropSingleAttachment(index);
end;

function TChilkatEmail.FindIssuer(const cert: IChilkatCert): IChilkatCert;
begin
  Result := DefaultInterface.FindIssuer(cert);
end;

function TChilkatEmail.GenerateFilename: WideString;
begin
  Result := DefaultInterface.GenerateFilename;
end;

function TChilkatEmail.GetAltHeaderField(index: Integer; const fieldName: WideString): WideString;
begin
  Result := DefaultInterface.GetAltHeaderField(index, fieldName);
end;

function TChilkatEmail.GetAlternativeBody(index: Integer): WideString;
begin
  Result := DefaultInterface.GetAlternativeBody(index);
end;

function TChilkatEmail.GetAlternativeBodyByContentType(const ContentType: WideString): WideString;
begin
  Result := DefaultInterface.GetAlternativeBodyByContentType(ContentType);
end;

function TChilkatEmail.GetAlternativeContentType(index: Integer): WideString;
begin
  Result := DefaultInterface.GetAlternativeContentType(index);
end;

function TChilkatEmail.GetAttachedMessage(index: Integer): IChilkatEmail;
begin
  Result := DefaultInterface.GetAttachedMessage(index);
end;

function TChilkatEmail.GetAttachedMessageFilename(index: Integer): WideString;
begin
  Result := DefaultInterface.GetAttachedMessageFilename(index);
end;

function TChilkatEmail.GetAttachmentContentID(index: Integer): WideString;
begin
  Result := DefaultInterface.GetAttachmentContentID(index);
end;

function TChilkatEmail.GetAttachmentContentType(index: Integer): WideString;
begin
  Result := DefaultInterface.GetAttachmentContentType(index);
end;

function TChilkatEmail.GetAttachmentData(index: Integer): OleVariant;
begin
  Result := DefaultInterface.GetAttachmentData(index);
end;

function TChilkatEmail.GetAttachmentFilename(index: Integer): WideString;
begin
  Result := DefaultInterface.GetAttachmentFilename(index);
end;

function TChilkatEmail.GetAttachmentHeader(attachIndex: Integer; const fieldName: WideString): WideString;
begin
  Result := DefaultInterface.GetAttachmentHeader(attachIndex, fieldName);
end;

function TChilkatEmail.GetAttachmentSize(index: Integer): Integer;
begin
  Result := DefaultInterface.GetAttachmentSize(index);
end;

function TChilkatEmail.GetAttachmentString(index: Integer; const charset: WideString): WideString;
begin
  Result := DefaultInterface.GetAttachmentString(index, charset);
end;

function TChilkatEmail.GetAttachmentStringCrLf(index: Integer; const charset: WideString): WideString;
begin
  Result := DefaultInterface.GetAttachmentStringCrLf(index, charset);
end;

function TChilkatEmail.GetBcc(index: Integer): WideString;
begin
  Result := DefaultInterface.GetBcc(index);
end;

function TChilkatEmail.GetBccAddr(index: Integer): WideString;
begin
  Result := DefaultInterface.GetBccAddr(index);
end;

function TChilkatEmail.GetBccName(index: Integer): WideString;
begin
  Result := DefaultInterface.GetBccName(index);
end;

function TChilkatEmail.GetCC(index: Integer): WideString;
begin
  Result := DefaultInterface.GetCC(index);
end;

function TChilkatEmail.GetCcAddr(index: Integer): WideString;
begin
  Result := DefaultInterface.GetCcAddr(index);
end;

function TChilkatEmail.GetCcName(index: Integer): WideString;
begin
  Result := DefaultInterface.GetCcName(index);
end;

function TChilkatEmail.GetDeliveryStatusInfo(const fieldName: WideString): WideString;
begin
  Result := DefaultInterface.GetDeliveryStatusInfo(fieldName);
end;

function TChilkatEmail.GetDsnFinalRecipients: ICkStringArray;
begin
  Result := DefaultInterface.GetDsnFinalRecipients;
end;

function TChilkatEmail.GetDt: ICkDateTime;
begin
  Result := DefaultInterface.GetDt;
end;

function TChilkatEmail.GetEncryptCert: IChilkatCert;
begin
  Result := DefaultInterface.GetEncryptCert;
end;

function TChilkatEmail.GetEncryptedByCert: IChilkatCert;
begin
  Result := DefaultInterface.GetEncryptedByCert;
end;

function TChilkatEmail.GetFileContent(const path: WideString): OleVariant;
begin
  Result := DefaultInterface.GetFileContent(path);
end;

function TChilkatEmail.GetHeaderField(const fieldName: WideString): WideString;
begin
  Result := DefaultInterface.GetHeaderField(fieldName);
end;

function TChilkatEmail.GetHeaderFieldName(index: Integer): WideString;
begin
  Result := DefaultInterface.GetHeaderFieldName(index);
end;

function TChilkatEmail.GetHeaderFieldValue(index: Integer): WideString;
begin
  Result := DefaultInterface.GetHeaderFieldValue(index);
end;

function TChilkatEmail.GetHtmlBody: WideString;
begin
  Result := DefaultInterface.GetHtmlBody;
end;

function TChilkatEmail.GetImapUid: Integer;
begin
  Result := DefaultInterface.GetImapUid;
end;

function TChilkatEmail.GetLinkedDomains: ICkStringArray;
begin
  Result := DefaultInterface.GetLinkedDomains;
end;

function TChilkatEmail.GetMbHeaderField(const fieldName: WideString; const charset: WideString): OleVariant;
begin
  Result := DefaultInterface.GetMbHeaderField(fieldName, charset);
end;

function TChilkatEmail.GetMbHtmlBody(const charset: WideString): OleVariant;
begin
  Result := DefaultInterface.GetMbHtmlBody(charset);
end;

function TChilkatEmail.GetMbPlainTextBody(const charset: WideString): OleVariant;
begin
  Result := DefaultInterface.GetMbPlainTextBody(charset);
end;

function TChilkatEmail.GetMime: WideString;
begin
  Result := DefaultInterface.GetMime;
end;

function TChilkatEmail.GetMimeBinary: OleVariant;
begin
  Result := DefaultInterface.GetMimeBinary;
end;

function TChilkatEmail.GetPlainTextBody: WideString;
begin
  Result := DefaultInterface.GetPlainTextBody;
end;

function TChilkatEmail.GetRelatedContentID(index: Integer): WideString;
begin
  Result := DefaultInterface.GetRelatedContentID(index);
end;

function TChilkatEmail.GetRelatedContentLocation(index: Integer): WideString;
begin
  Result := DefaultInterface.GetRelatedContentLocation(index);
end;

function TChilkatEmail.GetRelatedContentType(index: Integer): WideString;
begin
  Result := DefaultInterface.GetRelatedContentType(index);
end;

function TChilkatEmail.GetRelatedData(index: Integer): OleVariant;
begin
  Result := DefaultInterface.GetRelatedData(index);
end;

function TChilkatEmail.GetRelatedFilename(index: Integer): WideString;
begin
  Result := DefaultInterface.GetRelatedFilename(index);
end;

function TChilkatEmail.GetRelatedString(index: Integer; const charset: WideString): WideString;
begin
  Result := DefaultInterface.GetRelatedString(index, charset);
end;

function TChilkatEmail.GetRelatedStringCrLf(index: Integer; const charset: WideString): WideString;
begin
  Result := DefaultInterface.GetRelatedStringCrLf(index, charset);
end;

function TChilkatEmail.GetReplacePattern(index: Integer): WideString;
begin
  Result := DefaultInterface.GetReplacePattern(index);
end;

function TChilkatEmail.GetReplaceString(index: Integer): WideString;
begin
  Result := DefaultInterface.GetReplaceString(index);
end;

function TChilkatEmail.GetReplaceString2(const pattern: WideString): WideString;
begin
  Result := DefaultInterface.GetReplaceString2(pattern);
end;

function TChilkatEmail.GetReport(index: Integer): WideString;
begin
  Result := DefaultInterface.GetReport(index);
end;

function TChilkatEmail.GetSignedByCert: IChilkatCert;
begin
  Result := DefaultInterface.GetSignedByCert;
end;

function TChilkatEmail.GetSigningCert: IChilkatCert;
begin
  Result := DefaultInterface.GetSigningCert;
end;

function TChilkatEmail.GetTo(index: Integer): WideString;
begin
  Result := DefaultInterface.GetTo(index);
end;

function TChilkatEmail.GetToAddr(index: Integer): WideString;
begin
  Result := DefaultInterface.GetToAddr(index);
end;

function TChilkatEmail.GetToName(index: Integer): WideString;
begin
  Result := DefaultInterface.GetToName(index);
end;

function TChilkatEmail.GetXml: WideString;
begin
  Result := DefaultInterface.GetXml;
end;

function TChilkatEmail.HasHeaderMatching(const fieldName: WideString; 
                                         const valuePattern: WideString; caseInsensitive: Integer): Integer;
begin
  Result := DefaultInterface.HasHeaderMatching(fieldName, valuePattern, caseInsensitive);
end;

function TChilkatEmail.HasHtmlBody: Integer;
begin
  Result := DefaultInterface.HasHtmlBody;
end;

function TChilkatEmail.HasPlainTextBody: Integer;
begin
  Result := DefaultInterface.HasPlainTextBody;
end;

function TChilkatEmail.IsMultipartReport: Integer;
begin
  Result := DefaultInterface.IsMultipartReport;
end;

function TChilkatEmail.LoadEml(const mimePath: WideString): Integer;
begin
  Result := DefaultInterface.LoadEml(mimePath);
end;

function TChilkatEmail.LoadXml(const xmlPath: WideString): Integer;
begin
  Result := DefaultInterface.LoadXml(xmlPath);
end;

function TChilkatEmail.LoadXmlString(const xmlStr: WideString): Integer;
begin
  Result := DefaultInterface.LoadXmlString(xmlStr);
end;

function TChilkatEmail.QEncodeBytes(inData: OleVariant; const charset: WideString): WideString;
begin
  Result := DefaultInterface.QEncodeBytes(inData, charset);
end;

function TChilkatEmail.QEncodeString(const str: WideString; const charset: WideString): WideString;
begin
  Result := DefaultInterface.QEncodeString(str, charset);
end;

procedure TChilkatEmail.RemoveAttachedMessage(idx: Integer);
begin
  DefaultInterface.RemoveAttachedMessage(idx);
end;

procedure TChilkatEmail.RemoveAttachedMessages;
begin
  DefaultInterface.RemoveAttachedMessages;
end;

procedure TChilkatEmail.RemoveAttachmentPaths;
begin
  DefaultInterface.RemoveAttachmentPaths;
end;

procedure TChilkatEmail.RemoveHeaderField(const fieldName: WideString);
begin
  DefaultInterface.RemoveHeaderField(fieldName);
end;

procedure TChilkatEmail.RemoveHtmlAlternative;
begin
  DefaultInterface.RemoveHtmlAlternative;
end;

procedure TChilkatEmail.RemovePlainTextAlternative;
begin
  DefaultInterface.RemovePlainTextAlternative;
end;

function TChilkatEmail.SaveAllAttachments(const directory: WideString): Integer;
begin
  Result := DefaultInterface.SaveAllAttachments(directory);
end;

function TChilkatEmail.SaveAttachedFile(index: Integer; const directory: WideString): Integer;
begin
  Result := DefaultInterface.SaveAttachedFile(index, directory);
end;

function TChilkatEmail.SaveEml(const path: WideString): Integer;
begin
  Result := DefaultInterface.SaveEml(path);
end;

function TChilkatEmail.SaveRelatedItem(index: Integer; const directory: WideString): Integer;
begin
  Result := DefaultInterface.SaveRelatedItem(index, directory);
end;

function TChilkatEmail.SaveXml(const path: WideString): Integer;
begin
  Result := DefaultInterface.SaveXml(path);
end;

function TChilkatEmail.SetAttachmentCharset(index: Integer; const charset: WideString): Integer;
begin
  Result := DefaultInterface.SetAttachmentCharset(index, charset);
end;

function TChilkatEmail.SetAttachmentDisposition(index: Integer; const Disposition: WideString): Integer;
begin
  Result := DefaultInterface.SetAttachmentDisposition(index, Disposition);
end;

function TChilkatEmail.SetAttachmentFilename(index: Integer; const path: WideString): Integer;
begin
  Result := DefaultInterface.SetAttachmentFilename(index, path);
end;

function TChilkatEmail.SetCSP(const csp: IChilkatCsp): Integer;
begin
  Result := DefaultInterface.SetCSP(csp);
end;

function TChilkatEmail.SetDt(const dt: ICkDateTime): Integer;
begin
  Result := DefaultInterface.SetDt(dt);
end;

function TChilkatEmail.SetEncryptCert(const cert: IChilkatCert): Integer;
begin
  Result := DefaultInterface.SetEncryptCert(cert);
end;

function TChilkatEmail.SetFromMimeBytes(mimeBytes: OleVariant): Integer;
begin
  Result := DefaultInterface.SetFromMimeBytes(mimeBytes);
end;

function TChilkatEmail.SetFromMimeBytes2(mimeBytes: OleVariant; const charset: WideString): Integer;
begin
  Result := DefaultInterface.SetFromMimeBytes2(mimeBytes, charset);
end;

function TChilkatEmail.SetFromMimeText(const mimeText: WideString): Integer;
begin
  Result := DefaultInterface.SetFromMimeText(mimeText);
end;

function TChilkatEmail.SetFromXmlText(const xmlStr: WideString): Integer;
begin
  Result := DefaultInterface.SetFromXmlText(xmlStr);
end;

procedure TChilkatEmail.SetHtmlBody(const html: WideString);
begin
  DefaultInterface.SetHtmlBody(html);
end;

function TChilkatEmail.SetMbHtmlBody(const charset: WideString; inData: OleVariant): Integer;
begin
  Result := DefaultInterface.SetMbHtmlBody(charset, inData);
end;

function TChilkatEmail.SetMbPlainTextBody(const charset: WideString; inData: OleVariant): Integer;
begin
  Result := DefaultInterface.SetMbPlainTextBody(charset, inData);
end;

function TChilkatEmail.SetRelatedFilename(index: Integer; const path: WideString): Integer;
begin
  Result := DefaultInterface.SetRelatedFilename(index, path);
end;

function TChilkatEmail.SetReplacePattern(const pattern: WideString; const ReplaceString: WideString): Integer;
begin
  Result := DefaultInterface.SetReplacePattern(pattern, ReplaceString);
end;

function TChilkatEmail.SetSigningCert(const cert: IChilkatCert): Integer;
begin
  Result := DefaultInterface.SetSigningCert(cert);
end;

function TChilkatEmail.SetSigningCert2(const cert: IChilkatCert; const key: IPrivateKey): Integer;
begin
  Result := DefaultInterface.SetSigningCert2(cert, key);
end;

procedure TChilkatEmail.SetTextBody(const bodyText: WideString; const ContentType: WideString);
begin
  DefaultInterface.SetTextBody(bodyText, ContentType);
end;

procedure TChilkatEmail.UnSpamify;
begin
  DefaultInterface.UnSpamify;
end;

function TChilkatEmail.UnpackHtml(const unpackDir: WideString; const htmlFilename: WideString; 
                                  const partsSubDir: WideString): Integer;
begin
  Result := DefaultInterface.UnpackHtml(unpackDir, htmlFilename, partsSubDir);
end;

function TChilkatEmail.UnzipAttachments: Integer;
begin
  Result := DefaultInterface.UnzipAttachments;
end;

function TChilkatEmail.ZipAttachments(const zipFilename: WideString): Integer;
begin
  Result := DefaultInterface.ZipAttachments(zipFilename);
end;

function TChilkatEmail.LoadBodyFromFile(const textFilename: WideString; bIsHtml: Integer; 
                                        const charset: WideString): Integer;
begin
  Result := DefaultInterface.LoadBodyFromFile(textFilename, bIsHtml, charset);
end;

procedure TChilkatEmail.SetEdifactBody(const message: WideString; const name: WideString; 
                                       const filename: WideString; const charset: WideString);
begin
  DefaultInterface.SetEdifactBody(message, name, filename, charset);
end;

function TChilkatEmail.UseCertVault(const vault: IChilkatXmlCertVault): Integer;
begin
  Result := DefaultInterface.UseCertVault(vault);
end;

function TChilkatEmail.GetSignedByCertChain: IChilkatCertChain;
begin
  Result := DefaultInterface.GetSignedByCertChain;
end;

procedure TDtObj.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID:      '{1D304D4B-3E7F-475C-800E-16177166E43A}';
    EventIID:     '';
    EventCount:   0;
    EventDispIDs: nil;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
end;

procedure TDtObj.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IDtObj;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TDtObj.GetControlInterface: IDtObj;
begin
  CreateControl;
  Result := FIntf;
end;

function TDtObj.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TDtObj.Serialize: WideString;
begin
  Result := DefaultInterface.Serialize;
end;

procedure TDtObj.DeSerialize(const serializedDtObj: WideString);
begin
  DefaultInterface.DeSerialize(serializedDtObj);
end;

procedure TChilkatDsa.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID:      '{628C899B-7559-4062-9E65-A47386343965}';
    EventIID:     '';
    EventCount:   0;
    EventDispIDs: nil;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
end;

procedure TChilkatDsa.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatDsa;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatDsa.GetControlInterface: IChilkatDsa;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatDsa.Get_Hash: OleVariant;
begin
  Result := DefaultInterface.Hash;
end;

procedure TChilkatDsa.Set_Hash(pVal: OleVariant);
begin
  DefaultInterface.Hash := pVal;
end;

function TChilkatDsa.Get_signature: OleVariant;
begin
  Result := DefaultInterface.signature;
end;

procedure TChilkatDsa.Set_signature(pVal: OleVariant);
begin
  DefaultInterface.signature := pVal;
end;

function TChilkatDsa.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TChilkatDsa.FromDer(derData: OleVariant): Integer;
begin
  Result := DefaultInterface.FromDer(derData);
end;

function TChilkatDsa.FromDerFile(const path: WideString): Integer;
begin
  Result := DefaultInterface.FromDerFile(path);
end;

function TChilkatDsa.FromEncryptedPem(const password: WideString; const pemData: WideString): Integer;
begin
  Result := DefaultInterface.FromEncryptedPem(password, pemData);
end;

function TChilkatDsa.FromPem(const pemData: WideString): Integer;
begin
  Result := DefaultInterface.FromPem(pemData);
end;

function TChilkatDsa.FromPublicDer(derData: OleVariant): Integer;
begin
  Result := DefaultInterface.FromPublicDer(derData);
end;

function TChilkatDsa.FromPublicDerFile(const path: WideString): Integer;
begin
  Result := DefaultInterface.FromPublicDerFile(path);
end;

function TChilkatDsa.FromPublicPem(const pemData: WideString): Integer;
begin
  Result := DefaultInterface.FromPublicPem(pemData);
end;

function TChilkatDsa.FromXml(const xmlKey: WideString): Integer;
begin
  Result := DefaultInterface.FromXml(xmlKey);
end;

function TChilkatDsa.GenKey(numBits: Integer): Integer;
begin
  Result := DefaultInterface.GenKey(numBits);
end;

function TChilkatDsa.GenKeyFromParamsDer(derBytes: OleVariant): Integer;
begin
  Result := DefaultInterface.GenKeyFromParamsDer(derBytes);
end;

function TChilkatDsa.GenKeyFromParamsDerFile(const path: WideString): Integer;
begin
  Result := DefaultInterface.GenKeyFromParamsDerFile(path);
end;

function TChilkatDsa.GenKeyFromParamsPem(const pem: WideString): Integer;
begin
  Result := DefaultInterface.GenKeyFromParamsPem(pem);
end;

function TChilkatDsa.GenKeyFromParamsPemFile(const path: WideString): Integer;
begin
  Result := DefaultInterface.GenKeyFromParamsPemFile(path);
end;

function TChilkatDsa.GetEncodedHash(const encoding: WideString): WideString;
begin
  Result := DefaultInterface.GetEncodedHash(encoding);
end;

function TChilkatDsa.GetEncodedSignature(const encoding: WideString): WideString;
begin
  Result := DefaultInterface.GetEncodedSignature(encoding);
end;

function TChilkatDsa.LoadText(const path: WideString): WideString;
begin
  Result := DefaultInterface.LoadText(path);
end;

function TChilkatDsa.SaveText(const strToSave: WideString; const path: WideString): Integer;
begin
  Result := DefaultInterface.SaveText(strToSave, path);
end;

function TChilkatDsa.SetEncodedHash(const encoding: WideString; const encodedHash: WideString): Integer;
begin
  Result := DefaultInterface.SetEncodedHash(encoding, encodedHash);
end;

function TChilkatDsa.SetEncodedSignature(const encoding: WideString; const encodedSig: WideString): Integer;
begin
  Result := DefaultInterface.SetEncodedSignature(encoding, encodedSig);
end;

function TChilkatDsa.SetEncodedSignatureRS(const encoding: WideString; const encodedR: WideString; 
                                           const encodedS: WideString): Integer;
begin
  Result := DefaultInterface.SetEncodedSignatureRS(encoding, encodedR, encodedS);
end;

function TChilkatDsa.SetKeyExplicit(groupSizeInBytes: Integer; const pHex: WideString; 
                                    const qHex: WideString; const gHex: WideString; 
                                    const xHex: WideString): Integer;
begin
  Result := DefaultInterface.SetKeyExplicit(groupSizeInBytes, pHex, qHex, gHex, xHex);
end;

function TChilkatDsa.SetPubKeyExplicit(groupSizeInBytes: Integer; const pHex: WideString; 
                                       const qHex: WideString; const gHex: WideString; 
                                       const yHex: WideString): Integer;
begin
  Result := DefaultInterface.SetPubKeyExplicit(groupSizeInBytes, pHex, qHex, gHex, yHex);
end;

function TChilkatDsa.SignHash: Integer;
begin
  Result := DefaultInterface.SignHash;
end;

function TChilkatDsa.ToDer: OleVariant;
begin
  Result := DefaultInterface.ToDer;
end;

function TChilkatDsa.ToDerFile(const path: WideString): Integer;
begin
  Result := DefaultInterface.ToDerFile(path);
end;

function TChilkatDsa.ToEncryptedPem(const password: WideString): WideString;
begin
  Result := DefaultInterface.ToEncryptedPem(password);
end;

function TChilkatDsa.ToPem: WideString;
begin
  Result := DefaultInterface.ToPem;
end;

function TChilkatDsa.ToPublicDer: OleVariant;
begin
  Result := DefaultInterface.ToPublicDer;
end;

function TChilkatDsa.ToPublicDerFile(const path: WideString): Integer;
begin
  Result := DefaultInterface.ToPublicDerFile(path);
end;

function TChilkatDsa.ToPublicPem: WideString;
begin
  Result := DefaultInterface.ToPublicPem;
end;

function TChilkatDsa.ToXml(bPublicOnly: Integer): WideString;
begin
  Result := DefaultInterface.ToXml(bPublicOnly);
end;

function TChilkatDsa.UnlockComponent(const unlockCode: WideString): Integer;
begin
  Result := DefaultInterface.UnlockComponent(unlockCode);
end;

function TChilkatDsa.Verify: Integer;
begin
  Result := DefaultInterface.Verify;
end;

function TChilkatDsa.VerifyKey: Integer;
begin
  Result := DefaultInterface.VerifyKey;
end;

procedure TChilkatDkim.InitControlData;
const
  CEventDispIDs: array [0..2] of DWORD = (
    $00000001, $00000002, $00000003);
  CControlData: TControlData2 = (
    ClassID:      '{B70D813F-5CE3-4C93-A793-B21CD8CE133A}';
    EventIID:     '{91D24DB1-0F9E-4E77-B629-70BEE2F61D36}';
    EventCount:   3;
    EventDispIDs: @CEventDispIDs;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
  TControlData2(CControlData).FirstEventOfs := UIntPtr(@@FOnAbortCheck) - UIntPtr(Self);
end;

procedure TChilkatDkim.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatDkim;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatDkim.GetControlInterface: IChilkatDkim;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatDkim.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TChilkatDkim.AddDkimSignature(mimeIn: OleVariant): OleVariant;
begin
  Result := DefaultInterface.AddDkimSignature(mimeIn);
end;

function TChilkatDkim.AddDomainKeySignature(mimeIn: OleVariant): OleVariant;
begin
  Result := DefaultInterface.AddDomainKeySignature(mimeIn);
end;

function TChilkatDkim.LoadDkimPk(const PrivateKey: WideString; const optionalPassword: WideString): Integer;
begin
  Result := DefaultInterface.LoadDkimPk(PrivateKey, optionalPassword);
end;

function TChilkatDkim.LoadDkimPkBytes(privateKeyDer: OleVariant; const optionalPassword: WideString): Integer;
begin
  Result := DefaultInterface.LoadDkimPkBytes(privateKeyDer, optionalPassword);
end;

function TChilkatDkim.LoadDkimPkFile(const privateKeyFilepath: WideString; 
                                     const optionalPassword: WideString): Integer;
begin
  Result := DefaultInterface.LoadDkimPkFile(privateKeyFilepath, optionalPassword);
end;

function TChilkatDkim.LoadDomainKeyPk(const PrivateKey: WideString; 
                                      const optionalPassword: WideString): Integer;
begin
  Result := DefaultInterface.LoadDomainKeyPk(PrivateKey, optionalPassword);
end;

function TChilkatDkim.LoadDomainKeyPkBytes(privateKeyDer: OleVariant; 
                                           const optionalPassword: WideString): Integer;
begin
  Result := DefaultInterface.LoadDomainKeyPkBytes(privateKeyDer, optionalPassword);
end;

function TChilkatDkim.LoadDomainKeyPkFile(const privateKeyFilepath: WideString; 
                                          const optionalPassword: WideString): Integer;
begin
  Result := DefaultInterface.LoadDomainKeyPkFile(privateKeyFilepath, optionalPassword);
end;

function TChilkatDkim.LoadPublicKey(const selector: WideString; const Domain: WideString; 
                                    const PublicKey: WideString): Integer;
begin
  Result := DefaultInterface.LoadPublicKey(selector, Domain, PublicKey);
end;

function TChilkatDkim.LoadPublicKeyFile(const selector: WideString; const Domain: WideString; 
                                        const publicKeyFilepath: WideString): Integer;
begin
  Result := DefaultInterface.LoadPublicKeyFile(selector, Domain, publicKeyFilepath);
end;

function TChilkatDkim.NumDkimSignatures(mimeData: OleVariant): Integer;
begin
  Result := DefaultInterface.NumDkimSignatures(mimeData);
end;

function TChilkatDkim.NumDomainKeySignatures(mimeData: OleVariant): Integer;
begin
  Result := DefaultInterface.NumDomainKeySignatures(mimeData);
end;

function TChilkatDkim.PrefetchPublicKey(const selector: WideString; const Domain: WideString): Integer;
begin
  Result := DefaultInterface.PrefetchPublicKey(selector, Domain);
end;

function TChilkatDkim.UnlockComponent(const unlockCode: WideString): Integer;
begin
  Result := DefaultInterface.UnlockComponent(unlockCode);
end;

function TChilkatDkim.VerifyDkimSignature(sigIdx: Integer; mimeData: OleVariant): Integer;
begin
  Result := DefaultInterface.VerifyDkimSignature(sigIdx, mimeData);
end;

function TChilkatDkim.VerifyDomainKeySignature(sigIdx: Integer; mimeData: OleVariant): Integer;
begin
  Result := DefaultInterface.VerifyDomainKeySignature(sigIdx, mimeData);
end;

procedure TCkDirTree.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID:      '{ABC37F7C-0423-42E4-BBD2-E713B8BD3BA1}';
    EventIID:     '';
    EventCount:   0;
    EventDispIDs: nil;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
end;

procedure TCkDirTree.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as ICkDirTree;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TCkDirTree.GetControlInterface: ICkDirTree;
begin
  CreateControl;
  Result := FIntf;
end;

function TCkDirTree.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TCkDirTree.BeginIterate: Integer;
begin
  Result := DefaultInterface.BeginIterate;
end;

function TCkDirTree.AdvancePosition: Integer;
begin
  Result := DefaultInterface.AdvancePosition;
end;

procedure TChilkatDh.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID:      '{F19E7679-F483-46D4-9E87-0253F0820A02}';
    EventIID:     '';
    EventCount:   0;
    EventDispIDs: nil;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
end;

procedure TChilkatDh.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatDh;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatDh.GetControlInterface: IChilkatDh;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatDh.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TChilkatDh.FindK(const e: WideString): WideString;
begin
  Result := DefaultInterface.FindK(e);
end;

function TChilkatDh.GenPG(numBits: Integer; G: Integer): Integer;
begin
  Result := DefaultInterface.GenPG(numBits, G);
end;

function TChilkatDh.SetPG(const P: WideString; G: Integer): Integer;
begin
  Result := DefaultInterface.SetPG(P, G);
end;

function TChilkatDh.UnlockComponent(const unlockCode: WideString): Integer;
begin
  Result := DefaultInterface.UnlockComponent(unlockCode);
end;

procedure TChilkatDh.UseKnownPrime(index: Integer);
begin
  DefaultInterface.UseKnownPrime(index);
end;

function TChilkatDh.CreateE(numBits: Integer): WideString;
begin
  Result := DefaultInterface.CreateE(numBits);
end;

procedure TChilkatCsv.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID:      '{E9464A9F-B8D4-443D-88C3-DF3E9C6308AA}';
    EventIID:     '';
    EventCount:   0;
    EventDispIDs: nil;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
end;

procedure TChilkatCsv.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatCsv;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatCsv.GetControlInterface: IChilkatCsv;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatCsv.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TChilkatCsv.DeleteColumn(index: Integer): Integer;
begin
  Result := DefaultInterface.DeleteColumn(index);
end;

function TChilkatCsv.DeleteColumnByName(const columnName: WideString): Integer;
begin
  Result := DefaultInterface.DeleteColumnByName(columnName);
end;

function TChilkatCsv.DeleteRow(index: Integer): Integer;
begin
  Result := DefaultInterface.DeleteRow(index);
end;

function TChilkatCsv.GetCell(row: Integer; col: Integer): WideString;
begin
  Result := DefaultInterface.GetCell(row, col);
end;

function TChilkatCsv.GetCellByName(row: Integer; const columnName: WideString): WideString;
begin
  Result := DefaultInterface.GetCellByName(row, columnName);
end;

function TChilkatCsv.GetColumnName(index: Integer): WideString;
begin
  Result := DefaultInterface.GetColumnName(index);
end;

function TChilkatCsv.GetIndex(const columnName: WideString): Integer;
begin
  Result := DefaultInterface.GetIndex(columnName);
end;

function TChilkatCsv.GetNumCols(row: Integer): Integer;
begin
  Result := DefaultInterface.GetNumCols(row);
end;

function TChilkatCsv.LoadFile(const path: WideString): Integer;
begin
  Result := DefaultInterface.LoadFile(path);
end;

function TChilkatCsv.LoadFile2(const path: WideString; const charset: WideString): Integer;
begin
  Result := DefaultInterface.LoadFile2(path, charset);
end;

function TChilkatCsv.LoadFromString(const csvData: WideString): Integer;
begin
  Result := DefaultInterface.LoadFromString(csvData);
end;

function TChilkatCsv.RowMatches(row: Integer; const matchPattern: WideString; 
                                bCaseSensitive: Integer): Integer;
begin
  Result := DefaultInterface.RowMatches(row, matchPattern, bCaseSensitive);
end;

function TChilkatCsv.SaveFile(const path: WideString): Integer;
begin
  Result := DefaultInterface.SaveFile(path);
end;

function TChilkatCsv.SaveFile2(const path: WideString; const charset: WideString): Integer;
begin
  Result := DefaultInterface.SaveFile2(path, charset);
end;

function TChilkatCsv.SaveToString: WideString;
begin
  Result := DefaultInterface.SaveToString;
end;

function TChilkatCsv.SetCell(row: Integer; col: Integer; const Content: WideString): Integer;
begin
  Result := DefaultInterface.SetCell(row, col, Content);
end;

function TChilkatCsv.SetCellByName(row: Integer; const columnName: WideString; 
                                   const Content: WideString): Integer;
begin
  Result := DefaultInterface.SetCellByName(row, columnName, Content);
end;

function TChilkatCsv.SetColumnName(index: Integer; const columnName: WideString): Integer;
begin
  Result := DefaultInterface.SetColumnName(index, columnName);
end;

function TChilkatCsv.SortByColumn(const columnName: WideString; bAscending: Integer; 
                                  bCaseSensitive: Integer): Integer;
begin
  Result := DefaultInterface.SortByColumn(columnName, bAscending, bCaseSensitive);
end;

procedure TChilkatCreateCS.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID:      '{E98C2D0C-6053-4568-9BCE-D6350C39CD93}';
    EventIID:     '';
    EventCount:   0;
    EventDispIDs: nil;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
end;

procedure TChilkatCreateCS.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatCreateCS;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatCreateCS.GetControlInterface: IChilkatCreateCS;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatCreateCS.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TChilkatCreateCS.CreateFileStore(const path: WideString): IChilkatCertStore;
begin
  Result := DefaultInterface.CreateFileStore(path);
end;

function TChilkatCreateCS.CreateMemoryStore: IChilkatCertStore;
begin
  Result := DefaultInterface.CreateMemoryStore;
end;

function TChilkatCreateCS.CreateRegistryStore(const regRoot: WideString; const regPath: WideString): IChilkatCertStore;
begin
  Result := DefaultInterface.CreateRegistryStore(regRoot, regPath);
end;

function TChilkatCreateCS.OpenChilkatStore: IChilkatCertStore;
begin
  Result := DefaultInterface.OpenChilkatStore;
end;

function TChilkatCreateCS.OpenCurrentUserStore: IChilkatCertStore;
begin
  Result := DefaultInterface.OpenCurrentUserStore;
end;

function TChilkatCreateCS.OpenFileStore(const path: WideString): IChilkatCertStore;
begin
  Result := DefaultInterface.OpenFileStore(path);
end;

function TChilkatCreateCS.OpenLocalSystemStore: IChilkatCertStore;
begin
  Result := DefaultInterface.OpenLocalSystemStore;
end;

function TChilkatCreateCS.OpenOutlookStore: IChilkatCertStore;
begin
  Result := DefaultInterface.OpenOutlookStore;
end;

function TChilkatCreateCS.OpenRegistryStore(const regRoot: WideString; const regPath: WideString): IChilkatCertStore;
begin
  Result := DefaultInterface.OpenRegistryStore(regRoot, regPath);
end;

procedure TChilkatCompression.InitControlData;
const
  CEventDispIDs: array [0..2] of DWORD = (
    $00000001, $00000002, $00000003);
  CControlData: TControlData2 = (
    ClassID:      '{D6CEA276-E79C-4026-BD46-933E3C8F88D8}';
    EventIID:     '{91D24DB1-0F9E-4E77-B629-70BEE2F61D36}';
    EventCount:   3;
    EventDispIDs: @CEventDispIDs;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
  TControlData2(CControlData).FirstEventOfs := UIntPtr(@@FOnAbortCheck) - UIntPtr(Self);
end;

procedure TChilkatCompression.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatCompression;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatCompression.GetControlInterface: IChilkatCompression;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatCompression.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TChilkatCompression.BeginCompressBytes(data: OleVariant): OleVariant;
begin
  Result := DefaultInterface.BeginCompressBytes(data);
end;

function TChilkatCompression.BeginCompressBytesENC(data: OleVariant): WideString;
begin
  Result := DefaultInterface.BeginCompressBytesENC(data);
end;

function TChilkatCompression.BeginCompressString(const str: WideString): OleVariant;
begin
  Result := DefaultInterface.BeginCompressString(str);
end;

function TChilkatCompression.BeginCompressStringENC(const str: WideString): WideString;
begin
  Result := DefaultInterface.BeginCompressStringENC(str);
end;

function TChilkatCompression.BeginDecompressBytes(data: OleVariant): OleVariant;
begin
  Result := DefaultInterface.BeginDecompressBytes(data);
end;

function TChilkatCompression.BeginDecompressBytesENC(const str: WideString): OleVariant;
begin
  Result := DefaultInterface.BeginDecompressBytesENC(str);
end;

function TChilkatCompression.BeginDecompressString(data: OleVariant): WideString;
begin
  Result := DefaultInterface.BeginDecompressString(data);
end;

function TChilkatCompression.BeginDecompressStringENC(const str: WideString): WideString;
begin
  Result := DefaultInterface.BeginDecompressStringENC(str);
end;

function TChilkatCompression.CompressBytes(data: OleVariant): OleVariant;
begin
  Result := DefaultInterface.CompressBytes(data);
end;

function TChilkatCompression.CompressBytesENC(data: OleVariant): WideString;
begin
  Result := DefaultInterface.CompressBytesENC(data);
end;

function TChilkatCompression.CompressFile(const srcPath: WideString; const destPath: WideString): Integer;
begin
  Result := DefaultInterface.CompressFile(srcPath, destPath);
end;

function TChilkatCompression.CompressString(const str: WideString): OleVariant;
begin
  Result := DefaultInterface.CompressString(str);
end;

function TChilkatCompression.CompressStringENC(const str: WideString): WideString;
begin
  Result := DefaultInterface.CompressStringENC(str);
end;

function TChilkatCompression.DecompressBytes(data: OleVariant): OleVariant;
begin
  Result := DefaultInterface.DecompressBytes(data);
end;

function TChilkatCompression.DecompressBytesENC(const str: WideString): OleVariant;
begin
  Result := DefaultInterface.DecompressBytesENC(str);
end;

function TChilkatCompression.DecompressFile(const srcPath: WideString; const destPath: WideString): Integer;
begin
  Result := DefaultInterface.DecompressFile(srcPath, destPath);
end;

function TChilkatCompression.DecompressString(data: OleVariant): WideString;
begin
  Result := DefaultInterface.DecompressString(data);
end;

function TChilkatCompression.DecompressStringENC(const str: WideString): WideString;
begin
  Result := DefaultInterface.DecompressStringENC(str);
end;

function TChilkatCompression.EndCompressBytes: OleVariant;
begin
  Result := DefaultInterface.EndCompressBytes;
end;

function TChilkatCompression.EndCompressBytesENC: WideString;
begin
  Result := DefaultInterface.EndCompressBytesENC;
end;

function TChilkatCompression.EndCompressString: OleVariant;
begin
  Result := DefaultInterface.EndCompressString;
end;

function TChilkatCompression.EndCompressStringENC: WideString;
begin
  Result := DefaultInterface.EndCompressStringENC;
end;

function TChilkatCompression.EndDecompressBytes: OleVariant;
begin
  Result := DefaultInterface.EndDecompressBytes;
end;

function TChilkatCompression.EndDecompressBytesENC: OleVariant;
begin
  Result := DefaultInterface.EndDecompressBytesENC;
end;

function TChilkatCompression.EndDecompressString: WideString;
begin
  Result := DefaultInterface.EndDecompressString;
end;

function TChilkatCompression.EndDecompressStringENC: WideString;
begin
  Result := DefaultInterface.EndDecompressStringENC;
end;

function TChilkatCompression.MoreCompressBytes(data: OleVariant): OleVariant;
begin
  Result := DefaultInterface.MoreCompressBytes(data);
end;

function TChilkatCompression.MoreCompressBytesENC(data: OleVariant): WideString;
begin
  Result := DefaultInterface.MoreCompressBytesENC(data);
end;

function TChilkatCompression.MoreCompressString(const str: WideString): OleVariant;
begin
  Result := DefaultInterface.MoreCompressString(str);
end;

function TChilkatCompression.MoreCompressStringENC(const str: WideString): WideString;
begin
  Result := DefaultInterface.MoreCompressStringENC(str);
end;

function TChilkatCompression.MoreDecompressBytes(data: OleVariant): OleVariant;
begin
  Result := DefaultInterface.MoreDecompressBytes(data);
end;

function TChilkatCompression.MoreDecompressBytesENC(const str: WideString): OleVariant;
begin
  Result := DefaultInterface.MoreDecompressBytesENC(str);
end;

function TChilkatCompression.MoreDecompressString(data: OleVariant): WideString;
begin
  Result := DefaultInterface.MoreDecompressString(data);
end;

function TChilkatCompression.MoreDecompressStringENC(const str: WideString): WideString;
begin
  Result := DefaultInterface.MoreDecompressStringENC(str);
end;

function TChilkatCompression.UnlockComponent(const unlockCode: WideString): Integer;
begin
  Result := DefaultInterface.UnlockComponent(unlockCode);
end;

procedure TChilkatCharset.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID:      '{DF519DD3-CF6D-4BC1-A68C-9049FFF6713D}';
    EventIID:     '';
    EventCount:   0;
    EventDispIDs: nil;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
end;

procedure TChilkatCharset.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatCharset;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatCharset.GetControlInterface: IChilkatCharset;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatCharset.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TChilkatCharset.CharsetToCodePage(const charsetName: WideString): Integer;
begin
  Result := DefaultInterface.CharsetToCodePage(charsetName);
end;

function TChilkatCharset.CodePageToCharset(codePage: Integer): WideString;
begin
  Result := DefaultInterface.CodePageToCharset(codePage);
end;

function TChilkatCharset.ConvertData(inData: OleVariant): OleVariant;
begin
  Result := DefaultInterface.ConvertData(inData);
end;

function TChilkatCharset.ConvertFile(const srcPath: WideString; const destPath: WideString): Integer;
begin
  Result := DefaultInterface.ConvertFile(srcPath, destPath);
end;

function TChilkatCharset.ConvertFileNoPreamble(const srcPath: WideString; const destPath: WideString): Integer;
begin
  Result := DefaultInterface.ConvertFileNoPreamble(srcPath, destPath);
end;

function TChilkatCharset.ConvertFromUtf16(uniData: OleVariant): OleVariant;
begin
  Result := DefaultInterface.ConvertFromUtf16(uniData);
end;

function TChilkatCharset.ConvertHtml(inData: OleVariant): OleVariant;
begin
  Result := DefaultInterface.ConvertHtml(inData);
end;

function TChilkatCharset.ConvertHtmlFile(const srcPath: WideString; const destPath: WideString): Integer;
begin
  Result := DefaultInterface.ConvertHtmlFile(srcPath, destPath);
end;

function TChilkatCharset.ConvertToUtf16(mbData: OleVariant): OleVariant;
begin
  Result := DefaultInterface.ConvertToUtf16(mbData);
end;

function TChilkatCharset.EntityEncodeDec(const str: WideString): WideString;
begin
  Result := DefaultInterface.EntityEncodeDec(str);
end;

function TChilkatCharset.EntityEncodeHex(const str: WideString): WideString;
begin
  Result := DefaultInterface.EntityEncodeHex(str);
end;

function TChilkatCharset.GetHtmlCharset(inData: OleVariant): WideString;
begin
  Result := DefaultInterface.GetHtmlCharset(inData);
end;

function TChilkatCharset.GetHtmlFileCharset(const htmlFilename: WideString): WideString;
begin
  Result := DefaultInterface.GetHtmlFileCharset(htmlFilename);
end;

function TChilkatCharset.HtmlDecodeToStr(const inStr: WideString): WideString;
begin
  Result := DefaultInterface.HtmlDecodeToStr(inStr);
end;

function TChilkatCharset.HtmlEntityDecode(inHtml: OleVariant): OleVariant;
begin
  Result := DefaultInterface.HtmlEntityDecode(inHtml);
end;

function TChilkatCharset.HtmlEntityDecodeFile(const inFilename: WideString; 
                                              const destPath: WideString): Integer;
begin
  Result := DefaultInterface.HtmlEntityDecodeFile(inFilename, destPath);
end;

function TChilkatCharset.IsUnlocked: Integer;
begin
  Result := DefaultInterface.IsUnlocked;
end;

function TChilkatCharset.LowerCase(const inStr: WideString): WideString;
begin
  Result := DefaultInterface.LowerCase(inStr);
end;

function TChilkatCharset.ReadFile(const filename: WideString): OleVariant;
begin
  Result := DefaultInterface.ReadFile(filename);
end;

function TChilkatCharset.ReadFileToString(const filename: WideString; const srcCharset: WideString): WideString;
begin
  Result := DefaultInterface.ReadFileToString(filename, srcCharset);
end;

procedure TChilkatCharset.SetErrorBytes(data: OleVariant);
begin
  DefaultInterface.SetErrorBytes(data);
end;

procedure TChilkatCharset.SetErrorString(const str: WideString; const charset: WideString);
begin
  DefaultInterface.SetErrorString(str, charset);
end;

function TChilkatCharset.UnlockComponent(const unlockCode: WideString): Integer;
begin
  Result := DefaultInterface.UnlockComponent(unlockCode);
end;

function TChilkatCharset.UpperCase(const inStr: WideString): WideString;
begin
  Result := DefaultInterface.UpperCase(inStr);
end;

function TChilkatCharset.UrlDecodeStr(const inStr: WideString): WideString;
begin
  Result := DefaultInterface.UrlDecodeStr(inStr);
end;

function TChilkatCharset.VerifyData(const charset: WideString; inData: OleVariant): Integer;
begin
  Result := DefaultInterface.VerifyData(charset, inData);
end;

function TChilkatCharset.VerifyFile(const charset: WideString; const filename: WideString): Integer;
begin
  Result := DefaultInterface.VerifyFile(charset, filename);
end;

function TChilkatCharset.WriteFile(const filename: WideString; fileData: OleVariant): Integer;
begin
  Result := DefaultInterface.WriteFile(filename, fileData);
end;

function TChilkatCharset.WriteStringToFile(const str: WideString; const filename: WideString; 
                                           const charset: WideString): Integer;
begin
  Result := DefaultInterface.WriteStringToFile(str, filename, charset);
end;

function TChilkatCharset.ConvertFromUnicode(const inData: WideString): OleVariant;
begin
  Result := DefaultInterface.ConvertFromUnicode(inData);
end;

function TChilkatCharset.ConvertToUnicode(inData: OleVariant): WideString;
begin
  Result := DefaultInterface.ConvertToUnicode(inData);
end;

procedure TChilkatCgi.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID:      '{F21F7AF3-32B0-48D9-B99D-A08159D2B463}';
    EventIID:     '';
    EventCount:   0;
    EventDispIDs: nil;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
end;

procedure TChilkatCgi.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatCgi;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatCgi.GetControlInterface: IChilkatCgi;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatCgi.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

procedure TChilkatCache.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID:      '{68993996-4448-4B92-99B7-3715CE60D316}';
    EventIID:     '';
    EventCount:   0;
    EventDispIDs: nil;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
end;

procedure TChilkatCache.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatCache;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatCache.GetControlInterface: IChilkatCache;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatCache.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

procedure TChilkatCache.AddRoot(const path: WideString);
begin
  DefaultInterface.AddRoot(path);
end;

function TChilkatCache.DeleteAll: Integer;
begin
  Result := DefaultInterface.DeleteAll;
end;

function TChilkatCache.DeleteAllExpired: Integer;
begin
  Result := DefaultInterface.DeleteAllExpired;
end;

function TChilkatCache.DeleteFromCache(const url: WideString): Integer;
begin
  Result := DefaultInterface.DeleteFromCache(url);
end;

function TChilkatCache.DeleteOlder(dt: TDateTime): Integer;
begin
  Result := DefaultInterface.DeleteOlder(dt);
end;

function TChilkatCache.DeleteOlderDt(const dt: ICkDateTime): Integer;
begin
  Result := DefaultInterface.DeleteOlderDt(dt);
end;

function TChilkatCache.DeleteOlderStr(const dateTimeStr: WideString): Integer;
begin
  Result := DefaultInterface.DeleteOlderStr(dateTimeStr);
end;

function TChilkatCache.FetchFromCache(const url: WideString): OleVariant;
begin
  Result := DefaultInterface.FetchFromCache(url);
end;

function TChilkatCache.FetchText(const key: WideString): WideString;
begin
  Result := DefaultInterface.FetchText(key);
end;

function TChilkatCache.GetEtag(const url: WideString): WideString;
begin
  Result := DefaultInterface.GetEtag(url);
end;

function TChilkatCache.GetExpiration(const url: WideString): TDateTime;
begin
  Result := DefaultInterface.GetExpiration(url);
end;

function TChilkatCache.GetExpirationDt(const key: WideString): ICkDateTime;
begin
  Result := DefaultInterface.GetExpirationDt(key);
end;

function TChilkatCache.GetExpirationStr(const url: WideString): WideString;
begin
  Result := DefaultInterface.GetExpirationStr(url);
end;

function TChilkatCache.GetFilename(const url: WideString): WideString;
begin
  Result := DefaultInterface.GetFilename(url);
end;

function TChilkatCache.GetRoot(index: Integer): WideString;
begin
  Result := DefaultInterface.GetRoot(index);
end;

function TChilkatCache.IsCached(const url: WideString): Integer;
begin
  Result := DefaultInterface.IsCached(url);
end;

function TChilkatCache.SaveText(const key: WideString; expire: TDateTime; const eTag: WideString; 
                                const strData: WideString): Integer;
begin
  Result := DefaultInterface.SaveText(key, expire, eTag, strData);
end;

function TChilkatCache.SaveTextDt(const key: WideString; const expire: ICkDateTime; 
                                  const eTag: WideString; const strData: WideString): Integer;
begin
  Result := DefaultInterface.SaveTextDt(key, expire, eTag, strData);
end;

function TChilkatCache.SaveTextNoExpire(const key: WideString; const eTag: WideString; 
                                        const strData: WideString): Integer;
begin
  Result := DefaultInterface.SaveTextNoExpire(key, eTag, strData);
end;

function TChilkatCache.SaveTextStr(const key: WideString; const expireDateTimeStr: WideString; 
                                   const eTag: WideString; const strData: WideString): Integer;
begin
  Result := DefaultInterface.SaveTextStr(key, expireDateTimeStr, eTag, strData);
end;

function TChilkatCache.SaveToCache(const url: WideString; expire: TDateTime; 
                                   const eTag: WideString; data: OleVariant): Integer;
begin
  Result := DefaultInterface.SaveToCache(url, expire, eTag, data);
end;

function TChilkatCache.SaveToCacheDt(const url: WideString; const expire: ICkDateTime; 
                                     const eTag: WideString; data: OleVariant): Integer;
begin
  Result := DefaultInterface.SaveToCacheDt(url, expire, eTag, data);
end;

function TChilkatCache.SaveToCacheNoExpire(const url: WideString; const eTag: WideString; 
                                           data: OleVariant): Integer;
begin
  Result := DefaultInterface.SaveToCacheNoExpire(url, eTag, data);
end;

function TChilkatCache.SaveToCacheStr(const url: WideString; const expireDateTimeStr: WideString; 
                                      const eTag: WideString; data: OleVariant): Integer;
begin
  Result := DefaultInterface.SaveToCacheStr(url, expireDateTimeStr, eTag, data);
end;

function TChilkatCache.UpdateExpiration(const url: WideString; dt: TDateTime): Integer;
begin
  Result := DefaultInterface.UpdateExpiration(url, dt);
end;

function TChilkatCache.UpdateExpirationDt(const url: WideString; const dt: ICkDateTime): Integer;
begin
  Result := DefaultInterface.UpdateExpirationDt(url, dt);
end;

function TChilkatCache.UpdateExpirationStr(const url: WideString; const dateTimeStr: WideString): Integer;
begin
  Result := DefaultInterface.UpdateExpirationStr(url, dateTimeStr);
end;

procedure TChilkatBz2.InitControlData;
const
  CEventDispIDs: array [0..2] of DWORD = (
    $00000001, $00000002, $00000003);
  CControlData: TControlData2 = (
    ClassID:      '{647EC4D1-B7EE-494D-9AE8-823C7FF683D9}';
    EventIID:     '{91D24DB1-0F9E-4E77-B629-70BEE2F61D36}';
    EventCount:   3;
    EventDispIDs: @CEventDispIDs;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
  TControlData2(CControlData).FirstEventOfs := UIntPtr(@@FOnAbortCheck) - UIntPtr(Self);
end;

procedure TChilkatBz2.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatBz2;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatBz2.GetControlInterface: IChilkatBz2;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatBz2.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TChilkatBz2.CompressFile(const inFilename: WideString; const toPath: WideString): Integer;
begin
  Result := DefaultInterface.CompressFile(inFilename, toPath);
end;

function TChilkatBz2.CompressFileToMem(const inFilename: WideString): OleVariant;
begin
  Result := DefaultInterface.CompressFileToMem(inFilename);
end;

function TChilkatBz2.CompressMemToFile(inData: OleVariant; const toPath: WideString): Integer;
begin
  Result := DefaultInterface.CompressMemToFile(inData, toPath);
end;

function TChilkatBz2.CompressMemory(inData: OleVariant): OleVariant;
begin
  Result := DefaultInterface.CompressMemory(inData);
end;

function TChilkatBz2.UncompressFile(const inFilename: WideString; const toPath: WideString): Integer;
begin
  Result := DefaultInterface.UncompressFile(inFilename, toPath);
end;

function TChilkatBz2.UncompressFileToMem(const inFilename: WideString): OleVariant;
begin
  Result := DefaultInterface.UncompressFileToMem(inFilename);
end;

function TChilkatBz2.UncompressMemToFile(inData: OleVariant; const toPath: WideString): Integer;
begin
  Result := DefaultInterface.UncompressMemToFile(inData, toPath);
end;

function TChilkatBz2.UncompressMemory(inData: OleVariant): OleVariant;
begin
  Result := DefaultInterface.UncompressMemory(inData);
end;

function TChilkatBz2.UnlockComponent(const regCode: WideString): Integer;
begin
  Result := DefaultInterface.UnlockComponent(regCode);
end;

procedure TChilkatBounce.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID:      '{01AFB62C-BE3C-4706-B77E-CB20DEDA1D4D}';
    EventIID:     '';
    EventCount:   0;
    EventDispIDs: nil;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
end;

procedure TChilkatBounce.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatBounce;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatBounce.GetControlInterface: IChilkatBounce;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatBounce.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TChilkatBounce.ExamineEml(const emlFilename: WideString): Integer;
begin
  Result := DefaultInterface.ExamineEml(emlFilename);
end;

function TChilkatBounce.ExamineMime(const mimeText: WideString): Integer;
begin
  Result := DefaultInterface.ExamineMime(mimeText);
end;

function TChilkatBounce.UnlockComponent(const unlockCode: WideString): Integer;
begin
  Result := DefaultInterface.UnlockComponent(unlockCode);
end;

function TChilkatBounce.ExamineEmail(const email: IChilkatEmail): Integer;
begin
  Result := DefaultInterface.ExamineEmail(email);
end;

procedure TChilkatAtom.InitControlData;
const
  CEventDispIDs: array [0..2] of DWORD = (
    $00000001, $00000002, $00000003);
  CControlData: TControlData2 = (
    ClassID:      '{3D80DB49-232B-4139-8697-E0202E8B8B8E}';
    EventIID:     '{91D24DB1-0F9E-4E77-B629-70BEE2F61D36}';
    EventCount:   3;
    EventDispIDs: @CEventDispIDs;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
  TControlData2(CControlData).FirstEventOfs := UIntPtr(@@FOnAbortCheck) - UIntPtr(Self);
end;

procedure TChilkatAtom.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IChilkatAtom;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TChilkatAtom.GetControlInterface: IChilkatAtom;
begin
  CreateControl;
  Result := FIntf;
end;

function TChilkatAtom.GetImplAddrStr: WideString;
begin
  Result := DefaultInterface.GetImplAddrStr;
end;

function TChilkatAtom.AddElement(const Tag: WideString; const value: WideString): Integer;
begin
  Result := DefaultInterface.AddElement(Tag, value);
end;

function TChilkatAtom.AddElementDate(const Tag: WideString; dateTime: TDateTime): Integer;
begin
  Result := DefaultInterface.AddElementDate(Tag, dateTime);
end;

function TChilkatAtom.AddElementDateStr(const Tag: WideString; const dateTimeStr: WideString): Integer;
begin
  Result := DefaultInterface.AddElementDateStr(Tag, dateTimeStr);
end;

function TChilkatAtom.AddElementDt(const Tag: WideString; const dateTime: ICkDateTime): Integer;
begin
  Result := DefaultInterface.AddElementDt(Tag, dateTime);
end;

function TChilkatAtom.AddElementHtml(const Tag: WideString; const htmlStr: WideString): Integer;
begin
  Result := DefaultInterface.AddElementHtml(Tag, htmlStr);
end;

function TChilkatAtom.AddElementXHtml(const Tag: WideString; const xmlStr: WideString): Integer;
begin
  Result := DefaultInterface.AddElementXHtml(Tag, xmlStr);
end;

function TChilkatAtom.AddElementXml(const Tag: WideString; const xmlStr: WideString): Integer;
begin
  Result := DefaultInterface.AddElementXml(Tag, xmlStr);
end;

procedure TChilkatAtom.AddEntry(const xmlStr: WideString);
begin
  DefaultInterface.AddEntry(xmlStr);
end;

procedure TChilkatAtom.AddLink(const rel: WideString; const href: WideString; 
                               const title: WideString; const typ: WideString);
begin
  DefaultInterface.AddLink(rel, href, title, typ);
end;

procedure TChilkatAtom.AddPerson(const Tag: WideString; const name: WideString; 
                                 const uri: WideString; const email: WideString);
begin
  DefaultInterface.AddPerson(Tag, name, uri, email);
end;

procedure TChilkatAtom.DeleteElement(const Tag: WideString; index: Integer);
begin
  DefaultInterface.DeleteElement(Tag, index);
end;

procedure TChilkatAtom.DeleteElementAttr(const Tag: WideString; index: Integer; 
                                         const attrName: WideString);
begin
  DefaultInterface.DeleteElementAttr(Tag, index, attrName);
end;

procedure TChilkatAtom.DeletePerson(const Tag: WideString; index: Integer);
begin
  DefaultInterface.DeletePerson(Tag, index);
end;

function TChilkatAtom.DownloadAtom(const url: WideString): Integer;
begin
  Result := DefaultInterface.DownloadAtom(url);
end;

function TChilkatAtom.GetElement(const Tag: WideString; index: Integer): WideString;
begin
  Result := DefaultInterface.GetElement(Tag, index);
end;

function TChilkatAtom.GetElementAttr(const Tag: WideString; index: Integer; 
                                     const attrName: WideString): WideString;
begin
  Result := DefaultInterface.GetElementAttr(Tag, index, attrName);
end;

function TChilkatAtom.GetElementCount(const Tag: WideString): Integer;
begin
  Result := DefaultInterface.GetElementCount(Tag);
end;

function TChilkatAtom.GetElementDate(const Tag: WideString; index: Integer): TDateTime;
begin
  Result := DefaultInterface.GetElementDate(Tag, index);
end;

function TChilkatAtom.GetElementDateStr(const Tag: WideString; index: Integer): WideString;
begin
  Result := DefaultInterface.GetElementDateStr(Tag, index);
end;

function TChilkatAtom.GetElementDt(const Tag: WideString; index: Integer): ICkDateTime;
begin
  Result := DefaultInterface.GetElementDt(Tag, index);
end;

function TChilkatAtom.GetEntry(index: Integer): IChilkatAtom;
begin
  Result := DefaultInterface.GetEntry(index);
end;

function TChilkatAtom.GetLinkHref(const relName: WideString): WideString;
begin
  Result := DefaultInterface.GetLinkHref(relName);
end;

function TChilkatAtom.GetPersonInfo(const Tag: WideString; index: Integer; const tag2: WideString): WideString;
begin
  Result := DefaultInterface.GetPersonInfo(Tag, index, tag2);
end;

function TChilkatAtom.GetTopAttr(const attrName: WideString): WideString;
begin
  Result := DefaultInterface.GetTopAttr(attrName);
end;

function TChilkatAtom.HasElement(const Tag: WideString): Integer;
begin
  Result := DefaultInterface.HasElement(Tag);
end;

function TChilkatAtom.LoadXml(const xmlStr: WideString): Integer;
begin
  Result := DefaultInterface.LoadXml(xmlStr);
end;

procedure TChilkatAtom.NewEntry;
begin
  DefaultInterface.NewEntry;
end;

procedure TChilkatAtom.NewFeed;
begin
  DefaultInterface.NewFeed;
end;

procedure TChilkatAtom.SetElementAttr(const Tag: WideString; index: Integer; 
                                      const attrName: WideString; const attrValue: WideString);
begin
  DefaultInterface.SetElementAttr(Tag, index, attrName, attrValue);
end;

procedure TChilkatAtom.SetTopAttr(const attrName: WideString; const value: WideString);
begin
  DefaultInterface.SetTopAttr(attrName, value);
end;

function TChilkatAtom.ToXmlString: WideString;
begin
  Result := DefaultInterface.ToXmlString;
end;

procedure TChilkatAtom.UpdateElement(const Tag: WideString; index: Integer; const value: WideString);
begin
  DefaultInterface.UpdateElement(Tag, index, value);
end;

procedure TChilkatAtom.UpdateElementDate(const Tag: WideString; index: Integer; dateTime: TDateTime);
begin
  DefaultInterface.UpdateElementDate(Tag, index, dateTime);
end;

procedure TChilkatAtom.UpdateElementDateStr(const Tag: WideString; index: Integer; 
                                            const dateTimeStr: WideString);
begin
  DefaultInterface.UpdateElementDateStr(Tag, index, dateTimeStr);
end;

procedure TChilkatAtom.UpdateElementDt(const Tag: WideString; index: Integer; 
                                       const dateTime: ICkDateTime);
begin
  DefaultInterface.UpdateElementDt(Tag, index, dateTime);
end;

procedure TChilkatAtom.UpdateElementHtml(const Tag: WideString; index: Integer; 
                                         const htmlStr: WideString);
begin
  DefaultInterface.UpdateElementHtml(Tag, index, htmlStr);
end;

procedure TChilkatAtom.UpdateElementXHtml(const Tag: WideString; index: Integer; 
                                          const xmlStr: WideString);
begin
  DefaultInterface.UpdateElementXHtml(Tag, index, xmlStr);
end;

procedure TChilkatAtom.UpdateElementXml(const Tag: WideString; index: Integer; 
                                        const xmlStr: WideString);
begin
  DefaultInterface.UpdateElementXml(Tag, index, xmlStr);
end;

procedure TChilkatAtom.UpdatePerson(const Tag: WideString; index: Integer; const name: WideString; 
                                    const uri: WideString; const email: WideString);
begin
  DefaultInterface.UpdatePerson(Tag, index, name, uri, email);
end;

procedure Register;
begin
  RegisterComponents(dtlOcxPage, [TCkDateTime, TCkStringArray, TChilkatCsp, TPublicKey, 
    TPrivateKey, TChilkatCert, TChilkatCertStore, TChilkatCrypt2, TChilkatXmlCertVault, 
    TChilkatPfx, TChilkatCertChain, TChilkatTrustedRoots, TCkString, TChilkatZipEntry, 
    TChilkatZip, TChilkatXmp, TChilkatXml, TChilkatUpload, TUnixCompress, 
    TChilkatTar, TChilkatSshTunnel, TChilkatSshKey, TChilkatSsh, TChilkatSpider, 
    TChilkatSocksProxy, TChilkatSocket, TChilkatSFtpFile, TChilkatSFtpDir, TChilkatSFtp, 
    TChilkatRss, TChilkatRsa, TChilkatOmaDrm, TChilkatNtlm, TChilkatMime, 
    TChilkatMht, TMessageSet, TMailboxes, TChilkatMailMan, TKeyContainer, 
    TChilkatImap, TChilkatHttpResponse, TChilkatHttpRequest, TChilkatHttp, THtmlToXml, 
    THtmlToText, TChilkatGzip, TChilkatFtp2, TCkFileAccess, TChilkatEmailBundle, 
    TChilkatEmail, TDtObj, TChilkatDsa, TChilkatDkim, TCkDirTree, 
    TChilkatDh, TChilkatCsv, TChilkatCreateCS, TChilkatCompression, TChilkatCharset, 
    TChilkatCgi, TChilkatCache, TChilkatBz2, TChilkatBounce, TChilkatAtom]);
end;

end.
